
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020760  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  08020930  08020930  00021930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080226a8  080226a8  00027808  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080226a8  080226a8  000236a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080226b0  080226b0  00027808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  080226b0  080226b0  000236b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080226c4  080226c4  000236c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00003808  20000000  080226c8  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e868  20003808  08025ed0  00027808  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20012070  08025ed0  00028070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027808  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f7b6  00000000  00000000  00027838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f0  00000000  00000000  00046fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  0004b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c6  00000000  00000000  0004d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdb6  00000000  00000000  0004e2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025bb8  00000000  00000000  0007a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd135  00000000  00000000  0009fc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  0019cd99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cb0  00000000  00000000  0019ce04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001a4ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20003808 	.word	0x20003808
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020918 	.word	0x08020918

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000380c 	.word	0x2000380c
 800020c:	08020918 	.word	0x08020918

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9d3 	b.w	8001070 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b988 	b.w	8001070 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	468e      	mov	lr, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	4688      	mov	r8, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4617      	mov	r7, r2
 8000d8c:	d962      	bls.n	8000e54 <__udivmoddi4+0xdc>
 8000d8e:	fab2 f682 	clz	r6, r2
 8000d92:	b14e      	cbz	r6, 8000da8 <__udivmoddi4+0x30>
 8000d94:	f1c6 0320 	rsb	r3, r6, #32
 8000d98:	fa01 f806 	lsl.w	r8, r1, r6
 8000d9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000da0:	40b7      	lsls	r7, r6
 8000da2:	ea43 0808 	orr.w	r8, r3, r8
 8000da6:	40b4      	lsls	r4, r6
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	fa1f fc87 	uxth.w	ip, r7
 8000db0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dcc:	f080 80ea 	bcs.w	8000fa4 <__udivmoddi4+0x22c>
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f240 80e7 	bls.w	8000fa4 <__udivmoddi4+0x22c>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	443b      	add	r3, r7
 8000dda:	1a9a      	subs	r2, r3, r2
 8000ddc:	b2a3      	uxth	r3, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dee:	459c      	cmp	ip, r3
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x8e>
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df8:	f080 80d6 	bcs.w	8000fa8 <__udivmoddi4+0x230>
 8000dfc:	459c      	cmp	ip, r3
 8000dfe:	f240 80d3 	bls.w	8000fa8 <__udivmoddi4+0x230>
 8000e02:	443b      	add	r3, r7
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0a:	eba3 030c 	sub.w	r3, r3, ip
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40f3      	lsrs	r3, r6
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xb6>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb0>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x14c>
 8000e36:	4573      	cmp	r3, lr
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xc8>
 8000e3a:	4282      	cmp	r2, r0
 8000e3c:	f200 8105 	bhi.w	800104a <__udivmoddi4+0x2d2>
 8000e40:	1a84      	subs	r4, r0, r2
 8000e42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	4690      	mov	r8, r2
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d0e5      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e52:	e7e2      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f000 8090 	beq.w	8000f7a <__udivmoddi4+0x202>
 8000e5a:	fab2 f682 	clz	r6, r2
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	f040 80a4 	bne.w	8000fac <__udivmoddi4+0x234>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	0c03      	lsrs	r3, r0, #16
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	b280      	uxth	r0, r0
 8000e6e:	b2bc      	uxth	r4, r7
 8000e70:	2101      	movs	r1, #1
 8000e72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x11e>
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x11c>
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	f200 80e0 	bhi.w	8001054 <__udivmoddi4+0x2dc>
 8000e94:	46c4      	mov	ip, r8
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ea0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea4:	fb02 f404 	mul.w	r4, r2, r4
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x144>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x142>
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	f200 80ca 	bhi.w	800104e <__udivmoddi4+0x2d6>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	1b1b      	subs	r3, r3, r4
 8000ebe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000edc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ee0:	4323      	orrs	r3, r4
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	fa1f fc87 	uxth.w	ip, r7
 8000eea:	fbbe f0f9 	udiv	r0, lr, r9
 8000eee:	0c1c      	lsrs	r4, r3, #16
 8000ef0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d909      	bls.n	8000f18 <__udivmoddi4+0x1a0>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f0a:	f080 809c 	bcs.w	8001046 <__udivmoddi4+0x2ce>
 8000f0e:	45a6      	cmp	lr, r4
 8000f10:	f240 8099 	bls.w	8001046 <__udivmoddi4+0x2ce>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	eba4 040e 	sub.w	r4, r4, lr
 8000f1c:	fa1f fe83 	uxth.w	lr, r3
 8000f20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f24:	fb09 4413 	mls	r4, r9, r3, r4
 8000f28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f30:	45a4      	cmp	ip, r4
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1ce>
 8000f34:	193c      	adds	r4, r7, r4
 8000f36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f3a:	f080 8082 	bcs.w	8001042 <__udivmoddi4+0x2ca>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d97f      	bls.n	8001042 <__udivmoddi4+0x2ca>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f4a:	eba4 040c 	sub.w	r4, r4, ip
 8000f4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f52:	4564      	cmp	r4, ip
 8000f54:	4673      	mov	r3, lr
 8000f56:	46e1      	mov	r9, ip
 8000f58:	d362      	bcc.n	8001020 <__udivmoddi4+0x2a8>
 8000f5a:	d05f      	beq.n	800101c <__udivmoddi4+0x2a4>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x1fe>
 8000f5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f62:	eb64 0409 	sbc.w	r4, r4, r9
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	40cc      	lsrs	r4, r1
 8000f72:	e9c5 6400 	strd	r6, r4, [r5]
 8000f76:	2100      	movs	r1, #0
 8000f78:	e74f      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000f7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7e:	0c01      	lsrs	r1, r0, #16
 8000f80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f84:	b280      	uxth	r0, r0
 8000f86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	463c      	mov	r4, r7
 8000f90:	46b8      	mov	r8, r7
 8000f92:	46be      	mov	lr, r7
 8000f94:	2620      	movs	r6, #32
 8000f96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f9a:	eba2 0208 	sub.w	r2, r2, r8
 8000f9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fa2:	e766      	b.n	8000e72 <__udivmoddi4+0xfa>
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	e718      	b.n	8000dda <__udivmoddi4+0x62>
 8000fa8:	4610      	mov	r0, r2
 8000faa:	e72c      	b.n	8000e06 <__udivmoddi4+0x8e>
 8000fac:	f1c6 0220 	rsb	r2, r6, #32
 8000fb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb4:	40b7      	lsls	r7, r6
 8000fb6:	40b1      	lsls	r1, r6
 8000fb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc6:	b2bc      	uxth	r4, r7
 8000fc8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd2:	fb08 f904 	mul.w	r9, r8, r4
 8000fd6:	40b0      	lsls	r0, r6
 8000fd8:	4589      	cmp	r9, r1
 8000fda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fde:	b280      	uxth	r0, r0
 8000fe0:	d93e      	bls.n	8001060 <__udivmoddi4+0x2e8>
 8000fe2:	1879      	adds	r1, r7, r1
 8000fe4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe8:	d201      	bcs.n	8000fee <__udivmoddi4+0x276>
 8000fea:	4589      	cmp	r9, r1
 8000fec:	d81f      	bhi.n	800102e <__udivmoddi4+0x2b6>
 8000fee:	eba1 0109 	sub.w	r1, r1, r9
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fb09 f804 	mul.w	r8, r9, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	b292      	uxth	r2, r2
 8001000:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001004:	4542      	cmp	r2, r8
 8001006:	d229      	bcs.n	800105c <__udivmoddi4+0x2e4>
 8001008:	18ba      	adds	r2, r7, r2
 800100a:	f109 31ff 	add.w	r1, r9, #4294967295
 800100e:	d2c4      	bcs.n	8000f9a <__udivmoddi4+0x222>
 8001010:	4542      	cmp	r2, r8
 8001012:	d2c2      	bcs.n	8000f9a <__udivmoddi4+0x222>
 8001014:	f1a9 0102 	sub.w	r1, r9, #2
 8001018:	443a      	add	r2, r7
 800101a:	e7be      	b.n	8000f9a <__udivmoddi4+0x222>
 800101c:	45f0      	cmp	r8, lr
 800101e:	d29d      	bcs.n	8000f5c <__udivmoddi4+0x1e4>
 8001020:	ebbe 0302 	subs.w	r3, lr, r2
 8001024:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001028:	3801      	subs	r0, #1
 800102a:	46e1      	mov	r9, ip
 800102c:	e796      	b.n	8000f5c <__udivmoddi4+0x1e4>
 800102e:	eba7 0909 	sub.w	r9, r7, r9
 8001032:	4449      	add	r1, r9
 8001034:	f1a8 0c02 	sub.w	ip, r8, #2
 8001038:	fbb1 f9fe 	udiv	r9, r1, lr
 800103c:	fb09 f804 	mul.w	r8, r9, r4
 8001040:	e7db      	b.n	8000ffa <__udivmoddi4+0x282>
 8001042:	4673      	mov	r3, lr
 8001044:	e77f      	b.n	8000f46 <__udivmoddi4+0x1ce>
 8001046:	4650      	mov	r0, sl
 8001048:	e766      	b.n	8000f18 <__udivmoddi4+0x1a0>
 800104a:	4608      	mov	r0, r1
 800104c:	e6fd      	b.n	8000e4a <__udivmoddi4+0xd2>
 800104e:	443b      	add	r3, r7
 8001050:	3a02      	subs	r2, #2
 8001052:	e733      	b.n	8000ebc <__udivmoddi4+0x144>
 8001054:	f1ac 0c02 	sub.w	ip, ip, #2
 8001058:	443b      	add	r3, r7
 800105a:	e71c      	b.n	8000e96 <__udivmoddi4+0x11e>
 800105c:	4649      	mov	r1, r9
 800105e:	e79c      	b.n	8000f9a <__udivmoddi4+0x222>
 8001060:	eba1 0109 	sub.w	r1, r1, r9
 8001064:	46c4      	mov	ip, r8
 8001066:	fbb1 f9fe 	udiv	r9, r1, lr
 800106a:	fb09 f804 	mul.w	r8, r9, r4
 800106e:	e7c4      	b.n	8000ffa <__udivmoddi4+0x282>

08001070 <__aeabi_idiv0>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <clamp>:

rcl_subscription_t twist_sub;     // Subscription object → listens to /twist_nexus topic
geometry_msgs__msg__Twist twist_msg;  // Struct holding the received Twist message data


static inline double clamp(double v, double lo, double hi){
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	ed87 0b04 	vstr	d0, [r7, #16]
 800107e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001082:	ed87 2b00 	vstr	d2, [r7]
    if (v < lo) 		return lo;
 8001086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800108a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800108e:	f7ff fd55 	bl	8000b3c <__aeabi_dcmplt>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <clamp+0x2a>
 8001098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800109c:	e00d      	b.n	80010ba <clamp+0x46>
    else if (v > hi) 	return hi;
 800109e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a6:	f7ff fd67 	bl	8000b78 <__aeabi_dcmpgt>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <clamp+0x42>
 80010b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b4:	e001      	b.n	80010ba <clamp+0x46>
    else 				return v;
 80010b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80010ba:	ec43 2b17 	vmov	d7, r2, r3
 80010be:	eeb0 0a47 	vmov.f32	s0, s14
 80010c2:	eef0 0a67 	vmov.f32	s1, s15
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <ramp>:

static inline double ramp(double target, double current, double step)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	ed87 0b04 	vstr	d0, [r7, #16]
 80010d6:	ed87 1b02 	vstr	d1, [r7, #8]
 80010da:	ed87 2b00 	vstr	d2, [r7]
    return (target > current) ? fmin(current + step, target)
         : (target < current) ? fmax(current - step, target)
 80010de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010e6:	f7ff fd47 	bl	8000b78 <__aeabi_dcmpgt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d016      	beq.n	800111e <ramp+0x52>
    return (target > current) ? fmin(current + step, target)
 80010f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010f8:	f7ff f8f8 	bl	80002ec <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b17 	vmov	d7, r2, r3
 8001104:	eeb0 1a47 	vmov.f32	s2, s14
 8001108:	eef0 1a67 	vmov.f32	s3, s15
 800110c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001110:	f01e fbe4 	bl	801f8dc <fmin>
 8001114:	eeb0 7a40 	vmov.f32	s14, s0
 8001118:	eef0 7a60 	vmov.f32	s15, s1
         : (target < current) ? fmax(current - step, target)
 800111c:	e021      	b.n	8001162 <ramp+0x96>
         : current;
 800111e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001122:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001126:	f7ff fd09 	bl	8000b3c <__aeabi_dcmplt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d016      	beq.n	800115e <ramp+0x92>
         : (target < current) ? fmax(current - step, target)
 8001130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001134:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001138:	f7ff f8d6 	bl	80002e8 <__aeabi_dsub>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	ec43 2b17 	vmov	d7, r2, r3
 8001144:	eeb0 1a47 	vmov.f32	s2, s14
 8001148:	eef0 1a67 	vmov.f32	s3, s15
 800114c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001150:	f01e fb9a 	bl	801f888 <fmax>
 8001154:	eeb0 7a40 	vmov.f32	s14, s0
 8001158:	eef0 7a60 	vmov.f32	s15, s1
 800115c:	e001      	b.n	8001162 <ramp+0x96>
         : current;
 800115e:	ed97 7b02 	vldr	d7, [r7, #8]
}
 8001162:	eeb0 0a47 	vmov.f32	s0, s14
 8001166:	eef0 0a67 	vmov.f32	s1, s15
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <setMotorDir>:
{
    if (v_step  > 0.0f) g_v_step   = v_step;
    if (wz_step_radps > 0.0f) g_wz_step_radps = wz_step_radps;
}

static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, double speed) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6178      	str	r0, [r7, #20]
 8001178:	60fa      	str	r2, [r7, #12]
 800117a:	461a      	mov	r2, r3
 800117c:	ed87 0b00 	vstr	d0, [r7]
 8001180:	460b      	mov	r3, r1
 8001182:	827b      	strh	r3, [r7, #18]
 8001184:	4613      	mov	r3, r2
 8001186:	823b      	strh	r3, [r7, #16]

	if (speed > 0.0f) { // Forward
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001194:	f7ff fcf0 	bl	8000b78 <__aeabi_dcmpgt>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <setMotorDir+0x48>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 800119e:	8a3b      	ldrh	r3, [r7, #16]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f003 fd37 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_SET);
 80011aa:	8a7b      	ldrh	r3, [r7, #18]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f003 fd31 	bl	8004c18 <HAL_GPIO_WritePin>

	} else { // Stop / Brake
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
	}
}
 80011b6:	e023      	b.n	8001200 <setMotorDir+0x90>
	} else if (speed < 0.0f) { // Reverse
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c4:	f7ff fcba 	bl	8000b3c <__aeabi_dcmplt>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00c      	beq.n	80011e8 <setMotorDir+0x78>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 80011ce:	8a7b      	ldrh	r3, [r7, #18]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6978      	ldr	r0, [r7, #20]
 80011d6:	f003 fd1f 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_SET);
 80011da:	8a3b      	ldrh	r3, [r7, #16]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f003 fd19 	bl	8004c18 <HAL_GPIO_WritePin>
}
 80011e6:	e00b      	b.n	8001200 <setMotorDir+0x90>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 80011e8:	8a7b      	ldrh	r3, [r7, #18]
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f003 fd12 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 80011f4:	8a3b      	ldrh	r3, [r7, #16]
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f003 fd0c 	bl	8004c18 <HAL_GPIO_WritePin>
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <init_motors>:

// ----------------------------------------------------------------------------------
// ----------- Motors control functions definitions  ---------------------------------
// ----------------------------------------------------------------------------------
void init_motors(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

	// Set the direction to Forward (INA = 1) & (INB = 0)
	// Rear Left
	HAL_GPIO_WritePin(RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2104      	movs	r1, #4
 8001210:	4830      	ldr	r0, [pc, #192]	@ (80012d4 <init_motors+0xcc>)
 8001212:	f003 fd01 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2108      	movs	r1, #8
 800121a:	482e      	ldr	r0, [pc, #184]	@ (80012d4 <init_motors+0xcc>)
 800121c:	f003 fcfc 	bl	8004c18 <HAL_GPIO_WritePin>
	// Front Left
	HAL_GPIO_WritePin(FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2102      	movs	r1, #2
 8001224:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <init_motors+0xcc>)
 8001226:	f003 fcf7 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2101      	movs	r1, #1
 800122e:	4829      	ldr	r0, [pc, #164]	@ (80012d4 <init_motors+0xcc>)
 8001230:	f003 fcf2 	bl	8004c18 <HAL_GPIO_WritePin>
	// Rear Right
	HAL_GPIO_WritePin(RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2110      	movs	r1, #16
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <init_motors+0xcc>)
 800123a:	f003 fced 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001244:	4824      	ldr	r0, [pc, #144]	@ (80012d8 <init_motors+0xd0>)
 8001246:	f003 fce7 	bl	8004c18 <HAL_GPIO_WritePin>
	// Front Right
	HAL_GPIO_WritePin(FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2120      	movs	r1, #32
 800124e:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <init_motors+0xd0>)
 8001250:	f003 fce2 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800125a:	4820      	ldr	r0, [pc, #128]	@ (80012dc <init_motors+0xd4>)
 800125c:	f003 fcdc 	bl	8004c18 <HAL_GPIO_WritePin>

	// Enable the full bridges of the motor drivers (VDD)
	HAL_GPIO_WritePin(RL_VDD_GPO_GPIO_Port, RL_VDD_GPO_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001266:	481b      	ldr	r0, [pc, #108]	@ (80012d4 <init_motors+0xcc>)
 8001268:	f003 fcd6 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_VDD_GPO_GPIO_Port, FR_VDD_GPO_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001272:	4818      	ldr	r0, [pc, #96]	@ (80012d4 <init_motors+0xcc>)
 8001274:	f003 fcd0 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_VDD_GPO_GPIO_Port, RR_VDD_GPO_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127e:	4815      	ldr	r0, [pc, #84]	@ (80012d4 <init_motors+0xcc>)
 8001280:	f003 fcca 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_VDD_GPO_GPIO_Port, FL_VDD_GPO_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <init_motors+0xcc>)
 800128c:	f003 fcc4 	bl	8004c18 <HAL_GPIO_WritePin>

	// Start the PWM signals
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// RL Motor
 8001290:	2100      	movs	r1, #0
 8001292:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <init_motors+0xd8>)
 8001294:	f004 fc0e 	bl	8005ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// FL Motor
 8001298:	2104      	movs	r1, #4
 800129a:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <init_motors+0xd8>)
 800129c:	f004 fc0a 	bl	8005ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// FR Motor
 80012a0:	2108      	movs	r1, #8
 80012a2:	480f      	ldr	r0, [pc, #60]	@ (80012e0 <init_motors+0xd8>)
 80012a4:	f004 fc06 	bl	8005ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// RR Motor
 80012a8:	210c      	movs	r1, #12
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <init_motors+0xd8>)
 80012ac:	f004 fc02 	bl	8005ab4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, i);		// FR Motor
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);		// RR Motor
	  	HAL_Delay(15);
	  }
	*/
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);	// RL Motor
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <init_motors+0xd8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);	// FL Motor
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <init_motors+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);	// FR Motor
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <init_motors+0xd8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);	// RR Motor
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <init_motors+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	641a      	str	r2, [r3, #64]	@ 0x40

    //RAD_PER_TICK_PER_SEC = RAD_PER_TICK / DeltaT;

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020000 	.word	0x40020000
 80012e0:	200080bc 	.word	0x200080bc
 80012e4:	00000000 	.word	0x00000000

080012e8 <Mecanum_Control>:


void Mecanum_Control(double vx_twist, double vy_twist, double wz_twist)
{
 80012e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ec:	ed2d 8b02 	vpush	{d8}
 80012f0:	b094      	sub	sp, #80	@ 0x50
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80012f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80012fc:	ed87 2b00 	vstr	d2, [r7]

    static double vx_twist_ramped = 0, vy_twist_ramped = 0, wz_twist_ramped = 0;
    vx_twist_ramped = ramp(vx_twist, vx_twist_ramped, g_v_step);
 8001300:	4bc3      	ldr	r3, [pc, #780]	@ (8001610 <Mecanum_Control+0x328>)
 8001302:	ed93 8b00 	vldr	d8, [r3]
 8001306:	4bc3      	ldr	r3, [pc, #780]	@ (8001614 <Mecanum_Control+0x32c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f94c 	bl	80005a8 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	ec43 2b12 	vmov	d2, r2, r3
 8001318:	eeb0 1a48 	vmov.f32	s2, s16
 800131c:	eef0 1a68 	vmov.f32	s3, s17
 8001320:	ed97 0b04 	vldr	d0, [r7, #16]
 8001324:	f7ff fed2 	bl	80010cc <ramp>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	4bb7      	ldr	r3, [pc, #732]	@ (8001610 <Mecanum_Control+0x328>)
 8001332:	ed83 7b00 	vstr	d7, [r3]
    vy_twist_ramped = ramp(vy_twist, vy_twist_ramped, g_v_step);
 8001336:	4bb8      	ldr	r3, [pc, #736]	@ (8001618 <Mecanum_Control+0x330>)
 8001338:	ed93 8b00 	vldr	d8, [r3]
 800133c:	4bb5      	ldr	r3, [pc, #724]	@ (8001614 <Mecanum_Control+0x32c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f931 	bl	80005a8 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	ec43 2b12 	vmov	d2, r2, r3
 800134e:	eeb0 1a48 	vmov.f32	s2, s16
 8001352:	eef0 1a68 	vmov.f32	s3, s17
 8001356:	ed97 0b02 	vldr	d0, [r7, #8]
 800135a:	f7ff feb7 	bl	80010cc <ramp>
 800135e:	eeb0 7a40 	vmov.f32	s14, s0
 8001362:	eef0 7a60 	vmov.f32	s15, s1
 8001366:	4bac      	ldr	r3, [pc, #688]	@ (8001618 <Mecanum_Control+0x330>)
 8001368:	ed83 7b00 	vstr	d7, [r3]
    wz_twist_ramped = ramp(wz_twist, wz_twist_ramped, g_wz_step_radps);
 800136c:	4bab      	ldr	r3, [pc, #684]	@ (800161c <Mecanum_Control+0x334>)
 800136e:	ed93 8b00 	vldr	d8, [r3]
 8001372:	4bab      	ldr	r3, [pc, #684]	@ (8001620 <Mecanum_Control+0x338>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f916 	bl	80005a8 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	ec43 2b12 	vmov	d2, r2, r3
 8001384:	eeb0 1a48 	vmov.f32	s2, s16
 8001388:	eef0 1a68 	vmov.f32	s3, s17
 800138c:	ed97 0b00 	vldr	d0, [r7]
 8001390:	f7ff fe9c 	bl	80010cc <ramp>
 8001394:	eeb0 7a40 	vmov.f32	s14, s0
 8001398:	eef0 7a60 	vmov.f32	s15, s1
 800139c:	4b9f      	ldr	r3, [pc, #636]	@ (800161c <Mecanum_Control+0x334>)
 800139e:	ed83 7b00 	vstr	d7, [r3]

    // Desired wheel angular velocities
    double w_target[4];
    w_target[0] = (+vx_twist_ramped + vy_twist_ramped - (A_SUM * wz_twist_ramped)) / WHEEL_R;  // RL
 80013a2:	4b9b      	ldr	r3, [pc, #620]	@ (8001610 <Mecanum_Control+0x328>)
 80013a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001618 <Mecanum_Control+0x330>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7fe ff9d 	bl	80002ec <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4690      	mov	r8, r2
 80013b8:	4699      	mov	r9, r3
 80013ba:	4b98      	ldr	r3, [pc, #608]	@ (800161c <Mecanum_Control+0x334>)
 80013bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c0:	a38b      	add	r3, pc, #556	@ (adr r3, 80015f0 <Mecanum_Control+0x308>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f947 	bl	8000658 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4640      	mov	r0, r8
 80013d0:	4649      	mov	r1, r9
 80013d2:	f7fe ff89 	bl	80002e8 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a386      	add	r3, pc, #536	@ (adr r3, 80015f8 <Mecanum_Control+0x310>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa62 	bl	80008ac <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    w_target[1] = (+vx_twist_ramped - vy_twist_ramped - (A_SUM * wz_twist_ramped)) / WHEEL_R;  // FL
 80013f0:	4b87      	ldr	r3, [pc, #540]	@ (8001610 <Mecanum_Control+0x328>)
 80013f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f6:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <Mecanum_Control+0x330>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7fe ff74 	bl	80002e8 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4690      	mov	r8, r2
 8001406:	4699      	mov	r9, r3
 8001408:	4b84      	ldr	r3, [pc, #528]	@ (800161c <Mecanum_Control+0x334>)
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	a378      	add	r3, pc, #480	@ (adr r3, 80015f0 <Mecanum_Control+0x308>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f920 	bl	8000658 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4640      	mov	r0, r8
 800141e:	4649      	mov	r1, r9
 8001420:	f7fe ff62 	bl	80002e8 <__aeabi_dsub>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	a372      	add	r3, pc, #456	@ (adr r3, 80015f8 <Mecanum_Control+0x310>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa3b 	bl	80008ac <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    w_target[2] = (+vx_twist_ramped + vy_twist_ramped + (A_SUM * wz_twist_ramped)) / WHEEL_R;  // FR
 800143e:	4b74      	ldr	r3, [pc, #464]	@ (8001610 <Mecanum_Control+0x328>)
 8001440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001444:	4b74      	ldr	r3, [pc, #464]	@ (8001618 <Mecanum_Control+0x330>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7fe ff4f 	bl	80002ec <__adddf3>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4690      	mov	r8, r2
 8001454:	4699      	mov	r9, r3
 8001456:	4b71      	ldr	r3, [pc, #452]	@ (800161c <Mecanum_Control+0x334>)
 8001458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145c:	a364      	add	r3, pc, #400	@ (adr r3, 80015f0 <Mecanum_Control+0x308>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f8f9 	bl	8000658 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4640      	mov	r0, r8
 800146c:	4649      	mov	r1, r9
 800146e:	f7fe ff3d 	bl	80002ec <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	a35f      	add	r3, pc, #380	@ (adr r3, 80015f8 <Mecanum_Control+0x310>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff fa14 	bl	80008ac <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    w_target[3] = (+vx_twist_ramped - vy_twist_ramped + (A_SUM * wz_twist_ramped)) / WHEEL_R;  // RR
 800148c:	4b60      	ldr	r3, [pc, #384]	@ (8001610 <Mecanum_Control+0x328>)
 800148e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001492:	4b61      	ldr	r3, [pc, #388]	@ (8001618 <Mecanum_Control+0x330>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7fe ff26 	bl	80002e8 <__aeabi_dsub>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4690      	mov	r8, r2
 80014a2:	4699      	mov	r9, r3
 80014a4:	4b5d      	ldr	r3, [pc, #372]	@ (800161c <Mecanum_Control+0x334>)
 80014a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014aa:	a351      	add	r3, pc, #324	@ (adr r3, 80015f0 <Mecanum_Control+0x308>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8d2 	bl	8000658 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4640      	mov	r0, r8
 80014ba:	4649      	mov	r1, r9
 80014bc:	f7fe ff16 	bl	80002ec <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	a34b      	add	r3, pc, #300	@ (adr r3, 80015f8 <Mecanum_Control+0x310>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f9ed 	bl	80008ac <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


    // Motor directions
    setMotorDir(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin,
 80014da:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	2304      	movs	r3, #4
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <Mecanum_Control+0x33c>)
 80014ea:	2108      	movs	r1, #8
 80014ec:	484d      	ldr	r0, [pc, #308]	@ (8001624 <Mecanum_Control+0x33c>)
 80014ee:	f7ff fe3f 	bl	8001170 <setMotorDir>
                RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, w_target[0]);
    setMotorDir(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin,
 80014f2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80014f6:	eeb0 0a47 	vmov.f32	s0, s14
 80014fa:	eef0 0a67 	vmov.f32	s1, s15
 80014fe:	2302      	movs	r3, #2
 8001500:	4a48      	ldr	r2, [pc, #288]	@ (8001624 <Mecanum_Control+0x33c>)
 8001502:	2101      	movs	r1, #1
 8001504:	4847      	ldr	r0, [pc, #284]	@ (8001624 <Mecanum_Control+0x33c>)
 8001506:	f7ff fe33 	bl	8001170 <setMotorDir>
                FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, w_target[1]);
    setMotorDir(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin,
 800150a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800150e:	eeb0 0a47 	vmov.f32	s0, s14
 8001512:	eef0 0a67 	vmov.f32	s1, s15
 8001516:	2320      	movs	r3, #32
 8001518:	4a43      	ldr	r2, [pc, #268]	@ (8001628 <Mecanum_Control+0x340>)
 800151a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151e:	4843      	ldr	r0, [pc, #268]	@ (800162c <Mecanum_Control+0x344>)
 8001520:	f7ff fe26 	bl	8001170 <setMotorDir>
                FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, w_target[2]);
    setMotorDir(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin,
 8001524:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001528:	eeb0 0a47 	vmov.f32	s0, s14
 800152c:	eef0 0a67 	vmov.f32	s1, s15
 8001530:	2310      	movs	r3, #16
 8001532:	4a3c      	ldr	r2, [pc, #240]	@ (8001624 <Mecanum_Control+0x33c>)
 8001534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001538:	483b      	ldr	r0, [pc, #236]	@ (8001628 <Mecanum_Control+0x340>)
 800153a:	f7ff fe19 	bl	8001170 <setMotorDir>
                RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, w_target[3]);

    // Convert PID output to PWM
    int CCR[4];
    for (int i = 0; i < 4; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001542:	e04e      	b.n	80015e2 <Mecanum_Control+0x2fa>
        CCR[i] = (int)((fabs(w_target[i]) / MAX_WHEEL_ANGULAR_V_RADPS) * CCR_MAX);
 8001544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	3350      	adds	r3, #80	@ 0x50
 800154a:	443b      	add	r3, r7
 800154c:	3b28      	subs	r3, #40	@ 0x28
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	4614      	mov	r4, r2
 8001554:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <Mecanum_Control+0x348>)
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7ff f9a3 	bl	80008ac <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <Mecanum_Control+0x34c>)
 8001574:	f7ff f870 	bl	8000658 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb1a 	bl	8000bb8 <__aeabi_d2iz>
 8001584:	4602      	mov	r2, r0
 8001586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	3350      	adds	r3, #80	@ 0x50
 800158c:	443b      	add	r3, r7
 800158e:	f843 2c38 	str.w	r2, [r3, #-56]
        CCR[i] = (int)clamp((float)CCR[i], 0.0f, CCR_MAX);
 8001592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	3350      	adds	r3, #80	@ 0x50
 8001598:	443b      	add	r3, r7
 800159a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	ee17 0a90 	vmov	r0, s15
 80015aa:	f7fe fffd 	bl	80005a8 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 8001600 <Mecanum_Control+0x318>
 80015b6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8001608 <Mecanum_Control+0x320>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f7ff fd59 	bl	8001074 <clamp>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff faf5 	bl	8000bb8 <__aeabi_d2iz>
 80015ce:	4602      	mov	r2, r0
 80015d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	3350      	adds	r3, #80	@ 0x50
 80015d6:	443b      	add	r3, r7
 80015d8:	f843 2c38 	str.w	r2, [r3, #-56]
    for (int i = 0; i < 4; i++) {
 80015dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015de:	3301      	adds	r3, #1
 80015e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	ddad      	ble.n	8001544 <Mecanum_Control+0x25c>
    }
*/


    // Apply PWM
    for (int i = 0; i < 4; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015ec:	e06d      	b.n	80016ca <Mecanum_Control+0x3e2>
 80015ee:	bf00      	nop
 80015f0:	40000000 	.word	0x40000000
 80015f4:	3fd33333 	.word	0x3fd33333
 80015f8:	a0000000 	.word	0xa0000000
 80015fc:	3fa99999 	.word	0x3fa99999
 8001600:	00000000 	.word	0x00000000
 8001604:	407f4000 	.word	0x407f4000
	...
 8001610:	20003928 	.word	0x20003928
 8001614:	20000000 	.word	0x20000000
 8001618:	20003930 	.word	0x20003930
 800161c:	20003938 	.word	0x20003938
 8001620:	20000004 	.word	0x20000004
 8001624:	40020800 	.word	0x40020800
 8001628:	40020400 	.word	0x40020400
 800162c:	40020000 	.word	0x40020000
 8001630:	402a8000 	.word	0x402a8000
 8001634:	407f4000 	.word	0x407f4000
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNELS[i], CCR[i]);
 8001638:	4a29      	ldr	r2, [pc, #164]	@ (80016e0 <Mecanum_Control+0x3f8>)
 800163a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <Mecanum_Control+0x370>
 8001644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3350      	adds	r3, #80	@ 0x50
 800164a:	443b      	add	r3, r7
 800164c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8001650:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <Mecanum_Control+0x3fc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	635a      	str	r2, [r3, #52]	@ 0x34
 8001656:	e02b      	b.n	80016b0 <Mecanum_Control+0x3c8>
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <Mecanum_Control+0x3f8>)
 800165a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d10a      	bne.n	800167a <Mecanum_Control+0x392>
 8001664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	3350      	adds	r3, #80	@ 0x50
 800166a:	443b      	add	r3, r7
 800166c:	f853 1c38 	ldr.w	r1, [r3, #-56]
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <Mecanum_Control+0x3fc>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	460b      	mov	r3, r1
 8001676:	6393      	str	r3, [r2, #56]	@ 0x38
 8001678:	e01a      	b.n	80016b0 <Mecanum_Control+0x3c8>
 800167a:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <Mecanum_Control+0x3f8>)
 800167c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d10a      	bne.n	800169c <Mecanum_Control+0x3b4>
 8001686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	3350      	adds	r3, #80	@ 0x50
 800168c:	443b      	add	r3, r7
 800168e:	f853 1c38 	ldr.w	r1, [r3, #-56]
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <Mecanum_Control+0x3fc>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	460b      	mov	r3, r1
 8001698:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800169a:	e009      	b.n	80016b0 <Mecanum_Control+0x3c8>
 800169c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	3350      	adds	r3, #80	@ 0x50
 80016a2:	443b      	add	r3, r7
 80016a4:	f853 1c38 	ldr.w	r1, [r3, #-56]
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <Mecanum_Control+0x3fc>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	460b      	mov	r3, r1
 80016ae:	6413      	str	r3, [r2, #64]	@ 0x40
        g_ccr_applied[i] = CCR[i];
 80016b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	3350      	adds	r3, #80	@ 0x50
 80016b6:	443b      	add	r3, r7
 80016b8:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80016bc:	490a      	ldr	r1, [pc, #40]	@ (80016e8 <Mecanum_Control+0x400>)
 80016be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 4; i++) {
 80016c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016c6:	3301      	adds	r3, #1
 80016c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	ddb3      	ble.n	8001638 <Mecanum_Control+0x350>
    }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3750      	adds	r7, #80	@ 0x50
 80016d6:	46bd      	mov	sp, r7
 80016d8:	ecbd 8b02 	vpop	{d8}
 80016dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016e0:	080209c0 	.word	0x080209c0
 80016e4:	200080bc 	.word	0x200080bc
 80016e8:	20003824 	.word	0x20003824

080016ec <PID_Init>:
// ----------- PID functions definitions  -------------------------------------------
// ----------------------------------------------------------------------------------
static void PID_WheelInit(PID_t *pid, float Kp, float Ki, float Kd, float dt);

void PID_Init(float Kc, float taui, float taud)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80016f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80016fa:	ed87 1a01 	vstr	s2, [r7, #4]
    if (Kc == 0.0f)   Kc   = KC;
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d101      	bne.n	8001710 <PID_Init+0x24>
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <PID_Init+0xac>)
 800170e:	60fb      	str	r3, [r7, #12]
    if (taui == 0.0f) taui = TAUI;
 8001710:	edd7 7a02 	vldr	s15, [r7, #8]
 8001714:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d101      	bne.n	8001722 <PID_Init+0x36>
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <PID_Init+0xb0>)
 8001720:	60bb      	str	r3, [r7, #8]
    if (taud == 0.0f) taud = TAUD;
 8001722:	edd7 7a01 	vldr	s15, [r7, #4]
 8001726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d102      	bne.n	8001736 <PID_Init+0x4a>
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	607b      	str	r3, [r7, #4]

    PID_WheelInit(&pid_wheel[0], Kc, taui, taud, DeltaT);   // RL
 8001736:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 80017a0 <PID_Init+0xb4>
 800173a:	ed97 1a01 	vldr	s2, [r7, #4]
 800173e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001742:	ed97 0a03 	vldr	s0, [r7, #12]
 8001746:	4817      	ldr	r0, [pc, #92]	@ (80017a4 <PID_Init+0xb8>)
 8001748:	f000 f834 	bl	80017b4 <PID_WheelInit>
    PID_WheelInit(&pid_wheel[1], Kc, taui, taud, DeltaT);   // FL
 800174c:	eddf 1a14 	vldr	s3, [pc, #80]	@ 80017a0 <PID_Init+0xb4>
 8001750:	ed97 1a01 	vldr	s2, [r7, #4]
 8001754:	edd7 0a02 	vldr	s1, [r7, #8]
 8001758:	ed97 0a03 	vldr	s0, [r7, #12]
 800175c:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <PID_Init+0xbc>)
 800175e:	f000 f829 	bl	80017b4 <PID_WheelInit>
    PID_WheelInit(&pid_wheel[2], Kc, taui, taud, DeltaT);   // FR
 8001762:	eddf 1a0f 	vldr	s3, [pc, #60]	@ 80017a0 <PID_Init+0xb4>
 8001766:	ed97 1a01 	vldr	s2, [r7, #4]
 800176a:	edd7 0a02 	vldr	s1, [r7, #8]
 800176e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001772:	480e      	ldr	r0, [pc, #56]	@ (80017ac <PID_Init+0xc0>)
 8001774:	f000 f81e 	bl	80017b4 <PID_WheelInit>
    PID_WheelInit(&pid_wheel[3], Kc, taui, taud, DeltaT);   // RR
 8001778:	eddf 1a09 	vldr	s3, [pc, #36]	@ 80017a0 <PID_Init+0xb4>
 800177c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001780:	edd7 0a02 	vldr	s1, [r7, #8]
 8001784:	ed97 0a03 	vldr	s0, [r7, #12]
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <PID_Init+0xc4>)
 800178a:	f000 f813 	bl	80017b4 <PID_WheelInit>

}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	3eb33333 	.word	0x3eb33333
 800179c:	3ca3d70a 	.word	0x3ca3d70a
 80017a0:	3a83126f 	.word	0x3a83126f
 80017a4:	20003834 	.word	0x20003834
 80017a8:	20003864 	.word	0x20003864
 80017ac:	20003894 	.word	0x20003894
 80017b0:	200038c4 	.word	0x200038c4

080017b4 <PID_WheelInit>:

static void PID_WheelInit(PID_t *pid, float Kc, float tau_i, float tau_d, float dt)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6178      	str	r0, [r7, #20]
 80017bc:	ed87 0a04 	vstr	s0, [r7, #16]
 80017c0:	edc7 0a03 	vstr	s1, [r7, #12]
 80017c4:	ed87 1a02 	vstr	s2, [r7, #8]
 80017c8:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kc = Kc;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]
    pid->tau_i = tau_i;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	605a      	str	r2, [r3, #4]
    pid->tau_d = tau_d;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	609a      	str	r2, [r3, #8]

    // Precompute coefficients (Tustin/bilinear transform)
    pid->cof_A = Kc * (1.0f + (dt / (2.0f * tau_i)) + (tau_d / dt));
 80017de:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80017ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80017fa:	edd7 6a01 	vldr	s13, [r7, #4]
 80017fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001806:	edd7 7a04 	vldr	s15, [r7, #16]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	edc3 7a03 	vstr	s15, [r3, #12]
    pid->cof_B = -Kc * (1.0f - (dt / (2.0f * tau_i)) + (2.0f * tau_d / dt));
 8001814:	edd7 7a04 	vldr	s15, [r7, #16]
 8001818:	eeb1 7a67 	vneg.f32	s14, s15
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001824:	ed97 6a01 	vldr	s12, [r7, #4]
 8001828:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800182c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001830:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001834:	edd7 7a02 	vldr	s15, [r7, #8]
 8001838:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800183c:	ed97 6a01 	vldr	s12, [r7, #4]
 8001840:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	edc3 7a04 	vstr	s15, [r3, #16]
    pid->cof_C = Kc * (tau_d / dt);
 8001852:	edd7 6a02 	vldr	s13, [r7, #8]
 8001856:	edd7 7a01 	vldr	s15, [r7, #4]
 800185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	edc3 7a05 	vstr	s15, [r3, #20]

    // Initialize state
    pid->last_error = 0.0f;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
    pid->prev_error = 0.0f;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
    pid->prev_output = 0.0f;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
    pid->output = 0.0f;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Default limits (can be overridden)
    pid->output_max =  MAX_WHEEL_ANGULAR_V_RADPS;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <PID_WheelInit+0xf0>)
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->output_min =  MIN_WHEEL_ANGULAR_V_RADPS;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <PID_WheelInit+0xf4>)
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	41540000 	.word	0x41540000
 80018a8:	c1540000 	.word	0xc1540000
 80018ac:	00000000 	.word	0x00000000

080018b0 <compute_and_publish_odometry>:

static double x=0, y=0, theta=0;
static int64_t last_ns = 0;

void compute_and_publish_odometry(void)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b09a      	sub	sp, #104	@ 0x68
 80018b4:	af00      	add	r7, sp, #0
	int64_t now_ns =  rmw_uros_epoch_nanos();
 80018b6:	f00c fb87 	bl	800dfc8 <rmw_uros_epoch_nanos>
 80018ba:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

    // First-call init
    if (last_ns == 0) {
 80018be:	4b44      	ldr	r3, [pc, #272]	@ (80019d0 <compute_and_publish_odometry+0x120>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	d139      	bne.n	800193c <compute_and_publish_odometry+0x8c>
        for (int i=0; i<4; i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80018cc:	e016      	b.n	80018fc <compute_and_publish_odometry+0x4c>
        	enc[i].last = (int32_t)( __HAL_TIM_GET_COUNTER(enc[i].tim));
 80018ce:	4941      	ldr	r1, [pc, #260]	@ (80019d4 <compute_and_publish_odometry+0x124>)
 80018d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	4618      	mov	r0, r3
 80018e4:	493b      	ldr	r1, [pc, #236]	@ (80019d4 <compute_and_publish_odometry+0x124>)
 80018e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3304      	adds	r3, #4
 80018f4:	6018      	str	r0, [r3, #0]
        for (int i=0; i<4; i++) {
 80018f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018f8:	3301      	adds	r3, #1
 80018fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80018fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018fe:	2b03      	cmp	r3, #3
 8001900:	dde5      	ble.n	80018ce <compute_and_publish_odometry+0x1e>
        }
        last_ns = now_ns;
 8001902:	4933      	ldr	r1, [pc, #204]	@ (80019d0 <compute_and_publish_odometry+0x120>)
 8001904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001908:	e9c1 2300 	strd	r2, r3, [r1]

        if (!odom_msg.header.frame_id.data) {
 800190c:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <compute_and_publish_odometry+0x128>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <compute_and_publish_odometry+0x72>
            rosidl_runtime_c__String__init(&odom_msg.header.frame_id);
 8001914:	4831      	ldr	r0, [pc, #196]	@ (80019dc <compute_and_publish_odometry+0x12c>)
 8001916:	f00c ff23 	bl	800e760 <rosidl_runtime_c__String__init>
            rosidl_runtime_c__String__assign(&odom_msg.header.frame_id, "odom");
 800191a:	4931      	ldr	r1, [pc, #196]	@ (80019e0 <compute_and_publish_odometry+0x130>)
 800191c:	482f      	ldr	r0, [pc, #188]	@ (80019dc <compute_and_publish_odometry+0x12c>)
 800191e:	f00c ff81 	bl	800e824 <rosidl_runtime_c__String__assign>
        }
        if (!odom_msg.child_frame_id.data) {
 8001922:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <compute_and_publish_odometry+0x128>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 82a7 	bne.w	8001e7a <compute_and_publish_odometry+0x5ca>
            rosidl_runtime_c__String__init(&odom_msg.child_frame_id);
 800192c:	482d      	ldr	r0, [pc, #180]	@ (80019e4 <compute_and_publish_odometry+0x134>)
 800192e:	f00c ff17 	bl	800e760 <rosidl_runtime_c__String__init>
            rosidl_runtime_c__String__assign(&odom_msg.child_frame_id, "base_link");
 8001932:	492d      	ldr	r1, [pc, #180]	@ (80019e8 <compute_and_publish_odometry+0x138>)
 8001934:	482b      	ldr	r0, [pc, #172]	@ (80019e4 <compute_and_publish_odometry+0x134>)
 8001936:	f00c ff75 	bl	800e824 <rosidl_runtime_c__String__assign>
 800193a:	e29f      	b.n	8001e7c <compute_and_publish_odometry+0x5cc>
        }
        return;
    }

    // Real elapsed time
    double dt = (double)(now_ns - last_ns) * 1e-9;
 800193c:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <compute_and_publish_odometry+0x120>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001946:	1a84      	subs	r4, r0, r2
 8001948:	eb61 0503 	sbc.w	r5, r1, r3
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fe54 	bl	80005fc <__aeabi_l2d>
 8001954:	a318      	add	r3, pc, #96	@ (adr r3, 80019b8 <compute_and_publish_odometry+0x108>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fe7d 	bl	8000658 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    if (dt < 1e-4) dt = 1e-4;
 8001966:	a316      	add	r3, pc, #88	@ (adr r3, 80019c0 <compute_and_publish_odometry+0x110>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001970:	f7ff f8e4 	bl	8000b3c <__aeabi_dcmplt>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <compute_and_publish_odometry+0xd4>
 800197a:	a311      	add	r3, pc, #68	@ (adr r3, 80019c0 <compute_and_publish_odometry+0x110>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    if (dt > 0.2)  dt = 0.2;
 8001984:	a310      	add	r3, pc, #64	@ (adr r3, 80019c8 <compute_and_publish_odometry+0x118>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800198e:	f7ff f8f3 	bl	8000b78 <__aeabi_dcmpgt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <compute_and_publish_odometry+0xf2>
 8001998:	a30b      	add	r3, pc, #44	@ (adr r3, 80019c8 <compute_and_publish_odometry+0x118>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    last_ns = now_ns;
 80019a2:	490b      	ldr	r1, [pc, #44]	@ (80019d0 <compute_and_publish_odometry+0x120>)
 80019a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019a8:	e9c1 2300 	strd	r2, r3, [r1]

    uint16_t c_snap[4];
    int16_t  d_ticks[4];
    float    w[4];

    for (int i=0; i<4; i++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80019b0:	e0a1      	b.n	8001af6 <compute_and_publish_odometry+0x246>
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	e826d695 	.word	0xe826d695
 80019bc:	3e112e0b 	.word	0x3e112e0b
 80019c0:	eb1c432d 	.word	0xeb1c432d
 80019c4:	3f1a36e2 	.word	0x3f1a36e2
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fc99999 	.word	0x3fc99999
 80019d0:	20003c28 	.word	0x20003c28
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20003948 	.word	0x20003948
 80019dc:	20003950 	.word	0x20003950
 80019e0:	08020930 	.word	0x08020930
 80019e4:	2000395c 	.word	0x2000395c
 80019e8:	08020938 	.word	0x08020938
    	uint16_t ccur = (uint16_t)__HAL_TIM_GET_COUNTER(enc[i].tim);
 80019ec:	49cc      	ldr	r1, [pc, #816]	@ (8001d20 <compute_and_publish_odometry+0x470>)
 80019ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	857b      	strh	r3, [r7, #42]	@ 0x2a
    	int16_t  d    = (int16_t)(ccur - (uint16_t)enc[i].last); // wrap-safe
 8001a02:	49c7      	ldr	r1, [pc, #796]	@ (8001d20 <compute_and_publish_odometry+0x470>)
 8001a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3304      	adds	r3, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	853b      	strh	r3, [r7, #40]	@ 0x28
    	c_snap[i] = ccur;
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	3368      	adds	r3, #104	@ 0x68
 8001a24:	443b      	add	r3, r7
 8001a26:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001a28:	f823 2c4c 	strh.w	r2, [r3, #-76]
    	d_ticks[i] = (int16_t)(d * enc[i].sign);
 8001a2c:	49bc      	ldr	r1, [pc, #752]	@ (8001d20 <compute_and_publish_odometry+0x470>)
 8001a2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a44:	fb12 f303 	smulbb	r3, r2, r3
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	3368      	adds	r3, #104	@ 0x68
 8001a52:	443b      	add	r3, r7
 8001a54:	f823 2c54 	strh.w	r2, [r3, #-84]
    	enc[i].last = ccur;
 8001a58:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001a5a:	48b1      	ldr	r0, [pc, #708]	@ (8001d20 <compute_and_publish_odometry+0x470>)
 8001a5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4403      	add	r3, r0
 8001a68:	3304      	adds	r3, #4
 8001a6a:	6019      	str	r1, [r3, #0]

    	float wi = (float)d * RAD_PER_TICK / (float)dt;  // rad/s at motor=>wheel config
 8001a6c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a78:	ee17 0a90 	vmov	r0, s15
 8001a7c:	f7fe fd94 	bl	80005a8 <__aeabi_f2d>
 8001a80:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001d08 <compute_and_publish_odometry+0x458>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fde7 	bl	8000658 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4614      	mov	r4, r2
 8001a90:	461d      	mov	r5, r3
 8001a92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001a96:	f7ff f8b7 	bl	8000c08 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd83 	bl	80005a8 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	f7fe feff 	bl	80008ac <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff f8a7 	bl	8000c08 <__aeabi_d2f>
 8001aba:	4603      	mov	r3, r0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    	w[i] = wi * enc[i].sign;                      // per-wheel sign
 8001abe:	4998      	ldr	r1, [pc, #608]	@ (8001d20 <compute_and_publish_odometry+0x470>)
 8001ac0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3308      	adds	r3, #8
 8001ace:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ada:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	3368      	adds	r3, #104	@ 0x68
 8001ae8:	443b      	add	r3, r7
 8001aea:	3b64      	subs	r3, #100	@ 0x64
 8001aec:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<4; i++) {
 8001af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af2:	3301      	adds	r3, #1
 8001af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	f77f af77 	ble.w	80019ec <compute_and_publish_odometry+0x13c>
    }

    // Kinematics (x fwd, y left, z up)
    float vx = (WHEEL_R / 4.0f)          * (w[RL] + w[FL] + w[FR] + w[RR]);
 8001afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001d24 <compute_and_publish_odometry+0x474>
 8001b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b22:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float vy = (WHEEL_R / 4.0f)          * (w[RL] - w[FL] + w[FR] - w[RR]);
 8001b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001d24 <compute_and_publish_odometry+0x474>
 8001b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float wz = (WHEEL_R / (4.0f*A_SUM))  * (-w[RL] - w[FL] + w[FR] + w[RR]);
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	eeb1 7a67 	vneg.f32	s14, s15
 8001b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6e:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001d28 <compute_and_publish_odometry+0x478>
 8001b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b76:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    // Small deadband to avoid yaw creep
    if (fabsf(wz) < 1e-3f) wz = 0.0f;
 8001b7a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001b7e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b82:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001d2c <compute_and_publish_odometry+0x47c>
 8001b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d502      	bpl.n	8001b96 <compute_and_publish_odometry+0x2e6>
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	653b      	str	r3, [r7, #80]	@ 0x50

    // Integrate body -> world
    double cth = cos(theta), sth = sin(theta);
 8001b96:	4b66      	ldr	r3, [pc, #408]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001b98:	ed93 7b00 	vldr	d7, [r3]
 8001b9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba0:	eef0 0a67 	vmov.f32	s1, s15
 8001ba4:	f01d fdc8 	bl	801f738 <cos>
 8001ba8:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
 8001bac:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001bae:	ed93 7b00 	vldr	d7, [r3]
 8001bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb6:	eef0 0a67 	vmov.f32	s1, s15
 8001bba:	f01d fe11 	bl	801f7e0 <sin>
 8001bbe:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
    x     += (vx * cth - vy * sth) * (float)dt;
 8001bc2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bc4:	f7fe fcf0 	bl	80005a8 <__aeabi_f2d>
 8001bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001bcc:	f7fe fd44 	bl	8000658 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001bda:	f7fe fce5 	bl	80005a8 <__aeabi_f2d>
 8001bde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001be2:	f7fe fd39 	bl	8000658 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4620      	mov	r0, r4
 8001bec:	4629      	mov	r1, r5
 8001bee:	f7fe fb7b 	bl	80002e8 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4614      	mov	r4, r2
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001bfe:	f7ff f803 	bl	8000c08 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fccf 	bl	80005a8 <__aeabi_f2d>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fd21 	bl	8000658 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4b45      	ldr	r3, [pc, #276]	@ (8001d34 <compute_and_publish_odometry+0x484>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb62 	bl	80002ec <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4941      	ldr	r1, [pc, #260]	@ (8001d34 <compute_and_publish_odometry+0x484>)
 8001c2e:	e9c1 2300 	strd	r2, r3, [r1]
    y     += (vx * sth + vy * cth) * (float)dt;
 8001c32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c34:	f7fe fcb8 	bl	80005a8 <__aeabi_f2d>
 8001c38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c3c:	f7fe fd0c 	bl	8000658 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4614      	mov	r4, r2
 8001c46:	461d      	mov	r5, r3
 8001c48:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c4a:	f7fe fcad 	bl	80005a8 <__aeabi_f2d>
 8001c4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c52:	f7fe fd01 	bl	8000658 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fb45 	bl	80002ec <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4614      	mov	r4, r2
 8001c68:	461d      	mov	r5, r3
 8001c6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001c6e:	f7fe ffcb 	bl	8000c08 <__aeabi_d2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc97 	bl	80005a8 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fce9 	bl	8000658 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <compute_and_publish_odometry+0x488>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fb2a 	bl	80002ec <__adddf3>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4926      	ldr	r1, [pc, #152]	@ (8001d38 <compute_and_publish_odometry+0x488>)
 8001c9e:	e9c1 2300 	strd	r2, r3, [r1]
    theta += wz * (float)dt;
 8001ca2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001ca6:	f7fe ffaf 	bl	8000c08 <__aeabi_d2f>
 8001caa:	ee07 0a10 	vmov	s14, r0
 8001cae:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb6:	ee17 0a90 	vmov	r0, s15
 8001cba:	f7fe fc75 	bl	80005a8 <__aeabi_f2d>
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fb12 	bl	80002ec <__adddf3>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4918      	ldr	r1, [pc, #96]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001cce:	e9c1 2300 	strd	r2, r3, [r1]
    if (theta >  M_PI) theta -= 2.0 * M_PI;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001d10 <compute_and_publish_odometry+0x460>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe ff4b 	bl	8000b78 <__aeabi_dcmpgt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d029      	beq.n	8001d3c <compute_and_publish_odometry+0x48c>
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cee:	a30a      	add	r3, pc, #40	@ (adr r3, 8001d18 <compute_and_publish_odometry+0x468>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe faf8 	bl	80002e8 <__aeabi_dsub>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	490c      	ldr	r1, [pc, #48]	@ (8001d30 <compute_and_publish_odometry+0x480>)
 8001cfe:	e9c1 2300 	strd	r2, r3, [r1]
 8001d02:	e01b      	b.n	8001d3c <compute_and_publish_odometry+0x48c>
 8001d04:	f3af 8000 	nop.w
 8001d08:	382d7365 	.word	0x382d7365
 8001d0c:	3f60c152 	.word	0x3f60c152
 8001d10:	54442d18 	.word	0x54442d18
 8001d14:	400921fb 	.word	0x400921fb
 8001d18:	54442d18 	.word	0x54442d18
 8001d1c:	401921fb 	.word	0x401921fb
 8001d20:	20000008 	.word	0x20000008
 8001d24:	3c4ccccd 	.word	0x3c4ccccd
 8001d28:	3d2aaaaa 	.word	0x3d2aaaaa
 8001d2c:	3a83126f 	.word	0x3a83126f
 8001d30:	20003c20 	.word	0x20003c20
 8001d34:	20003c10 	.word	0x20003c10
 8001d38:	20003c18 	.word	0x20003c18
    if (theta < -M_PI) theta += 2.0 * M_PI;
 8001d3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ea0 <compute_and_publish_odometry+0x5f0>)
 8001d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d42:	a351      	add	r3, pc, #324	@ (adr r3, 8001e88 <compute_and_publish_odometry+0x5d8>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fef8 	bl	8000b3c <__aeabi_dcmplt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <compute_and_publish_odometry+0x4bc>
 8001d52:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <compute_and_publish_odometry+0x5f0>)
 8001d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d58:	a34d      	add	r3, pc, #308	@ (adr r3, 8001e90 <compute_and_publish_odometry+0x5e0>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fac5 	bl	80002ec <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	494e      	ldr	r1, [pc, #312]	@ (8001ea0 <compute_and_publish_odometry+0x5f0>)
 8001d68:	e9c1 2300 	strd	r2, r3, [r1]

    // Fill and publish
    odom_msg.pose.pose.position.x = x;
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <compute_and_publish_odometry+0x5f4>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	494d      	ldr	r1, [pc, #308]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001d74:	e9c1 2308 	strd	r2, r3, [r1, #32]
    odom_msg.pose.pose.position.y = y;
 8001d78:	4b4c      	ldr	r3, [pc, #304]	@ (8001eac <compute_and_publish_odometry+0x5fc>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	494a      	ldr	r1, [pc, #296]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001d80:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    odom_msg.pose.pose.orientation.x = 0.0f;
 8001d84:	4948      	ldr	r1, [pc, #288]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.orientation.y = 0.0f;
 8001d92:	4945      	ldr	r1, [pc, #276]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    odom_msg.pose.pose.orientation.z = sin(theta * 0.5f);
 8001da0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea0 <compute_and_publish_odometry+0x5f0>)
 8001da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <compute_and_publish_odometry+0x600>)
 8001dac:	f7fe fc54 	bl	8000658 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	ec43 2b17 	vmov	d7, r2, r3
 8001db8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbc:	eef0 0a67 	vmov.f32	s1, s15
 8001dc0:	f01d fd0e 	bl	801f7e0 <sin>
 8001dc4:	eeb0 7a40 	vmov.f32	s14, s0
 8001dc8:	eef0 7a60 	vmov.f32	s15, s1
 8001dcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001dce:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
    odom_msg.pose.pose.orientation.w = cos(theta * 0.5f);
 8001dd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <compute_and_publish_odometry+0x5f0>)
 8001dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <compute_and_publish_odometry+0x600>)
 8001dde:	f7fe fc3b 	bl	8000658 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ec43 2b17 	vmov	d7, r2, r3
 8001dea:	eeb0 0a47 	vmov.f32	s0, s14
 8001dee:	eef0 0a67 	vmov.f32	s1, s15
 8001df2:	f01d fca1 	bl	801f738 <cos>
 8001df6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfa:	eef0 7a60 	vmov.f32	s15, s1
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e00:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50

    odom_msg.twist.twist.linear.x  = vx;
 8001e04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e06:	f7fe fbcf 	bl	80005a8 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4926      	ldr	r1, [pc, #152]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e10:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
    odom_msg.twist.twist.linear.y  = vy;
 8001e14:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001e16:	f7fe fbc7 	bl	80005a8 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4922      	ldr	r1, [pc, #136]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e20:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
    odom_msg.twist.twist.angular.z = wz;
 8001e24:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001e26:	f7fe fbbf 	bl	80005a8 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	491e      	ldr	r1, [pc, #120]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e30:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

    odom_msg.header.stamp.sec     = (int32_t)(now_ns / 1000000000ULL);
 8001e34:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e38:	a317      	add	r3, pc, #92	@ (adr r3, 8001e98 <compute_and_publish_odometry+0x5e8>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe ff83 	bl	8000d48 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e48:	601a      	str	r2, [r3, #0]
    odom_msg.header.stamp.nanosec = (uint32_t)(now_ns % 1000000000ULL);
 8001e4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e4e:	a312      	add	r3, pc, #72	@ (adr r3, 8001e98 <compute_and_publish_odometry+0x5e8>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe ff78 	bl	8000d48 <__aeabi_uldivmod>
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e5a:	605a      	str	r2, [r3, #4]

    rcl_ret_t rc = rcl_publish(&odom_pub, &odom_msg, NULL);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4912      	ldr	r1, [pc, #72]	@ (8001ea8 <compute_and_publish_odometry+0x5f8>)
 8001e60:	4814      	ldr	r0, [pc, #80]	@ (8001eb4 <compute_and_publish_odometry+0x604>)
 8001e62:	f00a fe6f 	bl	800cb44 <rcl_publish>
 8001e66:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (rc != RCL_RET_OK) {
    	// Handle publisher init error
    }

    // ---------- DEBUG (rate-limited) ----------
    debug_pub_cd_w(c_snap, d_ticks, w);
 8001e68:	1d3a      	adds	r2, r7, #4
 8001e6a:	f107 0114 	add.w	r1, r7, #20
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f84e 	bl	8001f14 <debug_pub_cd_w>
 8001e78:	e000      	b.n	8001e7c <compute_and_publish_odometry+0x5cc>
        return;
 8001e7a:	bf00      	nop
    // ---------- END DEBUG ----------
}
 8001e7c:	3768      	adds	r7, #104	@ 0x68
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	54442d18 	.word	0x54442d18
 8001e8c:	c00921fb 	.word	0xc00921fb
 8001e90:	54442d18 	.word	0x54442d18
 8001e94:	401921fb 	.word	0x401921fb
 8001e98:	3b9aca00 	.word	0x3b9aca00
 8001e9c:	00000000 	.word	0x00000000
 8001ea0:	20003c20 	.word	0x20003c20
 8001ea4:	20003c10 	.word	0x20003c10
 8001ea8:	20003948 	.word	0x20003948
 8001eac:	20003c18 	.word	0x20003c18
 8001eb0:	3fe00000 	.word	0x3fe00000
 8001eb4:	20003940 	.word	0x20003940

08001eb8 <debug_init>:
static rcl_publisher_t dbg_pub;
static std_msgs__msg__Float32MultiArray dbg_msg;
static bool dbg_inited = false;

bool debug_init(rcl_node_t* node)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
    if (rclc_publisher_init_default(
 8001ec0:	f00c fd4e 	bl	800e960 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <debug_init+0x48>)
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	480e      	ldr	r0, [pc, #56]	@ (8001f04 <debug_init+0x4c>)
 8001ecc:	f00b fce8 	bl	800d8a0 <rclc_publisher_init_default>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <debug_init+0x22>
            &dbg_pub,
            node,
            ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
            "/debug") != RCL_RET_OK) {
        return false;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e00d      	b.n	8001ef6 <debug_init+0x3e>
    }

    std_msgs__msg__Float32MultiArray__init(&dbg_msg);
 8001eda:	480b      	ldr	r0, [pc, #44]	@ (8001f08 <debug_init+0x50>)
 8001edc:	f00c fd00 	bl	800e8e0 <std_msgs__msg__Float32MultiArray__init>
    // Fixed-size payload: 12 floats => [c0..c3, d0..d3, w0..w3]
    rosidl_runtime_c__float__Sequence__init(&dbg_msg.data, 12);
 8001ee0:	210c      	movs	r1, #12
 8001ee2:	480a      	ldr	r0, [pc, #40]	@ (8001f0c <debug_init+0x54>)
 8001ee4:	f00c fc0e 	bl	800e704 <rosidl_runtime_c__float__Sequence__init>
    dbg_msg.data.size = 12;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <debug_init+0x50>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]

    dbg_inited = true;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <debug_init+0x58>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
    return true;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	08020944 	.word	0x08020944
 8001f04:	20003c30 	.word	0x20003c30
 8001f08:	20003c34 	.word	0x20003c34
 8001f0c:	20003c44 	.word	0x20003c44
 8001f10:	20003c50 	.word	0x20003c50

08001f14 <debug_pub_cd_w>:

void debug_pub_cd_w(const uint16_t c[4], const int16_t d[4], const float w[4])
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
    if (!dbg_inited) return;
 8001f20:	4b42      	ldr	r3, [pc, #264]	@ (800202c <debug_pub_cd_w+0x118>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d17a      	bne.n	8002024 <debug_pub_cd_w+0x110>

    float *p = dbg_msg.data.data;
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <debug_pub_cd_w+0x11c>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	617b      	str	r3, [r7, #20]

    // c[4] as floats
    p[0] = (float)c[0]; p[1] = (float)c[1]; p[2] = (float)c[2]; p[3] = (float)c[3];
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	edc3 7a00 	vstr	s15, [r3]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	ee07 2a90 	vmov	s15, r2
 8001f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f58:	edc3 7a00 	vstr	s15, [r3]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3308      	adds	r3, #8
 8001f66:	ee07 2a90 	vmov	s15, r2
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	edc3 7a00 	vstr	s15, [r3]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3306      	adds	r3, #6
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	ee07 2a90 	vmov	s15, r2
 8001f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f84:	edc3 7a00 	vstr	s15, [r3]
    // d[4] as floats
    p[4] = (float)d[0]; p[5] = (float)d[1]; p[6] = (float)d[2]; p[7] = (float)d[3];
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3310      	adds	r3, #16
 8001f92:	ee07 2a90 	vmov	s15, r2
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3314      	adds	r3, #20
 8001faa:	ee07 2a90 	vmov	s15, r2
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3318      	adds	r3, #24
 8001fc2:	ee07 2a90 	vmov	s15, r2
 8001fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fca:	edc3 7a00 	vstr	s15, [r3]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	331c      	adds	r3, #28
 8001fda:	ee07 2a90 	vmov	s15, r2
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
    // w[4]
    p[8] = w[0]; p[9] = w[1]; p[10] = w[2]; p[11] = w[3];
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3320      	adds	r3, #32
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3324      	adds	r3, #36	@ 0x24
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f103 0208 	add.w	r2, r3, #8
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3328      	adds	r3, #40	@ 0x28
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f103 020c 	add.w	r2, r3, #12
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	332c      	adds	r3, #44	@ 0x2c
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	601a      	str	r2, [r3, #0]

    (void)rcl_publish(&dbg_pub, &dbg_msg, NULL);
 8002018:	2200      	movs	r2, #0
 800201a:	4905      	ldr	r1, [pc, #20]	@ (8002030 <debug_pub_cd_w+0x11c>)
 800201c:	4805      	ldr	r0, [pc, #20]	@ (8002034 <debug_pub_cd_w+0x120>)
 800201e:	f00a fd91 	bl	800cb44 <rcl_publish>
 8002022:	e000      	b.n	8002026 <debug_pub_cd_w+0x112>
    if (!dbg_inited) return;
 8002024:	bf00      	nop
}
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20003c50 	.word	0x20003c50
 8002030:	20003c34 	.word	0x20003c34
 8002034:	20003c30 	.word	0x20003c30

08002038 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002044:	f007 f96a 	bl	800931c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002048:	4b5a      	ldr	r3, [pc, #360]	@ (80021b4 <pvPortMallocMicroROS+0x17c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002050:	f000 f986 	bl	8002360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002054:	4b58      	ldr	r3, [pc, #352]	@ (80021b8 <pvPortMallocMicroROS+0x180>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8090 	bne.w	8002182 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01e      	beq.n	80020a6 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002068:	2208      	movs	r2, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f023 0307 	bic.w	r3, r3, #7
 8002080:	3308      	adds	r3, #8
 8002082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d06a      	beq.n	8002182 <pvPortMallocMicroROS+0x14a>
 80020ac:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <pvPortMallocMicroROS+0x184>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d865      	bhi.n	8002182 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020b6:	4b42      	ldr	r3, [pc, #264]	@ (80021c0 <pvPortMallocMicroROS+0x188>)
 80020b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020ba:	4b41      	ldr	r3, [pc, #260]	@ (80021c0 <pvPortMallocMicroROS+0x188>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020c0:	e004      	b.n	80020cc <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d903      	bls.n	80020de <pvPortMallocMicroROS+0xa6>
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f1      	bne.n	80020c2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80020de:	4b35      	ldr	r3, [pc, #212]	@ (80021b4 <pvPortMallocMicroROS+0x17c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d04c      	beq.n	8002182 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2208      	movs	r2, #8
 80020ee:	4413      	add	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	2308      	movs	r3, #8
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	429a      	cmp	r2, r3
 8002108:	d920      	bls.n	800214c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	613b      	str	r3, [r7, #16]
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002146:	69b8      	ldr	r0, [r7, #24]
 8002148:	f000 f96c 	bl	8002424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800214c:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <pvPortMallocMicroROS+0x184>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <pvPortMallocMicroROS+0x184>)
 8002158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800215a:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <pvPortMallocMicroROS+0x184>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <pvPortMallocMicroROS+0x18c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d203      	bcs.n	800216e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <pvPortMallocMicroROS+0x184>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <pvPortMallocMicroROS+0x18c>)
 800216c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <pvPortMallocMicroROS+0x180>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	431a      	orrs	r2, r3
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002182:	f007 f8d9 	bl	8009338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	60fb      	str	r3, [r7, #12]
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80021a8:	69fb      	ldr	r3, [r7, #28]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3728      	adds	r7, #40	@ 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000785c 	.word	0x2000785c
 80021b8:	20007868 	.word	0x20007868
 80021bc:	20007860 	.word	0x20007860
 80021c0:	20007854 	.word	0x20007854
 80021c4:	20007864 	.word	0x20007864

080021c8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d04a      	beq.n	8002270 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80021da:	2308      	movs	r3, #8
 80021dc:	425b      	negs	r3, r3
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4413      	add	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <vPortFreeMicroROS+0xb0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <vPortFreeMicroROS+0x46>
	__asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	60fb      	str	r3, [r7, #12]
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	e7fd      	b.n	800220a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <vPortFreeMicroROS+0x66>
	__asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	60bb      	str	r3, [r7, #8]
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <vPortFreeMicroROS+0xb0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d019      	beq.n	8002270 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d115      	bne.n	8002270 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <vPortFreeMicroROS+0xb0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002254:	f007 f862 	bl	800931c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <vPortFreeMicroROS+0xb4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	4a06      	ldr	r2, [pc, #24]	@ (800227c <vPortFreeMicroROS+0xb4>)
 8002264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002266:	6938      	ldr	r0, [r7, #16]
 8002268:	f000 f8dc 	bl	8002424 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800226c:	f007 f864 	bl	8009338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20007868 	.word	0x20007868
 800227c:	20007860 	.word	0x20007860

08002280 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800228c:	2308      	movs	r3, #8
 800228e:	425b      	negs	r3, r3
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <getBlockSize+0x38>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

	return count;
 80022a8:	68fb      	ldr	r3, [r7, #12]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20007868 	.word	0x20007868

080022bc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80022c6:	f007 f829 	bl	800931c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f7ff feb4 	bl	8002038 <pvPortMallocMicroROS>
 80022d0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d017      	beq.n	8002308 <pvPortReallocMicroROS+0x4c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d014      	beq.n	8002308 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffce 	bl	8002280 <getBlockSize>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2208      	movs	r2, #8
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d201      	bcs.n	80022f8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	68b8      	ldr	r0, [r7, #8]
 80022fe:	f019 fb93 	bl	801ba28 <memcpy>

		vPortFreeMicroROS(pv);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff60 	bl	80021c8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002308:	f007 f816 	bl	8009338 <xTaskResumeAll>

	return newmem;
 800230c:	68bb      	ldr	r3, [r7, #8]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002320:	f006 fffc 	bl	800931c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff fe82 	bl	8002038 <pvPortMallocMicroROS>
 8002334:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	613b      	str	r3, [r7, #16]

  	while(count--)
 800233a:	e004      	b.n	8002346 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	613a      	str	r2, [r7, #16]
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	617a      	str	r2, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f5      	bne.n	800233c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002350:	f006 fff2 	bl	8009338 <xTaskResumeAll>
  	return mem;
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002366:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800236a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <prvHeapInit+0xac>)
 800236e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3307      	adds	r3, #7
 800237e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0307 	bic.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <prvHeapInit+0xac>)
 8002390:	4413      	add	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002398:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <prvHeapInit+0xb0>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <prvHeapInit+0xb0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80023ac:	2208      	movs	r2, #8
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <prvHeapInit+0xb4>)
 80023c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <prvHeapInit+0xb4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <prvHeapInit+0xb4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	1ad2      	subs	r2, r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <prvHeapInit+0xb4>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <prvHeapInit+0xb8>)
 80023ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a09      	ldr	r2, [pc, #36]	@ (800241c <prvHeapInit+0xbc>)
 80023f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <prvHeapInit+0xc0>)
 80023fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20003c54 	.word	0x20003c54
 8002410:	20007854 	.word	0x20007854
 8002414:	2000785c 	.word	0x2000785c
 8002418:	20007864 	.word	0x20007864
 800241c:	20007860 	.word	0x20007860
 8002420:	20007868 	.word	0x20007868

08002424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800242c:	4b28      	ldr	r3, [pc, #160]	@ (80024d0 <prvInsertBlockIntoFreeList+0xac>)
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e002      	b.n	8002438 <prvInsertBlockIntoFreeList+0x14>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d8f7      	bhi.n	8002432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	d108      	bne.n	8002466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	441a      	add	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	441a      	add	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d118      	bne.n	80024ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <prvInsertBlockIntoFreeList+0xb0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d00d      	beq.n	80024a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e008      	b.n	80024b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <prvInsertBlockIntoFreeList+0xb0>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e003      	b.n	80024b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d002      	beq.n	80024c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20007854 	.word	0x20007854
 80024d4:	2000785c 	.word	0x2000785c

080024d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80024e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80024e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024ec:	4904      	ldr	r1, [pc, #16]	@ (8002500 <cubemx_transport_open+0x28>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f004 fbf0 	bl	8006cd4 <HAL_UART_Receive_DMA>
    return true;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000786c 	.word	0x2000786c

08002504 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002512:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f004 fc02 	bl	8006d1e <HAL_UART_DMAStop>
    return true;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002538:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d11c      	bne.n	8002580 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f004 fb44 	bl	8006bdc <HAL_UART_Transmit_DMA>
 8002554:	4603      	mov	r3, r0
 8002556:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002558:	e002      	b.n	8002560 <cubemx_transport_write+0x3c>
            osDelay(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f005 fe9c 	bl	8008298 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <cubemx_transport_write+0x4e>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b20      	cmp	r3, #32
 8002570:	d1f3      	bne.n	800255a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <cubemx_transport_write+0x58>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	e002      	b.n	8002582 <cubemx_transport_write+0x5e>
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002580:	2300      	movs	r3, #0
    }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a6:	b672      	cpsid	i
}
 80025a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80025b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <cubemx_transport_read+0x9c>)
 80025b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ba:	b662      	cpsie	i
}
 80025bc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f005 fe67 	bl	8008298 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80025ca:	4b18      	ldr	r3, [pc, #96]	@ (800262c <cubemx_transport_read+0xa0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <cubemx_transport_read+0x9c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d103      	bne.n	80025de <cubemx_transport_read+0x52>
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbe3      	blt.n	80025a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80025e2:	e011      	b.n	8002608 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <cubemx_transport_read+0xa0>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	440b      	add	r3, r1
 80025ee:	4910      	ldr	r1, [pc, #64]	@ (8002630 <cubemx_transport_read+0xa4>)
 80025f0:	5c8a      	ldrb	r2, [r1, r2]
 80025f2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <cubemx_transport_read+0xa0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fe:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <cubemx_transport_read+0xa0>)
 8002600:	6013      	str	r3, [r2, #0]
        wrote++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3301      	adds	r3, #1
 8002606:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <cubemx_transport_read+0xa0>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <cubemx_transport_read+0x9c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d003      	beq.n	800261c <cubemx_transport_read+0x90>
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	d3e3      	bcc.n	80025e4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800261c:	69bb      	ldr	r3, [r7, #24]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20008070 	.word	0x20008070
 800262c:	2000806c 	.word	0x2000806c
 8002630:	2000786c 	.word	0x2000786c

08002634 <nexus_bringup>:
volatile int32_t pastCount[4] 	 = {0};		// {RL, FL, FR, RR}
volatile bool encUpdateFlag 	 = 0;

void nexus_bringup(void);

void nexus_bringup(void){
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);
 8002638:	480f      	ldr	r0, [pc, #60]	@ (8002678 <nexus_bringup+0x44>)
 800263a:	f003 f971 	bl	8005920 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800263e:	213c      	movs	r1, #60	@ 0x3c
 8002640:	480e      	ldr	r0, [pc, #56]	@ (800267c <nexus_bringup+0x48>)
 8002642:	f003 fba5 	bl	8005d90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002646:	213c      	movs	r1, #60	@ 0x3c
 8002648:	480d      	ldr	r0, [pc, #52]	@ (8002680 <nexus_bringup+0x4c>)
 800264a:	f003 fba1 	bl	8005d90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800264e:	213c      	movs	r1, #60	@ 0x3c
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <nexus_bringup+0x50>)
 8002652:	f003 fb9d 	bl	8005d90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002656:	213c      	movs	r1, #60	@ 0x3c
 8002658:	480b      	ldr	r0, [pc, #44]	@ (8002688 <nexus_bringup+0x54>)
 800265a:	f003 fb99 	bl	8005d90 <HAL_TIM_Encoder_Start>

	init_motors();
 800265e:	f7fe fdd3 	bl	8001208 <init_motors>
	PID_Init(0.035f, 0.02f, 0);
 8002662:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800268c <nexus_bringup+0x58>
 8002666:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002690 <nexus_bringup+0x5c>
 800266a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002694 <nexus_bringup+0x60>
 800266e:	f7ff f83d 	bl	80016ec <PID_Init>
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20008194 	.word	0x20008194
 800267c:	20008074 	.word	0x20008074
 8002680:	20008104 	.word	0x20008104
 8002684:	2000814c 	.word	0x2000814c
 8002688:	200081dc 	.word	0x200081dc
 800268c:	00000000 	.word	0x00000000
 8002690:	3ca3d70a 	.word	0x3ca3d70a
 8002694:	3d0f5c29 	.word	0x3d0f5c29

08002698 <main>:
 * END OF STEP X
 * --------------------------------------------------------------------------------------
*/

int main(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  HAL_Init();
 800269c:	f001 fc02 	bl	8003ea4 <HAL_Init>
  SystemClock_Config();
 80026a0:	f000 f826 	bl	80026f0 <SystemClock_Config>
  MX_GPIO_Init();
 80026a4:	f000 fb1e 	bl	8002ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a8:	f000 fade 	bl	8002c68 <MX_DMA_Init>
  MX_TIM1_Init();
 80026ac:	f000 f88e 	bl	80027cc <MX_TIM1_Init>
  MX_TIM3_Init();
 80026b0:	f000 f97a 	bl	80029a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80026b4:	f000 f9cc 	bl	8002a50 <MX_TIM4_Init>
  MX_TIM8_Init();
 80026b8:	f000 fa54 	bl	8002b64 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80026bc:	f000 faaa 	bl	8002c14 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80026c0:	f000 f8dc 	bl	800287c <MX_TIM2_Init>
  MX_TIM6_Init();
 80026c4:	f000 fa18 	bl	8002af8 <MX_TIM6_Init>

  osKernelInitialize();
 80026c8:	f005 fd0a 	bl	80080e0 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80026cc:	4a05      	ldr	r2, [pc, #20]	@ (80026e4 <main+0x4c>)
 80026ce:	2100      	movs	r1, #0
 80026d0:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <main+0x50>)
 80026d2:	f005 fd4f 	bl	8008174 <osThreadNew>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <main+0x54>)
 80026da:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80026dc:	f005 fd24 	bl	8008128 <osKernelStart>

  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <main+0x48>
 80026e4:	080209d0 	.word	0x080209d0
 80026e8:	08002e71 	.word	0x08002e71
 80026ec:	2000832c 	.word	0x2000832c

080026f0 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b094      	sub	sp, #80	@ 0x50
 80026f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	2234      	movs	r2, #52	@ 0x34
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f019 f8aa 	bl	801b858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <SystemClock_Config+0xd4>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	4a29      	ldr	r2, [pc, #164]	@ (80027c4 <SystemClock_Config+0xd4>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002722:	6413      	str	r3, [r2, #64]	@ 0x40
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <SystemClock_Config+0xd4>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002730:	2300      	movs	r3, #0
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <SystemClock_Config+0xd8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800273c:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <SystemClock_Config+0xd8>)
 800273e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <SystemClock_Config+0xd8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002750:	2302      	movs	r3, #2
 8002752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002754:	2301      	movs	r3, #1
 8002756:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002758:	2310      	movs	r3, #16
 800275a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275c:	2302      	movs	r3, #2
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002760:	2300      	movs	r3, #0
 8002762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002764:	2310      	movs	r3, #16
 8002766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002768:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800276c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800276e:	2304      	movs	r3, #4
 8002770:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002772:	2302      	movs	r3, #2
 8002774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002776:	2302      	movs	r3, #2
 8002778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fde0 	bl	8005344 <HAL_RCC_OscConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800278a:	f000 fcb9 	bl	8003100 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800278e:	230f      	movs	r3, #15
 8002790:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002792:	2302      	movs	r3, #2
 8002794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800279a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800279e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f002 fa4e 	bl	8004c4c <HAL_RCC_ClockConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80027b6:	f000 fca3 	bl	8003100 <Error_Handler>
  }
}
 80027ba:	bf00      	nop
 80027bc:	3750      	adds	r7, #80	@ 0x50
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000

080027cc <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	@ 0x30
 80027d0:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f019 f83c 	bl	801b858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80027e8:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027ea:	4a23      	ldr	r2, [pc, #140]	@ (8002878 <MX_TIM1_Init+0xac>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ee:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <MX_TIM1_Init+0xa8>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <MX_TIM1_Init+0xa8>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <MX_TIM1_Init+0xa8>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002814:	2303      	movs	r3, #3
 8002816:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <MX_TIM1_Init+0xa8>)
 8002840:	f003 fa00 	bl	8005c44 <HAL_TIM_Encoder_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800284a:	f000 fc59 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	@ (8002874 <MX_TIM1_Init+0xa8>)
 800285c:	f004 f8de 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002866:	f000 fc4b 	bl	8003100 <Error_Handler>
  }

}
 800286a:	bf00      	nop
 800286c:	3730      	adds	r7, #48	@ 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20008074 	.word	0x20008074
 8002878:	40010000 	.word	0x40010000

0800287c <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08e      	sub	sp, #56	@ 0x38
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002890:	f107 0320 	add.w	r3, r7, #32
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
 80028a8:	615a      	str	r2, [r3, #20]
 80028aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ac:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 80028b4:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028b6:	2208      	movs	r2, #8
 80028b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80028c0:	4b38      	ldr	r3, [pc, #224]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028c2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80028c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028ce:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028d0:	2280      	movs	r2, #128	@ 0x80
 80028d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028d4:	4833      	ldr	r0, [pc, #204]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028d6:	f002 ffd3 	bl	8005880 <HAL_TIM_Base_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80028e0:	f000 fc0e 	bl	8003100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ee:	4619      	mov	r1, r3
 80028f0:	482c      	ldr	r0, [pc, #176]	@ (80029a4 <MX_TIM2_Init+0x128>)
 80028f2:	f003 fc8d 	bl	8006210 <HAL_TIM_ConfigClockSource>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80028fc:	f000 fc00 	bl	8003100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002900:	4828      	ldr	r0, [pc, #160]	@ (80029a4 <MX_TIM2_Init+0x128>)
 8002902:	f003 f87d 	bl	8005a00 <HAL_TIM_PWM_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800290c:	f000 fbf8 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002918:	f107 0320 	add.w	r3, r7, #32
 800291c:	4619      	mov	r1, r3
 800291e:	4821      	ldr	r0, [pc, #132]	@ (80029a4 <MX_TIM2_Init+0x128>)
 8002920:	f004 f87c 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800292a:	f000 fbe9 	bl	8003100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800292e:	2360      	movs	r3, #96	@ 0x60
 8002930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	4817      	ldr	r0, [pc, #92]	@ (80029a4 <MX_TIM2_Init+0x128>)
 8002946:	f003 fba1 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002950:	f000 fbd6 	bl	8003100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2204      	movs	r2, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4812      	ldr	r0, [pc, #72]	@ (80029a4 <MX_TIM2_Init+0x128>)
 800295c:	f003 fb96 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002966:	f000 fbcb 	bl	8003100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2208      	movs	r2, #8
 800296e:	4619      	mov	r1, r3
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <MX_TIM2_Init+0x128>)
 8002972:	f003 fb8b 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800297c:	f000 fbc0 	bl	8003100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	220c      	movs	r2, #12
 8002984:	4619      	mov	r1, r3
 8002986:	4807      	ldr	r0, [pc, #28]	@ (80029a4 <MX_TIM2_Init+0x128>)
 8002988:	f003 fb80 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002992:	f000 fbb5 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002996:	4803      	ldr	r0, [pc, #12]	@ (80029a4 <MX_TIM2_Init+0x128>)
 8002998:	f000 fec6 	bl	8003728 <HAL_TIM_MspPostInit>

}
 800299c:	bf00      	nop
 800299e:	3738      	adds	r7, #56	@ 0x38
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200080bc 	.word	0x200080bc

080029a8 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2224      	movs	r2, #36	@ 0x24
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f018 ff4e 	bl	801b858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80029c4:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 80029c6:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <MX_TIM3_Init+0xa4>)
 80029c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 80029d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ea:	2303      	movs	r3, #3
 80029ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4619      	mov	r1, r3
 8002a14:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 8002a16:	f003 f915 	bl	8005c44 <HAL_TIM_Encoder_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a20:	f000 fb6e 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <MX_TIM3_Init+0xa0>)
 8002a32:	f003 fff3 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a3c:	f000 fb60 	bl	8003100 <Error_Handler>
  }
}
 8002a40:	bf00      	nop
 8002a42:	3730      	adds	r7, #48	@ 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20008104 	.word	0x20008104
 8002a4c:	40000400 	.word	0x40000400

08002a50 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	@ 0x30
 8002a54:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	2224      	movs	r2, #36	@ 0x24
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f018 fefa 	bl	801b858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002a6e:	4a21      	ldr	r2, [pc, #132]	@ (8002af4 <MX_TIM4_Init+0xa4>)
 8002a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002a80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a92:	2303      	movs	r3, #3
 8002a94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4619      	mov	r1, r3
 8002abc:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002abe:	f003 f8c1 	bl	8005c44 <HAL_TIM_Encoder_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ac8:	f000 fb1a 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <MX_TIM4_Init+0xa0>)
 8002ada:	f003 ff9f 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ae4:	f000 fb0c 	bl	8003100 <Error_Handler>
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3730      	adds	r7, #48	@ 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000814c 	.word	0x2000814c
 8002af4:	40000800 	.word	0x40000800

08002af8 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afe:	463b      	mov	r3, r7
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]


  htim6.Instance = TIM6;
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b08:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <MX_TIM6_Init+0x68>)
 8002b0a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b0e:	2253      	movs	r2, #83	@ 0x53
 8002b10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002b18:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b20:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b26:	480d      	ldr	r0, [pc, #52]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b28:	f002 feaa 	bl	8005880 <HAL_TIM_Base_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002b32:	f000 fae5 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4619      	mov	r1, r3
 8002b42:	4806      	ldr	r0, [pc, #24]	@ (8002b5c <MX_TIM6_Init+0x64>)
 8002b44:	f003 ff6a 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002b4e:	f000 fad7 	bl	8003100 <Error_Handler>
  }

}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20008194 	.word	0x20008194
 8002b60:	40001000 	.word	0x40001000

08002b64 <MX_TIM8_Init>:

static void MX_TIM8_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	@ 0x30
 8002b68:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	2224      	movs	r2, #36	@ 0x24
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f018 fe70 	bl	801b858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002b82:	4a23      	ldr	r2, [pc, #140]	@ (8002c10 <MX_TIM8_Init+0xac>)
 8002b84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b86:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002b94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bac:	2303      	movs	r3, #3
 8002bae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	480d      	ldr	r0, [pc, #52]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002bd8:	f003 f834 	bl	8005c44 <HAL_TIM_Encoder_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002be2:	f000 fa8d 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4806      	ldr	r0, [pc, #24]	@ (8002c0c <MX_TIM8_Init+0xa8>)
 8002bf4:	f003 ff12 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002bfe:	f000 fa7f 	bl	8003100 <Error_Handler>
  }
}
 8002c02:	bf00      	nop
 8002c04:	3730      	adds	r7, #48	@ 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200081dc 	.word	0x200081dc
 8002c10:	40010400 	.word	0x40010400

08002c14 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <MX_USART2_UART_Init+0x50>)
 8002c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c20:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_USART2_UART_Init+0x4c>)
 8002c4c:	f003 ff76 	bl	8006b3c <HAL_UART_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c56:	f000 fa53 	bl	8003100 <Error_Handler>
  }


}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20008224 	.word	0x20008224
 8002c64:	40004400 	.word	0x40004400

08002c68 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0

  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <MX_DMA_Init+0x78>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce0 <MX_DMA_Init+0x78>)
 8002c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <MX_DMA_Init+0x78>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <MX_DMA_Init+0x78>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <MX_DMA_Init+0x78>)
 8002c94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <MX_DMA_Init+0x78>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]


  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2105      	movs	r1, #5
 8002caa:	2010      	movs	r0, #16
 8002cac:	f001 f9f4 	bl	8004098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cb0:	2010      	movs	r0, #16
 8002cb2:	f001 fa0d 	bl	80040d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2105      	movs	r1, #5
 8002cba:	2011      	movs	r0, #17
 8002cbc:	f001 f9ec 	bl	8004098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002cc0:	2011      	movs	r0, #17
 8002cc2:	f001 fa05 	bl	80040d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2105      	movs	r1, #5
 8002cca:	2038      	movs	r0, #56	@ 0x38
 8002ccc:	f001 f9e4 	bl	8004098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cd0:	2038      	movs	r0, #56	@ 0x38
 8002cd2:	f001 f9fd 	bl	80040d0 <HAL_NVIC_EnableIRQ>

}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	4a3e      	ldr	r2, [pc, #248]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	4a37      	ldr	r2, [pc, #220]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d26:	4b35      	ldr	r3, [pc, #212]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	4a30      	ldr	r2, [pc, #192]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <MX_GPIO_Init+0x118>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f640 413f 	movw	r1, #3135	@ 0xc3f
 8002d70:	4823      	ldr	r0, [pc, #140]	@ (8002e00 <MX_GPIO_Init+0x11c>)
 8002d72:	f001 ff51 	bl	8004c18 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);


  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002d7c:	4821      	ldr	r0, [pc, #132]	@ (8002e04 <MX_GPIO_Init+0x120>)
 8002d7e:	f001 ff4b 	bl	8004c18 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d88:	481d      	ldr	r0, [pc, #116]	@ (8002e00 <MX_GPIO_Init+0x11c>)
 8002d8a:	f001 ff45 	bl	8004c18 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d94:	481c      	ldr	r0, [pc, #112]	@ (8002e08 <MX_GPIO_Init+0x124>)
 8002d96:	f001 ff3f 	bl	8004c18 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 8002d9a:	f640 733f 	movw	r3, #3903	@ 0xf3f
 8002d9e:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da0:	2301      	movs	r3, #1
 8002da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4619      	mov	r1, r3
 8002db2:	4813      	ldr	r0, [pc, #76]	@ (8002e00 <MX_GPIO_Init+0x11c>)
 8002db4:	f001 fd9c 	bl	80048f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 8002db8:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <MX_GPIO_Init+0x120>)
 8002dd2:	f001 fd8d 	bl	80048f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 8002dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	@ (8002e08 <MX_GPIO_Init+0x124>)
 8002df0:	f001 fd7e 	bl	80048f0 <HAL_GPIO_Init>

}
 8002df4:	bf00      	nop
 8002df6:	3728      	adds	r7, #40	@ 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020800 	.word	0x40020800
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020000 	.word	0x40020000

08002e0c <odom_timer_cb>:
 * Keeps callbacks lightweight — avoids blocking the micro-ROS executor.
 *
 * --------------------------------------------------------------------------------------
 */
void odom_timer_cb(rcl_timer_t * timer, int64_t last_call_time)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	e9c7 2300 	strd	r2, r3, [r7]
    (void) last_call_time;      // Prevent unused variable warning

    if (timer == NULL)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <odom_timer_cb+0x18>
        return;                 // Safety check: avoid null pointer crash

    compute_and_publish_odometry();   // Run the actual odometry computation (user code)
 8002e1e:	f7fe fd47 	bl	80018b0 <compute_and_publish_odometry>
 8002e22:	e000      	b.n	8002e26 <odom_timer_cb+0x1a>
        return;                 // Safety check: avoid null pointer crash
 8002e24:	bf00      	nop
}
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <twist_callback>:

// --- Callback ---
void twist_callback(const void * msgin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	@ 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *) msgin;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24

    // Extract velocity commands (SI units)
    double vx = msg->linear.x;   // forward/backward [m/s]
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double vy = msg->linear.y;   // lateral [m/s]
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double wz = msg->angular.z;  // rotation [rad/s]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002e52:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((osKernelGetTickCount() - last_cmd_tick) > CMD_TIMEOUT_MS) {
    	Mecanum_Control(0.0f, 0.0f, 0.0f);  // stop robot
	}

     */
    Mecanum_Control(vx, vy, wz);
 8002e56:	ed97 2b02 	vldr	d2, [r7, #8]
 8002e5a:	ed97 1b04 	vldr	d1, [r7, #16]
 8002e5e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002e62:	f7fe fa41 	bl	80012e8 <Mecanum_Control>
}
 8002e66:	bf00      	nop
 8002e68:	3728      	adds	r7, #40	@ 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <StartDefaultTask>:
 *
 * ======================================================================================
 */

void StartDefaultTask(void *argument)
{
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	b096      	sub	sp, #88	@ 0x58
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	61f8      	str	r0, [r7, #28]

	/*
	  *  Initialize peripherals, motor controllers, encoders, and sensors.
	  *  This part is specific to the robot platform.
	  */
	  nexus_bringup();  // Custom board-level init
 8002e78:	f7ff fbdc 	bl	8002634 <nexus_bringup>
	 *  This binds micro-ROS to a communication channel (here UART2).
	 *  The transport functions were defined earlier in transport_cubemx.c.
	 *
	 *    Change &huart2 to &huartX if you use another UART.
	 */
	  rmw_uros_set_custom_transport(
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa8 <StartDefaultTask+0x138>)
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <StartDefaultTask+0x13c>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <StartDefaultTask+0x140>)
 8002e86:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb4 <StartDefaultTask+0x144>)
 8002e88:	494b      	ldr	r1, [pc, #300]	@ (8002fb8 <StartDefaultTask+0x148>)
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f00a fe84 	bl	800db98 <rmw_uros_set_custom_transport>

	  /*
	  *  Replaces default malloc/free with thread-safe versions
	  *  that use FreeRTOS heap functions or user static pool.
	  */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4618      	mov	r0, r3
 8002e96:	f00a fda5 	bl	800d9e4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 8002e9a:	4b48      	ldr	r3, [pc, #288]	@ (8002fbc <StartDefaultTask+0x14c>)
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 8002e9e:	4b48      	ldr	r3, [pc, #288]	@ (8002fc0 <StartDefaultTask+0x150>)
 8002ea0:	633b      	str	r3, [r7, #48]	@ 0x30
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 8002ea2:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <StartDefaultTask+0x154>)
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8002ea6:	4b48      	ldr	r3, [pc, #288]	@ (8002fc8 <StartDefaultTask+0x158>)
 8002ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
	  rcl_ret_t rc1 =  rcutils_set_default_allocator(&freeRTOS_allocator);
 8002eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f00a fdb4 	bl	800da1c <rcutils_set_default_allocator>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
	 /*
	  *  micro-ROS communicates over XRCE-DDS; the Agent must be running
	  *  on the PC (typically `ros2 run micro_ros_agent micro_ros_agent serial ...`)
	  *  before this ping succeeds.
	  */
	  for (int i = 0; i < 50; ++i) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebc:	e00c      	b.n	8002ed8 <StartDefaultTask+0x68>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2064      	movs	r0, #100	@ 0x64
 8002ec2:	f00a fe7f 	bl	800dbc4 <rmw_uros_ping_agent>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <StartDefaultTask+0x70>
	    osDelay(100);
 8002ecc:	2064      	movs	r0, #100	@ 0x64
 8002ece:	f005 f9e3 	bl	8008298 <osDelay>
	  for (int i = 0; i < 50; ++i) {
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eda:	2b31      	cmp	r3, #49	@ 0x31
 8002edc:	ddef      	ble.n	8002ebe <StartDefaultTask+0x4e>
 8002ede:	e000      	b.n	8002ee2 <StartDefaultTask+0x72>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8002ee0:	bf00      	nop
	  */

	  /*
	  *  These are the core micro-ROS entities for the MCU.
	  */
	  allocator = rcl_get_default_allocator();			 // Retrieve active allocator
 8002ee2:	4c3a      	ldr	r4, [pc, #232]	@ (8002fcc <StartDefaultTask+0x15c>)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f00a fd8a 	bl	800da00 <rcutils_get_default_allocator>
 8002eec:	4625      	mov	r5, r4
 8002eee:	463c      	mov	r4, r7
 8002ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	602b      	str	r3, [r5, #0]
	  rclc_support_init(&support, 0, NULL, &allocator);	 // Init context with default args
 8002ef8:	4b34      	ldr	r3, [pc, #208]	@ (8002fcc <StartDefaultTask+0x15c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	4834      	ldr	r0, [pc, #208]	@ (8002fd0 <StartDefaultTask+0x160>)
 8002f00:	f00a fc48 	bl	800d794 <rclc_support_init>

	  rcl_node_t node_base_controller;					 // This MCU node		  rcl_node_t * node,

	  rclc_node_init_default(
 8002f04:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f08:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <StartDefaultTask+0x160>)
 8002f0a:	4a32      	ldr	r2, [pc, #200]	@ (8002fd4 <StartDefaultTask+0x164>)
 8002f0c:	4932      	ldr	r1, [pc, #200]	@ (8002fd8 <StartDefaultTask+0x168>)
 8002f0e:	f00a fc8b 	bl	800d828 <rclc_node_init_default>
			  &node_base_controller,		 						//  param1 => Node
			  "base_controller",									//  param2 => Name
			  "",													//  param3 => Namespace
			  &support);											//  param4 => support to init the node

	  (void) rmw_uros_sync_session(1000);							// Synchronize session timing
 8002f12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f16:	f00b f865 	bl	800dfe4 <rmw_uros_sync_session>
	  */

	 /*
	  *  Publishes to the `/odom` topic using the standard nav_msgs/Odometry type.
	  */
	  rcl_ret_t rc7 = rclc_publisher_init_default(
 8002f1a:	f009 fc4f 	bl	800c7bc <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002f24:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <StartDefaultTask+0x16c>)
 8002f26:	482e      	ldr	r0, [pc, #184]	@ (8002fe0 <StartDefaultTask+0x170>)
 8002f28:	f00a fcba 	bl	800d8a0 <rclc_publisher_init_default>
 8002f2c:	6478      	str	r0, [r7, #68]	@ 0x44

	  if (rc7 != RCL_RET_OK) {
	     // Handle publisher init error
	  }

	  rcl_ret_t rc8 = rclc_subscription_init_default(
 8002f2e:	f007 fe83 	bl	800ac38 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002f32:	4602      	mov	r2, r0
 8002f34:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002f38:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <StartDefaultTask+0x174>)
 8002f3a:	482b      	ldr	r0, [pc, #172]	@ (8002fe8 <StartDefaultTask+0x178>)
 8002f3c:	f00a fce4 	bl	800d908 <rclc_subscription_init_default>
 8002f40:	6438      	str	r0, [r7, #64]	@ 0x40

	  if (rc8 != RCL_RET_OK) {
	  	 // Handle publisher init error
	  }

	  debug_init(&node_base_controller);
 8002f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe ffb6 	bl	8001eb8 <debug_init>

	 /*
	  *  The executor manages all callbacks (timers, subscriptions, etc.).
	  *  Each timer is a periodic callback.
	  */
	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <StartDefaultTask+0x15c>)
 8002f4e:	2204      	movs	r2, #4
 8002f50:	491f      	ldr	r1, [pc, #124]	@ (8002fd0 <StartDefaultTask+0x160>)
 8002f52:	4826      	ldr	r0, [pc, #152]	@ (8002fec <StartDefaultTask+0x17c>)
 8002f54:	f00a f9a4 	bl	800d2a0 <rclc_executor_init>

	  rcl_timer_t timer_odom;

	  // Here, we set up odometry @ 100 Hz.
	  rclc_timer_init_default2(
 8002f58:	f107 0020 	add.w	r0, r7, #32
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <StartDefaultTask+0x180>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <StartDefaultTask+0x184>)
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	4919      	ldr	r1, [pc, #100]	@ (8002fd0 <StartDefaultTask+0x160>)
 8002f6c:	f00a fd00 	bl	800d970 <rclc_timer_init_default2>
			  &support,					// Ensures entities share the same ROS context, clock, and memory and Holds micro-ROS runtime context and allocator
			  RCL_MS_TO_NS(10),			// callback period = 10 ms
			  odom_timer_cb,			// callback function
			  true);	 				// autostart = true

	  rclc_executor_add_timer(&executor, &timer_odom);
 8002f70:	f107 0320 	add.w	r3, r7, #32
 8002f74:	4619      	mov	r1, r3
 8002f76:	481d      	ldr	r0, [pc, #116]	@ (8002fec <StartDefaultTask+0x17c>)
 8002f78:	f00a fa32 	bl	800d3e0 <rclc_executor_add_timer>

	  rclc_executor_add_subscription(&executor, &twist_sub, &twist_msg, &twist_callback, ON_NEW_DATA);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <StartDefaultTask+0x188>)
 8002f82:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <StartDefaultTask+0x18c>)
 8002f84:	4918      	ldr	r1, [pc, #96]	@ (8002fe8 <StartDefaultTask+0x178>)
 8002f86:	4819      	ldr	r0, [pc, #100]	@ (8002fec <StartDefaultTask+0x17c>)
 8002f88:	f00a f9f6 	bl	800d378 <rclc_executor_add_subscription>
	 /*
	  *  Non-blocking spin_some() allows other RTOS tasks to run concurrently.
	  *  You can replace with rclc_executor_spin() for blocking loop.
	  */
	  for (;;) {
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));		// check callbacks every 5 ms
 8002f8c:	a304      	add	r3, pc, #16	@ (adr r3, 8002fa0 <StartDefaultTask+0x130>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	4816      	ldr	r0, [pc, #88]	@ (8002fec <StartDefaultTask+0x17c>)
 8002f94:	f00a fa98 	bl	800d4c8 <rclc_executor_spin_some>
 8002f98:	e7f8      	b.n	8002f8c <StartDefaultTask+0x11c>
 8002f9a:	bf00      	nop
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	004c4b40 	.word	0x004c4b40
 8002fa4:	00000000 	.word	0x00000000
 8002fa8:	0800258d 	.word	0x0800258d
 8002fac:	08002525 	.word	0x08002525
 8002fb0:	08002505 	.word	0x08002505
 8002fb4:	080024d9 	.word	0x080024d9
 8002fb8:	20008224 	.word	0x20008224
 8002fbc:	0800310d 	.word	0x0800310d
 8002fc0:	08003151 	.word	0x08003151
 8002fc4:	08003189 	.word	0x08003189
 8002fc8:	080031f5 	.word	0x080031f5
 8002fcc:	20008330 	.word	0x20008330
 8002fd0:	20008344 	.word	0x20008344
 8002fd4:	08020958 	.word	0x08020958
 8002fd8:	0802095c 	.word	0x0802095c
 8002fdc:	0802096c 	.word	0x0802096c
 8002fe0:	20003940 	.word	0x20003940
 8002fe4:	08020974 	.word	0x08020974
 8002fe8:	200038f4 	.word	0x200038f4
 8002fec:	20008378 	.word	0x20008378
 8002ff0:	08002e0d 	.word	0x08002e0d
 8002ff4:	00989680 	.word	0x00989680
 8002ff8:	08002e2d 	.word	0x08002e2d
 8002ffc:	200038f8 	.word	0x200038f8

08003000 <HAL_TIM_PeriodElapsedCallback>:
	    //osDelay(5);												// optional if CPU load is high
	  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a32      	ldr	r2, [pc, #200]	@ (80030d8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d156      	bne.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0xc0>
		currCount[0] = __HAL_TIM_GET_COUNTER(&htim4);
 8003012:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	4a31      	ldr	r2, [pc, #196]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800301a:	6013      	str	r3, [r2, #0]
		currCount[1] = __HAL_TIM_GET_COUNTER(&htim1);
 800301c:	4b31      	ldr	r3, [pc, #196]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	4a2f      	ldr	r2, [pc, #188]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003024:	6053      	str	r3, [r2, #4]
		currCount[2] = __HAL_TIM_GET_COUNTER(&htim3);
 8003026:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	4a2c      	ldr	r2, [pc, #176]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800302e:	6093      	str	r3, [r2, #8]
		currCount[3] = __HAL_TIM_GET_COUNTER(&htim8);
 8003030:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003038:	60d3      	str	r3, [r2, #12]

		for (int i=0; i<4; i++) {
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e038      	b.n	80030b2 <HAL_TIM_PeriodElapsedCallback+0xb2>

		  deltaEncoder[i] = (int32_t) (currCount[i] - pastCount[i]);
 8003040:	4a27      	ldr	r2, [pc, #156]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	4929      	ldr	r1, [pc, #164]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	4619      	mov	r1, r3
 8003054:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		  if (deltaEncoder[i] > 32767)        deltaEncoder[i] -= (int16_t) 65536;
 800305c:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003068:	db08      	blt.n	800307c <HAL_TIM_PeriodElapsedCallback+0x7c>
 800306a:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003072:	4920      	ldr	r1, [pc, #128]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800307a:	e00e      	b.n	800309a <HAL_TIM_PeriodElapsedCallback+0x9a>
		  else if (deltaEncoder[i] < -32768)  deltaEncoder[i] += (int16_t) 65536;
 800307c:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003088:	da07      	bge.n	800309a <HAL_TIM_PeriodElapsedCallback+0x9a>
 800308a:	4a1a      	ldr	r2, [pc, #104]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003092:	4918      	ldr	r1, [pc, #96]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  pastCount[i] = (int32_t)currCount[i];
 800309a:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i=0; i<4; i++) {
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	ddc3      	ble.n	8003040 <HAL_TIM_PeriodElapsedCallback+0x40>

	  }
		encUpdateFlag = 1;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == TIM7)
  {
    HAL_IncTick();
  }

}
 80030be:	e006      	b.n	80030ce <HAL_TIM_PeriodElapsedCallback+0xce>
	else if (htim->Instance == TIM7)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_PeriodElapsedCallback+0xce>
    HAL_IncTick();
 80030ca:	f000 ff0d 	bl	8003ee8 <HAL_IncTick>
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40001000 	.word	0x40001000
 80030dc:	2000814c 	.word	0x2000814c
 80030e0:	20008418 	.word	0x20008418
 80030e4:	20008074 	.word	0x20008074
 80030e8:	20008104 	.word	0x20008104
 80030ec:	200081dc 	.word	0x200081dc
 80030f0:	20008428 	.word	0x20008428
 80030f4:	20008408 	.word	0x20008408
 80030f8:	20008438 	.word	0x20008438
 80030fc:	40001400 	.word	0x40001400

08003100 <Error_Handler>:


void Error_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003104:	b672      	cpsid	i
}
 8003106:	bf00      	nop

  __disable_irq();
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <Error_Handler+0x8>

0800310c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <microros_allocate+0x3c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <microros_allocate+0x3c>)
 8003124:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <microros_allocate+0x40>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4b06      	ldr	r3, [pc, #24]	@ (800314c <microros_allocate+0x40>)
 8003134:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe ff7e 	bl	8002038 <pvPortMallocMicroROS>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000843c 	.word	0x2000843c
 800314c:	20008440 	.word	0x20008440

08003150 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff f88d 	bl	8002280 <getBlockSize>
 8003166:	4603      	mov	r3, r0
 8003168:	4a06      	ldr	r2, [pc, #24]	@ (8003184 <microros_deallocate+0x34>)
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	461a      	mov	r2, r3
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <microros_deallocate+0x34>)
 8003172:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff f827 	bl	80021c8 <vPortFreeMicroROS>
  }
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20008440 	.word	0x20008440

08003188 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003194:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <microros_reallocate+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4413      	add	r3, r2
 800319e:	461a      	mov	r2, r3
 80031a0:	4b12      	ldr	r3, [pc, #72]	@ (80031ec <microros_reallocate+0x64>)
 80031a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <microros_reallocate+0x68>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4413      	add	r3, r2
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <microros_reallocate+0x68>)
 80031b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031ba:	68b8      	ldr	r0, [r7, #8]
 80031bc:	f7fe ff3c 	bl	8002038 <pvPortMallocMicroROS>
 80031c0:	4603      	mov	r3, r0
 80031c2:	e00e      	b.n	80031e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff f85b 	bl	8002280 <getBlockSize>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a08      	ldr	r2, [pc, #32]	@ (80031f0 <microros_reallocate+0x68>)
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <microros_reallocate+0x68>)
 80031d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff f86e 	bl	80022bc <pvPortReallocMicroROS>
 80031e0:	4603      	mov	r3, r0
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000843c 	.word	0x2000843c
 80031f0:	20008440 	.word	0x20008440

080031f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	4a0c      	ldr	r2, [pc, #48]	@ (800323c <microros_zero_allocate+0x48>)
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4413      	add	r3, r2
 800320e:	461a      	mov	r2, r3
 8003210:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <microros_zero_allocate+0x48>)
 8003212:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	4a08      	ldr	r2, [pc, #32]	@ (8003240 <microros_zero_allocate+0x4c>)
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	461a      	mov	r2, r3
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <microros_zero_allocate+0x4c>)
 8003226:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff f873 	bl	8002316 <pvPortCallocMicroROS>
 8003230:	4603      	mov	r3, r0
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2000843c 	.word	0x2000843c
 8003240:	20008440 	.word	0x20008440
 8003244:	00000000 	.word	0x00000000

08003248 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800325a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800325e:	a320      	add	r3, pc, #128	@ (adr r3, 80032e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd fd20 	bl	8000ca8 <__aeabi_ldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003276:	a31a      	add	r3, pc, #104	@ (adr r3, 80032e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd fd14 	bl	8000ca8 <__aeabi_ldivmod>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da20      	bge.n	80032ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a11      	ldr	r2, [pc, #68]	@ (80032d8 <UTILS_NanosecondsToTimespec+0x90>)
 8003292:	fb82 1203 	smull	r1, r2, r2, r3
 8003296:	1712      	asrs	r2, r2, #28
 8003298:	17db      	asrs	r3, r3, #31
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	17c8      	asrs	r0, r1, #31
 80032aa:	460c      	mov	r4, r1
 80032ac:	4605      	mov	r5, r0
 80032ae:	ebb2 0804 	subs.w	r8, r2, r4
 80032b2:	eb63 0905 	sbc.w	r9, r3, r5
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4906      	ldr	r1, [pc, #24]	@ (80032dc <UTILS_NanosecondsToTimespec+0x94>)
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	609a      	str	r2, [r3, #8]
    }
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032d8:	44b82fa1 	.word	0x44b82fa1
 80032dc:	3b9aca00 	.word	0x3b9aca00
 80032e0:	3b9aca00 	.word	0x3b9aca00
 80032e4:	00000000 	.word	0x00000000

080032e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b08e      	sub	sp, #56	@ 0x38
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80032f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80032f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80032f8:	2300      	movs	r3, #0
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800330a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800330e:	4618      	mov	r0, r3
 8003310:	f006 fa8e 	bl	8009830 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	17da      	asrs	r2, r3, #31
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	000b      	movs	r3, r1
 8003328:	2200      	movs	r2, #0
 800332a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	2200      	movs	r2, #0
 8003332:	461c      	mov	r4, r3
 8003334:	4615      	mov	r5, r2
 8003336:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800333a:	1911      	adds	r1, r2, r4
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	416b      	adcs	r3, r5
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003346:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800334a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	f04f 0500 	mov.w	r5, #0
 800335a:	015d      	lsls	r5, r3, #5
 800335c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003360:	0154      	lsls	r4, r2, #5
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	ebb2 0800 	subs.w	r8, r2, r0
 800336a:	eb63 0901 	sbc.w	r9, r3, r1
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800337a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800337e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003382:	4690      	mov	r8, r2
 8003384:	4699      	mov	r9, r3
 8003386:	eb18 0a00 	adds.w	sl, r8, r0
 800338a:	eb49 0b01 	adc.w	fp, r9, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800339a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800339e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a2:	ebb2 040a 	subs.w	r4, r2, sl
 80033a6:	603c      	str	r4, [r7, #0]
 80033a8:	eb63 030b 	sbc.w	r3, r3, fp
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4623      	mov	r3, r4
 80033b4:	181b      	adds	r3, r3, r0
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	462b      	mov	r3, r5
 80033ba:	eb41 0303 	adc.w	r3, r1, r3
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c6:	f7ff ff3f 	bl	8003248 <UTILS_NanosecondsToTimespec>

    return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	3738      	adds	r7, #56	@ 0x38
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	4b12      	ldr	r3, [pc, #72]	@ (800342c <HAL_MspInit+0x54>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	4a11      	ldr	r2, [pc, #68]	@ (800342c <HAL_MspInit+0x54>)
 80033e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_MspInit+0x54>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_MspInit+0x54>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <HAL_MspInit+0x54>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	@ 0x40
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_MspInit+0x54>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	210f      	movs	r1, #15
 800341a:	f06f 0001 	mvn.w	r0, #1
 800341e:	f000 fe3b 	bl	8004098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b090      	sub	sp, #64	@ 0x40
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a8c      	ldr	r2, [pc, #560]	@ (8003680 <HAL_TIM_Encoder_MspInit+0x250>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d14d      	bne.n	80034ee <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003456:	4b8b      	ldr	r3, [pc, #556]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a8a      	ldr	r2, [pc, #552]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b88      	ldr	r3, [pc, #544]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
 8003472:	4b84      	ldr	r3, [pc, #528]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	4a83      	ldr	r2, [pc, #524]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6313      	str	r3, [r2, #48]	@ 0x30
 800347e:	4b81      	ldr	r3, [pc, #516]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 800348a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2300      	movs	r3, #0
 800349a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800349c:	2301      	movs	r3, #1
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034a4:	4619      	mov	r1, r3
 80034a6:	4878      	ldr	r0, [pc, #480]	@ (8003688 <HAL_TIM_Encoder_MspInit+0x258>)
 80034a8:	f001 fa22 	bl	80048f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2105      	movs	r1, #5
 80034b0:	2018      	movs	r0, #24
 80034b2:	f000 fdf1 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80034b6:	2018      	movs	r0, #24
 80034b8:	f000 fe0a 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	2105      	movs	r1, #5
 80034c0:	2019      	movs	r0, #25
 80034c2:	f000 fde9 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034c6:	2019      	movs	r0, #25
 80034c8:	f000 fe02 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2105      	movs	r1, #5
 80034d0:	201a      	movs	r0, #26
 80034d2:	f000 fde1 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80034d6:	201a      	movs	r0, #26
 80034d8:	f000 fdfa 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	2105      	movs	r1, #5
 80034e0:	201b      	movs	r0, #27
 80034e2:	f000 fdd9 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80034e6:	201b      	movs	r0, #27
 80034e8:	f000 fdf2 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80034ec:	e0c4      	b.n	8003678 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a66      	ldr	r2, [pc, #408]	@ (800368c <HAL_TIM_Encoder_MspInit+0x25c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d134      	bne.n	8003562 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	4a60      	ldr	r2, [pc, #384]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003502:	f043 0302 	orr.w	r3, r3, #2
 8003506:	6413      	str	r3, [r2, #64]	@ 0x40
 8003508:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	4b5a      	ldr	r3, [pc, #360]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	4a59      	ldr	r2, [pc, #356]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6313      	str	r3, [r2, #48]	@ 0x30
 8003524:	4b57      	ldr	r3, [pc, #348]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 8003530:	23c0      	movs	r3, #192	@ 0xc0
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	2300      	movs	r3, #0
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003540:	2302      	movs	r3, #2
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003548:	4619      	mov	r1, r3
 800354a:	484f      	ldr	r0, [pc, #316]	@ (8003688 <HAL_TIM_Encoder_MspInit+0x258>)
 800354c:	f001 f9d0 	bl	80048f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	2105      	movs	r1, #5
 8003554:	201d      	movs	r0, #29
 8003556:	f000 fd9f 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800355a:	201d      	movs	r0, #29
 800355c:	f000 fdb8 	bl	80040d0 <HAL_NVIC_EnableIRQ>
}
 8003560:	e08a      	b.n	8003678 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4a      	ldr	r2, [pc, #296]	@ (8003690 <HAL_TIM_Encoder_MspInit+0x260>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d134      	bne.n	80035d6 <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	4b44      	ldr	r3, [pc, #272]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	4a43      	ldr	r2, [pc, #268]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6413      	str	r3, [r2, #64]	@ 0x40
 800357c:	4b41      	ldr	r3, [pc, #260]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	4b3d      	ldr	r3, [pc, #244]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	4a3c      	ldr	r2, [pc, #240]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	6313      	str	r3, [r2, #48]	@ 0x30
 8003598:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 80035a4:	23c0      	movs	r3, #192	@ 0xc0
 80035a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035b4:	2302      	movs	r3, #2
 80035b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035bc:	4619      	mov	r1, r3
 80035be:	4835      	ldr	r0, [pc, #212]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x264>)
 80035c0:	f001 f996 	bl	80048f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2105      	movs	r1, #5
 80035c8:	201e      	movs	r0, #30
 80035ca:	f000 fd65 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035ce:	201e      	movs	r0, #30
 80035d0:	f000 fd7e 	bl	80040d0 <HAL_NVIC_EnableIRQ>
}
 80035d4:	e050      	b.n	8003678 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2f      	ldr	r2, [pc, #188]	@ (8003698 <HAL_TIM_Encoder_MspInit+0x268>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d14b      	bne.n	8003678 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	4a26      	ldr	r2, [pc, #152]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f0:	4b24      	ldr	r3, [pc, #144]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	4b20      	ldr	r3, [pc, #128]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	4a1f      	ldr	r2, [pc, #124]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6313      	str	r3, [r2, #48]	@ 0x30
 800360c:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <HAL_TIM_Encoder_MspInit+0x254>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 8003618:	23c0      	movs	r3, #192	@ 0xc0
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003628:	2303      	movs	r3, #3
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003630:	4619      	mov	r1, r3
 8003632:	481a      	ldr	r0, [pc, #104]	@ (800369c <HAL_TIM_Encoder_MspInit+0x26c>)
 8003634:	f001 f95c 	bl	80048f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2105      	movs	r1, #5
 800363c:	202b      	movs	r0, #43	@ 0x2b
 800363e:	f000 fd2b 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003642:	202b      	movs	r0, #43	@ 0x2b
 8003644:	f000 fd44 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8003648:	2200      	movs	r2, #0
 800364a:	2105      	movs	r1, #5
 800364c:	202c      	movs	r0, #44	@ 0x2c
 800364e:	f000 fd23 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003652:	202c      	movs	r0, #44	@ 0x2c
 8003654:	f000 fd3c 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2105      	movs	r1, #5
 800365c:	202d      	movs	r0, #45	@ 0x2d
 800365e:	f000 fd1b 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003662:	202d      	movs	r0, #45	@ 0x2d
 8003664:	f000 fd34 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2105      	movs	r1, #5
 800366c:	202e      	movs	r0, #46	@ 0x2e
 800366e:	f000 fd13 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003672:	202e      	movs	r0, #46	@ 0x2e
 8003674:	f000 fd2c 	bl	80040d0 <HAL_NVIC_EnableIRQ>
}
 8003678:	bf00      	nop
 800367a:	3740      	adds	r7, #64	@ 0x40
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40010000 	.word	0x40010000
 8003684:	40023800 	.word	0x40023800
 8003688:	40020000 	.word	0x40020000
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40020400 	.word	0x40020400
 8003698:	40010400 	.word	0x40010400
 800369c:	40020800 	.word	0x40020800

080036a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d116      	bne.n	80036e0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_TIM_Base_MspInit+0x80>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_TIM_Base_MspInit+0x80>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c2:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <HAL_TIM_Base_MspInit+0x80>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2105      	movs	r1, #5
 80036d2:	201c      	movs	r0, #28
 80036d4:	f000 fce0 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d8:	201c      	movs	r0, #28
 80036da:	f000 fcf9 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80036de:	e01a      	b.n	8003716 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003724 <HAL_TIM_Base_MspInit+0x84>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d115      	bne.n	8003716 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <HAL_TIM_Base_MspInit+0x80>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003720 <HAL_TIM_Base_MspInit+0x80>)
 80036f4:	f043 0310 	orr.w	r3, r3, #16
 80036f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_TIM_Base_MspInit+0x80>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2105      	movs	r1, #5
 800370a:	2036      	movs	r0, #54	@ 0x36
 800370c:	f000 fcc4 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003710:	2036      	movs	r0, #54	@ 0x36
 8003712:	f000 fcdd 	bl	80040d0 <HAL_NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40001000 	.word	0x40001000

08003728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003748:	d13c      	bne.n	80037c4 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	4b1f      	ldr	r3, [pc, #124]	@ (80037cc <HAL_TIM_MspPostInit+0xa4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	4a1e      	ldr	r2, [pc, #120]	@ (80037cc <HAL_TIM_MspPostInit+0xa4>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6313      	str	r3, [r2, #48]	@ 0x30
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <HAL_TIM_MspPostInit+0xa4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b18      	ldr	r3, [pc, #96]	@ (80037cc <HAL_TIM_MspPostInit+0xa4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_TIM_MspPostInit+0xa4>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6313      	str	r3, [r2, #48]	@ 0x30
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <HAL_TIM_MspPostInit+0xa4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8003782:	2303      	movs	r3, #3
 8003784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003792:	2301      	movs	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	4619      	mov	r1, r3
 800379c:	480c      	ldr	r0, [pc, #48]	@ (80037d0 <HAL_TIM_MspPostInit+0xa8>)
 800379e:	f001 f8a7 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 80037a2:	f240 4304 	movw	r3, #1028	@ 0x404
 80037a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	2302      	movs	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4619      	mov	r1, r3
 80037be:	4805      	ldr	r0, [pc, #20]	@ (80037d4 <HAL_TIM_MspPostInit+0xac>)
 80037c0:	f001 f896 	bl	80048f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037c4:	bf00      	nop
 80037c6:	3728      	adds	r7, #40	@ 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40020000 	.word	0x40020000
 80037d4:	40020400 	.word	0x40020400

080037d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	@ 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 031c 	add.w	r3, r7, #28
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a79      	ldr	r2, [pc, #484]	@ (80039dc <HAL_UART_MspInit+0x204>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d153      	bne.n	80038a2 <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	4b78      	ldr	r3, [pc, #480]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	4a77      	ldr	r2, [pc, #476]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 8003804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003808:	6413      	str	r3, [r2, #64]	@ 0x40
 800380a:	4b75      	ldr	r3, [pc, #468]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	4b71      	ldr	r3, [pc, #452]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a70      	ldr	r2, [pc, #448]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6313      	str	r3, [r2, #48]	@ 0x30
 8003826:	4b6e      	ldr	r3, [pc, #440]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b6a      	ldr	r3, [pc, #424]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	4a69      	ldr	r2, [pc, #420]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	6313      	str	r3, [r2, #48]	@ 0x30
 8003842:	4b67      	ldr	r3, [pc, #412]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800384e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	2303      	movs	r3, #3
 800385e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003860:	2308      	movs	r3, #8
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	4619      	mov	r1, r3
 800386a:	485e      	ldr	r0, [pc, #376]	@ (80039e4 <HAL_UART_MspInit+0x20c>)
 800386c:	f001 f840 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003870:	2304      	movs	r3, #4
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003880:	2308      	movs	r3, #8
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	4619      	mov	r1, r3
 800388a:	4857      	ldr	r0, [pc, #348]	@ (80039e8 <HAL_UART_MspInit+0x210>)
 800388c:	f001 f830 	bl	80048f0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003890:	2200      	movs	r2, #0
 8003892:	2105      	movs	r1, #5
 8003894:	2035      	movs	r0, #53	@ 0x35
 8003896:	f000 fbff 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800389a:	2035      	movs	r0, #53	@ 0x35
 800389c:	f000 fc18 	bl	80040d0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80038a0:	e098      	b.n	80039d4 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a51      	ldr	r2, [pc, #324]	@ (80039ec <HAL_UART_MspInit+0x214>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f040 8093 	bne.w	80039d4 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b4b      	ldr	r3, [pc, #300]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	4a4a      	ldr	r2, [pc, #296]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038be:	4b48      	ldr	r3, [pc, #288]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b44      	ldr	r3, [pc, #272]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	4a43      	ldr	r2, [pc, #268]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_UART_MspInit+0x208>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038e6:	230c      	movs	r3, #12
 80038e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f2:	2303      	movs	r3, #3
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038f6:	2307      	movs	r3, #7
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fa:	f107 031c 	add.w	r3, r7, #28
 80038fe:	4619      	mov	r1, r3
 8003900:	483b      	ldr	r0, [pc, #236]	@ (80039f0 <HAL_UART_MspInit+0x218>)
 8003902:	f000 fff5 	bl	80048f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003906:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003908:	4a3b      	ldr	r2, [pc, #236]	@ (80039f8 <HAL_UART_MspInit+0x220>)
 800390a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800390c:	4b39      	ldr	r3, [pc, #228]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 800390e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003912:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003914:	4b37      	ldr	r3, [pc, #220]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003920:	4b34      	ldr	r3, [pc, #208]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003926:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003928:	4b32      	ldr	r3, [pc, #200]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 800392a:	2200      	movs	r2, #0
 800392c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800392e:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003934:	4b2f      	ldr	r3, [pc, #188]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800393a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800393c:	4b2d      	ldr	r3, [pc, #180]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 800393e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003942:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003944:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003946:	2200      	movs	r2, #0
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800394a:	482a      	ldr	r0, [pc, #168]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 800394c:	f000 fbce 	bl	80040ec <HAL_DMA_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003956:	f7ff fbd3 	bl	8003100 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a25      	ldr	r2, [pc, #148]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 800395e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003960:	4a24      	ldr	r2, [pc, #144]	@ (80039f4 <HAL_UART_MspInit+0x21c>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003966:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <HAL_UART_MspInit+0x224>)
 8003968:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <HAL_UART_MspInit+0x228>)
 800396a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800396c:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <HAL_UART_MspInit+0x224>)
 800396e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003972:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003974:	4b21      	ldr	r3, [pc, #132]	@ (80039fc <HAL_UART_MspInit+0x224>)
 8003976:	2240      	movs	r2, #64	@ 0x40
 8003978:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_UART_MspInit+0x224>)
 800397c:	2200      	movs	r2, #0
 800397e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003980:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <HAL_UART_MspInit+0x224>)
 8003982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003986:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003988:	4b1c      	ldr	r3, [pc, #112]	@ (80039fc <HAL_UART_MspInit+0x224>)
 800398a:	2200      	movs	r2, #0
 800398c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800398e:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_UART_MspInit+0x224>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_UART_MspInit+0x224>)
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800399a:	4b18      	ldr	r3, [pc, #96]	@ (80039fc <HAL_UART_MspInit+0x224>)
 800399c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a2:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <HAL_UART_MspInit+0x224>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80039a8:	4814      	ldr	r0, [pc, #80]	@ (80039fc <HAL_UART_MspInit+0x224>)
 80039aa:	f000 fb9f 	bl	80040ec <HAL_DMA_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80039b4:	f7ff fba4 	bl	8003100 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <HAL_UART_MspInit+0x224>)
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80039be:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <HAL_UART_MspInit+0x224>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2105      	movs	r1, #5
 80039c8:	2026      	movs	r0, #38	@ 0x26
 80039ca:	f000 fb65 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039ce:	2026      	movs	r0, #38	@ 0x26
 80039d0:	f000 fb7e 	bl	80040d0 <HAL_NVIC_EnableIRQ>
}
 80039d4:	bf00      	nop
 80039d6:	3730      	adds	r7, #48	@ 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40005000 	.word	0x40005000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40004400 	.word	0x40004400
 80039f0:	40020000 	.word	0x40020000
 80039f4:	2000826c 	.word	0x2000826c
 80039f8:	40026088 	.word	0x40026088
 80039fc:	200082cc 	.word	0x200082cc
 8003a00:	400260a0 	.word	0x400260a0

08003a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	@ 0x38
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	4b33      	ldr	r3, [pc, #204]	@ (8003ae8 <HAL_InitTick+0xe4>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ae8 <HAL_InitTick+0xe4>)
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
 8003a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a24:	4b30      	ldr	r3, [pc, #192]	@ (8003ae8 <HAL_InitTick+0xe4>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a30:	f107 0210 	add.w	r2, r7, #16
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fa20 	bl	8004e80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a4a:	f001 f9f1 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8003a4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a50:	e004      	b.n	8003a5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a52:	f001 f9ed 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8003a56:	4603      	mov	r3, r0
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5e:	4a23      	ldr	r2, [pc, #140]	@ (8003aec <HAL_InitTick+0xe8>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	0c9b      	lsrs	r3, r3, #18
 8003a66:	3b01      	subs	r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003a6a:	4b21      	ldr	r3, [pc, #132]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a6c:	4a21      	ldr	r2, [pc, #132]	@ (8003af4 <HAL_InitTick+0xf0>)
 8003a6e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003a70:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a76:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003a78:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a84:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8a:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003a90:	4817      	ldr	r0, [pc, #92]	@ (8003af0 <HAL_InitTick+0xec>)
 8003a92:	f001 fef5 	bl	8005880 <HAL_TIM_Base_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11b      	bne.n	8003adc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003aa4:	4812      	ldr	r0, [pc, #72]	@ (8003af0 <HAL_InitTick+0xec>)
 8003aa6:	f001 ff3b 	bl	8005920 <HAL_TIM_Base_Start_IT>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ab8:	2037      	movs	r0, #55	@ 0x37
 8003aba:	f000 fb09 	bl	80040d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d808      	bhi.n	8003ad6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	2037      	movs	r0, #55	@ 0x37
 8003aca:	f000 fae5 	bl	8004098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ace:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <HAL_InitTick+0xf4>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e002      	b.n	8003adc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003adc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	@ 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	431bde83 	.word	0x431bde83
 8003af0:	20008444 	.word	0x20008444
 8003af4:	40001400 	.word	0x40001400
 8003af8:	20000040 	.word	0x20000040

08003afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <NMI_Handler+0x4>

08003b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <HardFault_Handler+0x4>

08003b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <MemManage_Handler+0x4>

08003b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <BusFault_Handler+0x4>

08003b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <UsageFault_Handler+0x4>

08003b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b38:	4802      	ldr	r0, [pc, #8]	@ (8003b44 <DMA1_Stream5_IRQHandler+0x10>)
 8003b3a:	f000 fc6f 	bl	800441c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2000826c 	.word	0x2000826c

08003b48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b4c:	4802      	ldr	r0, [pc, #8]	@ (8003b58 <DMA1_Stream6_IRQHandler+0x10>)
 8003b4e:	f000 fc65 	bl	800441c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200082cc 	.word	0x200082cc

08003b5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */
  //HAL_ADC_IRQHandler(&hadc1);
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b70:	4802      	ldr	r0, [pc, #8]	@ (8003b7c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003b72:	f002 f99b 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20008074 	.word	0x20008074

08003b80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b84:	4802      	ldr	r0, [pc, #8]	@ (8003b90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003b86:	f002 f991 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20008074 	.word	0x20008074

08003b94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b98:	4802      	ldr	r0, [pc, #8]	@ (8003ba4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003b9a:	f002 f987 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20008074 	.word	0x20008074

08003ba8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bac:	4802      	ldr	r0, [pc, #8]	@ (8003bb8 <TIM1_CC_IRQHandler+0x10>)
 8003bae:	f002 f97d 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20008074 	.word	0x20008074

08003bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bd0:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <TIM3_IRQHandler+0x10>)
 8003bd2:	f002 f96b 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20008104 	.word	0x20008104

08003be0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003be4:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <TIM4_IRQHandler+0x10>)
 8003be6:	f002 f961 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000814c 	.word	0x2000814c

08003bf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bf8:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <USART2_IRQHandler+0x10>)
 8003bfa:	f003 f90f 	bl	8006e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20008224 	.word	0x20008224

08003c08 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003c0e:	f002 f94d 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200081dc 	.word	0x200081dc

08003c1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c20:	4802      	ldr	r0, [pc, #8]	@ (8003c2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003c22:	f002 f943 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200081dc 	.word	0x200081dc

08003c30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c34:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003c36:	f002 f939 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200081dc 	.word	0x200081dc

08003c44 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c48:	4802      	ldr	r0, [pc, #8]	@ (8003c54 <TIM8_CC_IRQHandler+0x10>)
 8003c4a:	f002 f92f 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200081dc 	.word	0x200081dc

08003c58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_IRQn 0 */
  //HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <TIM6_DAC_IRQHandler+0x10>)
 8003c6e:	f002 f91d 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20008194 	.word	0x20008194

08003c7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c80:	4802      	ldr	r0, [pc, #8]	@ (8003c8c <TIM7_IRQHandler+0x10>)
 8003c82:	f002 f913 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20008444 	.word	0x20008444

08003c90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	af00      	add	r7, sp, #0
  return 1;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_kill>:

int _kill(int pid, int sig)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cb8:	f017 fe74 	bl	801b9a4 <__errno>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2216      	movs	r2, #22
 8003cc0:	601a      	str	r2, [r3, #0]
  return -1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_exit>:

void _exit (int status)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffe7 	bl	8003cae <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <_exit+0x12>

08003ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e00a      	b.n	8003d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cf6:	f3af 8000 	nop.w
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	60ba      	str	r2, [r7, #8]
 8003d02:	b2ca      	uxtb	r2, r1
 8003d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dbf0      	blt.n	8003cf6 <_read+0x12>
  }

  return len;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e009      	b.n	8003d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	60ba      	str	r2, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	dbf1      	blt.n	8003d30 <_write+0x12>
  }
  return len;
 8003d4c:	687b      	ldr	r3, [r7, #4]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_close>:

int _close(int file)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_isatty>:

int _isatty(int file)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <_sbrk+0x5c>)
 8003dca:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <_sbrk+0x60>)
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <_sbrk+0x64>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <_sbrk+0x64>)
 8003dde:	4a12      	ldr	r2, [pc, #72]	@ (8003e28 <_sbrk+0x68>)
 8003de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d207      	bcs.n	8003e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df0:	f017 fdd8 	bl	801b9a4 <__errno>
 8003df4:	4603      	mov	r3, r0
 8003df6:	220c      	movs	r2, #12
 8003df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	e009      	b.n	8003e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e00:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <_sbrk+0x64>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <_sbrk+0x64>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <_sbrk+0x64>)
 8003e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20020000 	.word	0x20020000
 8003e20:	00000400 	.word	0x00000400
 8003e24:	20008490 	.word	0x20008490
 8003e28:	20012070 	.word	0x20012070

08003e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <SystemInit+0x20>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <SystemInit+0x20>)
 8003e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e54:	f7ff ffea 	bl	8003e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e58:	480c      	ldr	r0, [pc, #48]	@ (8003e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e5a:	490d      	ldr	r1, [pc, #52]	@ (8003e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e60:	e002      	b.n	8003e68 <LoopCopyDataInit>

08003e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e66:	3304      	adds	r3, #4

08003e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e6c:	d3f9      	bcc.n	8003e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e70:	4c0a      	ldr	r4, [pc, #40]	@ (8003e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e74:	e001      	b.n	8003e7a <LoopFillZerobss>

08003e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e78:	3204      	adds	r2, #4

08003e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e7c:	d3fb      	bcc.n	8003e76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003e7e:	f017 fd97 	bl	801b9b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e82:	f7fe fc09 	bl	8002698 <main>
  bx  lr    
 8003e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e90:	20003808 	.word	0x20003808
  ldr r2, =_sidata
 8003e94:	080226c8 	.word	0x080226c8
  ldr r2, =_sbss
 8003e98:	20003808 	.word	0x20003808
  ldr r4, =_ebss
 8003e9c:	20012070 	.word	0x20012070

08003ea0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ea0:	e7fe      	b.n	8003ea0 <CAN1_RX0_IRQHandler>
	...

08003ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <HAL_Init+0x40>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee4 <HAL_Init+0x40>)
 8003eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <HAL_Init+0x40>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee4 <HAL_Init+0x40>)
 8003eba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ec0:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <HAL_Init+0x40>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a07      	ldr	r2, [pc, #28]	@ (8003ee4 <HAL_Init+0x40>)
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ecc:	2003      	movs	r0, #3
 8003ece:	f000 f8d8 	bl	8004082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed2:	200f      	movs	r0, #15
 8003ed4:	f7ff fd96 	bl	8003a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ed8:	f7ff fa7e 	bl	80033d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023c00 	.word	0x40023c00

08003ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_IncTick+0x20>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_IncTick+0x24>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a04      	ldr	r2, [pc, #16]	@ (8003f0c <HAL_IncTick+0x24>)
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000044 	.word	0x20000044
 8003f0c:	20008494 	.word	0x20008494

08003f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return uwTick;
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <HAL_GetTick+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20008494 	.word	0x20008494

08003f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f44:	4013      	ands	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5a:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	60d3      	str	r3, [r2, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f74:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <__NVIC_GetPriorityGrouping+0x18>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0307 	and.w	r3, r3, #7
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db0b      	blt.n	8003fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	f003 021f 	and.w	r2, r3, #31
 8003fa4:	4907      	ldr	r1, [pc, #28]	@ (8003fc4 <__NVIC_EnableIRQ+0x38>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2001      	movs	r0, #1
 8003fae:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db0a      	blt.n	8003ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	490c      	ldr	r1, [pc, #48]	@ (8004014 <__NVIC_SetPriority+0x4c>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	440b      	add	r3, r1
 8003fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff0:	e00a      	b.n	8004008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	@ (8004018 <__NVIC_SetPriority+0x50>)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3b04      	subs	r3, #4
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	440b      	add	r3, r1
 8004006:	761a      	strb	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	@ 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf28      	it	cs
 800403a:	2304      	movcs	r3, #4
 800403c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3304      	adds	r3, #4
 8004042:	2b06      	cmp	r3, #6
 8004044:	d902      	bls.n	800404c <NVIC_EncodePriority+0x30>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3b03      	subs	r3, #3
 800404a:	e000      	b.n	800404e <NVIC_EncodePriority+0x32>
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43d9      	mvns	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	4313      	orrs	r3, r2
         );
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	@ 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ff4c 	bl	8003f28 <__NVIC_SetPriorityGrouping>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040aa:	f7ff ff61 	bl	8003f70 <__NVIC_GetPriorityGrouping>
 80040ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7ff ffb1 	bl	800401c <NVIC_EncodePriority>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff80 	bl	8003fc8 <__NVIC_SetPriority>
}
 80040c8:	bf00      	nop
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff54 	bl	8003f8c <__NVIC_EnableIRQ>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff ff0a 	bl	8003f10 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e099      	b.n	800423c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004128:	e00f      	b.n	800414a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800412a:	f7ff fef1 	bl	8003f10 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b05      	cmp	r3, #5
 8004136:	d908      	bls.n	800414a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e078      	b.n	800423c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e8      	bne.n	800412a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4b38      	ldr	r3, [pc, #224]	@ (8004244 <HAL_DMA_Init+0x158>)
 8004164:	4013      	ands	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004176:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d107      	bne.n	80041b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	4313      	orrs	r3, r2
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d117      	bne.n	800420e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fb01 	bl	80047f8 <DMA_CheckFifoParam>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2240      	movs	r2, #64	@ 0x40
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800420a:	2301      	movs	r3, #1
 800420c:	e016      	b.n	800423c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fab8 	bl	800478c <DMA_CalcBaseAndBitshift>
 800421c:	4603      	mov	r3, r0
 800421e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	223f      	movs	r2, #63	@ 0x3f
 8004226:	409a      	lsls	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	f010803f 	.word	0xf010803f

08004248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_DMA_Start_IT+0x26>
 800426a:	2302      	movs	r3, #2
 800426c:	e040      	b.n	80042f0 <HAL_DMA_Start_IT+0xa8>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d12f      	bne.n	80042e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fa4a 	bl	8004730 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	223f      	movs	r2, #63	@ 0x3f
 80042a2:	409a      	lsls	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0216 	orr.w	r2, r2, #22
 80042b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0208 	orr.w	r2, r2, #8
 80042ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e005      	b.n	80042ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
 80042ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004304:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004306:	f7ff fe03 	bl	8003f10 <HAL_GetTick>
 800430a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d008      	beq.n	800432a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2280      	movs	r2, #128	@ 0x80
 800431c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e052      	b.n	80043d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0216 	bic.w	r2, r2, #22
 8004338:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004348:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <HAL_DMA_Abort+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0208 	bic.w	r2, r2, #8
 8004368:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800437a:	e013      	b.n	80043a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800437c:	f7ff fdc8 	bl	8003f10 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b05      	cmp	r3, #5
 8004388:	d90c      	bls.n	80043a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2203      	movs	r2, #3
 8004394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e015      	b.n	80043d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e4      	bne.n	800437c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b6:	223f      	movs	r2, #63	@ 0x3f
 80043b8:	409a      	lsls	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d004      	beq.n	80043f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2280      	movs	r2, #128	@ 0x80
 80043f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00c      	b.n	8004410 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2205      	movs	r2, #5
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004428:	4b8e      	ldr	r3, [pc, #568]	@ (8004664 <HAL_DMA_IRQHandler+0x248>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a8e      	ldr	r2, [pc, #568]	@ (8004668 <HAL_DMA_IRQHandler+0x24c>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	2208      	movs	r2, #8
 8004448:	409a      	lsls	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01a      	beq.n	8004488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	2208      	movs	r2, #8
 8004476:	409a      	lsls	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044aa:	2201      	movs	r2, #1
 80044ac:	409a      	lsls	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f043 0202 	orr.w	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	2204      	movs	r2, #4
 80044c4:	409a      	lsls	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d012      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	2204      	movs	r2, #4
 80044e2:	409a      	lsls	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ec:	f043 0204 	orr.w	r2, r3, #4
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f8:	2210      	movs	r2, #16
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d043      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03c      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	2210      	movs	r2, #16
 8004518:	409a      	lsls	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d024      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
 800454a:	e01f      	b.n	800458c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01b      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
 800455c:	e016      	b.n	800458c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0208 	bic.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004590:	2220      	movs	r2, #32
 8004592:	409a      	lsls	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 808f 	beq.w	80046bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8087 	beq.w	80046bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	2220      	movs	r2, #32
 80045b4:	409a      	lsls	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d136      	bne.n	8004634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0216 	bic.w	r2, r2, #22
 80045d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x1da>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0208 	bic.w	r2, r2, #8
 8004604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	223f      	movs	r2, #63	@ 0x3f
 800460c:	409a      	lsls	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d07e      	beq.n	8004728 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
        }
        return;
 8004632:	e079      	b.n	8004728 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01d      	beq.n	800467e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004654:	2b00      	cmp	r3, #0
 8004656:	d031      	beq.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
 8004660:	e02c      	b.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
 8004662:	bf00      	nop
 8004664:	2000003c 	.word	0x2000003c
 8004668:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d023      	beq.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
 800467c:	e01e      	b.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0210 	bic.w	r2, r2, #16
 800469a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d032      	beq.n	800472a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2205      	movs	r2, #5
 80046d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d307      	bcc.n	8004704 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x2cc>
 8004702:	e000      	b.n	8004706 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004704:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e000      	b.n	800472a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004728:	bf00      	nop
    }
  }
}
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800474c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d108      	bne.n	8004770 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800476e:	e007      	b.n	8004780 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3b10      	subs	r3, #16
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <DMA_CalcBaseAndBitshift+0x64>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	091b      	lsrs	r3, r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047a6:	4a13      	ldr	r2, [pc, #76]	@ (80047f4 <DMA_CalcBaseAndBitshift+0x68>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d909      	bls.n	80047ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80047cc:	e007      	b.n	80047de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	aaaaaaab 	.word	0xaaaaaaab
 80047f4:	08020a0c 	.word	0x08020a0c

080047f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11f      	bne.n	8004852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d856      	bhi.n	80048c6 <DMA_CheckFifoParam+0xce>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <DMA_CheckFifoParam+0x28>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004831 	.word	0x08004831
 8004824:	08004843 	.word	0x08004843
 8004828:	08004831 	.word	0x08004831
 800482c:	080048c7 	.word	0x080048c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d046      	beq.n	80048ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e043      	b.n	80048ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800484a:	d140      	bne.n	80048ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004850:	e03d      	b.n	80048ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485a:	d121      	bne.n	80048a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b03      	cmp	r3, #3
 8004860:	d837      	bhi.n	80048d2 <DMA_CheckFifoParam+0xda>
 8004862:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <DMA_CheckFifoParam+0x70>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004879 	.word	0x08004879
 800486c:	0800487f 	.word	0x0800487f
 8004870:	08004879 	.word	0x08004879
 8004874:	08004891 	.word	0x08004891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      break;
 800487c:	e030      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d025      	beq.n	80048d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488e:	e022      	b.n	80048d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004898:	d11f      	bne.n	80048da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800489e:	e01c      	b.n	80048da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d903      	bls.n	80048ae <DMA_CheckFifoParam+0xb6>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d003      	beq.n	80048b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048ac:	e018      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
      break;
 80048b2:	e015      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00e      	beq.n	80048de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	e00b      	b.n	80048de <DMA_CheckFifoParam+0xe6>
      break;
 80048c6:	bf00      	nop
 80048c8:	e00a      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ca:	bf00      	nop
 80048cc:	e008      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ce:	bf00      	nop
 80048d0:	e006      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048d2:	bf00      	nop
 80048d4:	e004      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048de:	bf00      	nop
    }
  } 
  
  return status; 
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	@ 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e165      	b.n	8004bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800490c:	2201      	movs	r2, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 8154 	bne.w	8004bd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d005      	beq.n	8004942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800493e:	2b02      	cmp	r3, #2
 8004940:	d130      	bne.n	80049a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004978:	2201      	movs	r2, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 0201 	and.w	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d017      	beq.n	80049e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	2203      	movs	r2, #3
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d123      	bne.n	8004a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	08da      	lsrs	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3208      	adds	r2, #8
 80049f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	220f      	movs	r2, #15
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	08da      	lsrs	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3208      	adds	r2, #8
 8004a2e:	69b9      	ldr	r1, [r7, #24]
 8004a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0203 	and.w	r2, r3, #3
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80ae 	beq.w	8004bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf0 <HAL_GPIO_Init+0x300>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf0 <HAL_GPIO_Init+0x300>)
 8004a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a86:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf0 <HAL_GPIO_Init+0x300>)
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a92:	4a58      	ldr	r2, [pc, #352]	@ (8004bf4 <HAL_GPIO_Init+0x304>)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a4f      	ldr	r2, [pc, #316]	@ (8004bf8 <HAL_GPIO_Init+0x308>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d025      	beq.n	8004b0a <HAL_GPIO_Init+0x21a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8004bfc <HAL_GPIO_Init+0x30c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01f      	beq.n	8004b06 <HAL_GPIO_Init+0x216>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a4d      	ldr	r2, [pc, #308]	@ (8004c00 <HAL_GPIO_Init+0x310>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d019      	beq.n	8004b02 <HAL_GPIO_Init+0x212>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a4c      	ldr	r2, [pc, #304]	@ (8004c04 <HAL_GPIO_Init+0x314>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_GPIO_Init+0x20e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a4b      	ldr	r2, [pc, #300]	@ (8004c08 <HAL_GPIO_Init+0x318>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00d      	beq.n	8004afa <HAL_GPIO_Init+0x20a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8004c0c <HAL_GPIO_Init+0x31c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <HAL_GPIO_Init+0x206>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a49      	ldr	r2, [pc, #292]	@ (8004c10 <HAL_GPIO_Init+0x320>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_GPIO_Init+0x202>
 8004aee:	2306      	movs	r3, #6
 8004af0:	e00c      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004af2:	2307      	movs	r3, #7
 8004af4:	e00a      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004af6:	2305      	movs	r3, #5
 8004af8:	e008      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004afa:	2304      	movs	r3, #4
 8004afc:	e006      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004afe:	2303      	movs	r3, #3
 8004b00:	e004      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e002      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_GPIO_Init+0x21c>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f002 0203 	and.w	r2, r2, #3
 8004b12:	0092      	lsls	r2, r2, #2
 8004b14:	4093      	lsls	r3, r2
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b1c:	4935      	ldr	r1, [pc, #212]	@ (8004bf4 <HAL_GPIO_Init+0x304>)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	3302      	adds	r3, #2
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b4e:	4a31      	ldr	r2, [pc, #196]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b54:	4b2f      	ldr	r3, [pc, #188]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b78:	4a26      	ldr	r2, [pc, #152]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b7e:	4b25      	ldr	r3, [pc, #148]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bcc:	4a11      	ldr	r2, [pc, #68]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	f67f ae96 	bls.w	800490c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3724      	adds	r7, #36	@ 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40013800 	.word	0x40013800
 8004bf8:	40020000 	.word	0x40020000
 8004bfc:	40020400 	.word	0x40020400
 8004c00:	40020800 	.word	0x40020800
 8004c04:	40020c00 	.word	0x40020c00
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40021400 	.word	0x40021400
 8004c10:	40021800 	.word	0x40021800
 8004c14:	40013c00 	.word	0x40013c00

08004c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	807b      	strh	r3, [r7, #2]
 8004c24:	4613      	mov	r3, r2
 8004c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c28:	787b      	ldrb	r3, [r7, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c34:	e003      	b.n	8004c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	041a      	lsls	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	619a      	str	r2, [r3, #24]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0cc      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c60:	4b68      	ldr	r3, [pc, #416]	@ (8004e04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d90c      	bls.n	8004c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b65      	ldr	r3, [pc, #404]	@ (8004e04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b63      	ldr	r3, [pc, #396]	@ (8004e04 <HAL_RCC_ClockConfig+0x1b8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0b8      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d020      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca0:	4b59      	ldr	r3, [pc, #356]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a58      	ldr	r2, [pc, #352]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb8:	4b53      	ldr	r3, [pc, #332]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a52      	ldr	r2, [pc, #328]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc4:	4b50      	ldr	r3, [pc, #320]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	494d      	ldr	r1, [pc, #308]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d044      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d119      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e07f      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e06f      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e067      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2a:	4b37      	ldr	r3, [pc, #220]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f023 0203 	bic.w	r2, r3, #3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4934      	ldr	r1, [pc, #208]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d3c:	f7ff f8e8 	bl	8003f10 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d44:	f7ff f8e4 	bl	8003f10 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e04f      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 020c 	and.w	r2, r3, #12
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d1eb      	bne.n	8004d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d20c      	bcs.n	8004d94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b20      	ldr	r3, [pc, #128]	@ (8004e04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e032      	b.n	8004dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da0:	4b19      	ldr	r3, [pc, #100]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	4916      	ldr	r1, [pc, #88]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dbe:	4b12      	ldr	r3, [pc, #72]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	490e      	ldr	r1, [pc, #56]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dd2:	f000 f887 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	490a      	ldr	r1, [pc, #40]	@ (8004e0c <HAL_RCC_ClockConfig+0x1c0>)
 8004de4:	5ccb      	ldrb	r3, [r1, r3]
 8004de6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dea:	4a09      	ldr	r2, [pc, #36]	@ (8004e10 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dee:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe fe06 	bl	8003a04 <HAL_InitTick>

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023c00 	.word	0x40023c00
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	080209f4 	.word	0x080209f4
 8004e10:	2000003c 	.word	0x2000003c
 8004e14:	20000040 	.word	0x20000040

08004e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	2000003c 	.word	0x2000003c

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a9b      	lsrs	r3, r3, #10
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4903      	ldr	r1, [pc, #12]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40023800 	.word	0x40023800
 8004e54:	08020a04 	.word	0x08020a04

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e5c:	f7ff ffdc 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	@ (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	08020a04 	.word	0x08020a04

08004e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e90:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0203 	and.w	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ec2:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <HAL_RCC_GetClockConfig+0x60>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 020f 	and.w	r2, r3, #15
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40023c00 	.word	0x40023c00

08004ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee8:	b0ae      	sub	sp, #184	@ 0xb8
 8004eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0a:	4bcb      	ldr	r3, [pc, #812]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	f200 8206 	bhi.w	8005324 <HAL_RCC_GetSysClockFreq+0x440>
 8004f18:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f55 	.word	0x08004f55
 8004f24:	08005325 	.word	0x08005325
 8004f28:	08005325 	.word	0x08005325
 8004f2c:	08005325 	.word	0x08005325
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08005325 	.word	0x08005325
 8004f38:	08005325 	.word	0x08005325
 8004f3c:	08005325 	.word	0x08005325
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08005325 	.word	0x08005325
 8004f48:	08005325 	.word	0x08005325
 8004f4c:	08005325 	.word	0x08005325
 8004f50:	08005155 	.word	0x08005155
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4bb9      	ldr	r3, [pc, #740]	@ (800523c <HAL_RCC_GetSysClockFreq+0x358>)
 8004f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f5a:	e1e7      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5c:	4bb8      	ldr	r3, [pc, #736]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f62:	e1e3      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f64:	4bb4      	ldr	r3, [pc, #720]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f70:	4bb1      	ldr	r3, [pc, #708]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d071      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7c:	4bae      	ldr	r3, [pc, #696]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	f04f 0000 	mov.w	r0, #0
 8004faa:	f04f 0100 	mov.w	r1, #0
 8004fae:	0159      	lsls	r1, r3, #5
 8004fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb4:	0150      	lsls	r0, r2, #5
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4621      	mov	r1, r4
 8004fbc:	1a51      	subs	r1, r2, r1
 8004fbe:	6439      	str	r1, [r7, #64]	@ 0x40
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	018b      	lsls	r3, r1, #6
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fde:	4641      	mov	r1, r8
 8004fe0:	018a      	lsls	r2, r1, #6
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	1a51      	subs	r1, r2, r1
 8004fe6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fe8:	4649      	mov	r1, r9
 8004fea:	eb63 0301 	sbc.w	r3, r3, r1
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	00cb      	lsls	r3, r1, #3
 8005000:	4641      	mov	r1, r8
 8005002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005006:	4641      	mov	r1, r8
 8005008:	00ca      	lsls	r2, r1, #3
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	4603      	mov	r3, r0
 8005010:	4622      	mov	r2, r4
 8005012:	189b      	adds	r3, r3, r2
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
 8005016:	462b      	mov	r3, r5
 8005018:	460a      	mov	r2, r1
 800501a:	eb42 0303 	adc.w	r3, r2, r3
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800502c:	4629      	mov	r1, r5
 800502e:	024b      	lsls	r3, r1, #9
 8005030:	4621      	mov	r1, r4
 8005032:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005036:	4621      	mov	r1, r4
 8005038:	024a      	lsls	r2, r1, #9
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005048:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800504c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005050:	f7fb fe7a 	bl	8000d48 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4613      	mov	r3, r2
 800505a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800505e:	e067      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005060:	4b75      	ldr	r3, [pc, #468]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800506c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005070:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800507a:	2300      	movs	r3, #0
 800507c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800507e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005082:	4622      	mov	r2, r4
 8005084:	462b      	mov	r3, r5
 8005086:	f04f 0000 	mov.w	r0, #0
 800508a:	f04f 0100 	mov.w	r1, #0
 800508e:	0159      	lsls	r1, r3, #5
 8005090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005094:	0150      	lsls	r0, r2, #5
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4621      	mov	r1, r4
 800509c:	1a51      	subs	r1, r2, r1
 800509e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80050a0:	4629      	mov	r1, r5
 80050a2:	eb63 0301 	sbc.w	r3, r3, r1
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80050b4:	4649      	mov	r1, r9
 80050b6:	018b      	lsls	r3, r1, #6
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050be:	4641      	mov	r1, r8
 80050c0:	018a      	lsls	r2, r1, #6
 80050c2:	4641      	mov	r1, r8
 80050c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80050c8:	4649      	mov	r1, r9
 80050ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050e2:	4692      	mov	sl, r2
 80050e4:	469b      	mov	fp, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	eb1a 0303 	adds.w	r3, sl, r3
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	462b      	mov	r3, r5
 80050f0:	eb4b 0303 	adc.w	r3, fp, r3
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005102:	4629      	mov	r1, r5
 8005104:	028b      	lsls	r3, r1, #10
 8005106:	4621      	mov	r1, r4
 8005108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800510c:	4621      	mov	r1, r4
 800510e:	028a      	lsls	r2, r1, #10
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005118:	2200      	movs	r2, #0
 800511a:	673b      	str	r3, [r7, #112]	@ 0x70
 800511c:	677a      	str	r2, [r7, #116]	@ 0x74
 800511e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005122:	f7fb fe11 	bl	8000d48 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4613      	mov	r3, r2
 800512c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005130:	4b41      	ldr	r3, [pc, #260]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	3301      	adds	r3, #1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005152:	e0eb      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005154:	4b38      	ldr	r3, [pc, #224]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800515c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005160:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d06b      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516c:	4b32      	ldr	r3, [pc, #200]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x354>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	099b      	lsrs	r3, r3, #6
 8005172:	2200      	movs	r2, #0
 8005174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005176:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005180:	2300      	movs	r3, #0
 8005182:	667b      	str	r3, [r7, #100]	@ 0x64
 8005184:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005188:	4622      	mov	r2, r4
 800518a:	462b      	mov	r3, r5
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0159      	lsls	r1, r3, #5
 8005196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519a:	0150      	lsls	r0, r2, #5
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4621      	mov	r1, r4
 80051a2:	1a51      	subs	r1, r2, r1
 80051a4:	61b9      	str	r1, [r7, #24]
 80051a6:	4629      	mov	r1, r5
 80051a8:	eb63 0301 	sbc.w	r3, r3, r1
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80051ba:	4659      	mov	r1, fp
 80051bc:	018b      	lsls	r3, r1, #6
 80051be:	4651      	mov	r1, sl
 80051c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051c4:	4651      	mov	r1, sl
 80051c6:	018a      	lsls	r2, r1, #6
 80051c8:	4651      	mov	r1, sl
 80051ca:	ebb2 0801 	subs.w	r8, r2, r1
 80051ce:	4659      	mov	r1, fp
 80051d0:	eb63 0901 	sbc.w	r9, r3, r1
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e8:	4690      	mov	r8, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	eb18 0303 	adds.w	r3, r8, r3
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	462b      	mov	r3, r5
 80051f6:	eb49 0303 	adc.w	r3, r9, r3
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005208:	4629      	mov	r1, r5
 800520a:	024b      	lsls	r3, r1, #9
 800520c:	4621      	mov	r1, r4
 800520e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005212:	4621      	mov	r1, r4
 8005214:	024a      	lsls	r2, r1, #9
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800521e:	2200      	movs	r2, #0
 8005220:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005222:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005224:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005228:	f7fb fd8e 	bl	8000d48 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005236:	e065      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0x420>
 8005238:	40023800 	.word	0x40023800
 800523c:	00f42400 	.word	0x00f42400
 8005240:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005244:	4b3d      	ldr	r3, [pc, #244]	@ (800533c <HAL_RCC_GetSysClockFreq+0x458>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	2200      	movs	r2, #0
 800524c:	4618      	mov	r0, r3
 800524e:	4611      	mov	r1, r2
 8005250:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005254:	653b      	str	r3, [r7, #80]	@ 0x50
 8005256:	2300      	movs	r3, #0
 8005258:	657b      	str	r3, [r7, #84]	@ 0x54
 800525a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800525e:	4642      	mov	r2, r8
 8005260:	464b      	mov	r3, r9
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	0159      	lsls	r1, r3, #5
 800526c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005270:	0150      	lsls	r0, r2, #5
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4641      	mov	r1, r8
 8005278:	1a51      	subs	r1, r2, r1
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	4649      	mov	r1, r9
 800527e:	eb63 0301 	sbc.w	r3, r3, r1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005290:	4659      	mov	r1, fp
 8005292:	018b      	lsls	r3, r1, #6
 8005294:	4651      	mov	r1, sl
 8005296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800529a:	4651      	mov	r1, sl
 800529c:	018a      	lsls	r2, r1, #6
 800529e:	4651      	mov	r1, sl
 80052a0:	1a54      	subs	r4, r2, r1
 80052a2:	4659      	mov	r1, fp
 80052a4:	eb63 0501 	sbc.w	r5, r3, r1
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	00eb      	lsls	r3, r5, #3
 80052b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b6:	00e2      	lsls	r2, r4, #3
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	18e3      	adds	r3, r4, r3
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb45 0303 	adc.w	r3, r5, r3
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052d6:	4629      	mov	r1, r5
 80052d8:	028b      	lsls	r3, r1, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052e0:	4621      	mov	r1, r4
 80052e2:	028a      	lsls	r2, r1, #10
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ec:	2200      	movs	r2, #0
 80052ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052f6:	f7fb fd27 	bl	8000d48 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4613      	mov	r3, r2
 8005300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005304:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <HAL_RCC_GetSysClockFreq+0x458>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	0f1b      	lsrs	r3, r3, #28
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005322:	e003      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005324:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005326:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800532a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005330:	4618      	mov	r0, r3
 8005332:	37b8      	adds	r7, #184	@ 0xb8
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400

08005344 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e28d      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8083 	beq.w	800546a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005364:	4b94      	ldr	r3, [pc, #592]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b04      	cmp	r3, #4
 800536e:	d019      	beq.n	80053a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005370:	4b91      	ldr	r3, [pc, #580]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
        || \
 8005378:	2b08      	cmp	r3, #8
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800537c:	4b8e      	ldr	r3, [pc, #568]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005388:	d00c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4b8b      	ldr	r3, [pc, #556]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d112      	bne.n	80053bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005396:	4b88      	ldr	r3, [pc, #544]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a2:	d10b      	bne.n	80053bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	4b84      	ldr	r3, [pc, #528]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05b      	beq.n	8005468 <HAL_RCC_OscConfig+0x124>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d157      	bne.n	8005468 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e25a      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCC_OscConfig+0x90>
 80053c6:	4b7c      	ldr	r3, [pc, #496]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a7b      	ldr	r2, [pc, #492]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <HAL_RCC_OscConfig+0xcc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0xb4>
 80053de:	4b76      	ldr	r3, [pc, #472]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a75      	ldr	r2, [pc, #468]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b73      	ldr	r3, [pc, #460]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a72      	ldr	r2, [pc, #456]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0xcc>
 80053f8:	4b6f      	ldr	r3, [pc, #444]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6e      	ldr	r2, [pc, #440]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b6c      	ldr	r3, [pc, #432]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6b      	ldr	r2, [pc, #428]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800540e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fe fd7a 	bl	8003f10 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fe fd76 	bl	8003f10 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	@ 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e21f      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b61      	ldr	r3, [pc, #388]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0xdc>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fe fd66 	bl	8003f10 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fe fd62 	bl	8003f10 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	@ 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e20b      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	4b57      	ldr	r3, [pc, #348]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x104>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d06f      	beq.n	8005556 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005476:	4b50      	ldr	r3, [pc, #320]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b00      	cmp	r3, #0
 8005480:	d017      	beq.n	80054b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005482:	4b4d      	ldr	r3, [pc, #308]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
        || \
 800548a:	2b08      	cmp	r3, #8
 800548c:	d105      	bne.n	800549a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800548e:	4b4a      	ldr	r3, [pc, #296]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549a:	4b47      	ldr	r3, [pc, #284]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80054a2:	2b0c      	cmp	r3, #12
 80054a4:	d11c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a6:	4b44      	ldr	r3, [pc, #272]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d116      	bne.n	80054e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	4b41      	ldr	r3, [pc, #260]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_RCC_OscConfig+0x186>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e1d3      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ca:	4b3b      	ldr	r3, [pc, #236]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4937      	ldr	r1, [pc, #220]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	e03a      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e8:	4b34      	ldr	r3, [pc, #208]	@ (80055bc <HAL_RCC_OscConfig+0x278>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fe fd0f 	bl	8003f10 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f6:	f7fe fd0b 	bl	8003f10 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e1b4      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	4b2b      	ldr	r3, [pc, #172]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	4b28      	ldr	r3, [pc, #160]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4925      	ldr	r1, [pc, #148]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005524:	4313      	orrs	r3, r2
 8005526:	600b      	str	r3, [r1, #0]
 8005528:	e015      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552a:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <HAL_RCC_OscConfig+0x278>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fe fcee 	bl	8003f10 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fe fcea 	bl	8003f10 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e193      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	4b1b      	ldr	r3, [pc, #108]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d036      	beq.n	80055d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d016      	beq.n	8005598 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556a:	4b15      	ldr	r3, [pc, #84]	@ (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fe fcce 	bl	8003f10 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fe fcca 	bl	8003f10 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e173      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <HAL_RCC_OscConfig+0x274>)
 800558c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x234>
 8005596:	e01b      	b.n	80055d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005598:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559e:	f7fe fcb7 	bl	8003f10 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a4:	e00e      	b.n	80055c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a6:	f7fe fcb3 	bl	8003f10 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d907      	bls.n	80055c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e15c      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
 80055b8:	40023800 	.word	0x40023800
 80055bc:	42470000 	.word	0x42470000
 80055c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c4:	4b8a      	ldr	r3, [pc, #552]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ea      	bne.n	80055a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8097 	beq.w	800570c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e2:	4b83      	ldr	r3, [pc, #524]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10f      	bne.n	800560e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	4b7f      	ldr	r3, [pc, #508]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	4a7e      	ldr	r2, [pc, #504]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055fe:	4b7c      	ldr	r3, [pc, #496]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560a:	2301      	movs	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560e:	4b79      	ldr	r3, [pc, #484]	@ (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d118      	bne.n	800564c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561a:	4b76      	ldr	r3, [pc, #472]	@ (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a75      	ldr	r2, [pc, #468]	@ (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 8005620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005626:	f7fe fc73 	bl	8003f10 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562e:	f7fe fc6f 	bl	8003f10 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e118      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005640:	4b6c      	ldr	r3, [pc, #432]	@ (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <HAL_RCC_OscConfig+0x31e>
 8005654:	4b66      	ldr	r3, [pc, #408]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005658:	4a65      	ldr	r2, [pc, #404]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005660:	e01c      	b.n	800569c <HAL_RCC_OscConfig+0x358>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b05      	cmp	r3, #5
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x340>
 800566a:	4b61      	ldr	r3, [pc, #388]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	4a60      	ldr	r2, [pc, #384]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	f043 0304 	orr.w	r3, r3, #4
 8005674:	6713      	str	r3, [r2, #112]	@ 0x70
 8005676:	4b5e      	ldr	r3, [pc, #376]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567a:	4a5d      	ldr	r2, [pc, #372]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6713      	str	r3, [r2, #112]	@ 0x70
 8005682:	e00b      	b.n	800569c <HAL_RCC_OscConfig+0x358>
 8005684:	4b5a      	ldr	r3, [pc, #360]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	4a59      	ldr	r2, [pc, #356]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005690:	4b57      	ldr	r3, [pc, #348]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005694:	4a56      	ldr	r2, [pc, #344]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005696:	f023 0304 	bic.w	r3, r3, #4
 800569a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d015      	beq.n	80056d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fe fc34 	bl	8003f10 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fe fc30 	bl	8003f10 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0d7      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c2:	4b4b      	ldr	r3, [pc, #300]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ee      	beq.n	80056ac <HAL_RCC_OscConfig+0x368>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fe fc1e 	bl	8003f10 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fe fc1a 	bl	8003f10 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0c1      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ee:	4b40      	ldr	r3, [pc, #256]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ee      	bne.n	80056d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005700:	4b3b      	ldr	r3, [pc, #236]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	4a3a      	ldr	r2, [pc, #232]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800570a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80ad 	beq.w	8005870 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005716:	4b36      	ldr	r3, [pc, #216]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b08      	cmp	r3, #8
 8005720:	d060      	beq.n	80057e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d145      	bne.n	80057b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572a:	4b33      	ldr	r3, [pc, #204]	@ (80057f8 <HAL_RCC_OscConfig+0x4b4>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fe fbee 	bl	8003f10 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005738:	f7fe fbea 	bl	8003f10 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e093      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574a:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	3b01      	subs	r3, #1
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	061b      	lsls	r3, r3, #24
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005780:	071b      	lsls	r3, r3, #28
 8005782:	491b      	ldr	r1, [pc, #108]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b1b      	ldr	r3, [pc, #108]	@ (80057f8 <HAL_RCC_OscConfig+0x4b4>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fe fbbf 	bl	8003f10 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fe fbbb 	bl	8003f10 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e064      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x452>
 80057b4:	e05c      	b.n	8005870 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_RCC_OscConfig+0x4b4>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fe fba8 	bl	8003f10 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fe fba4 	bl	8003f10 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e04d      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x480>
 80057e2:	e045      	b.n	8005870 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e040      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fc:	4b1f      	ldr	r3, [pc, #124]	@ (800587c <HAL_RCC_OscConfig+0x538>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d030      	beq.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d129      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d122      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d119      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d10f      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e041      	b.n	8005916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fd fefa 	bl	80036a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fd96 	bl	80063f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04e      	b.n	80059d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005962:	d01d      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	@ (80059ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <HAL_TIM_Base_Start_IT+0xdc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d010      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	e007      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40001800 	.word	0x40001800

08005a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e041      	b.n	8005a96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f839 	bl	8005a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fcd6 	bl	80063f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x24>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e022      	b.n	8005b1e <HAL_TIM_PWM_Start+0x6a>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x3e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e015      	b.n	8005b1e <HAL_TIM_PWM_Start+0x6a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x58>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e008      	b.n	8005b1e <HAL_TIM_PWM_Start+0x6a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07c      	b.n	8005c20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x82>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b34:	e013      	b.n	8005b5e <HAL_TIM_PWM_Start+0xaa>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x92>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b44:	e00b      	b.n	8005b5e <HAL_TIM_PWM_Start+0xaa>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIM_PWM_Start+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b54:	e003      	b.n	8005b5e <HAL_TIM_PWM_Start+0xaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 ff32 	bl	80069d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2d      	ldr	r2, [pc, #180]	@ (8005c28 <HAL_TIM_PWM_Start+0x174>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_PWM_Start+0xcc>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c2c <HAL_TIM_PWM_Start+0x178>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <HAL_TIM_PWM_Start+0xd0>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_TIM_PWM_Start+0xd2>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a22      	ldr	r2, [pc, #136]	@ (8005c28 <HAL_TIM_PWM_Start+0x174>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d01d      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c30 <HAL_TIM_PWM_Start+0x17c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d018      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <HAL_TIM_PWM_Start+0x180>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c38 <HAL_TIM_PWM_Start+0x184>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <HAL_TIM_PWM_Start+0x178>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d009      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <HAL_TIM_PWM_Start+0x188>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a16      	ldr	r2, [pc, #88]	@ (8005c40 <HAL_TIM_PWM_Start+0x18c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d111      	bne.n	8005c0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d010      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	e007      	b.n	8005c1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40001800 	.word	0x40001800

08005c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e097      	b.n	8005d88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fd fbdf 	bl	8003430 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 fba9 	bl	80063f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ce4:	f023 030c 	bic.w	r3, r3, #12
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	4313      	orrs	r3, r2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	011a      	lsls	r2, r3, #4
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	031b      	lsls	r3, r3, #12
 8005d14:	4313      	orrs	r3, r2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4313      	orrs	r3, r2
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d110      	bne.n	8005de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d102      	bne.n	8005dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e069      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005de0:	e031      	b.n	8005e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d110      	bne.n	8005e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dee:	7b3b      	ldrb	r3, [r7, #12]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d001      	beq.n	8005df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e055      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e08:	e01d      	b.n	8005e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d108      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d105      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1c:	7b3b      	ldrb	r3, [r7, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e03e      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_TIM_Encoder_Start+0xc4>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d008      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0xd4>
 8005e52:	e00f      	b.n	8005e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fdb7 	bl	80069d0 <TIM_CCxChannelCmd>
      break;
 8005e62:	e016      	b.n	8005e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2104      	movs	r1, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fdaf 	bl	80069d0 <TIM_CCxChannelCmd>
      break;
 8005e72:	e00e      	b.n	8005e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fda7 	bl	80069d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	2104      	movs	r1, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fda0 	bl	80069d0 <TIM_CCxChannelCmd>
      break;
 8005e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0202 	mvn.w	r2, #2
 8005ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa5b 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa4d 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa5e 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0204 	mvn.w	r2, #4
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa35 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa27 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa38 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d020      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01b      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0208 	mvn.w	r2, #8
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa0f 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa01 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa12 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0210 	mvn.w	r2, #16
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9e9 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9db 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9ec 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0201 	mvn.w	r2, #1
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fc fff4 	bl	8003000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fd76 	bl	8006b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9bd 	bl	80063da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0220 	mvn.w	r2, #32
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fd48 	bl	8006b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e0ae      	b.n	8006208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	f200 809f 	bhi.w	80061f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	080061f9 	.word	0x080061f9
 80060c8:	080061f9 	.word	0x080061f9
 80060cc:	080061f9 	.word	0x080061f9
 80060d0:	08006135 	.word	0x08006135
 80060d4:	080061f9 	.word	0x080061f9
 80060d8:	080061f9 	.word	0x080061f9
 80060dc:	080061f9 	.word	0x080061f9
 80060e0:	08006177 	.word	0x08006177
 80060e4:	080061f9 	.word	0x080061f9
 80060e8:	080061f9 	.word	0x080061f9
 80060ec:	080061f9 	.word	0x080061f9
 80060f0:	080061b7 	.word	0x080061b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fa1e 	bl	800653c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	619a      	str	r2, [r3, #24]
      break;
 8006132:	e064      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fa6e 	bl	800661c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]
      break;
 8006174:	e043      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fac3 	bl	8006708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0208 	orr.w	r2, r2, #8
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	61da      	str	r2, [r3, #28]
      break;
 80061b4:	e023      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fb17 	bl	80067f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	021a      	lsls	r2, r3, #8
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	61da      	str	r2, [r3, #28]
      break;
 80061f6:	e002      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIM_ConfigClockSource+0x1c>
 8006228:	2302      	movs	r3, #2
 800622a:	e0b4      	b.n	8006396 <HAL_TIM_ConfigClockSource+0x186>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800624a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006264:	d03e      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800626a:	f200 8087 	bhi.w	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006272:	f000 8086 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x172>
 8006276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800627a:	d87f      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b70      	cmp	r3, #112	@ 0x70
 800627e:	d01a      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006280:	2b70      	cmp	r3, #112	@ 0x70
 8006282:	d87b      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b60      	cmp	r3, #96	@ 0x60
 8006286:	d050      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x11a>
 8006288:	2b60      	cmp	r3, #96	@ 0x60
 800628a:	d877      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b50      	cmp	r3, #80	@ 0x50
 800628e:	d03c      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xfa>
 8006290:	2b50      	cmp	r3, #80	@ 0x50
 8006292:	d873      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b40      	cmp	r3, #64	@ 0x40
 8006296:	d058      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x13a>
 8006298:	2b40      	cmp	r3, #64	@ 0x40
 800629a:	d86f      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b30      	cmp	r3, #48	@ 0x30
 800629e:	d064      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	2b30      	cmp	r3, #48	@ 0x30
 80062a2:	d86b      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d060      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d867      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d05c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d05a      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062b4:	e062      	b.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c6:	f000 fb63 	bl	8006990 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	609a      	str	r2, [r3, #8]
      break;
 80062e2:	e04f      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062f4:	f000 fb4c 	bl	8006990 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006306:	609a      	str	r2, [r3, #8]
      break;
 8006308:	e03c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	461a      	mov	r2, r3
 8006318:	f000 fac0 	bl	800689c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2150      	movs	r1, #80	@ 0x50
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fb19 	bl	800695a <TIM_ITRx_SetConfig>
      break;
 8006328:	e02c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fadf 	bl	80068fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2160      	movs	r1, #96	@ 0x60
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fb09 	bl	800695a <TIM_ITRx_SetConfig>
      break;
 8006348:	e01c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006356:	461a      	mov	r2, r3
 8006358:	f000 faa0 	bl	800689c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2140      	movs	r1, #64	@ 0x40
 8006362:	4618      	mov	r0, r3
 8006364:	f000 faf9 	bl	800695a <TIM_ITRx_SetConfig>
      break;
 8006368:	e00c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f000 faf0 	bl	800695a <TIM_ITRx_SetConfig>
      break;
 800637a:	e003      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	e000      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a43      	ldr	r2, [pc, #268]	@ (8006510 <TIM_Base_SetConfig+0x120>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640e:	d00f      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a40      	ldr	r2, [pc, #256]	@ (8006514 <TIM_Base_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a3f      	ldr	r2, [pc, #252]	@ (8006518 <TIM_Base_SetConfig+0x128>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a3e      	ldr	r2, [pc, #248]	@ (800651c <TIM_Base_SetConfig+0x12c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3d      	ldr	r2, [pc, #244]	@ (8006520 <TIM_Base_SetConfig+0x130>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d108      	bne.n	8006442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a32      	ldr	r2, [pc, #200]	@ (8006510 <TIM_Base_SetConfig+0x120>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02b      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006450:	d027      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2f      	ldr	r2, [pc, #188]	@ (8006514 <TIM_Base_SetConfig+0x124>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d023      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2e      	ldr	r2, [pc, #184]	@ (8006518 <TIM_Base_SetConfig+0x128>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d01f      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a2d      	ldr	r2, [pc, #180]	@ (800651c <TIM_Base_SetConfig+0x12c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01b      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2c      	ldr	r2, [pc, #176]	@ (8006520 <TIM_Base_SetConfig+0x130>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d017      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2b      	ldr	r2, [pc, #172]	@ (8006524 <TIM_Base_SetConfig+0x134>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2a      	ldr	r2, [pc, #168]	@ (8006528 <TIM_Base_SetConfig+0x138>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00f      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a29      	ldr	r2, [pc, #164]	@ (800652c <TIM_Base_SetConfig+0x13c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00b      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a28      	ldr	r2, [pc, #160]	@ (8006530 <TIM_Base_SetConfig+0x140>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d007      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a27      	ldr	r2, [pc, #156]	@ (8006534 <TIM_Base_SetConfig+0x144>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a26      	ldr	r2, [pc, #152]	@ (8006538 <TIM_Base_SetConfig+0x148>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d108      	bne.n	80064b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006510 <TIM_Base_SetConfig+0x120>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_Base_SetConfig+0xf2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a10      	ldr	r2, [pc, #64]	@ (8006520 <TIM_Base_SetConfig+0x130>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d103      	bne.n	80064ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f043 0204 	orr.w	r2, r3, #4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40010000 	.word	0x40010000
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40000c00 	.word	0x40000c00
 8006520:	40010400 	.word	0x40010400
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800
 8006530:	40001800 	.word	0x40001800
 8006534:	40001c00 	.word	0x40001c00
 8006538:	40002000 	.word	0x40002000

0800653c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f023 0201 	bic.w	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0302 	bic.w	r3, r3, #2
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a20      	ldr	r2, [pc, #128]	@ (8006614 <TIM_OC1_SetConfig+0xd8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC1_SetConfig+0x64>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1f      	ldr	r2, [pc, #124]	@ (8006618 <TIM_OC1_SetConfig+0xdc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10c      	bne.n	80065ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0308 	bic.w	r3, r3, #8
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0304 	bic.w	r3, r3, #4
 80065b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a15      	ldr	r2, [pc, #84]	@ (8006614 <TIM_OC1_SetConfig+0xd8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC1_SetConfig+0x8e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a14      	ldr	r2, [pc, #80]	@ (8006618 <TIM_OC1_SetConfig+0xdc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40010000 	.word	0x40010000
 8006618:	40010400 	.word	0x40010400

0800661c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f023 0210 	bic.w	r2, r3, #16
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a22      	ldr	r2, [pc, #136]	@ (8006700 <TIM_OC2_SetConfig+0xe4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC2_SetConfig+0x68>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a21      	ldr	r2, [pc, #132]	@ (8006704 <TIM_OC2_SetConfig+0xe8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d10d      	bne.n	80066a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800668a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800669e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <TIM_OC2_SetConfig+0xe4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC2_SetConfig+0x94>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <TIM_OC2_SetConfig+0xe8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a21      	ldr	r2, [pc, #132]	@ (80067e8 <TIM_OC3_SetConfig+0xe0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0x66>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a20      	ldr	r2, [pc, #128]	@ (80067ec <TIM_OC3_SetConfig+0xe4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10d      	bne.n	800678a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a16      	ldr	r2, [pc, #88]	@ (80067e8 <TIM_OC3_SetConfig+0xe0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_OC3_SetConfig+0x92>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <TIM_OC3_SetConfig+0xe4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d113      	bne.n	80067c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400

080067f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800683a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a12      	ldr	r2, [pc, #72]	@ (8006894 <TIM_OC4_SetConfig+0xa4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC4_SetConfig+0x68>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a11      	ldr	r2, [pc, #68]	@ (8006898 <TIM_OC4_SetConfig+0xa8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d109      	bne.n	800686c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800685e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	019b      	lsls	r3, r3, #6
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400

0800689c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f023 0201 	bic.w	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 030a 	bic.w	r3, r3, #10
 80068d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f023 0210 	bic.w	r2, r3, #16
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	031b      	lsls	r3, r3, #12
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006936:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	f043 0307 	orr.w	r3, r3, #7
 800697c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	609a      	str	r2, [r3, #8]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	021a      	lsls	r2, r3, #8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	bf00      	nop
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2201      	movs	r2, #1
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	43db      	mvns	r3, r3
 80069f2:	401a      	ands	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1a      	ldr	r2, [r3, #32]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	fa01 f303 	lsl.w	r3, r1, r3
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e05a      	b.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a21      	ldr	r2, [pc, #132]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d022      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a80:	d01d      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1d      	ldr	r2, [pc, #116]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d018      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00e      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a18      	ldr	r2, [pc, #96]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a17      	ldr	r2, [pc, #92]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a15      	ldr	r2, [pc, #84]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10c      	bne.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40010400 	.word	0x40010400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40001800 	.word	0x40001800

08006b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e042      	b.n	8006bd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fc fe38 	bl	80037d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	@ 0x24
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fff5 	bl	8007b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08c      	sub	sp, #48	@ 0x30
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d162      	bne.n	8006cbc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_UART_Transmit_DMA+0x26>
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e05b      	b.n	8006cbe <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	88fa      	ldrh	r2, [r7, #6]
 8006c16:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2221      	movs	r2, #33	@ 0x21
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	4a27      	ldr	r2, [pc, #156]	@ (8006cc8 <HAL_UART_Transmit_DMA+0xec>)
 8006c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	4a26      	ldr	r2, [pc, #152]	@ (8006ccc <HAL_UART_Transmit_DMA+0xf0>)
 8006c34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3a:	4a25      	ldr	r2, [pc, #148]	@ (8006cd0 <HAL_UART_Transmit_DMA+0xf4>)
 8006c3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	2200      	movs	r2, #0
 8006c44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	6819      	ldr	r1, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	f7fd faf3 	bl	8004248 <HAL_DMA_Start_IT>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e021      	b.n	8006cbe <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	617b      	str	r3, [r7, #20]
   return(result);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6a39      	ldr	r1, [r7, #32]
 8006caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e5      	bne.n	8006c84 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e000      	b.n	8006cbe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
  }
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3730      	adds	r7, #48	@ 0x30
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	080073ed 	.word	0x080073ed
 8006ccc:	08007487 	.word	0x08007487
 8006cd0:	0800760b 	.word	0x0800760b

08006cd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d112      	bne.n	8006d14 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_UART_Receive_DMA+0x26>
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e00b      	b.n	8006d16 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	461a      	mov	r2, r3
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fcc8 	bl	80076a0 <UART_Start_Receive_DMA>
 8006d10:	4603      	mov	r3, r0
 8006d12:	e000      	b.n	8006d16 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b090      	sub	sp, #64	@ 0x40
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d34:	2b80      	cmp	r3, #128	@ 0x80
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b21      	cmp	r3, #33	@ 0x21
 8006d4a:	d128      	bne.n	8006d9e <HAL_UART_DMAStop+0x80>
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d025      	beq.n	8006d9e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	623b      	str	r3, [r7, #32]
   return(result);
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fd fab0 	bl	80042f8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fd27 	bl	80077ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da8:	2b40      	cmp	r3, #64	@ 0x40
 8006daa:	bf0c      	ite	eq
 8006dac:	2301      	moveq	r3, #1
 8006dae:	2300      	movne	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b22      	cmp	r3, #34	@ 0x22
 8006dbe:	d128      	bne.n	8006e12 <HAL_UART_DMAStop+0xf4>
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d025      	beq.n	8006e12 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3314      	adds	r3, #20
 8006dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3314      	adds	r3, #20
 8006de4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006de6:	61fa      	str	r2, [r7, #28]
 8006de8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	69b9      	ldr	r1, [r7, #24]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	617b      	str	r3, [r7, #20]
   return(result);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e5      	bne.n	8006dc6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd fa76 	bl	80042f8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fd15 	bl	800783c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3740      	adds	r7, #64	@ 0x40
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10f      	bne.n	8006e82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_UART_IRQHandler+0x66>
 8006e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fdba 	bl	80079f4 <UART_Receive_IT>
      return;
 8006e80:	e273      	b.n	800736a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 80de 	beq.w	8007048 <HAL_UART_IRQHandler+0x22c>
 8006e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80d1 	beq.w	8007048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_UART_IRQHandler+0xae>
 8006eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec2:	f043 0201 	orr.w	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_UART_IRQHandler+0xd2>
 8006ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee6:	f043 0202 	orr.w	r2, r3, #2
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <HAL_UART_IRQHandler+0xf6>
 8006efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0a:	f043 0204 	orr.w	r2, r3, #4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <HAL_UART_IRQHandler+0x126>
 8006f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	f043 0208 	orr.w	r2, r3, #8
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 820a 	beq.w	8007360 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <HAL_UART_IRQHandler+0x14e>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fd45 	bl	80079f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f74:	2b40      	cmp	r3, #64	@ 0x40
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <HAL_UART_IRQHandler+0x17a>
 8006f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d04f      	beq.n	8007036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fc50 	bl	800783c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa6:	2b40      	cmp	r3, #64	@ 0x40
 8006fa8:	d141      	bne.n	800702e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3314      	adds	r3, #20
 8006fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1d9      	bne.n	8006faa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d013      	beq.n	8007026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007002:	4a8a      	ldr	r2, [pc, #552]	@ (800722c <HAL_UART_IRQHandler+0x410>)
 8007004:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	4618      	mov	r0, r3
 800700c:	f7fd f9e4 	bl	80043d8 <HAL_DMA_Abort_IT>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d016      	beq.n	8007044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	e00e      	b.n	8007044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f9ca 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	e00a      	b.n	8007044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9c6 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e006      	b.n	8007044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9c2 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007042:	e18d      	b.n	8007360 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	bf00      	nop
    return;
 8007046:	e18b      	b.n	8007360 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704c:	2b01      	cmp	r3, #1
 800704e:	f040 8167 	bne.w	8007320 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8160 	beq.w	8007320 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8159 	beq.w	8007320 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708e:	2b40      	cmp	r3, #64	@ 0x40
 8007090:	f040 80ce 	bne.w	8007230 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80a9 	beq.w	80071fc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070b2:	429a      	cmp	r2, r3
 80070b4:	f080 80a2 	bcs.w	80071fc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ca:	f000 8088 	beq.w	80071de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80070fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007106:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1d9      	bne.n	80070ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3314      	adds	r3, #20
 8007120:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800712a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3314      	adds	r3, #20
 800713a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800713e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007142:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007146:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e1      	bne.n	800711a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3314      	adds	r3, #20
 800715c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800716c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3314      	adds	r3, #20
 8007176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800717a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800717c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007180:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e3      	bne.n	8007156 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e3      	bne.n	800719c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fd f88d 	bl	80042f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8ed 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071fa:	e0b3      	b.n	8007364 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007200:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007204:	429a      	cmp	r2, r3
 8007206:	f040 80ad 	bne.w	8007364 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007214:	f040 80a6 	bne.w	8007364 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8d5 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
      return;
 800722a:	e09b      	b.n	8007364 <HAL_UART_IRQHandler+0x548>
 800722c:	08007903 	.word	0x08007903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007238:	b29b      	uxth	r3, r3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 808e 	beq.w	8007368 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800724c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8089 	beq.w	8007368 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800726c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800727a:	647a      	str	r2, [r7, #68]	@ 0x44
 800727c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e3      	bne.n	8007256 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	623b      	str	r3, [r7, #32]
   return(result);
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e3      	bne.n	800728e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0310 	bic.w	r3, r3, #16
 80072ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80072f8:	61fa      	str	r2, [r7, #28]
 80072fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	617b      	str	r3, [r7, #20]
   return(result);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e3      	bne.n	80072d4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f85b 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800731e:	e023      	b.n	8007368 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <HAL_UART_IRQHandler+0x524>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 faf3 	bl	8007924 <UART_Transmit_IT>
    return;
 800733e:	e014      	b.n	800736a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00e      	beq.n	800736a <HAL_UART_IRQHandler+0x54e>
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fb33 	bl	80079c4 <UART_EndTransmit_IT>
    return;
 800735e:	e004      	b.n	800736a <HAL_UART_IRQHandler+0x54e>
    return;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <HAL_UART_IRQHandler+0x54e>
      return;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <HAL_UART_IRQHandler+0x54e>
      return;
 8007368:	bf00      	nop
  }
}
 800736a:	37e8      	adds	r7, #232	@ 0xe8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b090      	sub	sp, #64	@ 0x40
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007404:	2b00      	cmp	r3, #0
 8007406:	d137      	bne.n	8007478 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800740a:	2200      	movs	r2, #0
 800740c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800740e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3314      	adds	r3, #20
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	623b      	str	r3, [r7, #32]
   return(result);
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3314      	adds	r3, #20
 800742c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800742e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800743c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	60fb      	str	r3, [r7, #12]
   return(result);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
 800745a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007462:	61fa      	str	r2, [r7, #28]
 8007464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	69b9      	ldr	r1, [r7, #24]
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	617b      	str	r3, [r7, #20]
   return(result);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007476:	e002      	b.n	800747e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007478:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800747a:	f7ff ff79 	bl	8007370 <HAL_UART_TxCpltCallback>
}
 800747e:	bf00      	nop
 8007480:	3740      	adds	r7, #64	@ 0x40
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff ff75 	bl	8007384 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800749a:	bf00      	nop
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b09c      	sub	sp, #112	@ 0x70
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d172      	bne.n	80075a4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80074be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c0:	2200      	movs	r2, #0
 80074c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80074e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3314      	adds	r3, #20
 80074fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3314      	adds	r3, #20
 8007516:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007518:	647a      	str	r2, [r7, #68]	@ 0x44
 800751a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800751e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e5      	bne.n	80074f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3314      	adds	r3, #20
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	623b      	str	r3, [r7, #32]
   return(result);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007542:	663b      	str	r3, [r7, #96]	@ 0x60
 8007544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800754c:	633a      	str	r2, [r7, #48]	@ 0x30
 800754e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e5      	bne.n	800752c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	2b01      	cmp	r3, #1
 800756e:	d119      	bne.n	80075a4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007590:	61fa      	str	r2, [r7, #28]
 8007592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	69b9      	ldr	r1, [r7, #24]
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	617b      	str	r3, [r7, #20]
   return(result);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075a6:	2200      	movs	r2, #0
 80075a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d106      	bne.n	80075c0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075b6:	4619      	mov	r1, r3
 80075b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80075ba:	f7ff ff0b 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075be:	e002      	b.n	80075c6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80075c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80075c2:	f7ff fee9 	bl	8007398 <HAL_UART_RxCpltCallback>
}
 80075c6:	bf00      	nop
 80075c8:	3770      	adds	r7, #112	@ 0x70
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d108      	bne.n	80075fc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	4619      	mov	r1, r3
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff feed 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075fa:	e002      	b.n	8007602 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fed5 	bl	80073ac <HAL_UART_RxHalfCpltCallback>
}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007626:	2b80      	cmp	r3, #128	@ 0x80
 8007628:	bf0c      	ite	eq
 800762a:	2301      	moveq	r3, #1
 800762c:	2300      	movne	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b21      	cmp	r3, #33	@ 0x21
 800763c:	d108      	bne.n	8007650 <UART_DMAError+0x46>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800764a:	68b8      	ldr	r0, [r7, #8]
 800764c:	f000 f8ce 	bl	80077ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b40      	cmp	r3, #64	@ 0x40
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b22      	cmp	r3, #34	@ 0x22
 8007670:	d108      	bne.n	8007684 <UART_DMAError+0x7a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800767e:	68b8      	ldr	r0, [r7, #8]
 8007680:	f000 f8dc 	bl	800783c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007688:	f043 0210 	orr.w	r2, r3, #16
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007690:	68b8      	ldr	r0, [r7, #8]
 8007692:	f7ff fe95 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b098      	sub	sp, #96	@ 0x60
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2222      	movs	r2, #34	@ 0x22
 80076c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076cc:	4a44      	ldr	r2, [pc, #272]	@ (80077e0 <UART_Start_Receive_DMA+0x140>)
 80076ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d4:	4a43      	ldr	r2, [pc, #268]	@ (80077e4 <UART_Start_Receive_DMA+0x144>)
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	4a42      	ldr	r2, [pc, #264]	@ (80077e8 <UART_Start_Receive_DMA+0x148>)
 80076de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	2200      	movs	r2, #0
 80076e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	f7fc fda2 	bl	8004248 <HAL_DMA_Start_IT>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d008      	beq.n	800771c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2210      	movs	r2, #16
 800770e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e05d      	b.n	80077d8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d019      	beq.n	800776e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800774a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800775a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800775c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e5      	bne.n	800773a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	f043 0301 	orr.w	r3, r3, #1
 8007784:	657b      	str	r3, [r7, #84]	@ 0x54
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3314      	adds	r3, #20
 800778c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800778e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800779c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3314      	adds	r3, #20
 80077a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	617b      	str	r3, [r7, #20]
   return(result);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3314      	adds	r3, #20
 80077c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80077c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6a39      	ldr	r1, [r7, #32]
 80077c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3760      	adds	r7, #96	@ 0x60
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	080074a3 	.word	0x080074a3
 80077e4:	080075cf 	.word	0x080075cf
 80077e8:	0800760b 	.word	0x0800760b

080077ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b089      	sub	sp, #36	@ 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	330c      	adds	r3, #12
 80077fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	60bb      	str	r3, [r7, #8]
   return(result);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	61ba      	str	r2, [r7, #24]
 8007816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6979      	ldr	r1, [r7, #20]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	613b      	str	r3, [r7, #16]
   return(result);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e5      	bne.n	80077f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007830:	bf00      	nop
 8007832:	3724      	adds	r7, #36	@ 0x24
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b095      	sub	sp, #84	@ 0x54
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800785a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007864:	643a      	str	r2, [r7, #64]	@ 0x40
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e5      	bne.n	8007844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3314      	adds	r3, #20
 800787e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	61fb      	str	r3, [r7, #28]
   return(result);
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f023 0301 	bic.w	r3, r3, #1
 800788e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800789a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800789e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e5      	bne.n	8007878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d119      	bne.n	80078e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f023 0310 	bic.w	r3, r3, #16
 80078ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d4:	61ba      	str	r2, [r7, #24]
 80078d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6979      	ldr	r1, [r7, #20]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	613b      	str	r3, [r7, #16]
   return(result);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078f6:	bf00      	nop
 80078f8:	3754      	adds	r7, #84	@ 0x54
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff fd52 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b21      	cmp	r3, #33	@ 0x21
 8007936:	d13e      	bne.n	80079b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007940:	d114      	bne.n	800796c <UART_Transmit_IT+0x48>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d110      	bne.n	800796c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800795e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	1c9a      	adds	r2, r3, #2
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	621a      	str	r2, [r3, #32]
 800796a:	e008      	b.n	800797e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6211      	str	r1, [r2, #32]
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29b      	uxth	r3, r3
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10f      	bne.n	80079b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e000      	b.n	80079b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff fcc3 	bl	8007370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08c      	sub	sp, #48	@ 0x30
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b22      	cmp	r3, #34	@ 0x22
 8007a0e:	f040 80aa 	bne.w	8007b66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a1a:	d115      	bne.n	8007a48 <UART_Receive_IT+0x54>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d111      	bne.n	8007a48 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	1c9a      	adds	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a46:	e024      	b.n	8007a92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	d007      	beq.n	8007a68 <UART_Receive_IT+0x74>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <UART_Receive_IT+0x82>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	e008      	b.n	8007a88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d15d      	bne.n	8007b62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0220 	bic.w	r2, r2, #32
 8007ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695a      	ldr	r2, [r3, #20]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d135      	bne.n	8007b58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f023 0310 	bic.w	r3, r3, #16
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b12:	623a      	str	r2, [r7, #32]
 8007b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	69f9      	ldr	r1, [r7, #28]
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e5      	bne.n	8007af2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d10a      	bne.n	8007b4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fc3f 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
 8007b56:	e002      	b.n	8007b5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fc1d 	bl	8007398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e002      	b.n	8007b68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b66:	2302      	movs	r3, #2
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3730      	adds	r7, #48	@ 0x30
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b74:	b0c0      	sub	sp, #256	@ 0x100
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8c:	68d9      	ldr	r1, [r3, #12]
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	ea40 0301 	orr.w	r3, r0, r1
 8007b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bc8:	f021 010c 	bic.w	r1, r1, #12
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bea:	6999      	ldr	r1, [r3, #24]
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	ea40 0301 	orr.w	r3, r0, r1
 8007bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8007e3c <UART_SetConfig+0x2cc>)
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d005      	beq.n	8007c10 <UART_SetConfig+0xa0>
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007e40 <UART_SetConfig+0x2d0>)
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d104      	bne.n	8007c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fd f922 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8007c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c18:	e003      	b.n	8007c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7fd f909 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8007c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c2c:	f040 810c 	bne.w	8007e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c52:	4621      	mov	r1, r4
 8007c54:	eb12 0801 	adds.w	r8, r2, r1
 8007c58:	4629      	mov	r1, r5
 8007c5a:	eb43 0901 	adc.w	r9, r3, r1
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c72:	4690      	mov	r8, r2
 8007c74:	4699      	mov	r9, r3
 8007c76:	4623      	mov	r3, r4
 8007c78:	eb18 0303 	adds.w	r3, r8, r3
 8007c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c80:	462b      	mov	r3, r5
 8007c82:	eb49 0303 	adc.w	r3, r9, r3
 8007c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	18db      	adds	r3, r3, r3
 8007ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	eb42 0303 	adc.w	r3, r2, r3
 8007caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cb4:	f7f9 f848 	bl	8000d48 <__aeabi_uldivmod>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4b61      	ldr	r3, [pc, #388]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	011c      	lsls	r4, r3, #4
 8007cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	1891      	adds	r1, r2, r2
 8007cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ce0:	415b      	adcs	r3, r3
 8007ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ce8:	4641      	mov	r1, r8
 8007cea:	eb12 0a01 	adds.w	sl, r2, r1
 8007cee:	4649      	mov	r1, r9
 8007cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d08:	4692      	mov	sl, r2
 8007d0a:	469b      	mov	fp, r3
 8007d0c:	4643      	mov	r3, r8
 8007d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d16:	464b      	mov	r3, r9
 8007d18:	eb4b 0303 	adc.w	r3, fp, r3
 8007d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d34:	460b      	mov	r3, r1
 8007d36:	18db      	adds	r3, r3, r3
 8007d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	eb42 0303 	adc.w	r3, r2, r3
 8007d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d4a:	f7f8 fffd 	bl	8000d48 <__aeabi_uldivmod>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	4b3b      	ldr	r3, [pc, #236]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007d56:	fba3 2301 	umull	r2, r3, r3, r1
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	2264      	movs	r2, #100	@ 0x64
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	1acb      	subs	r3, r1, r3
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d6a:	4b36      	ldr	r3, [pc, #216]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d78:	441c      	add	r4, r3
 8007d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	1891      	adds	r1, r2, r2
 8007d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d94:	415b      	adcs	r3, r3
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	1851      	adds	r1, r2, r1
 8007da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007da2:	4649      	mov	r1, r9
 8007da4:	414b      	adcs	r3, r1
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007db4:	4659      	mov	r1, fp
 8007db6:	00cb      	lsls	r3, r1, #3
 8007db8:	4651      	mov	r1, sl
 8007dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dbe:	4651      	mov	r1, sl
 8007dc0:	00ca      	lsls	r2, r1, #3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4642      	mov	r2, r8
 8007dca:	189b      	adds	r3, r3, r2
 8007dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	eb42 0303 	adc.w	r3, r2, r3
 8007dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007df0:	460b      	mov	r3, r1
 8007df2:	18db      	adds	r3, r3, r3
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007df6:	4613      	mov	r3, r2
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e06:	f7f8 ff9f 	bl	8000d48 <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007e10:	fba3 1302 	umull	r1, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	2164      	movs	r1, #100	@ 0x64
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	3332      	adds	r3, #50	@ 0x32
 8007e22:	4a08      	ldr	r2, [pc, #32]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007e24:	fba2 2303 	umull	r2, r3, r2, r3
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	f003 0207 	and.w	r2, r3, #7
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4422      	add	r2, r4
 8007e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e38:	e106      	b.n	8008048 <UART_SetConfig+0x4d8>
 8007e3a:	bf00      	nop
 8007e3c:	40011000 	.word	0x40011000
 8007e40:	40011400 	.word	0x40011400
 8007e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	1891      	adds	r1, r2, r2
 8007e60:	6239      	str	r1, [r7, #32]
 8007e62:	415b      	adcs	r3, r3
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	1854      	adds	r4, r2, r1
 8007e6e:	4649      	mov	r1, r9
 8007e70:	eb43 0501 	adc.w	r5, r3, r1
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	00eb      	lsls	r3, r5, #3
 8007e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e82:	00e2      	lsls	r2, r4, #3
 8007e84:	4614      	mov	r4, r2
 8007e86:	461d      	mov	r5, r3
 8007e88:	4643      	mov	r3, r8
 8007e8a:	18e3      	adds	r3, r4, r3
 8007e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e90:	464b      	mov	r3, r9
 8007e92:	eb45 0303 	adc.w	r3, r5, r3
 8007e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	008b      	lsls	r3, r1, #2
 8007eba:	4621      	mov	r1, r4
 8007ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	008a      	lsls	r2, r1, #2
 8007ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ec8:	f7f8 ff3e 	bl	8000d48 <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4b60      	ldr	r3, [pc, #384]	@ (8008054 <UART_SetConfig+0x4e4>)
 8007ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	011c      	lsls	r4, r3, #4
 8007eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	1891      	adds	r1, r2, r2
 8007ef2:	61b9      	str	r1, [r7, #24]
 8007ef4:	415b      	adcs	r3, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007efc:	4641      	mov	r1, r8
 8007efe:	1851      	adds	r1, r2, r1
 8007f00:	6139      	str	r1, [r7, #16]
 8007f02:	4649      	mov	r1, r9
 8007f04:	414b      	adcs	r3, r1
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f14:	4659      	mov	r1, fp
 8007f16:	00cb      	lsls	r3, r1, #3
 8007f18:	4651      	mov	r1, sl
 8007f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1e:	4651      	mov	r1, sl
 8007f20:	00ca      	lsls	r2, r1, #3
 8007f22:	4610      	mov	r0, r2
 8007f24:	4619      	mov	r1, r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	4642      	mov	r2, r8
 8007f2a:	189b      	adds	r3, r3, r2
 8007f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f30:	464b      	mov	r3, r9
 8007f32:	460a      	mov	r2, r1
 8007f34:	eb42 0303 	adc.w	r3, r2, r3
 8007f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f54:	4649      	mov	r1, r9
 8007f56:	008b      	lsls	r3, r1, #2
 8007f58:	4641      	mov	r1, r8
 8007f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f5e:	4641      	mov	r1, r8
 8007f60:	008a      	lsls	r2, r1, #2
 8007f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f66:	f7f8 feef 	bl	8000d48 <__aeabi_uldivmod>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4b38      	ldr	r3, [pc, #224]	@ (8008054 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 2301 	umull	r2, r3, r3, r1
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	2264      	movs	r2, #100	@ 0x64
 8007f7a:	fb02 f303 	mul.w	r3, r2, r3
 8007f7e:	1acb      	subs	r3, r1, r3
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	3332      	adds	r3, #50	@ 0x32
 8007f84:	4a33      	ldr	r2, [pc, #204]	@ (8008054 <UART_SetConfig+0x4e4>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f90:	441c      	add	r4, r3
 8007f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f96:	2200      	movs	r2, #0
 8007f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	1891      	adds	r1, r2, r2
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	415b      	adcs	r3, r3
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	1851      	adds	r1, r2, r1
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	414b      	adcs	r3, r1
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fc8:	4659      	mov	r1, fp
 8007fca:	00cb      	lsls	r3, r1, #3
 8007fcc:	4651      	mov	r1, sl
 8007fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	00ca      	lsls	r2, r1, #3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4642      	mov	r2, r8
 8007fde:	189b      	adds	r3, r3, r2
 8007fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	460a      	mov	r2, r1
 8007fe6:	eb42 0303 	adc.w	r3, r2, r3
 8007fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008004:	4649      	mov	r1, r9
 8008006:	008b      	lsls	r3, r1, #2
 8008008:	4641      	mov	r1, r8
 800800a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800e:	4641      	mov	r1, r8
 8008010:	008a      	lsls	r2, r1, #2
 8008012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008016:	f7f8 fe97 	bl	8000d48 <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <UART_SetConfig+0x4e4>)
 8008020:	fba3 1302 	umull	r1, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	2164      	movs	r1, #100	@ 0x64
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	3332      	adds	r3, #50	@ 0x32
 8008032:	4a08      	ldr	r2, [pc, #32]	@ (8008054 <UART_SetConfig+0x4e4>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4422      	add	r2, r4
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008054:	51eb851f 	.word	0x51eb851f

08008058 <__NVIC_SetPriority>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db0a      	blt.n	8008082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	b2da      	uxtb	r2, r3
 8008070:	490c      	ldr	r1, [pc, #48]	@ (80080a4 <__NVIC_SetPriority+0x4c>)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	0112      	lsls	r2, r2, #4
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	440b      	add	r3, r1
 800807c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008080:	e00a      	b.n	8008098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4908      	ldr	r1, [pc, #32]	@ (80080a8 <__NVIC_SetPriority+0x50>)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	3b04      	subs	r3, #4
 8008090:	0112      	lsls	r2, r2, #4
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	440b      	add	r3, r1
 8008096:	761a      	strb	r2, [r3, #24]
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	e000e100 	.word	0xe000e100
 80080a8:	e000ed00 	.word	0xe000ed00

080080ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080b0:	4b05      	ldr	r3, [pc, #20]	@ (80080c8 <SysTick_Handler+0x1c>)
 80080b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80080b4:	f001 fd40 	bl	8009b38 <xTaskGetSchedulerState>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d001      	beq.n	80080c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80080be:	f002 fb3b 	bl	800a738 <xPortSysTickHandler>
  }
}
 80080c2:	bf00      	nop
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	e000e010 	.word	0xe000e010

080080cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80080d0:	2100      	movs	r1, #0
 80080d2:	f06f 0004 	mvn.w	r0, #4
 80080d6:	f7ff ffbf 	bl	8008058 <__NVIC_SetPriority>
#endif
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e6:	f3ef 8305 	mrs	r3, IPSR
 80080ea:	603b      	str	r3, [r7, #0]
  return(result);
 80080ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80080f2:	f06f 0305 	mvn.w	r3, #5
 80080f6:	607b      	str	r3, [r7, #4]
 80080f8:	e00c      	b.n	8008114 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80080fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <osKernelInitialize+0x44>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008102:	4b08      	ldr	r3, [pc, #32]	@ (8008124 <osKernelInitialize+0x44>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008108:	2300      	movs	r3, #0
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	e002      	b.n	8008114 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800810e:	f04f 33ff 	mov.w	r3, #4294967295
 8008112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008114:	687b      	ldr	r3, [r7, #4]
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20008498 	.word	0x20008498

08008128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812e:	f3ef 8305 	mrs	r3, IPSR
 8008132:	603b      	str	r3, [r7, #0]
  return(result);
 8008134:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <osKernelStart+0x1a>
    stat = osErrorISR;
 800813a:	f06f 0305 	mvn.w	r3, #5
 800813e:	607b      	str	r3, [r7, #4]
 8008140:	e010      	b.n	8008164 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008142:	4b0b      	ldr	r3, [pc, #44]	@ (8008170 <osKernelStart+0x48>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d109      	bne.n	800815e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800814a:	f7ff ffbf 	bl	80080cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800814e:	4b08      	ldr	r3, [pc, #32]	@ (8008170 <osKernelStart+0x48>)
 8008150:	2202      	movs	r2, #2
 8008152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008154:	f001 f87a 	bl	800924c <vTaskStartScheduler>
      stat = osOK;
 8008158:	2300      	movs	r3, #0
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	e002      	b.n	8008164 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800815e:	f04f 33ff 	mov.w	r3, #4294967295
 8008162:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008164:	687b      	ldr	r3, [r7, #4]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20008498 	.word	0x20008498

08008174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	@ 0x38
 8008178:	af04      	add	r7, sp, #16
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008184:	f3ef 8305 	mrs	r3, IPSR
 8008188:	617b      	str	r3, [r7, #20]
  return(result);
 800818a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800818c:	2b00      	cmp	r3, #0
 800818e:	d17e      	bne.n	800828e <osThreadNew+0x11a>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d07b      	beq.n	800828e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008196:	2380      	movs	r3, #128	@ 0x80
 8008198:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800819a:	2318      	movs	r3, #24
 800819c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295
 80081a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d045      	beq.n	800823a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <osThreadNew+0x48>
        name = attr->name;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <osThreadNew+0x6e>
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	2b38      	cmp	r3, #56	@ 0x38
 80081d4:	d805      	bhi.n	80081e2 <osThreadNew+0x6e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <osThreadNew+0x72>
        return (NULL);
 80081e2:	2300      	movs	r3, #0
 80081e4:	e054      	b.n	8008290 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	089b      	lsrs	r3, r3, #2
 80081f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00e      	beq.n	800821c <osThreadNew+0xa8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	2b5b      	cmp	r3, #91	@ 0x5b
 8008204:	d90a      	bls.n	800821c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800820a:	2b00      	cmp	r3, #0
 800820c:	d006      	beq.n	800821c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <osThreadNew+0xa8>
        mem = 1;
 8008216:	2301      	movs	r3, #1
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	e010      	b.n	800823e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <osThreadNew+0xca>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d108      	bne.n	800823e <osThreadNew+0xca>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <osThreadNew+0xca>
          mem = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	e001      	b.n	800823e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d110      	bne.n	8008266 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800824c:	9202      	str	r2, [sp, #8]
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fe1a 	bl	8008e94 <xTaskCreateStatic>
 8008260:	4603      	mov	r3, r0
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	e013      	b.n	800828e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	b29a      	uxth	r2, r3
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fe68 	bl	8008f54 <xTaskCreate>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d001      	beq.n	800828e <osThreadNew+0x11a>
            hTask = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800828e:	693b      	ldr	r3, [r7, #16]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3728      	adds	r7, #40	@ 0x28
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a0:	f3ef 8305 	mrs	r3, IPSR
 80082a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80082a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <osDelay+0x1c>
    stat = osErrorISR;
 80082ac:	f06f 0305 	mvn.w	r3, #5
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	e007      	b.n	80082c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 ff8e 	bl	80091e0 <vTaskDelay>
    }
  }

  return (stat);
 80082c4:	68fb      	ldr	r3, [r7, #12]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a07      	ldr	r2, [pc, #28]	@ (80082fc <vApplicationGetIdleTaskMemory+0x2c>)
 80082e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4a06      	ldr	r2, [pc, #24]	@ (8008300 <vApplicationGetIdleTaskMemory+0x30>)
 80082e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2280      	movs	r2, #128	@ 0x80
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	2000849c 	.word	0x2000849c
 8008300:	200084f8 	.word	0x200084f8

08008304 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4a07      	ldr	r2, [pc, #28]	@ (8008330 <vApplicationGetTimerTaskMemory+0x2c>)
 8008314:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	4a06      	ldr	r2, [pc, #24]	@ (8008334 <vApplicationGetTimerTaskMemory+0x30>)
 800831a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	200086f8 	.word	0x200086f8
 8008334:	20008754 	.word	0x20008754

08008338 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f103 0208 	add.w	r2, r3, #8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f04f 32ff 	mov.w	r2, #4294967295
 8008350:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f103 0208 	add.w	r2, r3, #8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f103 0208 	add.w	r2, r3, #8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008392:	b480      	push	{r7}
 8008394:	b085      	sub	sp, #20
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	601a      	str	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083da:	b480      	push	{r7}
 80083dc:	b085      	sub	sp, #20
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f0:	d103      	bne.n	80083fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e00c      	b.n	8008414 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3308      	adds	r3, #8
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e002      	b.n	8008408 <vListInsert+0x2e>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d2f6      	bcs.n	8008402 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	601a      	str	r2, [r3, #0]
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6892      	ldr	r2, [r2, #8]
 8008462:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6852      	ldr	r2, [r2, #4]
 800846c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d103      	bne.n	8008480 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	1e5a      	subs	r2, r3, #1
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <xQueueGenericReset+0x2c>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60bb      	str	r3, [r7, #8]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084cc:	f002 f8a4 	bl	800a618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d8:	68f9      	ldr	r1, [r7, #12]
 80084da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fc:	3b01      	subs	r3, #1
 80084fe:	68f9      	ldr	r1, [r7, #12]
 8008500:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008502:	fb01 f303 	mul.w	r3, r1, r3
 8008506:	441a      	add	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	22ff      	movs	r2, #255	@ 0xff
 8008510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	22ff      	movs	r2, #255	@ 0xff
 8008518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d114      	bne.n	800854c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d01a      	beq.n	8008560 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3310      	adds	r3, #16
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f91a 	bl	8009768 <xTaskRemoveFromEventList>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d012      	beq.n	8008560 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800853a:	4b0d      	ldr	r3, [pc, #52]	@ (8008570 <xQueueGenericReset+0xd0>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	e009      	b.n	8008560 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3310      	adds	r3, #16
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fef1 	bl	8008338 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3324      	adds	r3, #36	@ 0x24
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff feec 	bl	8008338 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008560:	f002 f88c 	bl	800a67c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008564:	2301      	movs	r3, #1
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08e      	sub	sp, #56	@ 0x38
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10b      	bne.n	80085be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <xQueueGenericCreateStatic+0x56>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <xQueueGenericCreateStatic+0x5a>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <xQueueGenericCreateStatic+0x5c>
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10b      	bne.n	80085ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	623b      	str	r3, [r7, #32]
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	e7fd      	b.n	80085e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <xQueueGenericCreateStatic+0x84>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <xQueueGenericCreateStatic+0x88>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <xQueueGenericCreateStatic+0x8a>
 80085fc:	2300      	movs	r3, #0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10b      	bne.n	800861a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	61fb      	str	r3, [r7, #28]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800861a:	2350      	movs	r3, #80	@ 0x50
 800861c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b50      	cmp	r3, #80	@ 0x50
 8008622:	d00b      	beq.n	800863c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	61bb      	str	r3, [r7, #24]
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800863c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00d      	beq.n	8008664 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008650:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f805 	bl	800866e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008666:	4618      	mov	r0, r3
 8008668:	3730      	adds	r7, #48	@ 0x30
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
 800867a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	e002      	b.n	8008690 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800869c:	2101      	movs	r1, #1
 800869e:	69b8      	ldr	r0, [r7, #24]
 80086a0:	f7ff fefe 	bl	80084a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	@ 0x38
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086c2:	2300      	movs	r3, #0
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <xQueueGenericSend+0x34>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <xQueueGenericSend+0x42>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <xQueueGenericSend+0x46>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueGenericSend+0x48>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xQueueGenericSend+0x64>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d103      	bne.n	8008726 <xQueueGenericSend+0x72>
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <xQueueGenericSend+0x76>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueGenericSend+0x78>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xQueueGenericSend+0x94>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	623b      	str	r3, [r7, #32]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008748:	f001 f9f6 	bl	8009b38 <xTaskGetSchedulerState>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <xQueueGenericSend+0xa4>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <xQueueGenericSend+0xa8>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <xQueueGenericSend+0xaa>
 800875c:	2300      	movs	r3, #0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10b      	bne.n	800877a <xQueueGenericSend+0xc6>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	61fb      	str	r3, [r7, #28]
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	e7fd      	b.n	8008776 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800877a:	f001 ff4d 	bl	800a618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008786:	429a      	cmp	r2, r3
 8008788:	d302      	bcc.n	8008790 <xQueueGenericSend+0xdc>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d129      	bne.n	80087e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008796:	f000 fa0f 	bl	8008bb8 <prvCopyDataToQueue>
 800879a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d010      	beq.n	80087c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	3324      	adds	r3, #36	@ 0x24
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 ffdd 	bl	8009768 <xTaskRemoveFromEventList>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d013      	beq.n	80087dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087b4:	4b3f      	ldr	r3, [pc, #252]	@ (80088b4 <xQueueGenericSend+0x200>)
 80087b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	e00a      	b.n	80087dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d007      	beq.n	80087dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087cc:	4b39      	ldr	r3, [pc, #228]	@ (80088b4 <xQueueGenericSend+0x200>)
 80087ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80087dc:	f001 ff4e 	bl	800a67c <vPortExitCritical>
				return pdPASS;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e063      	b.n	80088ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ea:	f001 ff47 	bl	800a67c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e05c      	b.n	80088ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087f8:	f107 0314 	add.w	r3, r7, #20
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 f83f 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008802:	2301      	movs	r3, #1
 8008804:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008806:	f001 ff39 	bl	800a67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800880a:	f000 fd87 	bl	800931c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800880e:	f001 ff03 	bl	800a618 <vPortEnterCritical>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008818:	b25b      	sxtb	r3, r3
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881e:	d103      	bne.n	8008828 <xQueueGenericSend+0x174>
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800882e:	b25b      	sxtb	r3, r3
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d103      	bne.n	800883e <xQueueGenericSend+0x18a>
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800883e:	f001 ff1d 	bl	800a67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008842:	1d3a      	adds	r2, r7, #4
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f001 f82e 	bl	80098ac <xTaskCheckForTimeOut>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d124      	bne.n	80088a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008858:	f000 faa6 	bl	8008da8 <prvIsQueueFull>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d018      	beq.n	8008894 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	3310      	adds	r3, #16
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f000 ff2a 	bl	80096c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008872:	f000 fa31 	bl	8008cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008876:	f000 fd5f 	bl	8009338 <xTaskResumeAll>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f af7c 	bne.w	800877a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008882:	4b0c      	ldr	r3, [pc, #48]	@ (80088b4 <xQueueGenericSend+0x200>)
 8008884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	e772      	b.n	800877a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008896:	f000 fa1f 	bl	8008cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800889a:	f000 fd4d 	bl	8009338 <xTaskResumeAll>
 800889e:	e76c      	b.n	800877a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088a2:	f000 fa19 	bl	8008cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088a6:	f000 fd47 	bl	8009338 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3738      	adds	r7, #56	@ 0x38
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	e000ed04 	.word	0xe000ed04

080088b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b090      	sub	sp, #64	@ 0x40
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSendFromISR+0x3e>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSendFromISR+0x42>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueGenericSendFromISR+0x44>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d103      	bne.n	8008926 <xQueueGenericSendFromISR+0x6e>
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <xQueueGenericSendFromISR+0x72>
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <xQueueGenericSendFromISR+0x74>
 800892a:	2300      	movs	r3, #0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	623b      	str	r3, [r7, #32]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008948:	f001 ff46 	bl	800a7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800894c:	f3ef 8211 	mrs	r2, BASEPRI
 8008950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	61fa      	str	r2, [r7, #28]
 8008962:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008964:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800896c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008970:	429a      	cmp	r2, r3
 8008972:	d302      	bcc.n	800897a <xQueueGenericSendFromISR+0xc2>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b02      	cmp	r3, #2
 8008978:	d12f      	bne.n	80089da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800897a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008980:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008990:	f000 f912 	bl	8008bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008994:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899c:	d112      	bne.n	80089c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a8:	3324      	adds	r3, #36	@ 0x24
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fedc 	bl	8009768 <xTaskRemoveFromEventList>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e007      	b.n	80089d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80089c8:	3301      	adds	r3, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	b25a      	sxtb	r2, r3
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80089d4:	2301      	movs	r3, #1
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80089d8:	e001      	b.n	80089de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3740      	adds	r7, #64	@ 0x40
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08c      	sub	sp, #48	@ 0x30
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10b      	bne.n	8008a26 <xQueueReceive+0x32>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	623b      	str	r3, [r7, #32]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d103      	bne.n	8008a34 <xQueueReceive+0x40>
 8008a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <xQueueReceive+0x44>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <xQueueReceive+0x46>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10b      	bne.n	8008a56 <xQueueReceive+0x62>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	61fb      	str	r3, [r7, #28]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a56:	f001 f86f 	bl	8009b38 <xTaskGetSchedulerState>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <xQueueReceive+0x72>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <xQueueReceive+0x76>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <xQueueReceive+0x78>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10b      	bne.n	8008a88 <xQueueReceive+0x94>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	61bb      	str	r3, [r7, #24]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a88:	f001 fdc6 	bl	800a618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01f      	beq.n	8008ad8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a9c:	f000 f8f6 	bl	8008c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	1e5a      	subs	r2, r3, #1
 8008aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00f      	beq.n	8008ad0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	3310      	adds	r3, #16
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fe57 	bl	8009768 <xTaskRemoveFromEventList>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8008bb4 <xQueueReceive+0x1c0>)
 8008ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ad0:	f001 fdd4 	bl	800a67c <vPortExitCritical>
				return pdPASS;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e069      	b.n	8008bac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ade:	f001 fdcd 	bl	800a67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e062      	b.n	8008bac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aec:	f107 0310 	add.w	r3, r7, #16
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fec5 	bl	8009880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008afa:	f001 fdbf 	bl	800a67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008afe:	f000 fc0d 	bl	800931c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b02:	f001 fd89 	bl	800a618 <vPortEnterCritical>
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b0c:	b25b      	sxtb	r3, r3
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b12:	d103      	bne.n	8008b1c <xQueueReceive+0x128>
 8008b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d103      	bne.n	8008b32 <xQueueReceive+0x13e>
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b32:	f001 fda3 	bl	800a67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b36:	1d3a      	adds	r2, r7, #4
 8008b38:	f107 0310 	add.w	r3, r7, #16
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 feb4 	bl	80098ac <xTaskCheckForTimeOut>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d123      	bne.n	8008b92 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b4c:	f000 f916 	bl	8008d7c <prvIsQueueEmpty>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d017      	beq.n	8008b86 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b58:	3324      	adds	r3, #36	@ 0x24
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fdb0 	bl	80096c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b66:	f000 f8b7 	bl	8008cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b6a:	f000 fbe5 	bl	8009338 <xTaskResumeAll>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d189      	bne.n	8008a88 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008b74:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb4 <xQueueReceive+0x1c0>)
 8008b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	e780      	b.n	8008a88 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b88:	f000 f8a6 	bl	8008cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b8c:	f000 fbd4 	bl	8009338 <xTaskResumeAll>
 8008b90:	e77a      	b.n	8008a88 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b94:	f000 f8a0 	bl	8008cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b98:	f000 fbce 	bl	8009338 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b9e:	f000 f8ed 	bl	8008d7c <prvIsQueueEmpty>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f43f af6f 	beq.w	8008a88 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008baa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3730      	adds	r7, #48	@ 0x30
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10d      	bne.n	8008bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d14d      	bne.n	8008c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 ffc6 	bl	8009b74 <xTaskPriorityDisinherit>
 8008be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	609a      	str	r2, [r3, #8]
 8008bf0:	e043      	b.n	8008c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d119      	bne.n	8008c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6858      	ldr	r0, [r3, #4]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c00:	461a      	mov	r2, r3
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	f012 ff10 	bl	801ba28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d32b      	bcc.n	8008c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	605a      	str	r2, [r3, #4]
 8008c2a:	e026      	b.n	8008c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68d8      	ldr	r0, [r3, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c34:	461a      	mov	r2, r3
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	f012 fef6 	bl	801ba28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c44:	425b      	negs	r3, r3
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d207      	bcs.n	8008c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c60:	425b      	negs	r3, r3
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d105      	bne.n	8008c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c82:	697b      	ldr	r3, [r7, #20]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d018      	beq.n	8008cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	441a      	add	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d303      	bcc.n	8008cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68d9      	ldr	r1, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6838      	ldr	r0, [r7, #0]
 8008ccc:	f012 feac 	bl	801ba28 <memcpy>
	}
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ce0:	f001 fc9a 	bl	800a618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cec:	e011      	b.n	8008d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d012      	beq.n	8008d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3324      	adds	r3, #36	@ 0x24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fd34 	bl	8009768 <xTaskRemoveFromEventList>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d06:	f000 fe35 	bl	8009974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dce9      	bgt.n	8008cee <prvUnlockQueue+0x16>
 8008d1a:	e000      	b.n	8008d1e <prvUnlockQueue+0x46>
					break;
 8008d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	22ff      	movs	r2, #255	@ 0xff
 8008d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d26:	f001 fca9 	bl	800a67c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d2a:	f001 fc75 	bl	800a618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d36:	e011      	b.n	8008d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d012      	beq.n	8008d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3310      	adds	r3, #16
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fd0f 	bl	8009768 <xTaskRemoveFromEventList>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d50:	f000 fe10 	bl	8009974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dce9      	bgt.n	8008d38 <prvUnlockQueue+0x60>
 8008d64:	e000      	b.n	8008d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	22ff      	movs	r2, #255	@ 0xff
 8008d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d70:	f001 fc84 	bl	800a67c <vPortExitCritical>
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d84:	f001 fc48 	bl	800a618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e001      	b.n	8008d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d9a:	f001 fc6f 	bl	800a67c <vPortExitCritical>

	return xReturn;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008db0:	f001 fc32 	bl	800a618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d102      	bne.n	8008dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e001      	b.n	8008dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dca:	f001 fc57 	bl	800a67c <vPortExitCritical>

	return xReturn;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	e014      	b.n	8008e12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008de8:	4a0f      	ldr	r2, [pc, #60]	@ (8008e28 <vQueueAddToRegistry+0x50>)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10b      	bne.n	8008e0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008df4:	490c      	ldr	r1, [pc, #48]	@ (8008e28 <vQueueAddToRegistry+0x50>)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8008e28 <vQueueAddToRegistry+0x50>)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4413      	add	r3, r2
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e0a:	e006      	b.n	8008e1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b07      	cmp	r3, #7
 8008e16:	d9e7      	bls.n	8008de8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20008b54 	.word	0x20008b54

08008e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e3c:	f001 fbec 	bl	800a618 <vPortEnterCritical>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e46:	b25b      	sxtb	r3, r3
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d103      	bne.n	8008e56 <vQueueWaitForMessageRestricted+0x2a>
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e5c:	b25b      	sxtb	r3, r3
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d103      	bne.n	8008e6c <vQueueWaitForMessageRestricted+0x40>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e6c:	f001 fc06 	bl	800a67c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	3324      	adds	r3, #36	@ 0x24
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fc45 	bl	8009710 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e86:	6978      	ldr	r0, [r7, #20]
 8008e88:	f7ff ff26 	bl	8008cd8 <prvUnlockQueue>
	}
 8008e8c:	bf00      	nop
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	@ 0x38
 8008e98:	af04      	add	r7, sp, #16
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10b      	bne.n	8008ec0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	623b      	str	r3, [r7, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	e7fd      	b.n	8008ebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <xTaskCreateStatic+0x4a>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	61fb      	str	r3, [r7, #28]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ede:	235c      	movs	r3, #92	@ 0x5c
 8008ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ee6:	d00b      	beq.n	8008f00 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	61bb      	str	r3, [r7, #24]
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01e      	beq.n	8008f46 <xTaskCreateStatic+0xb2>
 8008f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01b      	beq.n	8008f46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f20:	2300      	movs	r3, #0
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f850 	bl	8008fde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f40:	f000 f8de 	bl	8009100 <prvAddNewTaskToReadyList>
 8008f44:	e001      	b.n	8008f4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f4a:	697b      	ldr	r3, [r7, #20]
	}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3728      	adds	r7, #40	@ 0x28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08c      	sub	sp, #48	@ 0x30
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 fc77 	bl	800a85c <pvPortMalloc>
 8008f6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00e      	beq.n	8008f94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f76:	205c      	movs	r0, #92	@ 0x5c
 8008f78:	f001 fc70 	bl	800a85c <pvPortMalloc>
 8008f7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f8a:	e005      	b.n	8008f98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f8c:	6978      	ldr	r0, [r7, #20]
 8008f8e:	f001 fd33 	bl	800a9f8 <vPortFree>
 8008f92:	e001      	b.n	8008f98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d017      	beq.n	8008fce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fa6:	88fa      	ldrh	r2, [r7, #6]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f80e 	bl	8008fde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fc2:	69f8      	ldr	r0, [r7, #28]
 8008fc4:	f000 f89c 	bl	8009100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	e002      	b.n	8008fd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
	}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b088      	sub	sp, #32
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	21a5      	movs	r1, #165	@ 0xa5
 8008ff8:	f012 fc2e 	bl	801b858 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009006:	3b01      	subs	r3, #1
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	f023 0307 	bic.w	r3, r3, #7
 8009014:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	617b      	str	r3, [r7, #20]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01f      	beq.n	800907e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e012      	b.n	800906a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	7819      	ldrb	r1, [r3, #0]
 800904c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	3334      	adds	r3, #52	@ 0x34
 8009054:	460a      	mov	r2, r1
 8009056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	3301      	adds	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	2b0f      	cmp	r3, #15
 800906e:	d9e9      	bls.n	8009044 <prvInitialiseNewTask+0x66>
 8009070:	e000      	b.n	8009074 <prvInitialiseNewTask+0x96>
			{
				break;
 8009072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800907c:	e003      	b.n	8009086 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	2b37      	cmp	r3, #55	@ 0x37
 800908a:	d901      	bls.n	8009090 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800908c:	2337      	movs	r3, #55	@ 0x37
 800908e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009094:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800909a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff f966 	bl	8008378 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	3318      	adds	r3, #24
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff f961 	bl	8008378 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	2200      	movs	r2, #0
 80090d0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	68f9      	ldr	r1, [r7, #12]
 80090de:	69b8      	ldr	r0, [r7, #24]
 80090e0:	f001 f966 	bl	800a3b0 <pxPortInitialiseStack>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f6:	bf00      	nop
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009108:	f001 fa86 	bl	800a618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800910c:	4b2d      	ldr	r3, [pc, #180]	@ (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a2c      	ldr	r2, [pc, #176]	@ (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 8009114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009116:	4b2c      	ldr	r3, [pc, #176]	@ (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800911e:	4a2a      	ldr	r2, [pc, #168]	@ (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009124:	4b27      	ldr	r3, [pc, #156]	@ (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d110      	bne.n	800914e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800912c:	f000 fc46 	bl	80099bc <prvInitialiseTaskLists>
 8009130:	e00d      	b.n	800914e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009132:	4b26      	ldr	r3, [pc, #152]	@ (80091cc <prvAddNewTaskToReadyList+0xcc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800913a:	4b23      	ldr	r3, [pc, #140]	@ (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	429a      	cmp	r2, r3
 8009146:	d802      	bhi.n	800914e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009148:	4a1f      	ldr	r2, [pc, #124]	@ (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800914e:	4b20      	ldr	r3, [pc, #128]	@ (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a1e      	ldr	r2, [pc, #120]	@ (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 8009156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009158:	4b1d      	ldr	r3, [pc, #116]	@ (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009164:	4b1b      	ldr	r3, [pc, #108]	@ (80091d4 <prvAddNewTaskToReadyList+0xd4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <prvAddNewTaskToReadyList+0x74>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	4a18      	ldr	r2, [pc, #96]	@ (80091d4 <prvAddNewTaskToReadyList+0xd4>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a15      	ldr	r2, [pc, #84]	@ (80091d8 <prvAddNewTaskToReadyList+0xd8>)
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7ff f901 	bl	8008392 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009190:	f001 fa74 	bl	800a67c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009194:	4b0d      	ldr	r3, [pc, #52]	@ (80091cc <prvAddNewTaskToReadyList+0xcc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00e      	beq.n	80091ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d207      	bcs.n	80091ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091aa:	4b0c      	ldr	r3, [pc, #48]	@ (80091dc <prvAddNewTaskToReadyList+0xdc>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20009068 	.word	0x20009068
 80091c8:	20008b94 	.word	0x20008b94
 80091cc:	20009074 	.word	0x20009074
 80091d0:	20009084 	.word	0x20009084
 80091d4:	20009070 	.word	0x20009070
 80091d8:	20008b98 	.word	0x20008b98
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d018      	beq.n	8009224 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091f2:	4b14      	ldr	r3, [pc, #80]	@ (8009244 <vTaskDelay+0x64>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <vTaskDelay+0x32>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60bb      	str	r3, [r7, #8]
}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	e7fd      	b.n	800920e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009212:	f000 f883 	bl	800931c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009216:	2100      	movs	r1, #0
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fd1b 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800921e:	f000 f88b 	bl	8009338 <xTaskResumeAll>
 8009222:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d107      	bne.n	800923a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800922a:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <vTaskDelay+0x68>)
 800922c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20009090 	.word	0x20009090
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	@ 0x28
 8009250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800925a:	463a      	mov	r2, r7
 800925c:	1d39      	adds	r1, r7, #4
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f834 	bl	80082d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	9202      	str	r2, [sp, #8]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	2300      	movs	r3, #0
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2300      	movs	r3, #0
 8009278:	460a      	mov	r2, r1
 800927a:	4922      	ldr	r1, [pc, #136]	@ (8009304 <vTaskStartScheduler+0xb8>)
 800927c:	4822      	ldr	r0, [pc, #136]	@ (8009308 <vTaskStartScheduler+0xbc>)
 800927e:	f7ff fe09 	bl	8008e94 <xTaskCreateStatic>
 8009282:	4603      	mov	r3, r0
 8009284:	4a21      	ldr	r2, [pc, #132]	@ (800930c <vTaskStartScheduler+0xc0>)
 8009286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009288:	4b20      	ldr	r3, [pc, #128]	@ (800930c <vTaskStartScheduler+0xc0>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e001      	b.n	800929a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d102      	bne.n	80092a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092a0:	f000 fd2c 	bl	8009cfc <xTimerCreateTimerTask>
 80092a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d116      	bne.n	80092da <vTaskStartScheduler+0x8e>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	613b      	str	r3, [r7, #16]
}
 80092be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092c0:	4b13      	ldr	r3, [pc, #76]	@ (8009310 <vTaskStartScheduler+0xc4>)
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092c8:	4b12      	ldr	r3, [pc, #72]	@ (8009314 <vTaskStartScheduler+0xc8>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092ce:	4b12      	ldr	r3, [pc, #72]	@ (8009318 <vTaskStartScheduler+0xcc>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092d4:	f001 f8fc 	bl	800a4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092d8:	e00f      	b.n	80092fa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d10b      	bne.n	80092fa <vTaskStartScheduler+0xae>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60fb      	str	r3, [r7, #12]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <vTaskStartScheduler+0xaa>
}
 80092fa:	bf00      	nop
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	08020984 	.word	0x08020984
 8009308:	0800998d 	.word	0x0800998d
 800930c:	2000908c 	.word	0x2000908c
 8009310:	20009088 	.word	0x20009088
 8009314:	20009074 	.word	0x20009074
 8009318:	2000906c 	.word	0x2000906c

0800931c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009320:	4b04      	ldr	r3, [pc, #16]	@ (8009334 <vTaskSuspendAll+0x18>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3301      	adds	r3, #1
 8009326:	4a03      	ldr	r2, [pc, #12]	@ (8009334 <vTaskSuspendAll+0x18>)
 8009328:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800932a:	bf00      	nop
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	20009090 	.word	0x20009090

08009338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009342:	2300      	movs	r3, #0
 8009344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009346:	4b42      	ldr	r3, [pc, #264]	@ (8009450 <xTaskResumeAll+0x118>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10b      	bne.n	8009366 <xTaskResumeAll+0x2e>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	603b      	str	r3, [r7, #0]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009366:	f001 f957 	bl	800a618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800936a:	4b39      	ldr	r3, [pc, #228]	@ (8009450 <xTaskResumeAll+0x118>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a37      	ldr	r2, [pc, #220]	@ (8009450 <xTaskResumeAll+0x118>)
 8009372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009374:	4b36      	ldr	r3, [pc, #216]	@ (8009450 <xTaskResumeAll+0x118>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d162      	bne.n	8009442 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800937c:	4b35      	ldr	r3, [pc, #212]	@ (8009454 <xTaskResumeAll+0x11c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d05e      	beq.n	8009442 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009384:	e02f      	b.n	80093e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009386:	4b34      	ldr	r3, [pc, #208]	@ (8009458 <xTaskResumeAll+0x120>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3318      	adds	r3, #24
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff f85a 	bl	800844c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff f855 	bl	800844c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a6:	4b2d      	ldr	r3, [pc, #180]	@ (800945c <xTaskResumeAll+0x124>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d903      	bls.n	80093b6 <xTaskResumeAll+0x7e>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b2:	4a2a      	ldr	r2, [pc, #168]	@ (800945c <xTaskResumeAll+0x124>)
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4a27      	ldr	r2, [pc, #156]	@ (8009460 <xTaskResumeAll+0x128>)
 80093c4:	441a      	add	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fe ffe0 	bl	8008392 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d6:	4b23      	ldr	r3, [pc, #140]	@ (8009464 <xTaskResumeAll+0x12c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d302      	bcc.n	80093e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80093e0:	4b21      	ldr	r3, [pc, #132]	@ (8009468 <xTaskResumeAll+0x130>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <xTaskResumeAll+0x120>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1cb      	bne.n	8009386 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093f4:	f000 fb80 	bl	8009af8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093f8:	4b1c      	ldr	r3, [pc, #112]	@ (800946c <xTaskResumeAll+0x134>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d010      	beq.n	8009426 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009404:	f000 f846 	bl	8009494 <xTaskIncrementTick>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800940e:	4b16      	ldr	r3, [pc, #88]	@ (8009468 <xTaskResumeAll+0x130>)
 8009410:	2201      	movs	r2, #1
 8009412:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3b01      	subs	r3, #1
 8009418:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1f1      	bne.n	8009404 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009420:	4b12      	ldr	r3, [pc, #72]	@ (800946c <xTaskResumeAll+0x134>)
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009426:	4b10      	ldr	r3, [pc, #64]	@ (8009468 <xTaskResumeAll+0x130>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800942e:	2301      	movs	r3, #1
 8009430:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009432:	4b0f      	ldr	r3, [pc, #60]	@ (8009470 <xTaskResumeAll+0x138>)
 8009434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009442:	f001 f91b 	bl	800a67c <vPortExitCritical>

	return xAlreadyYielded;
 8009446:	68bb      	ldr	r3, [r7, #8]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20009090 	.word	0x20009090
 8009454:	20009068 	.word	0x20009068
 8009458:	20009028 	.word	0x20009028
 800945c:	20009070 	.word	0x20009070
 8009460:	20008b98 	.word	0x20008b98
 8009464:	20008b94 	.word	0x20008b94
 8009468:	2000907c 	.word	0x2000907c
 800946c:	20009078 	.word	0x20009078
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800947a:	4b05      	ldr	r3, [pc, #20]	@ (8009490 <xTaskGetTickCount+0x1c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009480:	687b      	ldr	r3, [r7, #4]
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2000906c 	.word	0x2000906c

08009494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949e:	4b4f      	ldr	r3, [pc, #316]	@ (80095dc <xTaskIncrementTick+0x148>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f040 8090 	bne.w	80095c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094a8:	4b4d      	ldr	r3, [pc, #308]	@ (80095e0 <xTaskIncrementTick+0x14c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094b0:	4a4b      	ldr	r2, [pc, #300]	@ (80095e0 <xTaskIncrementTick+0x14c>)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d121      	bne.n	8009500 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80094bc:	4b49      	ldr	r3, [pc, #292]	@ (80095e4 <xTaskIncrementTick+0x150>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <xTaskIncrementTick+0x4a>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	603b      	str	r3, [r7, #0]
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	e7fd      	b.n	80094da <xTaskIncrementTick+0x46>
 80094de:	4b41      	ldr	r3, [pc, #260]	@ (80095e4 <xTaskIncrementTick+0x150>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	4b40      	ldr	r3, [pc, #256]	@ (80095e8 <xTaskIncrementTick+0x154>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a3e      	ldr	r2, [pc, #248]	@ (80095e4 <xTaskIncrementTick+0x150>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	4a3e      	ldr	r2, [pc, #248]	@ (80095e8 <xTaskIncrementTick+0x154>)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	4b3e      	ldr	r3, [pc, #248]	@ (80095ec <xTaskIncrementTick+0x158>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	4a3c      	ldr	r2, [pc, #240]	@ (80095ec <xTaskIncrementTick+0x158>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	f000 fafc 	bl	8009af8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009500:	4b3b      	ldr	r3, [pc, #236]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	429a      	cmp	r2, r3
 8009508:	d349      	bcc.n	800959e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800950a:	4b36      	ldr	r3, [pc, #216]	@ (80095e4 <xTaskIncrementTick+0x150>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009514:	4b36      	ldr	r3, [pc, #216]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 8009516:	f04f 32ff 	mov.w	r2, #4294967295
 800951a:	601a      	str	r2, [r3, #0]
					break;
 800951c:	e03f      	b.n	800959e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951e:	4b31      	ldr	r3, [pc, #196]	@ (80095e4 <xTaskIncrementTick+0x150>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d203      	bcs.n	800953e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009536:	4a2e      	ldr	r2, [pc, #184]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800953c:	e02f      	b.n	800959e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	3304      	adds	r3, #4
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe ff82 	bl	800844c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	3318      	adds	r3, #24
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe ff79 	bl	800844c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955e:	4b25      	ldr	r3, [pc, #148]	@ (80095f4 <xTaskIncrementTick+0x160>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d903      	bls.n	800956e <xTaskIncrementTick+0xda>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956a:	4a22      	ldr	r2, [pc, #136]	@ (80095f4 <xTaskIncrementTick+0x160>)
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4a1f      	ldr	r2, [pc, #124]	@ (80095f8 <xTaskIncrementTick+0x164>)
 800957c:	441a      	add	r2, r3
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7fe ff04 	bl	8008392 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958e:	4b1b      	ldr	r3, [pc, #108]	@ (80095fc <xTaskIncrementTick+0x168>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	429a      	cmp	r2, r3
 8009596:	d3b8      	bcc.n	800950a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800959c:	e7b5      	b.n	800950a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800959e:	4b17      	ldr	r3, [pc, #92]	@ (80095fc <xTaskIncrementTick+0x168>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a4:	4914      	ldr	r1, [pc, #80]	@ (80095f8 <xTaskIncrementTick+0x164>)
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d901      	bls.n	80095ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80095b6:	2301      	movs	r3, #1
 80095b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095ba:	4b11      	ldr	r3, [pc, #68]	@ (8009600 <xTaskIncrementTick+0x16c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80095c2:	2301      	movs	r3, #1
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	e004      	b.n	80095d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009604 <xTaskIncrementTick+0x170>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3301      	adds	r3, #1
 80095ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009604 <xTaskIncrementTick+0x170>)
 80095d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095d2:	697b      	ldr	r3, [r7, #20]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20009090 	.word	0x20009090
 80095e0:	2000906c 	.word	0x2000906c
 80095e4:	20009020 	.word	0x20009020
 80095e8:	20009024 	.word	0x20009024
 80095ec:	20009080 	.word	0x20009080
 80095f0:	20009088 	.word	0x20009088
 80095f4:	20009070 	.word	0x20009070
 80095f8:	20008b98 	.word	0x20008b98
 80095fc:	20008b94 	.word	0x20008b94
 8009600:	2000907c 	.word	0x2000907c
 8009604:	20009078 	.word	0x20009078

08009608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800960e:	4b28      	ldr	r3, [pc, #160]	@ (80096b0 <vTaskSwitchContext+0xa8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009616:	4b27      	ldr	r3, [pc, #156]	@ (80096b4 <vTaskSwitchContext+0xac>)
 8009618:	2201      	movs	r2, #1
 800961a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800961c:	e042      	b.n	80096a4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800961e:	4b25      	ldr	r3, [pc, #148]	@ (80096b4 <vTaskSwitchContext+0xac>)
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009624:	4b24      	ldr	r3, [pc, #144]	@ (80096b8 <vTaskSwitchContext+0xb0>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	e011      	b.n	8009650 <vTaskSwitchContext+0x48>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10b      	bne.n	800964a <vTaskSwitchContext+0x42>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	607b      	str	r3, [r7, #4]
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	e7fd      	b.n	8009646 <vTaskSwitchContext+0x3e>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3b01      	subs	r3, #1
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	491a      	ldr	r1, [pc, #104]	@ (80096bc <vTaskSwitchContext+0xb4>)
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4613      	mov	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0e3      	beq.n	800962c <vTaskSwitchContext+0x24>
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4a13      	ldr	r2, [pc, #76]	@ (80096bc <vTaskSwitchContext+0xb4>)
 8009670:	4413      	add	r3, r2
 8009672:	60bb      	str	r3, [r7, #8]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	605a      	str	r2, [r3, #4]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	3308      	adds	r3, #8
 8009686:	429a      	cmp	r2, r3
 8009688:	d104      	bne.n	8009694 <vTaskSwitchContext+0x8c>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	605a      	str	r2, [r3, #4]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	4a09      	ldr	r2, [pc, #36]	@ (80096c0 <vTaskSwitchContext+0xb8>)
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	4a06      	ldr	r2, [pc, #24]	@ (80096b8 <vTaskSwitchContext+0xb0>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6013      	str	r3, [r2, #0]
}
 80096a4:	bf00      	nop
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	20009090 	.word	0x20009090
 80096b4:	2000907c 	.word	0x2000907c
 80096b8:	20009070 	.word	0x20009070
 80096bc:	20008b98 	.word	0x20008b98
 80096c0:	20008b94 	.word	0x20008b94

080096c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <vTaskPlaceOnEventList+0x48>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3318      	adds	r3, #24
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fe fe70 	bl	80083da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096fa:	2101      	movs	r1, #1
 80096fc:	6838      	ldr	r0, [r7, #0]
 80096fe:	f000 faa9 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20008b94 	.word	0x20008b94

08009710 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	617b      	str	r3, [r7, #20]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800973a:	4b0a      	ldr	r3, [pc, #40]	@ (8009764 <vTaskPlaceOnEventListRestricted+0x54>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3318      	adds	r3, #24
 8009740:	4619      	mov	r1, r3
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7fe fe25 	bl	8008392 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	68b8      	ldr	r0, [r7, #8]
 8009758:	f000 fa7c 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
	}
 800975c:	bf00      	nop
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20008b94 	.word	0x20008b94

08009768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10b      	bne.n	8009796 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
}
 8009790:	bf00      	nop
 8009792:	bf00      	nop
 8009794:	e7fd      	b.n	8009792 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	3318      	adds	r3, #24
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe fe56 	bl	800844c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009818 <xTaskRemoveFromEventList+0xb0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d11d      	bne.n	80097e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fe4d 	bl	800844c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b6:	4b19      	ldr	r3, [pc, #100]	@ (800981c <xTaskRemoveFromEventList+0xb4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d903      	bls.n	80097c6 <xTaskRemoveFromEventList+0x5e>
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	4a16      	ldr	r2, [pc, #88]	@ (800981c <xTaskRemoveFromEventList+0xb4>)
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ca:	4613      	mov	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4a13      	ldr	r2, [pc, #76]	@ (8009820 <xTaskRemoveFromEventList+0xb8>)
 80097d4:	441a      	add	r2, r3
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3304      	adds	r3, #4
 80097da:	4619      	mov	r1, r3
 80097dc:	4610      	mov	r0, r2
 80097de:	f7fe fdd8 	bl	8008392 <vListInsertEnd>
 80097e2:	e005      	b.n	80097f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	3318      	adds	r3, #24
 80097e8:	4619      	mov	r1, r3
 80097ea:	480e      	ldr	r0, [pc, #56]	@ (8009824 <xTaskRemoveFromEventList+0xbc>)
 80097ec:	f7fe fdd1 	bl	8008392 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <xTaskRemoveFromEventList+0xc0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d905      	bls.n	800980a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097fe:	2301      	movs	r3, #1
 8009800:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009802:	4b0a      	ldr	r3, [pc, #40]	@ (800982c <xTaskRemoveFromEventList+0xc4>)
 8009804:	2201      	movs	r2, #1
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	e001      	b.n	800980e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800980e:	697b      	ldr	r3, [r7, #20]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20009090 	.word	0x20009090
 800981c:	20009070 	.word	0x20009070
 8009820:	20008b98 	.word	0x20008b98
 8009824:	20009028 	.word	0x20009028
 8009828:	20008b94 	.word	0x20008b94
 800982c:	2000907c 	.word	0x2000907c

08009830 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10b      	bne.n	8009856 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	60fb      	str	r3, [r7, #12]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009856:	f000 fedf 	bl	800a618 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800985a:	4b07      	ldr	r3, [pc, #28]	@ (8009878 <vTaskSetTimeOutState+0x48>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009862:	4b06      	ldr	r3, [pc, #24]	@ (800987c <vTaskSetTimeOutState+0x4c>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800986a:	f000 ff07 	bl	800a67c <vPortExitCritical>
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20009080 	.word	0x20009080
 800987c:	2000906c 	.word	0x2000906c

08009880 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009888:	4b06      	ldr	r3, [pc, #24]	@ (80098a4 <vTaskInternalSetTimeOutState+0x24>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009890:	4b05      	ldr	r3, [pc, #20]	@ (80098a8 <vTaskInternalSetTimeOutState+0x28>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	605a      	str	r2, [r3, #4]
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	20009080 	.word	0x20009080
 80098a8:	2000906c 	.word	0x2000906c

080098ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10b      	bne.n	80098d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	613b      	str	r3, [r7, #16]
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	e7fd      	b.n	80098d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	60fb      	str	r3, [r7, #12]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80098f2:	f000 fe91 	bl	800a618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098f6:	4b1d      	ldr	r3, [pc, #116]	@ (800996c <xTaskCheckForTimeOut+0xc0>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d102      	bne.n	8009916 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009910:	2300      	movs	r3, #0
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	e023      	b.n	800995e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <xTaskCheckForTimeOut+0xc4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d007      	beq.n	8009932 <xTaskCheckForTimeOut+0x86>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	429a      	cmp	r2, r3
 800992a:	d302      	bcc.n	8009932 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	61fb      	str	r3, [r7, #28]
 8009930:	e015      	b.n	800995e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	429a      	cmp	r2, r3
 800993a:	d20b      	bcs.n	8009954 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	1ad2      	subs	r2, r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff ff99 	bl	8009880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
 8009952:	e004      	b.n	800995e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800995a:	2301      	movs	r3, #1
 800995c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800995e:	f000 fe8d 	bl	800a67c <vPortExitCritical>

	return xReturn;
 8009962:	69fb      	ldr	r3, [r7, #28]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3720      	adds	r7, #32
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	2000906c 	.word	0x2000906c
 8009970:	20009080 	.word	0x20009080

08009974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009978:	4b03      	ldr	r3, [pc, #12]	@ (8009988 <vTaskMissedYield+0x14>)
 800997a:	2201      	movs	r2, #1
 800997c:	601a      	str	r2, [r3, #0]
}
 800997e:	bf00      	nop
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	2000907c 	.word	0x2000907c

0800998c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009994:	f000 f852 	bl	8009a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009998:	4b06      	ldr	r3, [pc, #24]	@ (80099b4 <prvIdleTask+0x28>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d9f9      	bls.n	8009994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099a0:	4b05      	ldr	r3, [pc, #20]	@ (80099b8 <prvIdleTask+0x2c>)
 80099a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099b0:	e7f0      	b.n	8009994 <prvIdleTask+0x8>
 80099b2:	bf00      	nop
 80099b4:	20008b98 	.word	0x20008b98
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099c2:	2300      	movs	r3, #0
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	e00c      	b.n	80099e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4a12      	ldr	r2, [pc, #72]	@ (8009a1c <prvInitialiseTaskLists+0x60>)
 80099d4:	4413      	add	r3, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fcae 	bl	8008338 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3301      	adds	r3, #1
 80099e0:	607b      	str	r3, [r7, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b37      	cmp	r3, #55	@ 0x37
 80099e6:	d9ef      	bls.n	80099c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099e8:	480d      	ldr	r0, [pc, #52]	@ (8009a20 <prvInitialiseTaskLists+0x64>)
 80099ea:	f7fe fca5 	bl	8008338 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099ee:	480d      	ldr	r0, [pc, #52]	@ (8009a24 <prvInitialiseTaskLists+0x68>)
 80099f0:	f7fe fca2 	bl	8008338 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099f4:	480c      	ldr	r0, [pc, #48]	@ (8009a28 <prvInitialiseTaskLists+0x6c>)
 80099f6:	f7fe fc9f 	bl	8008338 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099fa:	480c      	ldr	r0, [pc, #48]	@ (8009a2c <prvInitialiseTaskLists+0x70>)
 80099fc:	f7fe fc9c 	bl	8008338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a00:	480b      	ldr	r0, [pc, #44]	@ (8009a30 <prvInitialiseTaskLists+0x74>)
 8009a02:	f7fe fc99 	bl	8008338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a06:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <prvInitialiseTaskLists+0x78>)
 8009a08:	4a05      	ldr	r2, [pc, #20]	@ (8009a20 <prvInitialiseTaskLists+0x64>)
 8009a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a38 <prvInitialiseTaskLists+0x7c>)
 8009a0e:	4a05      	ldr	r2, [pc, #20]	@ (8009a24 <prvInitialiseTaskLists+0x68>)
 8009a10:	601a      	str	r2, [r3, #0]
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20008b98 	.word	0x20008b98
 8009a20:	20008ff8 	.word	0x20008ff8
 8009a24:	2000900c 	.word	0x2000900c
 8009a28:	20009028 	.word	0x20009028
 8009a2c:	2000903c 	.word	0x2000903c
 8009a30:	20009054 	.word	0x20009054
 8009a34:	20009020 	.word	0x20009020
 8009a38:	20009024 	.word	0x20009024

08009a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a42:	e019      	b.n	8009a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a44:	f000 fde8 	bl	800a618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a48:	4b10      	ldr	r3, [pc, #64]	@ (8009a8c <prvCheckTasksWaitingTermination+0x50>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fcf9 	bl	800844c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a90 <prvCheckTasksWaitingTermination+0x54>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	4a0b      	ldr	r2, [pc, #44]	@ (8009a90 <prvCheckTasksWaitingTermination+0x54>)
 8009a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a64:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <prvCheckTasksWaitingTermination+0x58>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8009a94 <prvCheckTasksWaitingTermination+0x58>)
 8009a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a6e:	f000 fe05 	bl	800a67c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f810 	bl	8009a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a78:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <prvCheckTasksWaitingTermination+0x58>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e1      	bne.n	8009a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	2000903c 	.word	0x2000903c
 8009a90:	20009068 	.word	0x20009068
 8009a94:	20009050 	.word	0x20009050

08009a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d108      	bne.n	8009abc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 ffa2 	bl	800a9f8 <vPortFree>
				vPortFree( pxTCB );
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 ff9f 	bl	800a9f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009aba:	e019      	b.n	8009af0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d103      	bne.n	8009ace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 ff96 	bl	800a9f8 <vPortFree>
	}
 8009acc:	e010      	b.n	8009af0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d00b      	beq.n	8009af0 <prvDeleteTCB+0x58>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60fb      	str	r3, [r7, #12]
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <prvDeleteTCB+0x54>
	}
 8009af0:	bf00      	nop
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009afe:	4b0c      	ldr	r3, [pc, #48]	@ (8009b30 <prvResetNextTaskUnblockTime+0x38>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d104      	bne.n	8009b12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <prvResetNextTaskUnblockTime+0x3c>)
 8009b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b10:	e008      	b.n	8009b24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b12:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <prvResetNextTaskUnblockTime+0x38>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	4a04      	ldr	r2, [pc, #16]	@ (8009b34 <prvResetNextTaskUnblockTime+0x3c>)
 8009b22:	6013      	str	r3, [r2, #0]
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20009020 	.word	0x20009020
 8009b34:	20009088 	.word	0x20009088

08009b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b6c <xTaskGetSchedulerState+0x34>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d102      	bne.n	8009b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b46:	2301      	movs	r3, #1
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	e008      	b.n	8009b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b4c:	4b08      	ldr	r3, [pc, #32]	@ (8009b70 <xTaskGetSchedulerState+0x38>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b54:	2302      	movs	r3, #2
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	e001      	b.n	8009b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b5e:	687b      	ldr	r3, [r7, #4]
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	20009074 	.word	0x20009074
 8009b70:	20009090 	.word	0x20009090

08009b74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d058      	beq.n	8009c3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c48 <xTaskPriorityDisinherit+0xd4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d00b      	beq.n	8009bac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	60fb      	str	r3, [r7, #12]
}
 8009ba6:	bf00      	nop
 8009ba8:	bf00      	nop
 8009baa:	e7fd      	b.n	8009ba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	60bb      	str	r3, [r7, #8]
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	e7fd      	b.n	8009bc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd0:	1e5a      	subs	r2, r3, #1
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d02c      	beq.n	8009c3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d128      	bne.n	8009c3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fc2c 	bl	800844c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c4c <xTaskPriorityDisinherit+0xd8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <xTaskPriorityDisinherit+0xa8>
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	4a0c      	ldr	r2, [pc, #48]	@ (8009c4c <xTaskPriorityDisinherit+0xd8>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a09      	ldr	r2, [pc, #36]	@ (8009c50 <xTaskPriorityDisinherit+0xdc>)
 8009c2a:	441a      	add	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7fe fbad 	bl	8008392 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c3c:	697b      	ldr	r3, [r7, #20]
	}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20008b94 	.word	0x20008b94
 8009c4c:	20009070 	.word	0x20009070
 8009c50:	20008b98 	.word	0x20008b98

08009c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b21      	ldr	r3, [pc, #132]	@ (8009ce4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c64:	4b20      	ldr	r3, [pc, #128]	@ (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fbee 	bl	800844c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d10a      	bne.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4819      	ldr	r0, [pc, #100]	@ (8009cec <prvAddCurrentTaskToDelayedList+0x98>)
 8009c88:	f7fe fb83 	bl	8008392 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c8c:	e026      	b.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c96:	4b14      	ldr	r3, [pc, #80]	@ (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d209      	bcs.n	8009cba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ca6:	4b12      	ldr	r3, [pc, #72]	@ (8009cf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7fe fb91 	bl	80083da <vListInsert>
}
 8009cb8:	e010      	b.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cba:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe fb87 	bl	80083da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d202      	bcs.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009cd6:	4a08      	ldr	r2, [pc, #32]	@ (8009cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6013      	str	r3, [r2, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2000906c 	.word	0x2000906c
 8009ce8:	20008b94 	.word	0x20008b94
 8009cec:	20009054 	.word	0x20009054
 8009cf0:	20009024 	.word	0x20009024
 8009cf4:	20009020 	.word	0x20009020
 8009cf8:	20009088 	.word	0x20009088

08009cfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	@ 0x28
 8009d00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d06:	f000 fb13 	bl	800a330 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009d80 <xTimerCreateTimerTask+0x84>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d021      	beq.n	8009d56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d1a:	1d3a      	adds	r2, r7, #4
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	f107 030c 	add.w	r3, r7, #12
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe faed 	bl	8008304 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	9202      	str	r2, [sp, #8]
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	2302      	movs	r3, #2
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	4911      	ldr	r1, [pc, #68]	@ (8009d84 <xTimerCreateTimerTask+0x88>)
 8009d3e:	4812      	ldr	r0, [pc, #72]	@ (8009d88 <xTimerCreateTimerTask+0x8c>)
 8009d40:	f7ff f8a8 	bl	8008e94 <xTaskCreateStatic>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4a11      	ldr	r2, [pc, #68]	@ (8009d8c <xTimerCreateTimerTask+0x90>)
 8009d48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d4a:	4b10      	ldr	r3, [pc, #64]	@ (8009d8c <xTimerCreateTimerTask+0x90>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d52:	2301      	movs	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10b      	bne.n	8009d74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	613b      	str	r3, [r7, #16]
}
 8009d6e:	bf00      	nop
 8009d70:	bf00      	nop
 8009d72:	e7fd      	b.n	8009d70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d74:	697b      	ldr	r3, [r7, #20]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	200090c4 	.word	0x200090c4
 8009d84:	0802098c 	.word	0x0802098c
 8009d88:	08009ec9 	.word	0x08009ec9
 8009d8c:	200090c8 	.word	0x200090c8

08009d90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08a      	sub	sp, #40	@ 0x28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	623b      	str	r3, [r7, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dc0:	4b19      	ldr	r3, [pc, #100]	@ (8009e28 <xTimerGenericCommand+0x98>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d02a      	beq.n	8009e1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b05      	cmp	r3, #5
 8009dd8:	dc18      	bgt.n	8009e0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009dda:	f7ff fead 	bl	8009b38 <xTaskGetSchedulerState>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d109      	bne.n	8009df8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009de4:	4b10      	ldr	r3, [pc, #64]	@ (8009e28 <xTimerGenericCommand+0x98>)
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	f107 0110 	add.w	r1, r7, #16
 8009dec:	2300      	movs	r3, #0
 8009dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df0:	f7fe fc60 	bl	80086b4 <xQueueGenericSend>
 8009df4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009df6:	e012      	b.n	8009e1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009df8:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <xTimerGenericCommand+0x98>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	f107 0110 	add.w	r1, r7, #16
 8009e00:	2300      	movs	r3, #0
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7fe fc56 	bl	80086b4 <xQueueGenericSend>
 8009e08:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e0a:	e008      	b.n	8009e1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e0c:	4b06      	ldr	r3, [pc, #24]	@ (8009e28 <xTimerGenericCommand+0x98>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	f107 0110 	add.w	r1, r7, #16
 8009e14:	2300      	movs	r3, #0
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	f7fe fd4e 	bl	80088b8 <xQueueGenericSendFromISR>
 8009e1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3728      	adds	r7, #40	@ 0x28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	200090c4 	.word	0x200090c4

08009e2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e36:	4b23      	ldr	r3, [pc, #140]	@ (8009ec4 <prvProcessExpiredTimer+0x98>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	3304      	adds	r3, #4
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fb01 	bl	800844c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d023      	beq.n	8009ea0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	18d1      	adds	r1, r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	6978      	ldr	r0, [r7, #20]
 8009e66:	f000 f8d5 	bl	800a014 <prvInsertTimerInActiveList>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d020      	beq.n	8009eb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e70:	2300      	movs	r3, #0
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2300      	movs	r3, #0
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	2100      	movs	r1, #0
 8009e7a:	6978      	ldr	r0, [r7, #20]
 8009e7c:	f7ff ff88 	bl	8009d90 <xTimerGenericCommand>
 8009e80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d114      	bne.n	8009eb2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60fb      	str	r3, [r7, #12]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	6978      	ldr	r0, [r7, #20]
 8009eb8:	4798      	blx	r3
}
 8009eba:	bf00      	nop
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	200090bc 	.word	0x200090bc

08009ec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ed0:	f107 0308 	add.w	r3, r7, #8
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f859 	bl	8009f8c <prvGetNextExpireTime>
 8009eda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f805 	bl	8009ef0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ee6:	f000 f8d7 	bl	800a098 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009eea:	bf00      	nop
 8009eec:	e7f0      	b.n	8009ed0 <prvTimerTask+0x8>
	...

08009ef0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009efa:	f7ff fa0f 	bl	800931c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f866 	bl	8009fd4 <prvSampleTimeNow>
 8009f08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d130      	bne.n	8009f72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <prvProcessTimerOrBlockTask+0x3c>
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d806      	bhi.n	8009f2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f1e:	f7ff fa0b 	bl	8009338 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff ff81 	bl	8009e2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f2a:	e024      	b.n	8009f76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f32:	4b13      	ldr	r3, [pc, #76]	@ (8009f80 <prvProcessTimerOrBlockTask+0x90>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <prvProcessTimerOrBlockTask+0x50>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e000      	b.n	8009f42 <prvProcessTimerOrBlockTask+0x52>
 8009f40:	2300      	movs	r3, #0
 8009f42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f44:	4b0f      	ldr	r3, [pc, #60]	@ (8009f84 <prvProcessTimerOrBlockTask+0x94>)
 8009f46:	6818      	ldr	r0, [r3, #0]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	4619      	mov	r1, r3
 8009f52:	f7fe ff6b 	bl	8008e2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f56:	f7ff f9ef 	bl	8009338 <xTaskResumeAll>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10a      	bne.n	8009f76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f60:	4b09      	ldr	r3, [pc, #36]	@ (8009f88 <prvProcessTimerOrBlockTask+0x98>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
}
 8009f70:	e001      	b.n	8009f76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f72:	f7ff f9e1 	bl	8009338 <xTaskResumeAll>
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	200090c0 	.word	0x200090c0
 8009f84:	200090c4 	.word	0x200090c4
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f94:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd0 <prvGetNextExpireTime+0x44>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <prvGetNextExpireTime+0x16>
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	e000      	b.n	8009fa4 <prvGetNextExpireTime+0x18>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fb0:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <prvGetNextExpireTime+0x44>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e001      	b.n	8009fc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	200090bc 	.word	0x200090bc

08009fd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009fdc:	f7ff fa4a 	bl	8009474 <xTaskGetTickCount>
 8009fe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	@ (800a010 <prvSampleTimeNow+0x3c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d205      	bcs.n	8009ff8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fec:	f000 f93a 	bl	800a264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	e002      	b.n	8009ffe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ffe:	4a04      	ldr	r2, [pc, #16]	@ (800a010 <prvSampleTimeNow+0x3c>)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a004:	68fb      	ldr	r3, [r7, #12]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	200090cc 	.word	0x200090cc

0800a014 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d812      	bhi.n	800a060 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	1ad2      	subs	r2, r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	429a      	cmp	r2, r3
 800a046:	d302      	bcc.n	800a04e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a048:	2301      	movs	r3, #1
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	e01b      	b.n	800a086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a04e:	4b10      	ldr	r3, [pc, #64]	@ (800a090 <prvInsertTimerInActiveList+0x7c>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3304      	adds	r3, #4
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f7fe f9be 	bl	80083da <vListInsert>
 800a05e:	e012      	b.n	800a086 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	429a      	cmp	r2, r3
 800a066:	d206      	bcs.n	800a076 <prvInsertTimerInActiveList+0x62>
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d302      	bcc.n	800a076 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	e007      	b.n	800a086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a076:	4b07      	ldr	r3, [pc, #28]	@ (800a094 <prvInsertTimerInActiveList+0x80>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fe f9aa 	bl	80083da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a086:	697b      	ldr	r3, [r7, #20]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200090c0 	.word	0x200090c0
 800a094:	200090bc 	.word	0x200090bc

0800a098 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08e      	sub	sp, #56	@ 0x38
 800a09c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a09e:	e0ce      	b.n	800a23e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da19      	bge.n	800a0da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	61fb      	str	r3, [r7, #28]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0d0:	6850      	ldr	r0, [r2, #4]
 800a0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0d4:	6892      	ldr	r2, [r2, #8]
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f2c0 80ae 	blt.w	800a23e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d004      	beq.n	800a0f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe f9aa 	bl	800844c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff ff6a 	bl	8009fd4 <prvSampleTimeNow>
 800a100:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b09      	cmp	r3, #9
 800a106:	f200 8097 	bhi.w	800a238 <prvProcessReceivedCommands+0x1a0>
 800a10a:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <prvProcessReceivedCommands+0x78>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a139 	.word	0x0800a139
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a1af 	.word	0x0800a1af
 800a120:	0800a1c3 	.word	0x0800a1c3
 800a124:	0800a20f 	.word	0x0800a20f
 800a128:	0800a139 	.word	0x0800a139
 800a12c:	0800a139 	.word	0x0800a139
 800a130:	0800a1af 	.word	0x0800a1af
 800a134:	0800a1c3 	.word	0x0800a1c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a13e:	f043 0301 	orr.w	r3, r3, #1
 800a142:	b2da      	uxtb	r2, r3
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	18d1      	adds	r1, r2, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a158:	f7ff ff5c 	bl	800a014 <prvInsertTimerInActiveList>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d06c      	beq.n	800a23c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a168:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d061      	beq.n	800a23c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	441a      	add	r2, r3
 800a180:	2300      	movs	r3, #0
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	2300      	movs	r3, #0
 800a186:	2100      	movs	r1, #0
 800a188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a18a:	f7ff fe01 	bl	8009d90 <xTimerGenericCommand>
 800a18e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d152      	bne.n	800a23c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	61bb      	str	r3, [r7, #24]
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1b4:	f023 0301 	bic.w	r3, r3, #1
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a1c0:	e03d      	b.n	800a23e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1c8:	f043 0301 	orr.w	r3, r3, #1
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	617b      	str	r3, [r7, #20]
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a200:	18d1      	adds	r1, r2, r3
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a208:	f7ff ff04 	bl	800a014 <prvInsertTimerInActiveList>
					break;
 800a20c:	e017      	b.n	800a23e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a21c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a21e:	f000 fbeb 	bl	800a9f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a222:	e00c      	b.n	800a23e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a22a:	f023 0301 	bic.w	r3, r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a236:	e002      	b.n	800a23e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a238:	bf00      	nop
 800a23a:	e000      	b.n	800a23e <prvProcessReceivedCommands+0x1a6>
					break;
 800a23c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a23e:	4b08      	ldr	r3, [pc, #32]	@ (800a260 <prvProcessReceivedCommands+0x1c8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	1d39      	adds	r1, r7, #4
 800a244:	2200      	movs	r2, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe fbd4 	bl	80089f4 <xQueueReceive>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f47f af26 	bne.w	800a0a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	3730      	adds	r7, #48	@ 0x30
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	200090c4 	.word	0x200090c4

0800a264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a26a:	e049      	b.n	800a300 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a26c:	4b2e      	ldr	r3, [pc, #184]	@ (800a328 <prvSwitchTimerLists+0xc4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a276:	4b2c      	ldr	r3, [pc, #176]	@ (800a328 <prvSwitchTimerLists+0xc4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3304      	adds	r3, #4
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe f8e1 	bl	800844c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d02f      	beq.n	800a300 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d90e      	bls.n	800a2d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2be:	4b1a      	ldr	r3, [pc, #104]	@ (800a328 <prvSwitchTimerLists+0xc4>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fe f886 	bl	80083da <vListInsert>
 800a2ce:	e017      	b.n	800a300 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff fd58 	bl	8009d90 <xTimerGenericCommand>
 800a2e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	603b      	str	r3, [r7, #0]
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a300:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <prvSwitchTimerLists+0xc4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1b0      	bne.n	800a26c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a30a:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <prvSwitchTimerLists+0xc4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <prvSwitchTimerLists+0xc8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a04      	ldr	r2, [pc, #16]	@ (800a328 <prvSwitchTimerLists+0xc4>)
 800a316:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a318:	4a04      	ldr	r2, [pc, #16]	@ (800a32c <prvSwitchTimerLists+0xc8>)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	6013      	str	r3, [r2, #0]
}
 800a31e:	bf00      	nop
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200090bc 	.word	0x200090bc
 800a32c:	200090c0 	.word	0x200090c0

0800a330 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a336:	f000 f96f 	bl	800a618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a33a:	4b15      	ldr	r3, [pc, #84]	@ (800a390 <prvCheckForValidListAndQueue+0x60>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d120      	bne.n	800a384 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a342:	4814      	ldr	r0, [pc, #80]	@ (800a394 <prvCheckForValidListAndQueue+0x64>)
 800a344:	f7fd fff8 	bl	8008338 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a348:	4813      	ldr	r0, [pc, #76]	@ (800a398 <prvCheckForValidListAndQueue+0x68>)
 800a34a:	f7fd fff5 	bl	8008338 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a34e:	4b13      	ldr	r3, [pc, #76]	@ (800a39c <prvCheckForValidListAndQueue+0x6c>)
 800a350:	4a10      	ldr	r2, [pc, #64]	@ (800a394 <prvCheckForValidListAndQueue+0x64>)
 800a352:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a354:	4b12      	ldr	r3, [pc, #72]	@ (800a3a0 <prvCheckForValidListAndQueue+0x70>)
 800a356:	4a10      	ldr	r2, [pc, #64]	@ (800a398 <prvCheckForValidListAndQueue+0x68>)
 800a358:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a35a:	2300      	movs	r3, #0
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	4b11      	ldr	r3, [pc, #68]	@ (800a3a4 <prvCheckForValidListAndQueue+0x74>)
 800a360:	4a11      	ldr	r2, [pc, #68]	@ (800a3a8 <prvCheckForValidListAndQueue+0x78>)
 800a362:	2110      	movs	r1, #16
 800a364:	200a      	movs	r0, #10
 800a366:	f7fe f905 	bl	8008574 <xQueueGenericCreateStatic>
 800a36a:	4603      	mov	r3, r0
 800a36c:	4a08      	ldr	r2, [pc, #32]	@ (800a390 <prvCheckForValidListAndQueue+0x60>)
 800a36e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a370:	4b07      	ldr	r3, [pc, #28]	@ (800a390 <prvCheckForValidListAndQueue+0x60>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a378:	4b05      	ldr	r3, [pc, #20]	@ (800a390 <prvCheckForValidListAndQueue+0x60>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	490b      	ldr	r1, [pc, #44]	@ (800a3ac <prvCheckForValidListAndQueue+0x7c>)
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe fd2a 	bl	8008dd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a384:	f000 f97a 	bl	800a67c <vPortExitCritical>
}
 800a388:	bf00      	nop
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	200090c4 	.word	0x200090c4
 800a394:	20009094 	.word	0x20009094
 800a398:	200090a8 	.word	0x200090a8
 800a39c:	200090bc 	.word	0x200090bc
 800a3a0:	200090c0 	.word	0x200090c0
 800a3a4:	20009170 	.word	0x20009170
 800a3a8:	200090d0 	.word	0x200090d0
 800a3ac:	08020994 	.word	0x08020994

0800a3b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3b04      	subs	r3, #4
 800a3c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a3c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f023 0201 	bic.w	r2, r3, #1
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3e0:	4a0c      	ldr	r2, [pc, #48]	@ (800a414 <pxPortInitialiseStack+0x64>)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3b14      	subs	r3, #20
 800a3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3b04      	subs	r3, #4
 800a3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f06f 0202 	mvn.w	r2, #2
 800a3fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3b20      	subs	r3, #32
 800a404:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a406:	68fb      	ldr	r3, [r7, #12]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	0800a419 	.word	0x0800a419

0800a418 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <prvTaskExitError+0x58>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d00b      	beq.n	800a444 <prvTaskExitError+0x2c>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	60fb      	str	r3, [r7, #12]
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	e7fd      	b.n	800a440 <prvTaskExitError+0x28>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	60bb      	str	r3, [r7, #8]
}
 800a456:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a458:	bf00      	nop
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0fc      	beq.n	800a45a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000048 	.word	0x20000048
	...

0800a480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a480:	4b07      	ldr	r3, [pc, #28]	@ (800a4a0 <pxCurrentTCBConst2>)
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	6808      	ldr	r0, [r1, #0]
 800a486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48a:	f380 8809 	msr	PSP, r0
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f380 8811 	msr	BASEPRI, r0
 800a49a:	4770      	bx	lr
 800a49c:	f3af 8000 	nop.w

0800a4a0 <pxCurrentTCBConst2>:
 800a4a0:	20008b94 	.word	0x20008b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop

0800a4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4a8:	4808      	ldr	r0, [pc, #32]	@ (800a4cc <prvPortStartFirstTask+0x24>)
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	6800      	ldr	r0, [r0, #0]
 800a4ae:	f380 8808 	msr	MSP, r0
 800a4b2:	f04f 0000 	mov.w	r0, #0
 800a4b6:	f380 8814 	msr	CONTROL, r0
 800a4ba:	b662      	cpsie	i
 800a4bc:	b661      	cpsie	f
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	df00      	svc	0
 800a4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4ca:	bf00      	nop
 800a4cc:	e000ed08 	.word	0xe000ed08

0800a4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4d6:	4b47      	ldr	r3, [pc, #284]	@ (800a5f4 <xPortStartScheduler+0x124>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a47      	ldr	r2, [pc, #284]	@ (800a5f8 <xPortStartScheduler+0x128>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10b      	bne.n	800a4f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a5f4 <xPortStartScheduler+0x124>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a5fc <xPortStartScheduler+0x12c>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d10b      	bne.n	800a51a <xPortStartScheduler+0x4a>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	613b      	str	r3, [r7, #16]
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop
 800a518:	e7fd      	b.n	800a516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a51a:	4b39      	ldr	r3, [pc, #228]	@ (800a600 <xPortStartScheduler+0x130>)
 800a51c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	22ff      	movs	r2, #255	@ 0xff
 800a52a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	b2db      	uxtb	r3, r3
 800a532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	4b31      	ldr	r3, [pc, #196]	@ (800a604 <xPortStartScheduler+0x134>)
 800a540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a542:	4b31      	ldr	r3, [pc, #196]	@ (800a608 <xPortStartScheduler+0x138>)
 800a544:	2207      	movs	r2, #7
 800a546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a548:	e009      	b.n	800a55e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a54a:	4b2f      	ldr	r3, [pc, #188]	@ (800a608 <xPortStartScheduler+0x138>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3b01      	subs	r3, #1
 800a550:	4a2d      	ldr	r2, [pc, #180]	@ (800a608 <xPortStartScheduler+0x138>)
 800a552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a566:	2b80      	cmp	r3, #128	@ 0x80
 800a568:	d0ef      	beq.n	800a54a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a56a:	4b27      	ldr	r3, [pc, #156]	@ (800a608 <xPortStartScheduler+0x138>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f1c3 0307 	rsb	r3, r3, #7
 800a572:	2b04      	cmp	r3, #4
 800a574:	d00b      	beq.n	800a58e <xPortStartScheduler+0xbe>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	60bb      	str	r3, [r7, #8]
}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	e7fd      	b.n	800a58a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a58e:	4b1e      	ldr	r3, [pc, #120]	@ (800a608 <xPortStartScheduler+0x138>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	4a1c      	ldr	r2, [pc, #112]	@ (800a608 <xPortStartScheduler+0x138>)
 800a596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a598:	4b1b      	ldr	r3, [pc, #108]	@ (800a608 <xPortStartScheduler+0x138>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5a0:	4a19      	ldr	r2, [pc, #100]	@ (800a608 <xPortStartScheduler+0x138>)
 800a5a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5ac:	4b17      	ldr	r3, [pc, #92]	@ (800a60c <xPortStartScheduler+0x13c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a16      	ldr	r2, [pc, #88]	@ (800a60c <xPortStartScheduler+0x13c>)
 800a5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a5b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5b8:	4b14      	ldr	r3, [pc, #80]	@ (800a60c <xPortStartScheduler+0x13c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a13      	ldr	r2, [pc, #76]	@ (800a60c <xPortStartScheduler+0x13c>)
 800a5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a5c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5c4:	f000 f8da 	bl	800a77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5c8:	4b11      	ldr	r3, [pc, #68]	@ (800a610 <xPortStartScheduler+0x140>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5ce:	f000 f8f9 	bl	800a7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5d2:	4b10      	ldr	r3, [pc, #64]	@ (800a614 <xPortStartScheduler+0x144>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a614 <xPortStartScheduler+0x144>)
 800a5d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a5dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5de:	f7ff ff63 	bl	800a4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5e2:	f7ff f811 	bl	8009608 <vTaskSwitchContext>
	prvTaskExitError();
 800a5e6:	f7ff ff17 	bl	800a418 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	e000ed00 	.word	0xe000ed00
 800a5f8:	410fc271 	.word	0x410fc271
 800a5fc:	410fc270 	.word	0x410fc270
 800a600:	e000e400 	.word	0xe000e400
 800a604:	200091c0 	.word	0x200091c0
 800a608:	200091c4 	.word	0x200091c4
 800a60c:	e000ed20 	.word	0xe000ed20
 800a610:	20000048 	.word	0x20000048
 800a614:	e000ef34 	.word	0xe000ef34

0800a618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	607b      	str	r3, [r7, #4]
}
 800a630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a632:	4b10      	ldr	r3, [pc, #64]	@ (800a674 <vPortEnterCritical+0x5c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3301      	adds	r3, #1
 800a638:	4a0e      	ldr	r2, [pc, #56]	@ (800a674 <vPortEnterCritical+0x5c>)
 800a63a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a63c:	4b0d      	ldr	r3, [pc, #52]	@ (800a674 <vPortEnterCritical+0x5c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d110      	bne.n	800a666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a644:	4b0c      	ldr	r3, [pc, #48]	@ (800a678 <vPortEnterCritical+0x60>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00b      	beq.n	800a666 <vPortEnterCritical+0x4e>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	603b      	str	r3, [r7, #0]
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	e7fd      	b.n	800a662 <vPortEnterCritical+0x4a>
	}
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	20000048 	.word	0x20000048
 800a678:	e000ed04 	.word	0xe000ed04

0800a67c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a682:	4b12      	ldr	r3, [pc, #72]	@ (800a6cc <vPortExitCritical+0x50>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10b      	bne.n	800a6a2 <vPortExitCritical+0x26>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	607b      	str	r3, [r7, #4]
}
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	e7fd      	b.n	800a69e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6cc <vPortExitCritical+0x50>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	4a08      	ldr	r2, [pc, #32]	@ (800a6cc <vPortExitCritical+0x50>)
 800a6aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6ac:	4b07      	ldr	r3, [pc, #28]	@ (800a6cc <vPortExitCritical+0x50>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d105      	bne.n	800a6c0 <vPortExitCritical+0x44>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f383 8811 	msr	BASEPRI, r3
}
 800a6be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20000048 	.word	0x20000048

0800a6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6d0:	f3ef 8009 	mrs	r0, PSP
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	4b15      	ldr	r3, [pc, #84]	@ (800a730 <pxCurrentTCBConst>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	f01e 0f10 	tst.w	lr, #16
 800a6e0:	bf08      	it	eq
 800a6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ea:	6010      	str	r0, [r2, #0]
 800a6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a6f4:	f380 8811 	msr	BASEPRI, r0
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f7fe ff82 	bl	8009608 <vTaskSwitchContext>
 800a704:	f04f 0000 	mov.w	r0, #0
 800a708:	f380 8811 	msr	BASEPRI, r0
 800a70c:	bc09      	pop	{r0, r3}
 800a70e:	6819      	ldr	r1, [r3, #0]
 800a710:	6808      	ldr	r0, [r1, #0]
 800a712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a716:	f01e 0f10 	tst.w	lr, #16
 800a71a:	bf08      	it	eq
 800a71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a720:	f380 8809 	msr	PSP, r0
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	f3af 8000 	nop.w

0800a730 <pxCurrentTCBConst>:
 800a730:	20008b94 	.word	0x20008b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop

0800a738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	607b      	str	r3, [r7, #4]
}
 800a750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a752:	f7fe fe9f 	bl	8009494 <xTaskIncrementTick>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d003      	beq.n	800a764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <xPortSysTickHandler+0x40>)
 800a75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	2300      	movs	r3, #0
 800a766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f383 8811 	msr	BASEPRI, r3
}
 800a76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	e000ed04 	.word	0xe000ed04

0800a77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a780:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b0 <vPortSetupTimerInterrupt+0x34>)
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a786:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b4 <vPortSetupTimerInterrupt+0x38>)
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a78c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <vPortSetupTimerInterrupt+0x3c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a0a      	ldr	r2, [pc, #40]	@ (800a7bc <vPortSetupTimerInterrupt+0x40>)
 800a792:	fba2 2303 	umull	r2, r3, r2, r3
 800a796:	099b      	lsrs	r3, r3, #6
 800a798:	4a09      	ldr	r2, [pc, #36]	@ (800a7c0 <vPortSetupTimerInterrupt+0x44>)
 800a79a:	3b01      	subs	r3, #1
 800a79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a79e:	4b04      	ldr	r3, [pc, #16]	@ (800a7b0 <vPortSetupTimerInterrupt+0x34>)
 800a7a0:	2207      	movs	r2, #7
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	e000e010 	.word	0xe000e010
 800a7b4:	e000e018 	.word	0xe000e018
 800a7b8:	2000003c 	.word	0x2000003c
 800a7bc:	10624dd3 	.word	0x10624dd3
 800a7c0:	e000e014 	.word	0xe000e014

0800a7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a7d4 <vPortEnableVFP+0x10>
 800a7c8:	6801      	ldr	r1, [r0, #0]
 800a7ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a7ce:	6001      	str	r1, [r0, #0]
 800a7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7d2:	bf00      	nop
 800a7d4:	e000ed88 	.word	0xe000ed88

0800a7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7de:	f3ef 8305 	mrs	r3, IPSR
 800a7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d915      	bls.n	800a816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7ea:	4a18      	ldr	r2, [pc, #96]	@ (800a84c <vPortValidateInterruptPriority+0x74>)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7f4:	4b16      	ldr	r3, [pc, #88]	@ (800a850 <vPortValidateInterruptPriority+0x78>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	7afa      	ldrb	r2, [r7, #11]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d20b      	bcs.n	800a816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	607b      	str	r3, [r7, #4]
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a816:	4b0f      	ldr	r3, [pc, #60]	@ (800a854 <vPortValidateInterruptPriority+0x7c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a81e:	4b0e      	ldr	r3, [pc, #56]	@ (800a858 <vPortValidateInterruptPriority+0x80>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90b      	bls.n	800a83e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	603b      	str	r3, [r7, #0]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vPortValidateInterruptPriority+0x62>
	}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	e000e3f0 	.word	0xe000e3f0
 800a850:	200091c0 	.word	0x200091c0
 800a854:	e000ed0c 	.word	0xe000ed0c
 800a858:	200091c4 	.word	0x200091c4

0800a85c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	@ 0x28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a864:	2300      	movs	r3, #0
 800a866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a868:	f7fe fd58 	bl	800931c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a86c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9e0 <pvPortMalloc+0x184>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a874:	f000 f924 	bl	800aac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a878:	4b5a      	ldr	r3, [pc, #360]	@ (800a9e4 <pvPortMalloc+0x188>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4013      	ands	r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	f040 8095 	bne.w	800a9b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01e      	beq.n	800a8ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a88c:	2208      	movs	r2, #8
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4413      	add	r3, r2
 800a892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d015      	beq.n	800a8ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f023 0307 	bic.w	r3, r3, #7
 800a8a4:	3308      	adds	r3, #8
 800a8a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <pvPortMalloc+0x6e>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	617b      	str	r3, [r7, #20]
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop
 800a8c8:	e7fd      	b.n	800a8c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d06f      	beq.n	800a9b0 <pvPortMalloc+0x154>
 800a8d0:	4b45      	ldr	r3, [pc, #276]	@ (800a9e8 <pvPortMalloc+0x18c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d86a      	bhi.n	800a9b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8da:	4b44      	ldr	r3, [pc, #272]	@ (800a9ec <pvPortMalloc+0x190>)
 800a8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8de:	4b43      	ldr	r3, [pc, #268]	@ (800a9ec <pvPortMalloc+0x190>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8e4:	e004      	b.n	800a8f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d903      	bls.n	800a902 <pvPortMalloc+0xa6>
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f1      	bne.n	800a8e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a902:	4b37      	ldr	r3, [pc, #220]	@ (800a9e0 <pvPortMalloc+0x184>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a908:	429a      	cmp	r2, r3
 800a90a:	d051      	beq.n	800a9b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2208      	movs	r2, #8
 800a912:	4413      	add	r3, r2
 800a914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	1ad2      	subs	r2, r2, r3
 800a926:	2308      	movs	r3, #8
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d920      	bls.n	800a970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4413      	add	r3, r2
 800a934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00b      	beq.n	800a958 <pvPortMalloc+0xfc>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	613b      	str	r3, [r7, #16]
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a96a:	69b8      	ldr	r0, [r7, #24]
 800a96c:	f000 f90a 	bl	800ab84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a970:	4b1d      	ldr	r3, [pc, #116]	@ (800a9e8 <pvPortMalloc+0x18c>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9e8 <pvPortMalloc+0x18c>)
 800a97c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a97e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9e8 <pvPortMalloc+0x18c>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f0 <pvPortMalloc+0x194>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d203      	bcs.n	800a992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a98a:	4b17      	ldr	r3, [pc, #92]	@ (800a9e8 <pvPortMalloc+0x18c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a18      	ldr	r2, [pc, #96]	@ (800a9f0 <pvPortMalloc+0x194>)
 800a990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	4b13      	ldr	r3, [pc, #76]	@ (800a9e4 <pvPortMalloc+0x188>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9a6:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <pvPortMalloc+0x198>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	4a11      	ldr	r2, [pc, #68]	@ (800a9f4 <pvPortMalloc+0x198>)
 800a9ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9b0:	f7fe fcc2 	bl	8009338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00b      	beq.n	800a9d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	60fb      	str	r3, [r7, #12]
}
 800a9d0:	bf00      	nop
 800a9d2:	bf00      	nop
 800a9d4:	e7fd      	b.n	800a9d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3728      	adds	r7, #40	@ 0x28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	2000cdd0 	.word	0x2000cdd0
 800a9e4:	2000cde4 	.word	0x2000cde4
 800a9e8:	2000cdd4 	.word	0x2000cdd4
 800a9ec:	2000cdc8 	.word	0x2000cdc8
 800a9f0:	2000cdd8 	.word	0x2000cdd8
 800a9f4:	2000cddc 	.word	0x2000cddc

0800a9f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d04f      	beq.n	800aaaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	425b      	negs	r3, r3
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4413      	add	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	4b25      	ldr	r3, [pc, #148]	@ (800aab4 <vPortFree+0xbc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4013      	ands	r3, r2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10b      	bne.n	800aa3e <vPortFree+0x46>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60fb      	str	r3, [r7, #12]
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	e7fd      	b.n	800aa3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00b      	beq.n	800aa5e <vPortFree+0x66>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	60bb      	str	r3, [r7, #8]
}
 800aa58:	bf00      	nop
 800aa5a:	bf00      	nop
 800aa5c:	e7fd      	b.n	800aa5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	4b14      	ldr	r3, [pc, #80]	@ (800aab4 <vPortFree+0xbc>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4013      	ands	r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01e      	beq.n	800aaaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d11a      	bne.n	800aaaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	4b0e      	ldr	r3, [pc, #56]	@ (800aab4 <vPortFree+0xbc>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	43db      	mvns	r3, r3
 800aa7e:	401a      	ands	r2, r3
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa84:	f7fe fc4a 	bl	800931c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	4b0a      	ldr	r3, [pc, #40]	@ (800aab8 <vPortFree+0xc0>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4413      	add	r3, r2
 800aa92:	4a09      	ldr	r2, [pc, #36]	@ (800aab8 <vPortFree+0xc0>)
 800aa94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa96:	6938      	ldr	r0, [r7, #16]
 800aa98:	f000 f874 	bl	800ab84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa9c:	4b07      	ldr	r3, [pc, #28]	@ (800aabc <vPortFree+0xc4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	4a06      	ldr	r2, [pc, #24]	@ (800aabc <vPortFree+0xc4>)
 800aaa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aaa6:	f7fe fc47 	bl	8009338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaaa:	bf00      	nop
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	2000cde4 	.word	0x2000cde4
 800aab8:	2000cdd4 	.word	0x2000cdd4
 800aabc:	2000cde0 	.word	0x2000cde0

0800aac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aac6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aaca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aacc:	4b27      	ldr	r3, [pc, #156]	@ (800ab6c <prvHeapInit+0xac>)
 800aace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f003 0307 	and.w	r3, r3, #7
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00c      	beq.n	800aaf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3307      	adds	r3, #7
 800aade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0307 	bic.w	r3, r3, #7
 800aae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	4a1f      	ldr	r2, [pc, #124]	@ (800ab6c <prvHeapInit+0xac>)
 800aaf0:	4413      	add	r3, r2
 800aaf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aaf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab70 <prvHeapInit+0xb0>)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aafe:	4b1c      	ldr	r3, [pc, #112]	@ (800ab70 <prvHeapInit+0xb0>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	4413      	add	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab0c:	2208      	movs	r2, #8
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	1a9b      	subs	r3, r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <prvHeapInit+0xb4>)
 800ab20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab22:	4b14      	ldr	r3, [pc, #80]	@ (800ab74 <prvHeapInit+0xb4>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2200      	movs	r2, #0
 800ab28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab2a:	4b12      	ldr	r3, [pc, #72]	@ (800ab74 <prvHeapInit+0xb4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab40:	4b0c      	ldr	r3, [pc, #48]	@ (800ab74 <prvHeapInit+0xb4>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	4a0a      	ldr	r2, [pc, #40]	@ (800ab78 <prvHeapInit+0xb8>)
 800ab4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4a09      	ldr	r2, [pc, #36]	@ (800ab7c <prvHeapInit+0xbc>)
 800ab56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab58:	4b09      	ldr	r3, [pc, #36]	@ (800ab80 <prvHeapInit+0xc0>)
 800ab5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab5e:	601a      	str	r2, [r3, #0]
}
 800ab60:	bf00      	nop
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	200091c8 	.word	0x200091c8
 800ab70:	2000cdc8 	.word	0x2000cdc8
 800ab74:	2000cdd0 	.word	0x2000cdd0
 800ab78:	2000cdd8 	.word	0x2000cdd8
 800ab7c:	2000cdd4 	.word	0x2000cdd4
 800ab80:	2000cde4 	.word	0x2000cde4

0800ab84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab8c:	4b28      	ldr	r3, [pc, #160]	@ (800ac30 <prvInsertBlockIntoFreeList+0xac>)
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e002      	b.n	800ab98 <prvInsertBlockIntoFreeList+0x14>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d8f7      	bhi.n	800ab92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	4413      	add	r3, r2
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d108      	bne.n	800abc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	441a      	add	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	441a      	add	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d118      	bne.n	800ac0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4b15      	ldr	r3, [pc, #84]	@ (800ac34 <prvInsertBlockIntoFreeList+0xb0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d00d      	beq.n	800ac02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	441a      	add	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e008      	b.n	800ac14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac02:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <prvInsertBlockIntoFreeList+0xb0>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	e003      	b.n	800ac14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d002      	beq.n	800ac22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac22:	bf00      	nop
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	2000cdc8 	.word	0x2000cdc8
 800ac34:	2000cdd0 	.word	0x2000cdd0

0800ac38 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ac38:	4b04      	ldr	r3, [pc, #16]	@ (800ac4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	b10a      	cbz	r2, 800ac42 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ac3e:	4803      	ldr	r0, [pc, #12]	@ (800ac4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ac40:	4770      	bx	lr
 800ac42:	4a03      	ldr	r2, [pc, #12]	@ (800ac50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ac44:	4801      	ldr	r0, [pc, #4]	@ (800ac4c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	4770      	bx	lr
 800ac4c:	2000004c 	.word	0x2000004c
 800ac50:	200003a0 	.word	0x200003a0

0800ac54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ac54:	4a02      	ldr	r2, [pc, #8]	@ (800ac60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ac56:	4b03      	ldr	r3, [pc, #12]	@ (800ac64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ac58:	6812      	ldr	r2, [r2, #0]
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	200003a0 	.word	0x200003a0
 800ac64:	2000004c 	.word	0x2000004c

0800ac68 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ac68:	f004 b9ca 	b.w	800f000 <geometry_msgs__msg__Twist__init>

0800ac6c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ac6c:	f004 b9e8 	b.w	800f040 <geometry_msgs__msg__Twist__fini>

0800ac70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	f000 f819 	bl	800aca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac76:	4c07      	ldr	r4, [pc, #28]	@ (800ac94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ac78:	60e0      	str	r0, [r4, #12]
 800ac7a:	f000 f815 	bl	800aca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac7e:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ac80:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	b10a      	cbz	r2, 800ac8a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ac86:	4804      	ldr	r0, [pc, #16]	@ (800ac98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	4a04      	ldr	r2, [pc, #16]	@ (800ac9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ac8c:	4802      	ldr	r0, [pc, #8]	@ (800ac98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ac8e:	6812      	ldr	r2, [r2, #0]
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	bd10      	pop	{r4, pc}
 800ac94:	20000084 	.word	0x20000084
 800ac98:	2000006c 	.word	0x2000006c
 800ac9c:	200003a4 	.word	0x200003a4

0800aca0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800aca0:	f004 ba0a 	b.w	800f0b8 <geometry_msgs__msg__Vector3__init>

0800aca4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800aca4:	f004 ba0c 	b.w	800f0c0 <geometry_msgs__msg__Vector3__fini>

0800aca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aca8:	4b04      	ldr	r3, [pc, #16]	@ (800acbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	b10a      	cbz	r2, 800acb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800acae:	4803      	ldr	r0, [pc, #12]	@ (800acbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800acb0:	4770      	bx	lr
 800acb2:	4a03      	ldr	r2, [pc, #12]	@ (800acc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800acb4:	4801      	ldr	r0, [pc, #4]	@ (800acbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800acb6:	6812      	ldr	r2, [r2, #0]
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	4770      	bx	lr
 800acbc:	200000fc 	.word	0x200000fc
 800acc0:	200003a4 	.word	0x200003a4

0800acc4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4604      	mov	r4, r0
 800acc8:	b148      	cbz	r0, 800acde <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800acca:	460d      	mov	r5, r1
 800accc:	f000 f86a 	bl	800ada4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800acd0:	4606      	mov	r6, r0
 800acd2:	1829      	adds	r1, r5, r0
 800acd4:	f104 0018 	add.w	r0, r4, #24
 800acd8:	f000 f864 	bl	800ada4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800acdc:	4430      	add	r0, r6
 800acde:	bd70      	pop	{r4, r5, r6, pc}

0800ace0 <_Twist__cdr_deserialize>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	460c      	mov	r4, r1
 800ace4:	b189      	cbz	r1, 800ad0a <_Twist__cdr_deserialize+0x2a>
 800ace6:	4605      	mov	r5, r0
 800ace8:	f000 f8e8 	bl	800aebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800acec:	6843      	ldr	r3, [r0, #4]
 800acee:	4621      	mov	r1, r4
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	4628      	mov	r0, r5
 800acf4:	4798      	blx	r3
 800acf6:	f000 f8e1 	bl	800aebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800acfa:	6843      	ldr	r3, [r0, #4]
 800acfc:	f104 0118 	add.w	r1, r4, #24
 800ad00:	4628      	mov	r0, r5
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad08:	4718      	bx	r3
 800ad0a:	4608      	mov	r0, r1
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	bf00      	nop

0800ad10 <_Twist__cdr_serialize>:
 800ad10:	b198      	cbz	r0, 800ad3a <_Twist__cdr_serialize+0x2a>
 800ad12:	b570      	push	{r4, r5, r6, lr}
 800ad14:	460d      	mov	r5, r1
 800ad16:	4604      	mov	r4, r0
 800ad18:	f000 f8d0 	bl	800aebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad1c:	6843      	ldr	r3, [r0, #4]
 800ad1e:	4629      	mov	r1, r5
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	4620      	mov	r0, r4
 800ad24:	4798      	blx	r3
 800ad26:	f000 f8c9 	bl	800aebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad2a:	6843      	ldr	r3, [r0, #4]
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f104 0018 	add.w	r0, r4, #24
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad38:	4718      	bx	r3
 800ad3a:	4770      	bx	lr

0800ad3c <_Twist__get_serialized_size>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4604      	mov	r4, r0
 800ad40:	b148      	cbz	r0, 800ad56 <_Twist__get_serialized_size+0x1a>
 800ad42:	2100      	movs	r1, #0
 800ad44:	f000 f82e 	bl	800ada4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	f104 0018 	add.w	r0, r4, #24
 800ad50:	f000 f828 	bl	800ada4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ad54:	4428      	add	r0, r5
 800ad56:	bd38      	pop	{r3, r4, r5, pc}

0800ad58 <_Twist__max_serialized_size>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	2100      	movs	r1, #0
 800ad60:	f10d 0007 	add.w	r0, sp, #7
 800ad64:	f88d 3007 	strb.w	r3, [sp, #7]
 800ad68:	f000 f88e 	bl	800ae88 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	4601      	mov	r1, r0
 800ad70:	f10d 0007 	add.w	r0, sp, #7
 800ad74:	f000 f888 	bl	800ae88 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ad78:	4420      	add	r0, r4
 800ad7a:	b002      	add	sp, #8
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	bf00      	nop

0800ad80 <max_serialized_size_geometry_msgs__msg__Twist>:
 800ad80:	2301      	movs	r3, #1
 800ad82:	b570      	push	{r4, r5, r6, lr}
 800ad84:	7003      	strb	r3, [r0, #0]
 800ad86:	4605      	mov	r5, r0
 800ad88:	460e      	mov	r6, r1
 800ad8a:	f000 f87d 	bl	800ae88 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	1831      	adds	r1, r6, r0
 800ad92:	4628      	mov	r0, r5
 800ad94:	f000 f878 	bl	800ae88 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ad98:	4420      	add	r0, r4
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}

0800ad9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ad9c:	4800      	ldr	r0, [pc, #0]	@ (800ada0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ad9e:	4770      	bx	lr
 800ada0:	200001c8 	.word	0x200001c8

0800ada4 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ada4:	b1b8      	cbz	r0, 800add6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ada6:	b570      	push	{r4, r5, r6, lr}
 800ada8:	460d      	mov	r5, r1
 800adaa:	4628      	mov	r0, r5
 800adac:	2108      	movs	r1, #8
 800adae:	f001 fc99 	bl	800c6e4 <ucdr_alignment>
 800adb2:	2108      	movs	r1, #8
 800adb4:	186e      	adds	r6, r5, r1
 800adb6:	4406      	add	r6, r0
 800adb8:	4630      	mov	r0, r6
 800adba:	f001 fc93 	bl	800c6e4 <ucdr_alignment>
 800adbe:	f100 0408 	add.w	r4, r0, #8
 800adc2:	4434      	add	r4, r6
 800adc4:	2108      	movs	r1, #8
 800adc6:	4620      	mov	r0, r4
 800adc8:	f001 fc8c 	bl	800c6e4 <ucdr_alignment>
 800adcc:	f1c5 0508 	rsb	r5, r5, #8
 800add0:	4405      	add	r5, r0
 800add2:	1928      	adds	r0, r5, r4
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	4770      	bx	lr

0800add8 <_Vector3__cdr_deserialize>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	460c      	mov	r4, r1
 800addc:	b171      	cbz	r1, 800adfc <_Vector3__cdr_deserialize+0x24>
 800adde:	4605      	mov	r5, r0
 800ade0:	f001 faa2 	bl	800c328 <ucdr_deserialize_double>
 800ade4:	f104 0108 	add.w	r1, r4, #8
 800ade8:	4628      	mov	r0, r5
 800adea:	f001 fa9d 	bl	800c328 <ucdr_deserialize_double>
 800adee:	f104 0110 	add.w	r1, r4, #16
 800adf2:	4628      	mov	r0, r5
 800adf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf8:	f001 ba96 	b.w	800c328 <ucdr_deserialize_double>
 800adfc:	4608      	mov	r0, r1
 800adfe:	bd38      	pop	{r3, r4, r5, pc}

0800ae00 <_Vector3__cdr_serialize>:
 800ae00:	b198      	cbz	r0, 800ae2a <_Vector3__cdr_serialize+0x2a>
 800ae02:	b538      	push	{r3, r4, r5, lr}
 800ae04:	ed90 0b00 	vldr	d0, [r0]
 800ae08:	460d      	mov	r5, r1
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	f001 f8fb 	bl	800c008 <ucdr_serialize_double>
 800ae12:	ed94 0b02 	vldr	d0, [r4, #8]
 800ae16:	4628      	mov	r0, r5
 800ae18:	f001 f8f6 	bl	800c008 <ucdr_serialize_double>
 800ae1c:	ed94 0b04 	vldr	d0, [r4, #16]
 800ae20:	4628      	mov	r0, r5
 800ae22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae26:	f001 b8ef 	b.w	800c008 <ucdr_serialize_double>
 800ae2a:	4770      	bx	lr

0800ae2c <_Vector3__get_serialized_size>:
 800ae2c:	b1a0      	cbz	r0, 800ae58 <_Vector3__get_serialized_size+0x2c>
 800ae2e:	b538      	push	{r3, r4, r5, lr}
 800ae30:	2108      	movs	r1, #8
 800ae32:	2000      	movs	r0, #0
 800ae34:	f001 fc56 	bl	800c6e4 <ucdr_alignment>
 800ae38:	f100 0508 	add.w	r5, r0, #8
 800ae3c:	2108      	movs	r1, #8
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f001 fc50 	bl	800c6e4 <ucdr_alignment>
 800ae44:	f100 0408 	add.w	r4, r0, #8
 800ae48:	442c      	add	r4, r5
 800ae4a:	2108      	movs	r1, #8
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f001 fc49 	bl	800c6e4 <ucdr_alignment>
 800ae52:	3008      	adds	r0, #8
 800ae54:	4420      	add	r0, r4
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop

0800ae5c <_Vector3__max_serialized_size>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	2108      	movs	r1, #8
 800ae60:	2000      	movs	r0, #0
 800ae62:	f001 fc3f 	bl	800c6e4 <ucdr_alignment>
 800ae66:	f100 0508 	add.w	r5, r0, #8
 800ae6a:	2108      	movs	r1, #8
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f001 fc39 	bl	800c6e4 <ucdr_alignment>
 800ae72:	f100 0408 	add.w	r4, r0, #8
 800ae76:	442c      	add	r4, r5
 800ae78:	2108      	movs	r1, #8
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f001 fc32 	bl	800c6e4 <ucdr_alignment>
 800ae80:	3008      	adds	r0, #8
 800ae82:	4420      	add	r0, r4
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop

0800ae88 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	7003      	strb	r3, [r0, #0]
 800ae90:	2108      	movs	r1, #8
 800ae92:	4620      	mov	r0, r4
 800ae94:	f001 fc26 	bl	800c6e4 <ucdr_alignment>
 800ae98:	2108      	movs	r1, #8
 800ae9a:	1863      	adds	r3, r4, r1
 800ae9c:	18c6      	adds	r6, r0, r3
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f001 fc20 	bl	800c6e4 <ucdr_alignment>
 800aea4:	f100 0508 	add.w	r5, r0, #8
 800aea8:	4435      	add	r5, r6
 800aeaa:	2108      	movs	r1, #8
 800aeac:	4628      	mov	r0, r5
 800aeae:	f001 fc19 	bl	800c6e4 <ucdr_alignment>
 800aeb2:	f1c4 0408 	rsb	r4, r4, #8
 800aeb6:	4420      	add	r0, r4
 800aeb8:	4428      	add	r0, r5
 800aeba:	bd70      	pop	{r4, r5, r6, pc}

0800aebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aebc:	4800      	ldr	r0, [pc, #0]	@ (800aec0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800aebe:	4770      	bx	lr
 800aec0:	200001fc 	.word	0x200001fc

0800aec4 <ucdr_serialize_bool>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	460d      	mov	r5, r1
 800aec8:	2101      	movs	r1, #1
 800aeca:	4604      	mov	r4, r0
 800aecc:	f001 fbbe 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800aed0:	b148      	cbz	r0, 800aee6 <ucdr_serialize_bool+0x22>
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	701d      	strb	r5, [r3, #0]
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	2101      	movs	r1, #1
 800aedc:	440a      	add	r2, r1
 800aede:	440b      	add	r3, r1
 800aee0:	60a2      	str	r2, [r4, #8]
 800aee2:	6123      	str	r3, [r4, #16]
 800aee4:	7561      	strb	r1, [r4, #21]
 800aee6:	7da0      	ldrb	r0, [r4, #22]
 800aee8:	f080 0001 	eor.w	r0, r0, #1
 800aeec:	bd38      	pop	{r3, r4, r5, pc}
 800aeee:	bf00      	nop

0800aef0 <ucdr_deserialize_bool>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	460d      	mov	r5, r1
 800aef4:	2101      	movs	r1, #1
 800aef6:	4604      	mov	r4, r0
 800aef8:	f001 fba8 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800aefc:	b160      	cbz	r0, 800af18 <ucdr_deserialize_bool+0x28>
 800aefe:	68a2      	ldr	r2, [r4, #8]
 800af00:	6923      	ldr	r3, [r4, #16]
 800af02:	f812 1b01 	ldrb.w	r1, [r2], #1
 800af06:	3900      	subs	r1, #0
 800af08:	bf18      	it	ne
 800af0a:	2101      	movne	r1, #1
 800af0c:	7029      	strb	r1, [r5, #0]
 800af0e:	3301      	adds	r3, #1
 800af10:	2101      	movs	r1, #1
 800af12:	60a2      	str	r2, [r4, #8]
 800af14:	6123      	str	r3, [r4, #16]
 800af16:	7561      	strb	r1, [r4, #21]
 800af18:	7da0      	ldrb	r0, [r4, #22]
 800af1a:	f080 0001 	eor.w	r0, r0, #1
 800af1e:	bd38      	pop	{r3, r4, r5, pc}

0800af20 <ucdr_serialize_uint8_t>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	460d      	mov	r5, r1
 800af24:	2101      	movs	r1, #1
 800af26:	4604      	mov	r4, r0
 800af28:	f001 fb90 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800af2c:	b148      	cbz	r0, 800af42 <ucdr_serialize_uint8_t+0x22>
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	701d      	strb	r5, [r3, #0]
 800af32:	68a2      	ldr	r2, [r4, #8]
 800af34:	6923      	ldr	r3, [r4, #16]
 800af36:	2101      	movs	r1, #1
 800af38:	440a      	add	r2, r1
 800af3a:	440b      	add	r3, r1
 800af3c:	60a2      	str	r2, [r4, #8]
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	7561      	strb	r1, [r4, #21]
 800af42:	7da0      	ldrb	r0, [r4, #22]
 800af44:	f080 0001 	eor.w	r0, r0, #1
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop

0800af4c <ucdr_deserialize_uint8_t>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	460d      	mov	r5, r1
 800af50:	2101      	movs	r1, #1
 800af52:	4604      	mov	r4, r0
 800af54:	f001 fb7a 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800af58:	b150      	cbz	r0, 800af70 <ucdr_deserialize_uint8_t+0x24>
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	702b      	strb	r3, [r5, #0]
 800af60:	68a2      	ldr	r2, [r4, #8]
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	2101      	movs	r1, #1
 800af66:	440a      	add	r2, r1
 800af68:	440b      	add	r3, r1
 800af6a:	60a2      	str	r2, [r4, #8]
 800af6c:	6123      	str	r3, [r4, #16]
 800af6e:	7561      	strb	r1, [r4, #21]
 800af70:	7da0      	ldrb	r0, [r4, #22]
 800af72:	f080 0001 	eor.w	r0, r0, #1
 800af76:	bd38      	pop	{r3, r4, r5, pc}

0800af78 <ucdr_serialize_uint16_t>:
 800af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	460b      	mov	r3, r1
 800af80:	2102      	movs	r1, #2
 800af82:	4604      	mov	r4, r0
 800af84:	f8ad 3006 	strh.w	r3, [sp, #6]
 800af88:	f001 fbb4 	bl	800c6f4 <ucdr_buffer_alignment>
 800af8c:	4601      	mov	r1, r0
 800af8e:	4620      	mov	r0, r4
 800af90:	7d67      	ldrb	r7, [r4, #21]
 800af92:	f001 fbf3 	bl	800c77c <ucdr_advance_buffer>
 800af96:	2102      	movs	r1, #2
 800af98:	4620      	mov	r0, r4
 800af9a:	f001 fb4b 	bl	800c634 <ucdr_check_buffer_available_for>
 800af9e:	b1c0      	cbz	r0, 800afd2 <ucdr_serialize_uint16_t+0x5a>
 800afa0:	7d22      	ldrb	r2, [r4, #20]
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	2a01      	cmp	r2, #1
 800afa6:	d04e      	beq.n	800b046 <ucdr_serialize_uint16_t+0xce>
 800afa8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800afac:	701a      	strb	r2, [r3, #0]
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800afb4:	705a      	strb	r2, [r3, #1]
 800afb6:	68a2      	ldr	r2, [r4, #8]
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	3202      	adds	r2, #2
 800afbc:	3302      	adds	r3, #2
 800afbe:	2102      	movs	r1, #2
 800afc0:	60a2      	str	r2, [r4, #8]
 800afc2:	6123      	str	r3, [r4, #16]
 800afc4:	7561      	strb	r1, [r4, #21]
 800afc6:	7da0      	ldrb	r0, [r4, #22]
 800afc8:	f080 0001 	eor.w	r0, r0, #1
 800afcc:	b002      	add	sp, #8
 800afce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800afd6:	42ab      	cmp	r3, r5
 800afd8:	d923      	bls.n	800b022 <ucdr_serialize_uint16_t+0xaa>
 800afda:	1b5e      	subs	r6, r3, r5
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	f1c6 0802 	rsb	r8, r6, #2
 800afe4:	4433      	add	r3, r6
 800afe6:	6123      	str	r3, [r4, #16]
 800afe8:	4641      	mov	r1, r8
 800afea:	4620      	mov	r0, r4
 800afec:	f001 fb2e 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800aff0:	b368      	cbz	r0, 800b04e <ucdr_serialize_uint16_t+0xd6>
 800aff2:	7d23      	ldrb	r3, [r4, #20]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d03b      	beq.n	800b070 <ucdr_serialize_uint16_t+0xf8>
 800aff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800affc:	702b      	strb	r3, [r5, #0]
 800affe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b002:	706b      	strb	r3, [r5, #1]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	68a2      	ldr	r2, [r4, #8]
 800b008:	7da0      	ldrb	r0, [r4, #22]
 800b00a:	3302      	adds	r3, #2
 800b00c:	4442      	add	r2, r8
 800b00e:	1b9b      	subs	r3, r3, r6
 800b010:	2102      	movs	r1, #2
 800b012:	f080 0001 	eor.w	r0, r0, #1
 800b016:	60a2      	str	r2, [r4, #8]
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	7561      	strb	r1, [r4, #21]
 800b01c:	b002      	add	sp, #8
 800b01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b022:	2102      	movs	r1, #2
 800b024:	4620      	mov	r0, r4
 800b026:	f001 fb11 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d0cb      	beq.n	800afc6 <ucdr_serialize_uint16_t+0x4e>
 800b02e:	7d23      	ldrb	r3, [r4, #20]
 800b030:	68a2      	ldr	r2, [r4, #8]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d018      	beq.n	800b068 <ucdr_serialize_uint16_t+0xf0>
 800b036:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b03a:	7013      	strb	r3, [r2, #0]
 800b03c:	68a3      	ldr	r3, [r4, #8]
 800b03e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b042:	705a      	strb	r2, [r3, #1]
 800b044:	e7b7      	b.n	800afb6 <ucdr_serialize_uint16_t+0x3e>
 800b046:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	e7b3      	b.n	800afb6 <ucdr_serialize_uint16_t+0x3e>
 800b04e:	68a2      	ldr	r2, [r4, #8]
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	7da0      	ldrb	r0, [r4, #22]
 800b054:	7567      	strb	r7, [r4, #21]
 800b056:	1b92      	subs	r2, r2, r6
 800b058:	1b9b      	subs	r3, r3, r6
 800b05a:	f080 0001 	eor.w	r0, r0, #1
 800b05e:	60a2      	str	r2, [r4, #8]
 800b060:	6123      	str	r3, [r4, #16]
 800b062:	b002      	add	sp, #8
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b06c:	8013      	strh	r3, [r2, #0]
 800b06e:	e7a2      	b.n	800afb6 <ucdr_serialize_uint16_t+0x3e>
 800b070:	4628      	mov	r0, r5
 800b072:	f10d 0506 	add.w	r5, sp, #6
 800b076:	4632      	mov	r2, r6
 800b078:	4629      	mov	r1, r5
 800b07a:	f010 fcd5 	bl	801ba28 <memcpy>
 800b07e:	68a0      	ldr	r0, [r4, #8]
 800b080:	4642      	mov	r2, r8
 800b082:	19a9      	adds	r1, r5, r6
 800b084:	f010 fcd0 	bl	801ba28 <memcpy>
 800b088:	e7bc      	b.n	800b004 <ucdr_serialize_uint16_t+0x8c>
 800b08a:	bf00      	nop

0800b08c <ucdr_serialize_endian_uint16_t>:
 800b08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b090:	b083      	sub	sp, #12
 800b092:	460d      	mov	r5, r1
 800b094:	2102      	movs	r1, #2
 800b096:	4604      	mov	r4, r0
 800b098:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b09c:	f001 fb2a 	bl	800c6f4 <ucdr_buffer_alignment>
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b0a8:	f001 fb68 	bl	800c77c <ucdr_advance_buffer>
 800b0ac:	2102      	movs	r1, #2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f001 fac0 	bl	800c634 <ucdr_check_buffer_available_for>
 800b0b4:	bb60      	cbnz	r0, 800b110 <ucdr_serialize_endian_uint16_t+0x84>
 800b0b6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b0ba:	42be      	cmp	r6, r7
 800b0bc:	d923      	bls.n	800b106 <ucdr_serialize_endian_uint16_t+0x7a>
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	60a6      	str	r6, [r4, #8]
 800b0c2:	1bf6      	subs	r6, r6, r7
 800b0c4:	4433      	add	r3, r6
 800b0c6:	f1c6 0902 	rsb	r9, r6, #2
 800b0ca:	6123      	str	r3, [r4, #16]
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f001 fabc 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d037      	beq.n	800b148 <ucdr_serialize_endian_uint16_t+0xbc>
 800b0d8:	2d01      	cmp	r5, #1
 800b0da:	d043      	beq.n	800b164 <ucdr_serialize_endian_uint16_t+0xd8>
 800b0dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0e0:	703b      	strb	r3, [r7, #0]
 800b0e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0e6:	707b      	strb	r3, [r7, #1]
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	68a2      	ldr	r2, [r4, #8]
 800b0ec:	7da0      	ldrb	r0, [r4, #22]
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	444a      	add	r2, r9
 800b0f2:	1b9b      	subs	r3, r3, r6
 800b0f4:	2102      	movs	r1, #2
 800b0f6:	f080 0001 	eor.w	r0, r0, #1
 800b0fa:	60a2      	str	r2, [r4, #8]
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	7561      	strb	r1, [r4, #21]
 800b100:	b003      	add	sp, #12
 800b102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b106:	2102      	movs	r1, #2
 800b108:	4620      	mov	r0, r4
 800b10a:	f001 fa9f 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b10e:	b188      	cbz	r0, 800b134 <ucdr_serialize_endian_uint16_t+0xa8>
 800b110:	2d01      	cmp	r5, #1
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	d014      	beq.n	800b140 <ucdr_serialize_endian_uint16_t+0xb4>
 800b116:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b11a:	701a      	strb	r2, [r3, #0]
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b122:	705a      	strb	r2, [r3, #1]
 800b124:	68a2      	ldr	r2, [r4, #8]
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	3202      	adds	r2, #2
 800b12a:	3302      	adds	r3, #2
 800b12c:	2102      	movs	r1, #2
 800b12e:	60a2      	str	r2, [r4, #8]
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	7561      	strb	r1, [r4, #21]
 800b134:	7da0      	ldrb	r0, [r4, #22]
 800b136:	f080 0001 	eor.w	r0, r0, #1
 800b13a:	b003      	add	sp, #12
 800b13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b140:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b144:	801a      	strh	r2, [r3, #0]
 800b146:	e7ed      	b.n	800b124 <ucdr_serialize_endian_uint16_t+0x98>
 800b148:	68a2      	ldr	r2, [r4, #8]
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	7da0      	ldrb	r0, [r4, #22]
 800b14e:	f884 8015 	strb.w	r8, [r4, #21]
 800b152:	1b92      	subs	r2, r2, r6
 800b154:	1b9b      	subs	r3, r3, r6
 800b156:	f080 0001 	eor.w	r0, r0, #1
 800b15a:	60a2      	str	r2, [r4, #8]
 800b15c:	6123      	str	r3, [r4, #16]
 800b15e:	b003      	add	sp, #12
 800b160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b164:	f10d 0506 	add.w	r5, sp, #6
 800b168:	4632      	mov	r2, r6
 800b16a:	4629      	mov	r1, r5
 800b16c:	4638      	mov	r0, r7
 800b16e:	f010 fc5b 	bl	801ba28 <memcpy>
 800b172:	68a0      	ldr	r0, [r4, #8]
 800b174:	464a      	mov	r2, r9
 800b176:	19a9      	adds	r1, r5, r6
 800b178:	f010 fc56 	bl	801ba28 <memcpy>
 800b17c:	e7b4      	b.n	800b0e8 <ucdr_serialize_endian_uint16_t+0x5c>
 800b17e:	bf00      	nop

0800b180 <ucdr_deserialize_uint16_t>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	460d      	mov	r5, r1
 800b186:	2102      	movs	r1, #2
 800b188:	4604      	mov	r4, r0
 800b18a:	f001 fab3 	bl	800c6f4 <ucdr_buffer_alignment>
 800b18e:	4601      	mov	r1, r0
 800b190:	4620      	mov	r0, r4
 800b192:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b196:	f001 faf1 	bl	800c77c <ucdr_advance_buffer>
 800b19a:	2102      	movs	r1, #2
 800b19c:	4620      	mov	r0, r4
 800b19e:	f001 fa49 	bl	800c634 <ucdr_check_buffer_available_for>
 800b1a2:	b1a8      	cbz	r0, 800b1d0 <ucdr_deserialize_uint16_t+0x50>
 800b1a4:	7d22      	ldrb	r2, [r4, #20]
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	2a01      	cmp	r2, #1
 800b1aa:	d046      	beq.n	800b23a <ucdr_deserialize_uint16_t+0xba>
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	702b      	strb	r3, [r5, #0]
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	706b      	strb	r3, [r5, #1]
 800b1b6:	68a2      	ldr	r2, [r4, #8]
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	3202      	adds	r2, #2
 800b1bc:	3302      	adds	r3, #2
 800b1be:	2102      	movs	r1, #2
 800b1c0:	60a2      	str	r2, [r4, #8]
 800b1c2:	6123      	str	r3, [r4, #16]
 800b1c4:	7561      	strb	r1, [r4, #21]
 800b1c6:	7da0      	ldrb	r0, [r4, #22]
 800b1c8:	f080 0001 	eor.w	r0, r0, #1
 800b1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b1d4:	42be      	cmp	r6, r7
 800b1d6:	d920      	bls.n	800b21a <ucdr_deserialize_uint16_t+0x9a>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	60a6      	str	r6, [r4, #8]
 800b1dc:	1bf6      	subs	r6, r6, r7
 800b1de:	4433      	add	r3, r6
 800b1e0:	f1c6 0902 	rsb	r9, r6, #2
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f001 fa2f 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b1ee:	b338      	cbz	r0, 800b240 <ucdr_deserialize_uint16_t+0xc0>
 800b1f0:	7d23      	ldrb	r3, [r4, #20]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d034      	beq.n	800b260 <ucdr_deserialize_uint16_t+0xe0>
 800b1f6:	787b      	ldrb	r3, [r7, #1]
 800b1f8:	702b      	strb	r3, [r5, #0]
 800b1fa:	783b      	ldrb	r3, [r7, #0]
 800b1fc:	706b      	strb	r3, [r5, #1]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	68a2      	ldr	r2, [r4, #8]
 800b202:	7da0      	ldrb	r0, [r4, #22]
 800b204:	2102      	movs	r1, #2
 800b206:	3302      	adds	r3, #2
 800b208:	444a      	add	r2, r9
 800b20a:	1b9b      	subs	r3, r3, r6
 800b20c:	7561      	strb	r1, [r4, #21]
 800b20e:	60a2      	str	r2, [r4, #8]
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	f080 0001 	eor.w	r0, r0, #1
 800b216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b21a:	2102      	movs	r1, #2
 800b21c:	4620      	mov	r0, r4
 800b21e:	f001 fa15 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b222:	2800      	cmp	r0, #0
 800b224:	d0cf      	beq.n	800b1c6 <ucdr_deserialize_uint16_t+0x46>
 800b226:	7d23      	ldrb	r3, [r4, #20]
 800b228:	68a2      	ldr	r2, [r4, #8]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d015      	beq.n	800b25a <ucdr_deserialize_uint16_t+0xda>
 800b22e:	7853      	ldrb	r3, [r2, #1]
 800b230:	702b      	strb	r3, [r5, #0]
 800b232:	68a3      	ldr	r3, [r4, #8]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	706b      	strb	r3, [r5, #1]
 800b238:	e7bd      	b.n	800b1b6 <ucdr_deserialize_uint16_t+0x36>
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	802b      	strh	r3, [r5, #0]
 800b23e:	e7ba      	b.n	800b1b6 <ucdr_deserialize_uint16_t+0x36>
 800b240:	68a2      	ldr	r2, [r4, #8]
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	7da0      	ldrb	r0, [r4, #22]
 800b246:	f884 8015 	strb.w	r8, [r4, #21]
 800b24a:	1b92      	subs	r2, r2, r6
 800b24c:	1b9b      	subs	r3, r3, r6
 800b24e:	60a2      	str	r2, [r4, #8]
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	f080 0001 	eor.w	r0, r0, #1
 800b256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25a:	8813      	ldrh	r3, [r2, #0]
 800b25c:	802b      	strh	r3, [r5, #0]
 800b25e:	e7aa      	b.n	800b1b6 <ucdr_deserialize_uint16_t+0x36>
 800b260:	4639      	mov	r1, r7
 800b262:	4632      	mov	r2, r6
 800b264:	4628      	mov	r0, r5
 800b266:	f010 fbdf 	bl	801ba28 <memcpy>
 800b26a:	68a1      	ldr	r1, [r4, #8]
 800b26c:	464a      	mov	r2, r9
 800b26e:	19a8      	adds	r0, r5, r6
 800b270:	f010 fbda 	bl	801ba28 <memcpy>
 800b274:	e7c3      	b.n	800b1fe <ucdr_deserialize_uint16_t+0x7e>
 800b276:	bf00      	nop

0800b278 <ucdr_deserialize_endian_uint16_t>:
 800b278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27c:	460e      	mov	r6, r1
 800b27e:	2102      	movs	r1, #2
 800b280:	4604      	mov	r4, r0
 800b282:	4615      	mov	r5, r2
 800b284:	f001 fa36 	bl	800c6f4 <ucdr_buffer_alignment>
 800b288:	4601      	mov	r1, r0
 800b28a:	4620      	mov	r0, r4
 800b28c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b290:	f001 fa74 	bl	800c77c <ucdr_advance_buffer>
 800b294:	2102      	movs	r1, #2
 800b296:	4620      	mov	r0, r4
 800b298:	f001 f9cc 	bl	800c634 <ucdr_check_buffer_available_for>
 800b29c:	bb60      	cbnz	r0, 800b2f8 <ucdr_deserialize_endian_uint16_t+0x80>
 800b29e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b2a2:	4547      	cmp	r7, r8
 800b2a4:	d923      	bls.n	800b2ee <ucdr_deserialize_endian_uint16_t+0x76>
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	60a7      	str	r7, [r4, #8]
 800b2aa:	eba7 0708 	sub.w	r7, r7, r8
 800b2ae:	443b      	add	r3, r7
 800b2b0:	f1c7 0a02 	rsb	sl, r7, #2
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	4651      	mov	r1, sl
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 f9c7 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d032      	beq.n	800b328 <ucdr_deserialize_endian_uint16_t+0xb0>
 800b2c2:	2e01      	cmp	r6, #1
 800b2c4:	d03d      	beq.n	800b342 <ucdr_deserialize_endian_uint16_t+0xca>
 800b2c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b2ca:	702b      	strb	r3, [r5, #0]
 800b2cc:	f898 3000 	ldrb.w	r3, [r8]
 800b2d0:	706b      	strb	r3, [r5, #1]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	68a2      	ldr	r2, [r4, #8]
 800b2d6:	7da0      	ldrb	r0, [r4, #22]
 800b2d8:	2102      	movs	r1, #2
 800b2da:	3302      	adds	r3, #2
 800b2dc:	4452      	add	r2, sl
 800b2de:	1bdb      	subs	r3, r3, r7
 800b2e0:	7561      	strb	r1, [r4, #21]
 800b2e2:	60a2      	str	r2, [r4, #8]
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	f080 0001 	eor.w	r0, r0, #1
 800b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 f9ab 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b2f6:	b178      	cbz	r0, 800b318 <ucdr_deserialize_endian_uint16_t+0xa0>
 800b2f8:	2e01      	cmp	r6, #1
 800b2fa:	68a3      	ldr	r3, [r4, #8]
 800b2fc:	d011      	beq.n	800b322 <ucdr_deserialize_endian_uint16_t+0xaa>
 800b2fe:	785b      	ldrb	r3, [r3, #1]
 800b300:	702b      	strb	r3, [r5, #0]
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	706b      	strb	r3, [r5, #1]
 800b308:	68a2      	ldr	r2, [r4, #8]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	3202      	adds	r2, #2
 800b30e:	3302      	adds	r3, #2
 800b310:	2102      	movs	r1, #2
 800b312:	60a2      	str	r2, [r4, #8]
 800b314:	6123      	str	r3, [r4, #16]
 800b316:	7561      	strb	r1, [r4, #21]
 800b318:	7da0      	ldrb	r0, [r4, #22]
 800b31a:	f080 0001 	eor.w	r0, r0, #1
 800b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	802b      	strh	r3, [r5, #0]
 800b326:	e7ef      	b.n	800b308 <ucdr_deserialize_endian_uint16_t+0x90>
 800b328:	68a2      	ldr	r2, [r4, #8]
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	7da0      	ldrb	r0, [r4, #22]
 800b32e:	f884 9015 	strb.w	r9, [r4, #21]
 800b332:	1bd2      	subs	r2, r2, r7
 800b334:	1bdb      	subs	r3, r3, r7
 800b336:	60a2      	str	r2, [r4, #8]
 800b338:	6123      	str	r3, [r4, #16]
 800b33a:	f080 0001 	eor.w	r0, r0, #1
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	4641      	mov	r1, r8
 800b344:	463a      	mov	r2, r7
 800b346:	4628      	mov	r0, r5
 800b348:	f010 fb6e 	bl	801ba28 <memcpy>
 800b34c:	68a1      	ldr	r1, [r4, #8]
 800b34e:	4652      	mov	r2, sl
 800b350:	19e8      	adds	r0, r5, r7
 800b352:	f010 fb69 	bl	801ba28 <memcpy>
 800b356:	e7bc      	b.n	800b2d2 <ucdr_deserialize_endian_uint16_t+0x5a>

0800b358 <ucdr_serialize_uint32_t>:
 800b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	4604      	mov	r4, r0
 800b360:	9101      	str	r1, [sp, #4]
 800b362:	2104      	movs	r1, #4
 800b364:	f001 f9c6 	bl	800c6f4 <ucdr_buffer_alignment>
 800b368:	4601      	mov	r1, r0
 800b36a:	4620      	mov	r0, r4
 800b36c:	7d67      	ldrb	r7, [r4, #21]
 800b36e:	f001 fa05 	bl	800c77c <ucdr_advance_buffer>
 800b372:	2104      	movs	r1, #4
 800b374:	4620      	mov	r0, r4
 800b376:	f001 f95d 	bl	800c634 <ucdr_check_buffer_available_for>
 800b37a:	b300      	cbz	r0, 800b3be <ucdr_serialize_uint32_t+0x66>
 800b37c:	7d22      	ldrb	r2, [r4, #20]
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	2a01      	cmp	r2, #1
 800b382:	d05d      	beq.n	800b440 <ucdr_serialize_uint32_t+0xe8>
 800b384:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b390:	705a      	strb	r2, [r3, #1]
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b398:	709a      	strb	r2, [r3, #2]
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3a0:	70da      	strb	r2, [r3, #3]
 800b3a2:	68a2      	ldr	r2, [r4, #8]
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	3204      	adds	r2, #4
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	2104      	movs	r1, #4
 800b3ac:	60a2      	str	r2, [r4, #8]
 800b3ae:	6123      	str	r3, [r4, #16]
 800b3b0:	7561      	strb	r1, [r4, #21]
 800b3b2:	7da0      	ldrb	r0, [r4, #22]
 800b3b4:	f080 0001 	eor.w	r0, r0, #1
 800b3b8:	b002      	add	sp, #8
 800b3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3c2:	42ab      	cmp	r3, r5
 800b3c4:	d92e      	bls.n	800b424 <ucdr_serialize_uint32_t+0xcc>
 800b3c6:	1b5e      	subs	r6, r3, r5
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	f1c6 0804 	rsb	r8, r6, #4
 800b3d0:	4433      	add	r3, r6
 800b3d2:	6123      	str	r3, [r4, #16]
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f001 f938 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b3dc:	b398      	cbz	r0, 800b446 <ucdr_serialize_uint32_t+0xee>
 800b3de:	7d23      	ldrb	r3, [r4, #20]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d046      	beq.n	800b472 <ucdr_serialize_uint32_t+0x11a>
 800b3e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3e8:	702b      	strb	r3, [r5, #0]
 800b3ea:	2e01      	cmp	r6, #1
 800b3ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3f0:	706b      	strb	r3, [r5, #1]
 800b3f2:	d035      	beq.n	800b460 <ucdr_serialize_uint32_t+0x108>
 800b3f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3f8:	70ab      	strb	r3, [r5, #2]
 800b3fa:	2e02      	cmp	r6, #2
 800b3fc:	d034      	beq.n	800b468 <ucdr_serialize_uint32_t+0x110>
 800b3fe:	3503      	adds	r5, #3
 800b400:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b404:	702b      	strb	r3, [r5, #0]
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	68a2      	ldr	r2, [r4, #8]
 800b40a:	7da0      	ldrb	r0, [r4, #22]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4442      	add	r2, r8
 800b410:	1b9b      	subs	r3, r3, r6
 800b412:	2104      	movs	r1, #4
 800b414:	f080 0001 	eor.w	r0, r0, #1
 800b418:	60a2      	str	r2, [r4, #8]
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	7561      	strb	r1, [r4, #21]
 800b41e:	b002      	add	sp, #8
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	2104      	movs	r1, #4
 800b426:	4620      	mov	r0, r4
 800b428:	f001 f910 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d0c0      	beq.n	800b3b2 <ucdr_serialize_uint32_t+0x5a>
 800b430:	7d23      	ldrb	r3, [r4, #20]
 800b432:	68a2      	ldr	r2, [r4, #8]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d019      	beq.n	800b46c <ucdr_serialize_uint32_t+0x114>
 800b438:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b43c:	7013      	strb	r3, [r2, #0]
 800b43e:	e7a4      	b.n	800b38a <ucdr_serialize_uint32_t+0x32>
 800b440:	9a01      	ldr	r2, [sp, #4]
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	e7ad      	b.n	800b3a2 <ucdr_serialize_uint32_t+0x4a>
 800b446:	68a2      	ldr	r2, [r4, #8]
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	7da0      	ldrb	r0, [r4, #22]
 800b44c:	7567      	strb	r7, [r4, #21]
 800b44e:	1b92      	subs	r2, r2, r6
 800b450:	1b9b      	subs	r3, r3, r6
 800b452:	f080 0001 	eor.w	r0, r0, #1
 800b456:	60a2      	str	r2, [r4, #8]
 800b458:	6123      	str	r3, [r4, #16]
 800b45a:	b002      	add	sp, #8
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b460:	68a3      	ldr	r3, [r4, #8]
 800b462:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	68a5      	ldr	r5, [r4, #8]
 800b46a:	e7c9      	b.n	800b400 <ucdr_serialize_uint32_t+0xa8>
 800b46c:	9b01      	ldr	r3, [sp, #4]
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	e797      	b.n	800b3a2 <ucdr_serialize_uint32_t+0x4a>
 800b472:	4628      	mov	r0, r5
 800b474:	ad01      	add	r5, sp, #4
 800b476:	4632      	mov	r2, r6
 800b478:	4629      	mov	r1, r5
 800b47a:	f010 fad5 	bl	801ba28 <memcpy>
 800b47e:	68a0      	ldr	r0, [r4, #8]
 800b480:	4642      	mov	r2, r8
 800b482:	19a9      	adds	r1, r5, r6
 800b484:	f010 fad0 	bl	801ba28 <memcpy>
 800b488:	e7bd      	b.n	800b406 <ucdr_serialize_uint32_t+0xae>
 800b48a:	bf00      	nop

0800b48c <ucdr_serialize_endian_uint32_t>:
 800b48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b490:	b083      	sub	sp, #12
 800b492:	460d      	mov	r5, r1
 800b494:	2104      	movs	r1, #4
 800b496:	4604      	mov	r4, r0
 800b498:	9201      	str	r2, [sp, #4]
 800b49a:	f001 f92b 	bl	800c6f4 <ucdr_buffer_alignment>
 800b49e:	4601      	mov	r1, r0
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4a6:	f001 f969 	bl	800c77c <ucdr_advance_buffer>
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f001 f8c1 	bl	800c634 <ucdr_check_buffer_available_for>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d137      	bne.n	800b526 <ucdr_serialize_endian_uint32_t+0x9a>
 800b4b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4ba:	42b7      	cmp	r7, r6
 800b4bc:	d92e      	bls.n	800b51c <ucdr_serialize_endian_uint32_t+0x90>
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	60a7      	str	r7, [r4, #8]
 800b4c2:	1bbf      	subs	r7, r7, r6
 800b4c4:	443b      	add	r3, r7
 800b4c6:	f1c7 0904 	rsb	r9, r7, #4
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f001 f8bc 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d049      	beq.n	800b56c <ucdr_serialize_endian_uint32_t+0xe0>
 800b4d8:	2d01      	cmp	r5, #1
 800b4da:	d05b      	beq.n	800b594 <ucdr_serialize_endian_uint32_t+0x108>
 800b4dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4e0:	7033      	strb	r3, [r6, #0]
 800b4e2:	2f01      	cmp	r7, #1
 800b4e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4e8:	7073      	strb	r3, [r6, #1]
 800b4ea:	d04d      	beq.n	800b588 <ucdr_serialize_endian_uint32_t+0xfc>
 800b4ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4f0:	70b3      	strb	r3, [r6, #2]
 800b4f2:	2f02      	cmp	r7, #2
 800b4f4:	d04c      	beq.n	800b590 <ucdr_serialize_endian_uint32_t+0x104>
 800b4f6:	3603      	adds	r6, #3
 800b4f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4fc:	7033      	strb	r3, [r6, #0]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	68a2      	ldr	r2, [r4, #8]
 800b502:	7da0      	ldrb	r0, [r4, #22]
 800b504:	3304      	adds	r3, #4
 800b506:	444a      	add	r2, r9
 800b508:	1bdb      	subs	r3, r3, r7
 800b50a:	2104      	movs	r1, #4
 800b50c:	f080 0001 	eor.w	r0, r0, #1
 800b510:	60a2      	str	r2, [r4, #8]
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	7561      	strb	r1, [r4, #21]
 800b516:	b003      	add	sp, #12
 800b518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b51c:	2104      	movs	r1, #4
 800b51e:	4620      	mov	r0, r4
 800b520:	f001 f894 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b524:	b1c8      	cbz	r0, 800b55a <ucdr_serialize_endian_uint32_t+0xce>
 800b526:	2d01      	cmp	r5, #1
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	d01c      	beq.n	800b566 <ucdr_serialize_endian_uint32_t+0xda>
 800b52c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b538:	705a      	strb	r2, [r3, #1]
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b540:	709a      	strb	r2, [r3, #2]
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b548:	70da      	strb	r2, [r3, #3]
 800b54a:	68a2      	ldr	r2, [r4, #8]
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	3204      	adds	r2, #4
 800b550:	3304      	adds	r3, #4
 800b552:	2104      	movs	r1, #4
 800b554:	60a2      	str	r2, [r4, #8]
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	7561      	strb	r1, [r4, #21]
 800b55a:	7da0      	ldrb	r0, [r4, #22]
 800b55c:	f080 0001 	eor.w	r0, r0, #1
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b566:	9a01      	ldr	r2, [sp, #4]
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	e7ee      	b.n	800b54a <ucdr_serialize_endian_uint32_t+0xbe>
 800b56c:	68a2      	ldr	r2, [r4, #8]
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	7da0      	ldrb	r0, [r4, #22]
 800b572:	f884 8015 	strb.w	r8, [r4, #21]
 800b576:	1bd2      	subs	r2, r2, r7
 800b578:	1bdb      	subs	r3, r3, r7
 800b57a:	f080 0001 	eor.w	r0, r0, #1
 800b57e:	60a2      	str	r2, [r4, #8]
 800b580:	6123      	str	r3, [r4, #16]
 800b582:	b003      	add	sp, #12
 800b584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b588:	68a3      	ldr	r3, [r4, #8]
 800b58a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	68a6      	ldr	r6, [r4, #8]
 800b592:	e7b1      	b.n	800b4f8 <ucdr_serialize_endian_uint32_t+0x6c>
 800b594:	ad01      	add	r5, sp, #4
 800b596:	463a      	mov	r2, r7
 800b598:	4629      	mov	r1, r5
 800b59a:	4630      	mov	r0, r6
 800b59c:	f010 fa44 	bl	801ba28 <memcpy>
 800b5a0:	68a0      	ldr	r0, [r4, #8]
 800b5a2:	464a      	mov	r2, r9
 800b5a4:	19e9      	adds	r1, r5, r7
 800b5a6:	f010 fa3f 	bl	801ba28 <memcpy>
 800b5aa:	e7a8      	b.n	800b4fe <ucdr_serialize_endian_uint32_t+0x72>

0800b5ac <ucdr_deserialize_uint32_t>:
 800b5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	2104      	movs	r1, #4
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	f001 f89d 	bl	800c6f4 <ucdr_buffer_alignment>
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5c2:	f001 f8db 	bl	800c77c <ucdr_advance_buffer>
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 f833 	bl	800c634 <ucdr_check_buffer_available_for>
 800b5ce:	b1d8      	cbz	r0, 800b608 <ucdr_deserialize_uint32_t+0x5c>
 800b5d0:	7d22      	ldrb	r2, [r4, #20]
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	2a01      	cmp	r2, #1
 800b5d6:	d052      	beq.n	800b67e <ucdr_deserialize_uint32_t+0xd2>
 800b5d8:	78db      	ldrb	r3, [r3, #3]
 800b5da:	702b      	strb	r3, [r5, #0]
 800b5dc:	68a3      	ldr	r3, [r4, #8]
 800b5de:	789b      	ldrb	r3, [r3, #2]
 800b5e0:	706b      	strb	r3, [r5, #1]
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	70ab      	strb	r3, [r5, #2]
 800b5e8:	68a3      	ldr	r3, [r4, #8]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	70eb      	strb	r3, [r5, #3]
 800b5ee:	68a2      	ldr	r2, [r4, #8]
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	3204      	adds	r2, #4
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	2104      	movs	r1, #4
 800b5f8:	60a2      	str	r2, [r4, #8]
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	7561      	strb	r1, [r4, #21]
 800b5fe:	7da0      	ldrb	r0, [r4, #22]
 800b600:	f080 0001 	eor.w	r0, r0, #1
 800b604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b608:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b60c:	42b7      	cmp	r7, r6
 800b60e:	d92a      	bls.n	800b666 <ucdr_deserialize_uint32_t+0xba>
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	60a7      	str	r7, [r4, #8]
 800b614:	1bbf      	subs	r7, r7, r6
 800b616:	443b      	add	r3, r7
 800b618:	f1c7 0904 	rsb	r9, r7, #4
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	4649      	mov	r1, r9
 800b620:	4620      	mov	r0, r4
 800b622:	f001 f813 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b626:	b368      	cbz	r0, 800b684 <ucdr_deserialize_uint32_t+0xd8>
 800b628:	7d23      	ldrb	r3, [r4, #20]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d040      	beq.n	800b6b0 <ucdr_deserialize_uint32_t+0x104>
 800b62e:	78f3      	ldrb	r3, [r6, #3]
 800b630:	702b      	strb	r3, [r5, #0]
 800b632:	78b3      	ldrb	r3, [r6, #2]
 800b634:	706b      	strb	r3, [r5, #1]
 800b636:	2f01      	cmp	r7, #1
 800b638:	d031      	beq.n	800b69e <ucdr_deserialize_uint32_t+0xf2>
 800b63a:	7873      	ldrb	r3, [r6, #1]
 800b63c:	70ab      	strb	r3, [r5, #2]
 800b63e:	2f02      	cmp	r7, #2
 800b640:	f105 0503 	add.w	r5, r5, #3
 800b644:	d02f      	beq.n	800b6a6 <ucdr_deserialize_uint32_t+0xfa>
 800b646:	7833      	ldrb	r3, [r6, #0]
 800b648:	702b      	strb	r3, [r5, #0]
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	68a2      	ldr	r2, [r4, #8]
 800b64e:	7da0      	ldrb	r0, [r4, #22]
 800b650:	2104      	movs	r1, #4
 800b652:	3304      	adds	r3, #4
 800b654:	444a      	add	r2, r9
 800b656:	1bdb      	subs	r3, r3, r7
 800b658:	7561      	strb	r1, [r4, #21]
 800b65a:	60a2      	str	r2, [r4, #8]
 800b65c:	6123      	str	r3, [r4, #16]
 800b65e:	f080 0001 	eor.w	r0, r0, #1
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	2104      	movs	r1, #4
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 ffef 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d0c5      	beq.n	800b5fe <ucdr_deserialize_uint32_t+0x52>
 800b672:	7d23      	ldrb	r3, [r4, #20]
 800b674:	68a2      	ldr	r2, [r4, #8]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d017      	beq.n	800b6aa <ucdr_deserialize_uint32_t+0xfe>
 800b67a:	78d3      	ldrb	r3, [r2, #3]
 800b67c:	e7ad      	b.n	800b5da <ucdr_deserialize_uint32_t+0x2e>
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	e7b4      	b.n	800b5ee <ucdr_deserialize_uint32_t+0x42>
 800b684:	68a2      	ldr	r2, [r4, #8]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	7da0      	ldrb	r0, [r4, #22]
 800b68a:	f884 8015 	strb.w	r8, [r4, #21]
 800b68e:	1bd2      	subs	r2, r2, r7
 800b690:	1bdb      	subs	r3, r3, r7
 800b692:	60a2      	str	r2, [r4, #8]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	f080 0001 	eor.w	r0, r0, #1
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	785b      	ldrb	r3, [r3, #1]
 800b6a2:	70ab      	strb	r3, [r5, #2]
 800b6a4:	3503      	adds	r5, #3
 800b6a6:	68a6      	ldr	r6, [r4, #8]
 800b6a8:	e7cd      	b.n	800b646 <ucdr_deserialize_uint32_t+0x9a>
 800b6aa:	6813      	ldr	r3, [r2, #0]
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	e79e      	b.n	800b5ee <ucdr_deserialize_uint32_t+0x42>
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f010 f9b7 	bl	801ba28 <memcpy>
 800b6ba:	68a1      	ldr	r1, [r4, #8]
 800b6bc:	464a      	mov	r2, r9
 800b6be:	19e8      	adds	r0, r5, r7
 800b6c0:	f010 f9b2 	bl	801ba28 <memcpy>
 800b6c4:	e7c1      	b.n	800b64a <ucdr_deserialize_uint32_t+0x9e>
 800b6c6:	bf00      	nop

0800b6c8 <ucdr_deserialize_endian_uint32_t>:
 800b6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	460e      	mov	r6, r1
 800b6ce:	2104      	movs	r1, #4
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	4615      	mov	r5, r2
 800b6d4:	f001 f80e 	bl	800c6f4 <ucdr_buffer_alignment>
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b6e0:	f001 f84c 	bl	800c77c <ucdr_advance_buffer>
 800b6e4:	2104      	movs	r1, #4
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 ffa4 	bl	800c634 <ucdr_check_buffer_available_for>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d137      	bne.n	800b760 <ucdr_deserialize_endian_uint32_t+0x98>
 800b6f0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b6f4:	42bb      	cmp	r3, r7
 800b6f6:	d92e      	bls.n	800b756 <ucdr_deserialize_endian_uint32_t+0x8e>
 800b6f8:	eba3 0807 	sub.w	r8, r3, r7
 800b6fc:	60a3      	str	r3, [r4, #8]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	f1c8 0a04 	rsb	sl, r8, #4
 800b704:	4443      	add	r3, r8
 800b706:	6123      	str	r3, [r4, #16]
 800b708:	4651      	mov	r1, sl
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 ff9e 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b710:	2800      	cmp	r0, #0
 800b712:	d043      	beq.n	800b79c <ucdr_deserialize_endian_uint32_t+0xd4>
 800b714:	2e01      	cmp	r6, #1
 800b716:	d056      	beq.n	800b7c6 <ucdr_deserialize_endian_uint32_t+0xfe>
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	702b      	strb	r3, [r5, #0]
 800b71c:	78bb      	ldrb	r3, [r7, #2]
 800b71e:	706b      	strb	r3, [r5, #1]
 800b720:	f1b8 0f01 	cmp.w	r8, #1
 800b724:	d049      	beq.n	800b7ba <ucdr_deserialize_endian_uint32_t+0xf2>
 800b726:	787b      	ldrb	r3, [r7, #1]
 800b728:	70ab      	strb	r3, [r5, #2]
 800b72a:	f1b8 0f02 	cmp.w	r8, #2
 800b72e:	f105 0503 	add.w	r5, r5, #3
 800b732:	d046      	beq.n	800b7c2 <ucdr_deserialize_endian_uint32_t+0xfa>
 800b734:	783b      	ldrb	r3, [r7, #0]
 800b736:	702b      	strb	r3, [r5, #0]
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	68a2      	ldr	r2, [r4, #8]
 800b73c:	7da0      	ldrb	r0, [r4, #22]
 800b73e:	2104      	movs	r1, #4
 800b740:	3304      	adds	r3, #4
 800b742:	4452      	add	r2, sl
 800b744:	eba3 0308 	sub.w	r3, r3, r8
 800b748:	7561      	strb	r1, [r4, #21]
 800b74a:	60a2      	str	r2, [r4, #8]
 800b74c:	6123      	str	r3, [r4, #16]
 800b74e:	f080 0001 	eor.w	r0, r0, #1
 800b752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b756:	2104      	movs	r1, #4
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 ff77 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b75e:	b1a8      	cbz	r0, 800b78c <ucdr_deserialize_endian_uint32_t+0xc4>
 800b760:	2e01      	cmp	r6, #1
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	d017      	beq.n	800b796 <ucdr_deserialize_endian_uint32_t+0xce>
 800b766:	78db      	ldrb	r3, [r3, #3]
 800b768:	702b      	strb	r3, [r5, #0]
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	789b      	ldrb	r3, [r3, #2]
 800b76e:	706b      	strb	r3, [r5, #1]
 800b770:	68a3      	ldr	r3, [r4, #8]
 800b772:	785b      	ldrb	r3, [r3, #1]
 800b774:	70ab      	strb	r3, [r5, #2]
 800b776:	68a3      	ldr	r3, [r4, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	70eb      	strb	r3, [r5, #3]
 800b77c:	68a2      	ldr	r2, [r4, #8]
 800b77e:	6923      	ldr	r3, [r4, #16]
 800b780:	3204      	adds	r2, #4
 800b782:	3304      	adds	r3, #4
 800b784:	2104      	movs	r1, #4
 800b786:	60a2      	str	r2, [r4, #8]
 800b788:	6123      	str	r3, [r4, #16]
 800b78a:	7561      	strb	r1, [r4, #21]
 800b78c:	7da0      	ldrb	r0, [r4, #22]
 800b78e:	f080 0001 	eor.w	r0, r0, #1
 800b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	e7ef      	b.n	800b77c <ucdr_deserialize_endian_uint32_t+0xb4>
 800b79c:	68a2      	ldr	r2, [r4, #8]
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	7da0      	ldrb	r0, [r4, #22]
 800b7a2:	f884 9015 	strb.w	r9, [r4, #21]
 800b7a6:	eba2 0208 	sub.w	r2, r2, r8
 800b7aa:	eba3 0308 	sub.w	r3, r3, r8
 800b7ae:	60a2      	str	r2, [r4, #8]
 800b7b0:	6123      	str	r3, [r4, #16]
 800b7b2:	f080 0001 	eor.w	r0, r0, #1
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	70ab      	strb	r3, [r5, #2]
 800b7c0:	3503      	adds	r5, #3
 800b7c2:	68a7      	ldr	r7, [r4, #8]
 800b7c4:	e7b6      	b.n	800b734 <ucdr_deserialize_endian_uint32_t+0x6c>
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f010 f92c 	bl	801ba28 <memcpy>
 800b7d0:	68a1      	ldr	r1, [r4, #8]
 800b7d2:	4652      	mov	r2, sl
 800b7d4:	eb05 0008 	add.w	r0, r5, r8
 800b7d8:	f010 f926 	bl	801ba28 <memcpy>
 800b7dc:	e7ac      	b.n	800b738 <ucdr_deserialize_endian_uint32_t+0x70>
 800b7de:	bf00      	nop

0800b7e0 <ucdr_serialize_uint64_t>:
 800b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e4:	2108      	movs	r1, #8
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	e9cd 2300 	strd	r2, r3, [sp]
 800b7ee:	f000 ff81 	bl	800c6f4 <ucdr_buffer_alignment>
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	7d67      	ldrb	r7, [r4, #21]
 800b7f8:	f000 ffc0 	bl	800c77c <ucdr_advance_buffer>
 800b7fc:	2108      	movs	r1, #8
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 ff18 	bl	800c634 <ucdr_check_buffer_available_for>
 800b804:	2800      	cmp	r0, #0
 800b806:	d14d      	bne.n	800b8a4 <ucdr_serialize_uint64_t+0xc4>
 800b808:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b80c:	42ab      	cmp	r3, r5
 800b80e:	d944      	bls.n	800b89a <ucdr_serialize_uint64_t+0xba>
 800b810:	1b5e      	subs	r6, r3, r5
 800b812:	60a3      	str	r3, [r4, #8]
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	f1c6 0808 	rsb	r8, r6, #8
 800b81a:	4433      	add	r3, r6
 800b81c:	6123      	str	r3, [r4, #16]
 800b81e:	4641      	mov	r1, r8
 800b820:	4620      	mov	r0, r4
 800b822:	f000 ff13 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b826:	2800      	cmp	r0, #0
 800b828:	d072      	beq.n	800b910 <ucdr_serialize_uint64_t+0x130>
 800b82a:	7d23      	ldrb	r3, [r4, #20]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	f000 8092 	beq.w	800b956 <ucdr_serialize_uint64_t+0x176>
 800b832:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b836:	702b      	strb	r3, [r5, #0]
 800b838:	2e01      	cmp	r6, #1
 800b83a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b83e:	706b      	strb	r3, [r5, #1]
 800b840:	d073      	beq.n	800b92a <ucdr_serialize_uint64_t+0x14a>
 800b842:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b846:	70ab      	strb	r3, [r5, #2]
 800b848:	2e02      	cmp	r6, #2
 800b84a:	d072      	beq.n	800b932 <ucdr_serialize_uint64_t+0x152>
 800b84c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b850:	70eb      	strb	r3, [r5, #3]
 800b852:	2e03      	cmp	r6, #3
 800b854:	d071      	beq.n	800b93a <ucdr_serialize_uint64_t+0x15a>
 800b856:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b85a:	712b      	strb	r3, [r5, #4]
 800b85c:	2e04      	cmp	r6, #4
 800b85e:	d070      	beq.n	800b942 <ucdr_serialize_uint64_t+0x162>
 800b860:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b864:	716b      	strb	r3, [r5, #5]
 800b866:	2e05      	cmp	r6, #5
 800b868:	d06f      	beq.n	800b94a <ucdr_serialize_uint64_t+0x16a>
 800b86a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b86e:	71ab      	strb	r3, [r5, #6]
 800b870:	2e06      	cmp	r6, #6
 800b872:	d06e      	beq.n	800b952 <ucdr_serialize_uint64_t+0x172>
 800b874:	3507      	adds	r5, #7
 800b876:	f89d 3000 	ldrb.w	r3, [sp]
 800b87a:	702b      	strb	r3, [r5, #0]
 800b87c:	6923      	ldr	r3, [r4, #16]
 800b87e:	68a2      	ldr	r2, [r4, #8]
 800b880:	7da0      	ldrb	r0, [r4, #22]
 800b882:	3308      	adds	r3, #8
 800b884:	4442      	add	r2, r8
 800b886:	1b9b      	subs	r3, r3, r6
 800b888:	2108      	movs	r1, #8
 800b88a:	f080 0001 	eor.w	r0, r0, #1
 800b88e:	60a2      	str	r2, [r4, #8]
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	7561      	strb	r1, [r4, #21]
 800b894:	b002      	add	sp, #8
 800b896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89a:	2108      	movs	r1, #8
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 fed5 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b8a2:	b350      	cbz	r0, 800b8fa <ucdr_serialize_uint64_t+0x11a>
 800b8a4:	7d22      	ldrb	r2, [r4, #20]
 800b8a6:	68a3      	ldr	r3, [r4, #8]
 800b8a8:	2a01      	cmp	r2, #1
 800b8aa:	d02c      	beq.n	800b906 <ucdr_serialize_uint64_t+0x126>
 800b8ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8b0:	701a      	strb	r2, [r3, #0]
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8b8:	705a      	strb	r2, [r3, #1]
 800b8ba:	68a3      	ldr	r3, [r4, #8]
 800b8bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8c0:	709a      	strb	r2, [r3, #2]
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8c8:	70da      	strb	r2, [r3, #3]
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8d0:	711a      	strb	r2, [r3, #4]
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8d8:	715a      	strb	r2, [r3, #5]
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8e0:	719a      	strb	r2, [r3, #6]
 800b8e2:	68a3      	ldr	r3, [r4, #8]
 800b8e4:	f89d 2000 	ldrb.w	r2, [sp]
 800b8e8:	71da      	strb	r2, [r3, #7]
 800b8ea:	68a2      	ldr	r2, [r4, #8]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	3208      	adds	r2, #8
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	2108      	movs	r1, #8
 800b8f4:	60a2      	str	r2, [r4, #8]
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	7561      	strb	r1, [r4, #21]
 800b8fa:	7da0      	ldrb	r0, [r4, #22]
 800b8fc:	f080 0001 	eor.w	r0, r0, #1
 800b900:	b002      	add	sp, #8
 800b902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b906:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b90a:	6019      	str	r1, [r3, #0]
 800b90c:	605a      	str	r2, [r3, #4]
 800b90e:	e7ec      	b.n	800b8ea <ucdr_serialize_uint64_t+0x10a>
 800b910:	68a2      	ldr	r2, [r4, #8]
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	7da0      	ldrb	r0, [r4, #22]
 800b916:	7567      	strb	r7, [r4, #21]
 800b918:	1b92      	subs	r2, r2, r6
 800b91a:	1b9b      	subs	r3, r3, r6
 800b91c:	f080 0001 	eor.w	r0, r0, #1
 800b920:	60a2      	str	r2, [r4, #8]
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	b002      	add	sp, #8
 800b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b940:	701a      	strb	r2, [r3, #0]
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	68a5      	ldr	r5, [r4, #8]
 800b954:	e78f      	b.n	800b876 <ucdr_serialize_uint64_t+0x96>
 800b956:	4628      	mov	r0, r5
 800b958:	466d      	mov	r5, sp
 800b95a:	4632      	mov	r2, r6
 800b95c:	4629      	mov	r1, r5
 800b95e:	f010 f863 	bl	801ba28 <memcpy>
 800b962:	68a0      	ldr	r0, [r4, #8]
 800b964:	4642      	mov	r2, r8
 800b966:	19a9      	adds	r1, r5, r6
 800b968:	f010 f85e 	bl	801ba28 <memcpy>
 800b96c:	e786      	b.n	800b87c <ucdr_serialize_uint64_t+0x9c>
 800b96e:	bf00      	nop

0800b970 <ucdr_serialize_int16_t>:
 800b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b974:	b082      	sub	sp, #8
 800b976:	460b      	mov	r3, r1
 800b978:	2102      	movs	r1, #2
 800b97a:	4604      	mov	r4, r0
 800b97c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b980:	f000 feb8 	bl	800c6f4 <ucdr_buffer_alignment>
 800b984:	4601      	mov	r1, r0
 800b986:	4620      	mov	r0, r4
 800b988:	7d67      	ldrb	r7, [r4, #21]
 800b98a:	f000 fef7 	bl	800c77c <ucdr_advance_buffer>
 800b98e:	2102      	movs	r1, #2
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fe4f 	bl	800c634 <ucdr_check_buffer_available_for>
 800b996:	b1c0      	cbz	r0, 800b9ca <ucdr_serialize_int16_t+0x5a>
 800b998:	7d22      	ldrb	r2, [r4, #20]
 800b99a:	68a3      	ldr	r3, [r4, #8]
 800b99c:	2a01      	cmp	r2, #1
 800b99e:	d04e      	beq.n	800ba3e <ucdr_serialize_int16_t+0xce>
 800b9a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9a4:	701a      	strb	r2, [r3, #0]
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9ac:	705a      	strb	r2, [r3, #1]
 800b9ae:	68a2      	ldr	r2, [r4, #8]
 800b9b0:	6923      	ldr	r3, [r4, #16]
 800b9b2:	3202      	adds	r2, #2
 800b9b4:	3302      	adds	r3, #2
 800b9b6:	2102      	movs	r1, #2
 800b9b8:	60a2      	str	r2, [r4, #8]
 800b9ba:	6123      	str	r3, [r4, #16]
 800b9bc:	7561      	strb	r1, [r4, #21]
 800b9be:	7da0      	ldrb	r0, [r4, #22]
 800b9c0:	f080 0001 	eor.w	r0, r0, #1
 800b9c4:	b002      	add	sp, #8
 800b9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ca:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9ce:	42ab      	cmp	r3, r5
 800b9d0:	d923      	bls.n	800ba1a <ucdr_serialize_int16_t+0xaa>
 800b9d2:	1b5e      	subs	r6, r3, r5
 800b9d4:	60a3      	str	r3, [r4, #8]
 800b9d6:	6923      	ldr	r3, [r4, #16]
 800b9d8:	f1c6 0802 	rsb	r8, r6, #2
 800b9dc:	4433      	add	r3, r6
 800b9de:	6123      	str	r3, [r4, #16]
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 fe32 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800b9e8:	b368      	cbz	r0, 800ba46 <ucdr_serialize_int16_t+0xd6>
 800b9ea:	7d23      	ldrb	r3, [r4, #20]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d03b      	beq.n	800ba68 <ucdr_serialize_int16_t+0xf8>
 800b9f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9f4:	702b      	strb	r3, [r5, #0]
 800b9f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9fa:	706b      	strb	r3, [r5, #1]
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	68a2      	ldr	r2, [r4, #8]
 800ba00:	7da0      	ldrb	r0, [r4, #22]
 800ba02:	3302      	adds	r3, #2
 800ba04:	4442      	add	r2, r8
 800ba06:	1b9b      	subs	r3, r3, r6
 800ba08:	2102      	movs	r1, #2
 800ba0a:	f080 0001 	eor.w	r0, r0, #1
 800ba0e:	60a2      	str	r2, [r4, #8]
 800ba10:	6123      	str	r3, [r4, #16]
 800ba12:	7561      	strb	r1, [r4, #21]
 800ba14:	b002      	add	sp, #8
 800ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1a:	2102      	movs	r1, #2
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f000 fe15 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0cb      	beq.n	800b9be <ucdr_serialize_int16_t+0x4e>
 800ba26:	7d23      	ldrb	r3, [r4, #20]
 800ba28:	68a2      	ldr	r2, [r4, #8]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d018      	beq.n	800ba60 <ucdr_serialize_int16_t+0xf0>
 800ba2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba32:	7013      	strb	r3, [r2, #0]
 800ba34:	68a3      	ldr	r3, [r4, #8]
 800ba36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba3a:	705a      	strb	r2, [r3, #1]
 800ba3c:	e7b7      	b.n	800b9ae <ucdr_serialize_int16_t+0x3e>
 800ba3e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba42:	801a      	strh	r2, [r3, #0]
 800ba44:	e7b3      	b.n	800b9ae <ucdr_serialize_int16_t+0x3e>
 800ba46:	68a2      	ldr	r2, [r4, #8]
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	7da0      	ldrb	r0, [r4, #22]
 800ba4c:	7567      	strb	r7, [r4, #21]
 800ba4e:	1b92      	subs	r2, r2, r6
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	f080 0001 	eor.w	r0, r0, #1
 800ba56:	60a2      	str	r2, [r4, #8]
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	b002      	add	sp, #8
 800ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba64:	8013      	strh	r3, [r2, #0]
 800ba66:	e7a2      	b.n	800b9ae <ucdr_serialize_int16_t+0x3e>
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f10d 0506 	add.w	r5, sp, #6
 800ba6e:	4632      	mov	r2, r6
 800ba70:	4629      	mov	r1, r5
 800ba72:	f00f ffd9 	bl	801ba28 <memcpy>
 800ba76:	68a0      	ldr	r0, [r4, #8]
 800ba78:	4642      	mov	r2, r8
 800ba7a:	19a9      	adds	r1, r5, r6
 800ba7c:	f00f ffd4 	bl	801ba28 <memcpy>
 800ba80:	e7bc      	b.n	800b9fc <ucdr_serialize_int16_t+0x8c>
 800ba82:	bf00      	nop

0800ba84 <ucdr_deserialize_int16_t>:
 800ba84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba88:	460d      	mov	r5, r1
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	f000 fe31 	bl	800c6f4 <ucdr_buffer_alignment>
 800ba92:	4601      	mov	r1, r0
 800ba94:	4620      	mov	r0, r4
 800ba96:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba9a:	f000 fe6f 	bl	800c77c <ucdr_advance_buffer>
 800ba9e:	2102      	movs	r1, #2
 800baa0:	4620      	mov	r0, r4
 800baa2:	f000 fdc7 	bl	800c634 <ucdr_check_buffer_available_for>
 800baa6:	b1a8      	cbz	r0, 800bad4 <ucdr_deserialize_int16_t+0x50>
 800baa8:	7d22      	ldrb	r2, [r4, #20]
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	2a01      	cmp	r2, #1
 800baae:	d046      	beq.n	800bb3e <ucdr_deserialize_int16_t+0xba>
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	702b      	strb	r3, [r5, #0]
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	706b      	strb	r3, [r5, #1]
 800baba:	68a2      	ldr	r2, [r4, #8]
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	3202      	adds	r2, #2
 800bac0:	3302      	adds	r3, #2
 800bac2:	2102      	movs	r1, #2
 800bac4:	60a2      	str	r2, [r4, #8]
 800bac6:	6123      	str	r3, [r4, #16]
 800bac8:	7561      	strb	r1, [r4, #21]
 800baca:	7da0      	ldrb	r0, [r4, #22]
 800bacc:	f080 0001 	eor.w	r0, r0, #1
 800bad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bad8:	42be      	cmp	r6, r7
 800bada:	d920      	bls.n	800bb1e <ucdr_deserialize_int16_t+0x9a>
 800badc:	6923      	ldr	r3, [r4, #16]
 800bade:	60a6      	str	r6, [r4, #8]
 800bae0:	1bf6      	subs	r6, r6, r7
 800bae2:	4433      	add	r3, r6
 800bae4:	f1c6 0902 	rsb	r9, r6, #2
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	4649      	mov	r1, r9
 800baec:	4620      	mov	r0, r4
 800baee:	f000 fdad 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800baf2:	b338      	cbz	r0, 800bb44 <ucdr_deserialize_int16_t+0xc0>
 800baf4:	7d23      	ldrb	r3, [r4, #20]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d034      	beq.n	800bb64 <ucdr_deserialize_int16_t+0xe0>
 800bafa:	787b      	ldrb	r3, [r7, #1]
 800bafc:	702b      	strb	r3, [r5, #0]
 800bafe:	783b      	ldrb	r3, [r7, #0]
 800bb00:	706b      	strb	r3, [r5, #1]
 800bb02:	6923      	ldr	r3, [r4, #16]
 800bb04:	68a2      	ldr	r2, [r4, #8]
 800bb06:	7da0      	ldrb	r0, [r4, #22]
 800bb08:	2102      	movs	r1, #2
 800bb0a:	3302      	adds	r3, #2
 800bb0c:	444a      	add	r2, r9
 800bb0e:	1b9b      	subs	r3, r3, r6
 800bb10:	7561      	strb	r1, [r4, #21]
 800bb12:	60a2      	str	r2, [r4, #8]
 800bb14:	6123      	str	r3, [r4, #16]
 800bb16:	f080 0001 	eor.w	r0, r0, #1
 800bb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb1e:	2102      	movs	r1, #2
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 fd93 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d0cf      	beq.n	800baca <ucdr_deserialize_int16_t+0x46>
 800bb2a:	7d23      	ldrb	r3, [r4, #20]
 800bb2c:	68a2      	ldr	r2, [r4, #8]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d015      	beq.n	800bb5e <ucdr_deserialize_int16_t+0xda>
 800bb32:	7853      	ldrb	r3, [r2, #1]
 800bb34:	702b      	strb	r3, [r5, #0]
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	706b      	strb	r3, [r5, #1]
 800bb3c:	e7bd      	b.n	800baba <ucdr_deserialize_int16_t+0x36>
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	802b      	strh	r3, [r5, #0]
 800bb42:	e7ba      	b.n	800baba <ucdr_deserialize_int16_t+0x36>
 800bb44:	68a2      	ldr	r2, [r4, #8]
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	7da0      	ldrb	r0, [r4, #22]
 800bb4a:	f884 8015 	strb.w	r8, [r4, #21]
 800bb4e:	1b92      	subs	r2, r2, r6
 800bb50:	1b9b      	subs	r3, r3, r6
 800bb52:	60a2      	str	r2, [r4, #8]
 800bb54:	6123      	str	r3, [r4, #16]
 800bb56:	f080 0001 	eor.w	r0, r0, #1
 800bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5e:	8813      	ldrh	r3, [r2, #0]
 800bb60:	802b      	strh	r3, [r5, #0]
 800bb62:	e7aa      	b.n	800baba <ucdr_deserialize_int16_t+0x36>
 800bb64:	4639      	mov	r1, r7
 800bb66:	4632      	mov	r2, r6
 800bb68:	4628      	mov	r0, r5
 800bb6a:	f00f ff5d 	bl	801ba28 <memcpy>
 800bb6e:	68a1      	ldr	r1, [r4, #8]
 800bb70:	464a      	mov	r2, r9
 800bb72:	19a8      	adds	r0, r5, r6
 800bb74:	f00f ff58 	bl	801ba28 <memcpy>
 800bb78:	e7c3      	b.n	800bb02 <ucdr_deserialize_int16_t+0x7e>
 800bb7a:	bf00      	nop

0800bb7c <ucdr_serialize_int32_t>:
 800bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	4604      	mov	r4, r0
 800bb84:	9101      	str	r1, [sp, #4]
 800bb86:	2104      	movs	r1, #4
 800bb88:	f000 fdb4 	bl	800c6f4 <ucdr_buffer_alignment>
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	4620      	mov	r0, r4
 800bb90:	7d67      	ldrb	r7, [r4, #21]
 800bb92:	f000 fdf3 	bl	800c77c <ucdr_advance_buffer>
 800bb96:	2104      	movs	r1, #4
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 fd4b 	bl	800c634 <ucdr_check_buffer_available_for>
 800bb9e:	b300      	cbz	r0, 800bbe2 <ucdr_serialize_int32_t+0x66>
 800bba0:	7d22      	ldrb	r2, [r4, #20]
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	2a01      	cmp	r2, #1
 800bba6:	d05d      	beq.n	800bc64 <ucdr_serialize_int32_t+0xe8>
 800bba8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	68a3      	ldr	r3, [r4, #8]
 800bbb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbb4:	705a      	strb	r2, [r3, #1]
 800bbb6:	68a3      	ldr	r3, [r4, #8]
 800bbb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbbc:	709a      	strb	r2, [r3, #2]
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbc4:	70da      	strb	r2, [r3, #3]
 800bbc6:	68a2      	ldr	r2, [r4, #8]
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	3204      	adds	r2, #4
 800bbcc:	3304      	adds	r3, #4
 800bbce:	2104      	movs	r1, #4
 800bbd0:	60a2      	str	r2, [r4, #8]
 800bbd2:	6123      	str	r3, [r4, #16]
 800bbd4:	7561      	strb	r1, [r4, #21]
 800bbd6:	7da0      	ldrb	r0, [r4, #22]
 800bbd8:	f080 0001 	eor.w	r0, r0, #1
 800bbdc:	b002      	add	sp, #8
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bbe6:	42ab      	cmp	r3, r5
 800bbe8:	d92e      	bls.n	800bc48 <ucdr_serialize_int32_t+0xcc>
 800bbea:	1b5e      	subs	r6, r3, r5
 800bbec:	60a3      	str	r3, [r4, #8]
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	f1c6 0804 	rsb	r8, r6, #4
 800bbf4:	4433      	add	r3, r6
 800bbf6:	6123      	str	r3, [r4, #16]
 800bbf8:	4641      	mov	r1, r8
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 fd26 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bc00:	b398      	cbz	r0, 800bc6a <ucdr_serialize_int32_t+0xee>
 800bc02:	7d23      	ldrb	r3, [r4, #20]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d046      	beq.n	800bc96 <ucdr_serialize_int32_t+0x11a>
 800bc08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc0c:	702b      	strb	r3, [r5, #0]
 800bc0e:	2e01      	cmp	r6, #1
 800bc10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc14:	706b      	strb	r3, [r5, #1]
 800bc16:	d035      	beq.n	800bc84 <ucdr_serialize_int32_t+0x108>
 800bc18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc1c:	70ab      	strb	r3, [r5, #2]
 800bc1e:	2e02      	cmp	r6, #2
 800bc20:	d034      	beq.n	800bc8c <ucdr_serialize_int32_t+0x110>
 800bc22:	3503      	adds	r5, #3
 800bc24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc28:	702b      	strb	r3, [r5, #0]
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	68a2      	ldr	r2, [r4, #8]
 800bc2e:	7da0      	ldrb	r0, [r4, #22]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4442      	add	r2, r8
 800bc34:	1b9b      	subs	r3, r3, r6
 800bc36:	2104      	movs	r1, #4
 800bc38:	f080 0001 	eor.w	r0, r0, #1
 800bc3c:	60a2      	str	r2, [r4, #8]
 800bc3e:	6123      	str	r3, [r4, #16]
 800bc40:	7561      	strb	r1, [r4, #21]
 800bc42:	b002      	add	sp, #8
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc48:	2104      	movs	r1, #4
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 fcfe 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d0c0      	beq.n	800bbd6 <ucdr_serialize_int32_t+0x5a>
 800bc54:	7d23      	ldrb	r3, [r4, #20]
 800bc56:	68a2      	ldr	r2, [r4, #8]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d019      	beq.n	800bc90 <ucdr_serialize_int32_t+0x114>
 800bc5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc60:	7013      	strb	r3, [r2, #0]
 800bc62:	e7a4      	b.n	800bbae <ucdr_serialize_int32_t+0x32>
 800bc64:	9a01      	ldr	r2, [sp, #4]
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	e7ad      	b.n	800bbc6 <ucdr_serialize_int32_t+0x4a>
 800bc6a:	68a2      	ldr	r2, [r4, #8]
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	7da0      	ldrb	r0, [r4, #22]
 800bc70:	7567      	strb	r7, [r4, #21]
 800bc72:	1b92      	subs	r2, r2, r6
 800bc74:	1b9b      	subs	r3, r3, r6
 800bc76:	f080 0001 	eor.w	r0, r0, #1
 800bc7a:	60a2      	str	r2, [r4, #8]
 800bc7c:	6123      	str	r3, [r4, #16]
 800bc7e:	b002      	add	sp, #8
 800bc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc84:	68a3      	ldr	r3, [r4, #8]
 800bc86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc8a:	701a      	strb	r2, [r3, #0]
 800bc8c:	68a5      	ldr	r5, [r4, #8]
 800bc8e:	e7c9      	b.n	800bc24 <ucdr_serialize_int32_t+0xa8>
 800bc90:	9b01      	ldr	r3, [sp, #4]
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	e797      	b.n	800bbc6 <ucdr_serialize_int32_t+0x4a>
 800bc96:	4628      	mov	r0, r5
 800bc98:	ad01      	add	r5, sp, #4
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	f00f fec3 	bl	801ba28 <memcpy>
 800bca2:	68a0      	ldr	r0, [r4, #8]
 800bca4:	4642      	mov	r2, r8
 800bca6:	19a9      	adds	r1, r5, r6
 800bca8:	f00f febe 	bl	801ba28 <memcpy>
 800bcac:	e7bd      	b.n	800bc2a <ucdr_serialize_int32_t+0xae>
 800bcae:	bf00      	nop

0800bcb0 <ucdr_deserialize_int32_t>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	2104      	movs	r1, #4
 800bcb8:	4604      	mov	r4, r0
 800bcba:	f000 fd1b 	bl	800c6f4 <ucdr_buffer_alignment>
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcc6:	f000 fd59 	bl	800c77c <ucdr_advance_buffer>
 800bcca:	2104      	movs	r1, #4
 800bccc:	4620      	mov	r0, r4
 800bcce:	f000 fcb1 	bl	800c634 <ucdr_check_buffer_available_for>
 800bcd2:	b1d8      	cbz	r0, 800bd0c <ucdr_deserialize_int32_t+0x5c>
 800bcd4:	7d22      	ldrb	r2, [r4, #20]
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	2a01      	cmp	r2, #1
 800bcda:	d052      	beq.n	800bd82 <ucdr_deserialize_int32_t+0xd2>
 800bcdc:	78db      	ldrb	r3, [r3, #3]
 800bcde:	702b      	strb	r3, [r5, #0]
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	789b      	ldrb	r3, [r3, #2]
 800bce4:	706b      	strb	r3, [r5, #1]
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	70ab      	strb	r3, [r5, #2]
 800bcec:	68a3      	ldr	r3, [r4, #8]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	70eb      	strb	r3, [r5, #3]
 800bcf2:	68a2      	ldr	r2, [r4, #8]
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	3204      	adds	r2, #4
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	2104      	movs	r1, #4
 800bcfc:	60a2      	str	r2, [r4, #8]
 800bcfe:	6123      	str	r3, [r4, #16]
 800bd00:	7561      	strb	r1, [r4, #21]
 800bd02:	7da0      	ldrb	r0, [r4, #22]
 800bd04:	f080 0001 	eor.w	r0, r0, #1
 800bd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bd10:	42b7      	cmp	r7, r6
 800bd12:	d92a      	bls.n	800bd6a <ucdr_deserialize_int32_t+0xba>
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	60a7      	str	r7, [r4, #8]
 800bd18:	1bbf      	subs	r7, r7, r6
 800bd1a:	443b      	add	r3, r7
 800bd1c:	f1c7 0904 	rsb	r9, r7, #4
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	4649      	mov	r1, r9
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 fc91 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bd2a:	b368      	cbz	r0, 800bd88 <ucdr_deserialize_int32_t+0xd8>
 800bd2c:	7d23      	ldrb	r3, [r4, #20]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d040      	beq.n	800bdb4 <ucdr_deserialize_int32_t+0x104>
 800bd32:	78f3      	ldrb	r3, [r6, #3]
 800bd34:	702b      	strb	r3, [r5, #0]
 800bd36:	78b3      	ldrb	r3, [r6, #2]
 800bd38:	706b      	strb	r3, [r5, #1]
 800bd3a:	2f01      	cmp	r7, #1
 800bd3c:	d031      	beq.n	800bda2 <ucdr_deserialize_int32_t+0xf2>
 800bd3e:	7873      	ldrb	r3, [r6, #1]
 800bd40:	70ab      	strb	r3, [r5, #2]
 800bd42:	2f02      	cmp	r7, #2
 800bd44:	f105 0503 	add.w	r5, r5, #3
 800bd48:	d02f      	beq.n	800bdaa <ucdr_deserialize_int32_t+0xfa>
 800bd4a:	7833      	ldrb	r3, [r6, #0]
 800bd4c:	702b      	strb	r3, [r5, #0]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	68a2      	ldr	r2, [r4, #8]
 800bd52:	7da0      	ldrb	r0, [r4, #22]
 800bd54:	2104      	movs	r1, #4
 800bd56:	3304      	adds	r3, #4
 800bd58:	444a      	add	r2, r9
 800bd5a:	1bdb      	subs	r3, r3, r7
 800bd5c:	7561      	strb	r1, [r4, #21]
 800bd5e:	60a2      	str	r2, [r4, #8]
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	f080 0001 	eor.w	r0, r0, #1
 800bd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	2104      	movs	r1, #4
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 fc6d 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d0c5      	beq.n	800bd02 <ucdr_deserialize_int32_t+0x52>
 800bd76:	7d23      	ldrb	r3, [r4, #20]
 800bd78:	68a2      	ldr	r2, [r4, #8]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d017      	beq.n	800bdae <ucdr_deserialize_int32_t+0xfe>
 800bd7e:	78d3      	ldrb	r3, [r2, #3]
 800bd80:	e7ad      	b.n	800bcde <ucdr_deserialize_int32_t+0x2e>
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	602b      	str	r3, [r5, #0]
 800bd86:	e7b4      	b.n	800bcf2 <ucdr_deserialize_int32_t+0x42>
 800bd88:	68a2      	ldr	r2, [r4, #8]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	7da0      	ldrb	r0, [r4, #22]
 800bd8e:	f884 8015 	strb.w	r8, [r4, #21]
 800bd92:	1bd2      	subs	r2, r2, r7
 800bd94:	1bdb      	subs	r3, r3, r7
 800bd96:	60a2      	str	r2, [r4, #8]
 800bd98:	6123      	str	r3, [r4, #16]
 800bd9a:	f080 0001 	eor.w	r0, r0, #1
 800bd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	70ab      	strb	r3, [r5, #2]
 800bda8:	3503      	adds	r5, #3
 800bdaa:	68a6      	ldr	r6, [r4, #8]
 800bdac:	e7cd      	b.n	800bd4a <ucdr_deserialize_int32_t+0x9a>
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	e79e      	b.n	800bcf2 <ucdr_deserialize_int32_t+0x42>
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	463a      	mov	r2, r7
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f00f fe35 	bl	801ba28 <memcpy>
 800bdbe:	68a1      	ldr	r1, [r4, #8]
 800bdc0:	464a      	mov	r2, r9
 800bdc2:	19e8      	adds	r0, r5, r7
 800bdc4:	f00f fe30 	bl	801ba28 <memcpy>
 800bdc8:	e7c1      	b.n	800bd4e <ucdr_deserialize_int32_t+0x9e>
 800bdca:	bf00      	nop

0800bdcc <ucdr_serialize_endian_float>:
 800bdcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	2104      	movs	r1, #4
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bddc:	f000 fc8a 	bl	800c6f4 <ucdr_buffer_alignment>
 800bde0:	4601      	mov	r1, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bde8:	f000 fcc8 	bl	800c77c <ucdr_advance_buffer>
 800bdec:	2104      	movs	r1, #4
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 fc20 	bl	800c634 <ucdr_check_buffer_available_for>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d137      	bne.n	800be68 <ucdr_serialize_endian_float+0x9c>
 800bdf8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bdfc:	42b7      	cmp	r7, r6
 800bdfe:	d92e      	bls.n	800be5e <ucdr_serialize_endian_float+0x92>
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	60a7      	str	r7, [r4, #8]
 800be04:	1bbf      	subs	r7, r7, r6
 800be06:	443b      	add	r3, r7
 800be08:	f1c7 0904 	rsb	r9, r7, #4
 800be0c:	6123      	str	r3, [r4, #16]
 800be0e:	4649      	mov	r1, r9
 800be10:	4620      	mov	r0, r4
 800be12:	f000 fc1b 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800be16:	2800      	cmp	r0, #0
 800be18:	d049      	beq.n	800beae <ucdr_serialize_endian_float+0xe2>
 800be1a:	2d01      	cmp	r5, #1
 800be1c:	d05b      	beq.n	800bed6 <ucdr_serialize_endian_float+0x10a>
 800be1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be22:	7033      	strb	r3, [r6, #0]
 800be24:	2f01      	cmp	r7, #1
 800be26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be2a:	7073      	strb	r3, [r6, #1]
 800be2c:	d04d      	beq.n	800beca <ucdr_serialize_endian_float+0xfe>
 800be2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be32:	70b3      	strb	r3, [r6, #2]
 800be34:	2f02      	cmp	r7, #2
 800be36:	d04c      	beq.n	800bed2 <ucdr_serialize_endian_float+0x106>
 800be38:	3603      	adds	r6, #3
 800be3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be3e:	7033      	strb	r3, [r6, #0]
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	68a2      	ldr	r2, [r4, #8]
 800be44:	7da0      	ldrb	r0, [r4, #22]
 800be46:	3304      	adds	r3, #4
 800be48:	444a      	add	r2, r9
 800be4a:	1bdb      	subs	r3, r3, r7
 800be4c:	2104      	movs	r1, #4
 800be4e:	f080 0001 	eor.w	r0, r0, #1
 800be52:	60a2      	str	r2, [r4, #8]
 800be54:	6123      	str	r3, [r4, #16]
 800be56:	7561      	strb	r1, [r4, #21]
 800be58:	b003      	add	sp, #12
 800be5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be5e:	2104      	movs	r1, #4
 800be60:	4620      	mov	r0, r4
 800be62:	f000 fbf3 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800be66:	b1c8      	cbz	r0, 800be9c <ucdr_serialize_endian_float+0xd0>
 800be68:	2d01      	cmp	r5, #1
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	d01c      	beq.n	800bea8 <ucdr_serialize_endian_float+0xdc>
 800be6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be7a:	705a      	strb	r2, [r3, #1]
 800be7c:	68a3      	ldr	r3, [r4, #8]
 800be7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be82:	709a      	strb	r2, [r3, #2]
 800be84:	68a3      	ldr	r3, [r4, #8]
 800be86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be8a:	70da      	strb	r2, [r3, #3]
 800be8c:	68a2      	ldr	r2, [r4, #8]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	3204      	adds	r2, #4
 800be92:	3304      	adds	r3, #4
 800be94:	2104      	movs	r1, #4
 800be96:	60a2      	str	r2, [r4, #8]
 800be98:	6123      	str	r3, [r4, #16]
 800be9a:	7561      	strb	r1, [r4, #21]
 800be9c:	7da0      	ldrb	r0, [r4, #22]
 800be9e:	f080 0001 	eor.w	r0, r0, #1
 800bea2:	b003      	add	sp, #12
 800bea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bea8:	9a01      	ldr	r2, [sp, #4]
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	e7ee      	b.n	800be8c <ucdr_serialize_endian_float+0xc0>
 800beae:	68a2      	ldr	r2, [r4, #8]
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	7da0      	ldrb	r0, [r4, #22]
 800beb4:	f884 8015 	strb.w	r8, [r4, #21]
 800beb8:	1bd2      	subs	r2, r2, r7
 800beba:	1bdb      	subs	r3, r3, r7
 800bebc:	f080 0001 	eor.w	r0, r0, #1
 800bec0:	60a2      	str	r2, [r4, #8]
 800bec2:	6123      	str	r3, [r4, #16]
 800bec4:	b003      	add	sp, #12
 800bec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	68a6      	ldr	r6, [r4, #8]
 800bed4:	e7b1      	b.n	800be3a <ucdr_serialize_endian_float+0x6e>
 800bed6:	ad01      	add	r5, sp, #4
 800bed8:	463a      	mov	r2, r7
 800beda:	4629      	mov	r1, r5
 800bedc:	4630      	mov	r0, r6
 800bede:	f00f fda3 	bl	801ba28 <memcpy>
 800bee2:	68a0      	ldr	r0, [r4, #8]
 800bee4:	464a      	mov	r2, r9
 800bee6:	19e9      	adds	r1, r5, r7
 800bee8:	f00f fd9e 	bl	801ba28 <memcpy>
 800beec:	e7a8      	b.n	800be40 <ucdr_serialize_endian_float+0x74>
 800beee:	bf00      	nop

0800bef0 <ucdr_deserialize_endian_float>:
 800bef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef4:	460e      	mov	r6, r1
 800bef6:	2104      	movs	r1, #4
 800bef8:	4604      	mov	r4, r0
 800befa:	4615      	mov	r5, r2
 800befc:	f000 fbfa 	bl	800c6f4 <ucdr_buffer_alignment>
 800bf00:	4601      	mov	r1, r0
 800bf02:	4620      	mov	r0, r4
 800bf04:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bf08:	f000 fc38 	bl	800c77c <ucdr_advance_buffer>
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 fb90 	bl	800c634 <ucdr_check_buffer_available_for>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d137      	bne.n	800bf88 <ucdr_deserialize_endian_float+0x98>
 800bf18:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bf1c:	42bb      	cmp	r3, r7
 800bf1e:	d92e      	bls.n	800bf7e <ucdr_deserialize_endian_float+0x8e>
 800bf20:	eba3 0807 	sub.w	r8, r3, r7
 800bf24:	60a3      	str	r3, [r4, #8]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	f1c8 0a04 	rsb	sl, r8, #4
 800bf2c:	4443      	add	r3, r8
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	4651      	mov	r1, sl
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fb8a 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d043      	beq.n	800bfc4 <ucdr_deserialize_endian_float+0xd4>
 800bf3c:	2e01      	cmp	r6, #1
 800bf3e:	d056      	beq.n	800bfee <ucdr_deserialize_endian_float+0xfe>
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	702b      	strb	r3, [r5, #0]
 800bf44:	78bb      	ldrb	r3, [r7, #2]
 800bf46:	706b      	strb	r3, [r5, #1]
 800bf48:	f1b8 0f01 	cmp.w	r8, #1
 800bf4c:	d049      	beq.n	800bfe2 <ucdr_deserialize_endian_float+0xf2>
 800bf4e:	787b      	ldrb	r3, [r7, #1]
 800bf50:	70ab      	strb	r3, [r5, #2]
 800bf52:	f1b8 0f02 	cmp.w	r8, #2
 800bf56:	f105 0503 	add.w	r5, r5, #3
 800bf5a:	d046      	beq.n	800bfea <ucdr_deserialize_endian_float+0xfa>
 800bf5c:	783b      	ldrb	r3, [r7, #0]
 800bf5e:	702b      	strb	r3, [r5, #0]
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	68a2      	ldr	r2, [r4, #8]
 800bf64:	7da0      	ldrb	r0, [r4, #22]
 800bf66:	2104      	movs	r1, #4
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4452      	add	r2, sl
 800bf6c:	eba3 0308 	sub.w	r3, r3, r8
 800bf70:	7561      	strb	r1, [r4, #21]
 800bf72:	60a2      	str	r2, [r4, #8]
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	f080 0001 	eor.w	r0, r0, #1
 800bf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7e:	2104      	movs	r1, #4
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fb63 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800bf86:	b1a8      	cbz	r0, 800bfb4 <ucdr_deserialize_endian_float+0xc4>
 800bf88:	2e01      	cmp	r6, #1
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	d017      	beq.n	800bfbe <ucdr_deserialize_endian_float+0xce>
 800bf8e:	78db      	ldrb	r3, [r3, #3]
 800bf90:	702b      	strb	r3, [r5, #0]
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	789b      	ldrb	r3, [r3, #2]
 800bf96:	706b      	strb	r3, [r5, #1]
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	70ab      	strb	r3, [r5, #2]
 800bf9e:	68a3      	ldr	r3, [r4, #8]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	70eb      	strb	r3, [r5, #3]
 800bfa4:	68a2      	ldr	r2, [r4, #8]
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	3204      	adds	r2, #4
 800bfaa:	3304      	adds	r3, #4
 800bfac:	2104      	movs	r1, #4
 800bfae:	60a2      	str	r2, [r4, #8]
 800bfb0:	6123      	str	r3, [r4, #16]
 800bfb2:	7561      	strb	r1, [r4, #21]
 800bfb4:	7da0      	ldrb	r0, [r4, #22]
 800bfb6:	f080 0001 	eor.w	r0, r0, #1
 800bfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	602b      	str	r3, [r5, #0]
 800bfc2:	e7ef      	b.n	800bfa4 <ucdr_deserialize_endian_float+0xb4>
 800bfc4:	68a2      	ldr	r2, [r4, #8]
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	7da0      	ldrb	r0, [r4, #22]
 800bfca:	f884 9015 	strb.w	r9, [r4, #21]
 800bfce:	eba2 0208 	sub.w	r2, r2, r8
 800bfd2:	eba3 0308 	sub.w	r3, r3, r8
 800bfd6:	60a2      	str	r2, [r4, #8]
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	f080 0001 	eor.w	r0, r0, #1
 800bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	70ab      	strb	r3, [r5, #2]
 800bfe8:	3503      	adds	r5, #3
 800bfea:	68a7      	ldr	r7, [r4, #8]
 800bfec:	e7b6      	b.n	800bf5c <ucdr_deserialize_endian_float+0x6c>
 800bfee:	4639      	mov	r1, r7
 800bff0:	4642      	mov	r2, r8
 800bff2:	4628      	mov	r0, r5
 800bff4:	f00f fd18 	bl	801ba28 <memcpy>
 800bff8:	68a1      	ldr	r1, [r4, #8]
 800bffa:	4652      	mov	r2, sl
 800bffc:	eb05 0008 	add.w	r0, r5, r8
 800c000:	f00f fd12 	bl	801ba28 <memcpy>
 800c004:	e7ac      	b.n	800bf60 <ucdr_deserialize_endian_float+0x70>
 800c006:	bf00      	nop

0800c008 <ucdr_serialize_double>:
 800c008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c00c:	2108      	movs	r1, #8
 800c00e:	b082      	sub	sp, #8
 800c010:	4604      	mov	r4, r0
 800c012:	ed8d 0b00 	vstr	d0, [sp]
 800c016:	f000 fb6d 	bl	800c6f4 <ucdr_buffer_alignment>
 800c01a:	4601      	mov	r1, r0
 800c01c:	4620      	mov	r0, r4
 800c01e:	7d67      	ldrb	r7, [r4, #21]
 800c020:	f000 fbac 	bl	800c77c <ucdr_advance_buffer>
 800c024:	2108      	movs	r1, #8
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fb04 	bl	800c634 <ucdr_check_buffer_available_for>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d14d      	bne.n	800c0cc <ucdr_serialize_double+0xc4>
 800c030:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c034:	42ab      	cmp	r3, r5
 800c036:	d944      	bls.n	800c0c2 <ucdr_serialize_double+0xba>
 800c038:	1b5e      	subs	r6, r3, r5
 800c03a:	60a3      	str	r3, [r4, #8]
 800c03c:	6923      	ldr	r3, [r4, #16]
 800c03e:	f1c6 0808 	rsb	r8, r6, #8
 800c042:	4433      	add	r3, r6
 800c044:	6123      	str	r3, [r4, #16]
 800c046:	4641      	mov	r1, r8
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 faff 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d072      	beq.n	800c138 <ucdr_serialize_double+0x130>
 800c052:	7d23      	ldrb	r3, [r4, #20]
 800c054:	2b01      	cmp	r3, #1
 800c056:	f000 8092 	beq.w	800c17e <ucdr_serialize_double+0x176>
 800c05a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c05e:	702b      	strb	r3, [r5, #0]
 800c060:	2e01      	cmp	r6, #1
 800c062:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c066:	706b      	strb	r3, [r5, #1]
 800c068:	d073      	beq.n	800c152 <ucdr_serialize_double+0x14a>
 800c06a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c06e:	70ab      	strb	r3, [r5, #2]
 800c070:	2e02      	cmp	r6, #2
 800c072:	d072      	beq.n	800c15a <ucdr_serialize_double+0x152>
 800c074:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c078:	70eb      	strb	r3, [r5, #3]
 800c07a:	2e03      	cmp	r6, #3
 800c07c:	d071      	beq.n	800c162 <ucdr_serialize_double+0x15a>
 800c07e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c082:	712b      	strb	r3, [r5, #4]
 800c084:	2e04      	cmp	r6, #4
 800c086:	d070      	beq.n	800c16a <ucdr_serialize_double+0x162>
 800c088:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c08c:	716b      	strb	r3, [r5, #5]
 800c08e:	2e05      	cmp	r6, #5
 800c090:	d06f      	beq.n	800c172 <ucdr_serialize_double+0x16a>
 800c092:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c096:	71ab      	strb	r3, [r5, #6]
 800c098:	2e06      	cmp	r6, #6
 800c09a:	d06e      	beq.n	800c17a <ucdr_serialize_double+0x172>
 800c09c:	3507      	adds	r5, #7
 800c09e:	f89d 3000 	ldrb.w	r3, [sp]
 800c0a2:	702b      	strb	r3, [r5, #0]
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	68a2      	ldr	r2, [r4, #8]
 800c0a8:	7da0      	ldrb	r0, [r4, #22]
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	4442      	add	r2, r8
 800c0ae:	1b9b      	subs	r3, r3, r6
 800c0b0:	2108      	movs	r1, #8
 800c0b2:	f080 0001 	eor.w	r0, r0, #1
 800c0b6:	60a2      	str	r2, [r4, #8]
 800c0b8:	6123      	str	r3, [r4, #16]
 800c0ba:	7561      	strb	r1, [r4, #21]
 800c0bc:	b002      	add	sp, #8
 800c0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c2:	2108      	movs	r1, #8
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 fac1 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c0ca:	b350      	cbz	r0, 800c122 <ucdr_serialize_double+0x11a>
 800c0cc:	7d22      	ldrb	r2, [r4, #20]
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	2a01      	cmp	r2, #1
 800c0d2:	d02c      	beq.n	800c12e <ucdr_serialize_double+0x126>
 800c0d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	68a3      	ldr	r3, [r4, #8]
 800c0dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0e0:	705a      	strb	r2, [r3, #1]
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c0e8:	709a      	strb	r2, [r3, #2]
 800c0ea:	68a3      	ldr	r3, [r4, #8]
 800c0ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c0f0:	70da      	strb	r2, [r3, #3]
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c0f8:	711a      	strb	r2, [r3, #4]
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c100:	715a      	strb	r2, [r3, #5]
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c108:	719a      	strb	r2, [r3, #6]
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	f89d 2000 	ldrb.w	r2, [sp]
 800c110:	71da      	strb	r2, [r3, #7]
 800c112:	68a2      	ldr	r2, [r4, #8]
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	3208      	adds	r2, #8
 800c118:	3308      	adds	r3, #8
 800c11a:	2108      	movs	r1, #8
 800c11c:	60a2      	str	r2, [r4, #8]
 800c11e:	6123      	str	r3, [r4, #16]
 800c120:	7561      	strb	r1, [r4, #21]
 800c122:	7da0      	ldrb	r0, [r4, #22]
 800c124:	f080 0001 	eor.w	r0, r0, #1
 800c128:	b002      	add	sp, #8
 800c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c132:	6019      	str	r1, [r3, #0]
 800c134:	605a      	str	r2, [r3, #4]
 800c136:	e7ec      	b.n	800c112 <ucdr_serialize_double+0x10a>
 800c138:	68a2      	ldr	r2, [r4, #8]
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	7da0      	ldrb	r0, [r4, #22]
 800c13e:	7567      	strb	r7, [r4, #21]
 800c140:	1b92      	subs	r2, r2, r6
 800c142:	1b9b      	subs	r3, r3, r6
 800c144:	f080 0001 	eor.w	r0, r0, #1
 800c148:	60a2      	str	r2, [r4, #8]
 800c14a:	6123      	str	r3, [r4, #16]
 800c14c:	b002      	add	sp, #8
 800c14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c152:	68a3      	ldr	r3, [r4, #8]
 800c154:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c160:	701a      	strb	r2, [r3, #0]
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	68a5      	ldr	r5, [r4, #8]
 800c17c:	e78f      	b.n	800c09e <ucdr_serialize_double+0x96>
 800c17e:	4628      	mov	r0, r5
 800c180:	466d      	mov	r5, sp
 800c182:	4632      	mov	r2, r6
 800c184:	4629      	mov	r1, r5
 800c186:	f00f fc4f 	bl	801ba28 <memcpy>
 800c18a:	68a0      	ldr	r0, [r4, #8]
 800c18c:	4642      	mov	r2, r8
 800c18e:	19a9      	adds	r1, r5, r6
 800c190:	f00f fc4a 	bl	801ba28 <memcpy>
 800c194:	e786      	b.n	800c0a4 <ucdr_serialize_double+0x9c>
 800c196:	bf00      	nop

0800c198 <ucdr_serialize_endian_double>:
 800c198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c19c:	460e      	mov	r6, r1
 800c19e:	b083      	sub	sp, #12
 800c1a0:	2108      	movs	r1, #8
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	ed8d 0b00 	vstr	d0, [sp]
 800c1a8:	f000 faa4 	bl	800c6f4 <ucdr_buffer_alignment>
 800c1ac:	4601      	mov	r1, r0
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c1b4:	f000 fae2 	bl	800c77c <ucdr_advance_buffer>
 800c1b8:	2108      	movs	r1, #8
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fa3a 	bl	800c634 <ucdr_check_buffer_available_for>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d14c      	bne.n	800c25e <ucdr_serialize_endian_double+0xc6>
 800c1c4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c1c8:	42bd      	cmp	r5, r7
 800c1ca:	d943      	bls.n	800c254 <ucdr_serialize_endian_double+0xbc>
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	60a5      	str	r5, [r4, #8]
 800c1d0:	1bed      	subs	r5, r5, r7
 800c1d2:	442b      	add	r3, r5
 800c1d4:	f1c5 0908 	rsb	r9, r5, #8
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	4649      	mov	r1, r9
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 fa35 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d070      	beq.n	800c2c8 <ucdr_serialize_endian_double+0x130>
 800c1e6:	2e01      	cmp	r6, #1
 800c1e8:	f000 8092 	beq.w	800c310 <ucdr_serialize_endian_double+0x178>
 800c1ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1f0:	703b      	strb	r3, [r7, #0]
 800c1f2:	2d01      	cmp	r5, #1
 800c1f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1f8:	707b      	strb	r3, [r7, #1]
 800c1fa:	d073      	beq.n	800c2e4 <ucdr_serialize_endian_double+0x14c>
 800c1fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c200:	70bb      	strb	r3, [r7, #2]
 800c202:	2d02      	cmp	r5, #2
 800c204:	d072      	beq.n	800c2ec <ucdr_serialize_endian_double+0x154>
 800c206:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c20a:	70fb      	strb	r3, [r7, #3]
 800c20c:	2d03      	cmp	r5, #3
 800c20e:	d071      	beq.n	800c2f4 <ucdr_serialize_endian_double+0x15c>
 800c210:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c214:	713b      	strb	r3, [r7, #4]
 800c216:	2d04      	cmp	r5, #4
 800c218:	d070      	beq.n	800c2fc <ucdr_serialize_endian_double+0x164>
 800c21a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c21e:	717b      	strb	r3, [r7, #5]
 800c220:	2d05      	cmp	r5, #5
 800c222:	d06f      	beq.n	800c304 <ucdr_serialize_endian_double+0x16c>
 800c224:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c228:	71bb      	strb	r3, [r7, #6]
 800c22a:	2d06      	cmp	r5, #6
 800c22c:	d06e      	beq.n	800c30c <ucdr_serialize_endian_double+0x174>
 800c22e:	3707      	adds	r7, #7
 800c230:	f89d 3000 	ldrb.w	r3, [sp]
 800c234:	703b      	strb	r3, [r7, #0]
 800c236:	6923      	ldr	r3, [r4, #16]
 800c238:	68a2      	ldr	r2, [r4, #8]
 800c23a:	7da0      	ldrb	r0, [r4, #22]
 800c23c:	3308      	adds	r3, #8
 800c23e:	444a      	add	r2, r9
 800c240:	1b5b      	subs	r3, r3, r5
 800c242:	2108      	movs	r1, #8
 800c244:	f080 0001 	eor.w	r0, r0, #1
 800c248:	60a2      	str	r2, [r4, #8]
 800c24a:	6123      	str	r3, [r4, #16]
 800c24c:	7561      	strb	r1, [r4, #21]
 800c24e:	b003      	add	sp, #12
 800c250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c254:	2108      	movs	r1, #8
 800c256:	4620      	mov	r0, r4
 800c258:	f000 f9f8 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c25c:	b348      	cbz	r0, 800c2b2 <ucdr_serialize_endian_double+0x11a>
 800c25e:	2e01      	cmp	r6, #1
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	d02c      	beq.n	800c2be <ucdr_serialize_endian_double+0x126>
 800c264:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c270:	705a      	strb	r2, [r3, #1]
 800c272:	68a3      	ldr	r3, [r4, #8]
 800c274:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c278:	709a      	strb	r2, [r3, #2]
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c280:	70da      	strb	r2, [r3, #3]
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c288:	711a      	strb	r2, [r3, #4]
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c290:	715a      	strb	r2, [r3, #5]
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c298:	719a      	strb	r2, [r3, #6]
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	f89d 2000 	ldrb.w	r2, [sp]
 800c2a0:	71da      	strb	r2, [r3, #7]
 800c2a2:	68a2      	ldr	r2, [r4, #8]
 800c2a4:	6923      	ldr	r3, [r4, #16]
 800c2a6:	3208      	adds	r2, #8
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	2108      	movs	r1, #8
 800c2ac:	60a2      	str	r2, [r4, #8]
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	7561      	strb	r1, [r4, #21]
 800c2b2:	7da0      	ldrb	r0, [r4, #22]
 800c2b4:	f080 0001 	eor.w	r0, r0, #1
 800c2b8:	b003      	add	sp, #12
 800c2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2c2:	6019      	str	r1, [r3, #0]
 800c2c4:	605a      	str	r2, [r3, #4]
 800c2c6:	e7ec      	b.n	800c2a2 <ucdr_serialize_endian_double+0x10a>
 800c2c8:	68a2      	ldr	r2, [r4, #8]
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	7da0      	ldrb	r0, [r4, #22]
 800c2ce:	f884 8015 	strb.w	r8, [r4, #21]
 800c2d2:	1b52      	subs	r2, r2, r5
 800c2d4:	1b5b      	subs	r3, r3, r5
 800c2d6:	f080 0001 	eor.w	r0, r0, #1
 800c2da:	60a2      	str	r2, [r4, #8]
 800c2dc:	6123      	str	r3, [r4, #16]
 800c2de:	b003      	add	sp, #12
 800c2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2e4:	68a3      	ldr	r3, [r4, #8]
 800c2e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	68a3      	ldr	r3, [r4, #8]
 800c2ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	68a3      	ldr	r3, [r4, #8]
 800c2f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c2fa:	701a      	strb	r2, [r3, #0]
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c302:	701a      	strb	r2, [r3, #0]
 800c304:	68a3      	ldr	r3, [r4, #8]
 800c306:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	68a7      	ldr	r7, [r4, #8]
 800c30e:	e78f      	b.n	800c230 <ucdr_serialize_endian_double+0x98>
 800c310:	466e      	mov	r6, sp
 800c312:	462a      	mov	r2, r5
 800c314:	4631      	mov	r1, r6
 800c316:	4638      	mov	r0, r7
 800c318:	f00f fb86 	bl	801ba28 <memcpy>
 800c31c:	68a0      	ldr	r0, [r4, #8]
 800c31e:	464a      	mov	r2, r9
 800c320:	1971      	adds	r1, r6, r5
 800c322:	f00f fb81 	bl	801ba28 <memcpy>
 800c326:	e786      	b.n	800c236 <ucdr_serialize_endian_double+0x9e>

0800c328 <ucdr_deserialize_double>:
 800c328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c32c:	460d      	mov	r5, r1
 800c32e:	2108      	movs	r1, #8
 800c330:	4604      	mov	r4, r0
 800c332:	f000 f9df 	bl	800c6f4 <ucdr_buffer_alignment>
 800c336:	4601      	mov	r1, r0
 800c338:	4620      	mov	r0, r4
 800c33a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c33e:	f000 fa1d 	bl	800c77c <ucdr_advance_buffer>
 800c342:	2108      	movs	r1, #8
 800c344:	4620      	mov	r0, r4
 800c346:	f000 f975 	bl	800c634 <ucdr_check_buffer_available_for>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d147      	bne.n	800c3de <ucdr_deserialize_double+0xb6>
 800c34e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c352:	42be      	cmp	r6, r7
 800c354:	d93e      	bls.n	800c3d4 <ucdr_deserialize_double+0xac>
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	60a6      	str	r6, [r4, #8]
 800c35a:	1bf6      	subs	r6, r6, r7
 800c35c:	4433      	add	r3, r6
 800c35e:	f1c6 0908 	rsb	r9, r6, #8
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	4649      	mov	r1, r9
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f970 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d063      	beq.n	800c438 <ucdr_deserialize_double+0x110>
 800c370:	7d23      	ldrb	r3, [r4, #20]
 800c372:	2b01      	cmp	r3, #1
 800c374:	f000 8083 	beq.w	800c47e <ucdr_deserialize_double+0x156>
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	702b      	strb	r3, [r5, #0]
 800c37c:	79bb      	ldrb	r3, [r7, #6]
 800c37e:	706b      	strb	r3, [r5, #1]
 800c380:	2e01      	cmp	r6, #1
 800c382:	d066      	beq.n	800c452 <ucdr_deserialize_double+0x12a>
 800c384:	797b      	ldrb	r3, [r7, #5]
 800c386:	70ab      	strb	r3, [r5, #2]
 800c388:	2e02      	cmp	r6, #2
 800c38a:	f000 8089 	beq.w	800c4a0 <ucdr_deserialize_double+0x178>
 800c38e:	793b      	ldrb	r3, [r7, #4]
 800c390:	70eb      	strb	r3, [r5, #3]
 800c392:	2e03      	cmp	r6, #3
 800c394:	f000 8082 	beq.w	800c49c <ucdr_deserialize_double+0x174>
 800c398:	78fb      	ldrb	r3, [r7, #3]
 800c39a:	712b      	strb	r3, [r5, #4]
 800c39c:	2e04      	cmp	r6, #4
 800c39e:	d07b      	beq.n	800c498 <ucdr_deserialize_double+0x170>
 800c3a0:	78bb      	ldrb	r3, [r7, #2]
 800c3a2:	716b      	strb	r3, [r5, #5]
 800c3a4:	2e05      	cmp	r6, #5
 800c3a6:	d075      	beq.n	800c494 <ucdr_deserialize_double+0x16c>
 800c3a8:	787b      	ldrb	r3, [r7, #1]
 800c3aa:	71ab      	strb	r3, [r5, #6]
 800c3ac:	2e06      	cmp	r6, #6
 800c3ae:	f105 0507 	add.w	r5, r5, #7
 800c3b2:	d062      	beq.n	800c47a <ucdr_deserialize_double+0x152>
 800c3b4:	783b      	ldrb	r3, [r7, #0]
 800c3b6:	702b      	strb	r3, [r5, #0]
 800c3b8:	6923      	ldr	r3, [r4, #16]
 800c3ba:	68a2      	ldr	r2, [r4, #8]
 800c3bc:	7da0      	ldrb	r0, [r4, #22]
 800c3be:	2108      	movs	r1, #8
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	444a      	add	r2, r9
 800c3c4:	1b9b      	subs	r3, r3, r6
 800c3c6:	7561      	strb	r1, [r4, #21]
 800c3c8:	60a2      	str	r2, [r4, #8]
 800c3ca:	6123      	str	r3, [r4, #16]
 800c3cc:	f080 0001 	eor.w	r0, r0, #1
 800c3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d4:	2108      	movs	r1, #8
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 f938 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c3dc:	b310      	cbz	r0, 800c424 <ucdr_deserialize_double+0xfc>
 800c3de:	7d22      	ldrb	r2, [r4, #20]
 800c3e0:	68a3      	ldr	r3, [r4, #8]
 800c3e2:	2a01      	cmp	r2, #1
 800c3e4:	d023      	beq.n	800c42e <ucdr_deserialize_double+0x106>
 800c3e6:	79db      	ldrb	r3, [r3, #7]
 800c3e8:	702b      	strb	r3, [r5, #0]
 800c3ea:	68a3      	ldr	r3, [r4, #8]
 800c3ec:	799b      	ldrb	r3, [r3, #6]
 800c3ee:	706b      	strb	r3, [r5, #1]
 800c3f0:	68a3      	ldr	r3, [r4, #8]
 800c3f2:	795b      	ldrb	r3, [r3, #5]
 800c3f4:	70ab      	strb	r3, [r5, #2]
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	791b      	ldrb	r3, [r3, #4]
 800c3fa:	70eb      	strb	r3, [r5, #3]
 800c3fc:	68a3      	ldr	r3, [r4, #8]
 800c3fe:	78db      	ldrb	r3, [r3, #3]
 800c400:	712b      	strb	r3, [r5, #4]
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	789b      	ldrb	r3, [r3, #2]
 800c406:	716b      	strb	r3, [r5, #5]
 800c408:	68a3      	ldr	r3, [r4, #8]
 800c40a:	785b      	ldrb	r3, [r3, #1]
 800c40c:	71ab      	strb	r3, [r5, #6]
 800c40e:	68a3      	ldr	r3, [r4, #8]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	71eb      	strb	r3, [r5, #7]
 800c414:	68a2      	ldr	r2, [r4, #8]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	3208      	adds	r2, #8
 800c41a:	3308      	adds	r3, #8
 800c41c:	2108      	movs	r1, #8
 800c41e:	60a2      	str	r2, [r4, #8]
 800c420:	6123      	str	r3, [r4, #16]
 800c422:	7561      	strb	r1, [r4, #21]
 800c424:	7da0      	ldrb	r0, [r4, #22]
 800c426:	f080 0001 	eor.w	r0, r0, #1
 800c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	606b      	str	r3, [r5, #4]
 800c434:	602a      	str	r2, [r5, #0]
 800c436:	e7ed      	b.n	800c414 <ucdr_deserialize_double+0xec>
 800c438:	68a2      	ldr	r2, [r4, #8]
 800c43a:	6923      	ldr	r3, [r4, #16]
 800c43c:	7da0      	ldrb	r0, [r4, #22]
 800c43e:	f884 8015 	strb.w	r8, [r4, #21]
 800c442:	1b92      	subs	r2, r2, r6
 800c444:	1b9b      	subs	r3, r3, r6
 800c446:	60a2      	str	r2, [r4, #8]
 800c448:	6123      	str	r3, [r4, #16]
 800c44a:	f080 0001 	eor.w	r0, r0, #1
 800c44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c452:	68a3      	ldr	r3, [r4, #8]
 800c454:	795b      	ldrb	r3, [r3, #5]
 800c456:	70ab      	strb	r3, [r5, #2]
 800c458:	3503      	adds	r5, #3
 800c45a:	68a3      	ldr	r3, [r4, #8]
 800c45c:	791b      	ldrb	r3, [r3, #4]
 800c45e:	f805 3b01 	strb.w	r3, [r5], #1
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	78db      	ldrb	r3, [r3, #3]
 800c466:	f805 3b01 	strb.w	r3, [r5], #1
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	789b      	ldrb	r3, [r3, #2]
 800c46e:	f805 3b01 	strb.w	r3, [r5], #1
 800c472:	68a3      	ldr	r3, [r4, #8]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	f805 3b01 	strb.w	r3, [r5], #1
 800c47a:	68a7      	ldr	r7, [r4, #8]
 800c47c:	e79a      	b.n	800c3b4 <ucdr_deserialize_double+0x8c>
 800c47e:	4639      	mov	r1, r7
 800c480:	4632      	mov	r2, r6
 800c482:	4628      	mov	r0, r5
 800c484:	f00f fad0 	bl	801ba28 <memcpy>
 800c488:	68a1      	ldr	r1, [r4, #8]
 800c48a:	464a      	mov	r2, r9
 800c48c:	19a8      	adds	r0, r5, r6
 800c48e:	f00f facb 	bl	801ba28 <memcpy>
 800c492:	e791      	b.n	800c3b8 <ucdr_deserialize_double+0x90>
 800c494:	3506      	adds	r5, #6
 800c496:	e7ec      	b.n	800c472 <ucdr_deserialize_double+0x14a>
 800c498:	3505      	adds	r5, #5
 800c49a:	e7e6      	b.n	800c46a <ucdr_deserialize_double+0x142>
 800c49c:	3504      	adds	r5, #4
 800c49e:	e7e0      	b.n	800c462 <ucdr_deserialize_double+0x13a>
 800c4a0:	3503      	adds	r5, #3
 800c4a2:	e7da      	b.n	800c45a <ucdr_deserialize_double+0x132>

0800c4a4 <ucdr_deserialize_endian_double>:
 800c4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	2108      	movs	r1, #8
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4615      	mov	r5, r2
 800c4b0:	f000 f920 	bl	800c6f4 <ucdr_buffer_alignment>
 800c4b4:	4601      	mov	r1, r0
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c4bc:	f000 f95e 	bl	800c77c <ucdr_advance_buffer>
 800c4c0:	2108      	movs	r1, #8
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 f8b6 	bl	800c634 <ucdr_check_buffer_available_for>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d14f      	bne.n	800c56c <ucdr_deserialize_endian_double+0xc8>
 800c4cc:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c4d0:	4546      	cmp	r6, r8
 800c4d2:	d946      	bls.n	800c562 <ucdr_deserialize_endian_double+0xbe>
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	60a6      	str	r6, [r4, #8]
 800c4d8:	eba6 0608 	sub.w	r6, r6, r8
 800c4dc:	4433      	add	r3, r6
 800c4de:	f1c6 0a08 	rsb	sl, r6, #8
 800c4e2:	6123      	str	r3, [r4, #16]
 800c4e4:	4651      	mov	r1, sl
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 f8b0 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d069      	beq.n	800c5c4 <ucdr_deserialize_endian_double+0x120>
 800c4f0:	2f01      	cmp	r7, #1
 800c4f2:	f000 808b 	beq.w	800c60c <ucdr_deserialize_endian_double+0x168>
 800c4f6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c4fa:	702b      	strb	r3, [r5, #0]
 800c4fc:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c500:	706b      	strb	r3, [r5, #1]
 800c502:	2e01      	cmp	r6, #1
 800c504:	d06b      	beq.n	800c5de <ucdr_deserialize_endian_double+0x13a>
 800c506:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c50a:	70ab      	strb	r3, [r5, #2]
 800c50c:	2e02      	cmp	r6, #2
 800c50e:	f000 808e 	beq.w	800c62e <ucdr_deserialize_endian_double+0x18a>
 800c512:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c516:	70eb      	strb	r3, [r5, #3]
 800c518:	2e03      	cmp	r6, #3
 800c51a:	f000 8086 	beq.w	800c62a <ucdr_deserialize_endian_double+0x186>
 800c51e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c522:	712b      	strb	r3, [r5, #4]
 800c524:	2e04      	cmp	r6, #4
 800c526:	d07e      	beq.n	800c626 <ucdr_deserialize_endian_double+0x182>
 800c528:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c52c:	716b      	strb	r3, [r5, #5]
 800c52e:	2e05      	cmp	r6, #5
 800c530:	d077      	beq.n	800c622 <ucdr_deserialize_endian_double+0x17e>
 800c532:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c536:	71ab      	strb	r3, [r5, #6]
 800c538:	2e06      	cmp	r6, #6
 800c53a:	f105 0507 	add.w	r5, r5, #7
 800c53e:	d062      	beq.n	800c606 <ucdr_deserialize_endian_double+0x162>
 800c540:	f898 3000 	ldrb.w	r3, [r8]
 800c544:	702b      	strb	r3, [r5, #0]
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	68a2      	ldr	r2, [r4, #8]
 800c54a:	7da0      	ldrb	r0, [r4, #22]
 800c54c:	2108      	movs	r1, #8
 800c54e:	3308      	adds	r3, #8
 800c550:	4452      	add	r2, sl
 800c552:	1b9b      	subs	r3, r3, r6
 800c554:	7561      	strb	r1, [r4, #21]
 800c556:	60a2      	str	r2, [r4, #8]
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	f080 0001 	eor.w	r0, r0, #1
 800c55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c562:	2108      	movs	r1, #8
 800c564:	4620      	mov	r0, r4
 800c566:	f000 f871 	bl	800c64c <ucdr_check_final_buffer_behavior>
 800c56a:	b308      	cbz	r0, 800c5b0 <ucdr_deserialize_endian_double+0x10c>
 800c56c:	2f01      	cmp	r7, #1
 800c56e:	68a3      	ldr	r3, [r4, #8]
 800c570:	d023      	beq.n	800c5ba <ucdr_deserialize_endian_double+0x116>
 800c572:	79db      	ldrb	r3, [r3, #7]
 800c574:	702b      	strb	r3, [r5, #0]
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	799b      	ldrb	r3, [r3, #6]
 800c57a:	706b      	strb	r3, [r5, #1]
 800c57c:	68a3      	ldr	r3, [r4, #8]
 800c57e:	795b      	ldrb	r3, [r3, #5]
 800c580:	70ab      	strb	r3, [r5, #2]
 800c582:	68a3      	ldr	r3, [r4, #8]
 800c584:	791b      	ldrb	r3, [r3, #4]
 800c586:	70eb      	strb	r3, [r5, #3]
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	78db      	ldrb	r3, [r3, #3]
 800c58c:	712b      	strb	r3, [r5, #4]
 800c58e:	68a3      	ldr	r3, [r4, #8]
 800c590:	789b      	ldrb	r3, [r3, #2]
 800c592:	716b      	strb	r3, [r5, #5]
 800c594:	68a3      	ldr	r3, [r4, #8]
 800c596:	785b      	ldrb	r3, [r3, #1]
 800c598:	71ab      	strb	r3, [r5, #6]
 800c59a:	68a3      	ldr	r3, [r4, #8]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	71eb      	strb	r3, [r5, #7]
 800c5a0:	68a2      	ldr	r2, [r4, #8]
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	3208      	adds	r2, #8
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	2108      	movs	r1, #8
 800c5aa:	60a2      	str	r2, [r4, #8]
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	7561      	strb	r1, [r4, #21]
 800c5b0:	7da0      	ldrb	r0, [r4, #22]
 800c5b2:	f080 0001 	eor.w	r0, r0, #1
 800c5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	606b      	str	r3, [r5, #4]
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	e7ed      	b.n	800c5a0 <ucdr_deserialize_endian_double+0xfc>
 800c5c4:	68a2      	ldr	r2, [r4, #8]
 800c5c6:	6923      	ldr	r3, [r4, #16]
 800c5c8:	7da0      	ldrb	r0, [r4, #22]
 800c5ca:	f884 9015 	strb.w	r9, [r4, #21]
 800c5ce:	1b92      	subs	r2, r2, r6
 800c5d0:	1b9b      	subs	r3, r3, r6
 800c5d2:	60a2      	str	r2, [r4, #8]
 800c5d4:	6123      	str	r3, [r4, #16]
 800c5d6:	f080 0001 	eor.w	r0, r0, #1
 800c5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	795b      	ldrb	r3, [r3, #5]
 800c5e2:	70ab      	strb	r3, [r5, #2]
 800c5e4:	3503      	adds	r5, #3
 800c5e6:	68a3      	ldr	r3, [r4, #8]
 800c5e8:	791b      	ldrb	r3, [r3, #4]
 800c5ea:	f805 3b01 	strb.w	r3, [r5], #1
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	78db      	ldrb	r3, [r3, #3]
 800c5f2:	f805 3b01 	strb.w	r3, [r5], #1
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	789b      	ldrb	r3, [r3, #2]
 800c5fa:	f805 3b01 	strb.w	r3, [r5], #1
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	785b      	ldrb	r3, [r3, #1]
 800c602:	f805 3b01 	strb.w	r3, [r5], #1
 800c606:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c60a:	e799      	b.n	800c540 <ucdr_deserialize_endian_double+0x9c>
 800c60c:	4641      	mov	r1, r8
 800c60e:	4632      	mov	r2, r6
 800c610:	4628      	mov	r0, r5
 800c612:	f00f fa09 	bl	801ba28 <memcpy>
 800c616:	68a1      	ldr	r1, [r4, #8]
 800c618:	4652      	mov	r2, sl
 800c61a:	19a8      	adds	r0, r5, r6
 800c61c:	f00f fa04 	bl	801ba28 <memcpy>
 800c620:	e791      	b.n	800c546 <ucdr_deserialize_endian_double+0xa2>
 800c622:	3506      	adds	r5, #6
 800c624:	e7eb      	b.n	800c5fe <ucdr_deserialize_endian_double+0x15a>
 800c626:	3505      	adds	r5, #5
 800c628:	e7e5      	b.n	800c5f6 <ucdr_deserialize_endian_double+0x152>
 800c62a:	3504      	adds	r5, #4
 800c62c:	e7df      	b.n	800c5ee <ucdr_deserialize_endian_double+0x14a>
 800c62e:	3503      	adds	r5, #3
 800c630:	e7d9      	b.n	800c5e6 <ucdr_deserialize_endian_double+0x142>
 800c632:	bf00      	nop

0800c634 <ucdr_check_buffer_available_for>:
 800c634:	7d83      	ldrb	r3, [r0, #22]
 800c636:	b93b      	cbnz	r3, 800c648 <ucdr_check_buffer_available_for+0x14>
 800c638:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c63c:	440b      	add	r3, r1
 800c63e:	4298      	cmp	r0, r3
 800c640:	bf34      	ite	cc
 800c642:	2000      	movcc	r0, #0
 800c644:	2001      	movcs	r0, #1
 800c646:	4770      	bx	lr
 800c648:	2000      	movs	r0, #0
 800c64a:	4770      	bx	lr

0800c64c <ucdr_check_final_buffer_behavior>:
 800c64c:	7d83      	ldrb	r3, [r0, #22]
 800c64e:	b943      	cbnz	r3, 800c662 <ucdr_check_final_buffer_behavior+0x16>
 800c650:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c654:	4291      	cmp	r1, r2
 800c656:	b510      	push	{r4, lr}
 800c658:	4604      	mov	r4, r0
 800c65a:	d205      	bcs.n	800c668 <ucdr_check_final_buffer_behavior+0x1c>
 800c65c:	2301      	movs	r3, #1
 800c65e:	4618      	mov	r0, r3
 800c660:	bd10      	pop	{r4, pc}
 800c662:	2300      	movs	r3, #0
 800c664:	4618      	mov	r0, r3
 800c666:	4770      	bx	lr
 800c668:	6982      	ldr	r2, [r0, #24]
 800c66a:	b13a      	cbz	r2, 800c67c <ucdr_check_final_buffer_behavior+0x30>
 800c66c:	69c1      	ldr	r1, [r0, #28]
 800c66e:	4790      	blx	r2
 800c670:	f080 0301 	eor.w	r3, r0, #1
 800c674:	b2db      	uxtb	r3, r3
 800c676:	75a0      	strb	r0, [r4, #22]
 800c678:	4618      	mov	r0, r3
 800c67a:	bd10      	pop	{r4, pc}
 800c67c:	2001      	movs	r0, #1
 800c67e:	75a0      	strb	r0, [r4, #22]
 800c680:	e7fa      	b.n	800c678 <ucdr_check_final_buffer_behavior+0x2c>
 800c682:	bf00      	nop

0800c684 <ucdr_set_on_full_buffer_callback>:
 800c684:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop

0800c68c <ucdr_init_buffer_origin_offset_endian>:
 800c68c:	b410      	push	{r4}
 800c68e:	9c01      	ldr	r4, [sp, #4]
 800c690:	6001      	str	r1, [r0, #0]
 800c692:	440a      	add	r2, r1
 800c694:	6042      	str	r2, [r0, #4]
 800c696:	190a      	adds	r2, r1, r4
 800c698:	441c      	add	r4, r3
 800c69a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c69e:	6082      	str	r2, [r0, #8]
 800c6a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c6a4:	7503      	strb	r3, [r0, #20]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b0:	7542      	strb	r2, [r0, #21]
 800c6b2:	7582      	strb	r2, [r0, #22]
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop

0800c6b8 <ucdr_init_buffer_origin_offset>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	9c04      	ldr	r4, [sp, #16]
 800c6be:	9400      	str	r4, [sp, #0]
 800c6c0:	2401      	movs	r4, #1
 800c6c2:	9401      	str	r4, [sp, #4]
 800c6c4:	f7ff ffe2 	bl	800c68c <ucdr_init_buffer_origin_offset_endian>
 800c6c8:	b002      	add	sp, #8
 800c6ca:	bd10      	pop	{r4, pc}

0800c6cc <ucdr_init_buffer_origin>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	2400      	movs	r4, #0
 800c6d2:	9400      	str	r4, [sp, #0]
 800c6d4:	f7ff fff0 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 800c6d8:	b002      	add	sp, #8
 800c6da:	bd10      	pop	{r4, pc}

0800c6dc <ucdr_init_buffer>:
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f7ff bff5 	b.w	800c6cc <ucdr_init_buffer_origin>
 800c6e2:	bf00      	nop

0800c6e4 <ucdr_alignment>:
 800c6e4:	fbb0 f3f1 	udiv	r3, r0, r1
 800c6e8:	fb03 0011 	mls	r0, r3, r1, r0
 800c6ec:	1a08      	subs	r0, r1, r0
 800c6ee:	3901      	subs	r1, #1
 800c6f0:	4008      	ands	r0, r1
 800c6f2:	4770      	bx	lr

0800c6f4 <ucdr_buffer_alignment>:
 800c6f4:	7d43      	ldrb	r3, [r0, #21]
 800c6f6:	428b      	cmp	r3, r1
 800c6f8:	d208      	bcs.n	800c70c <ucdr_buffer_alignment+0x18>
 800c6fa:	6900      	ldr	r0, [r0, #16]
 800c6fc:	fbb0 f3f1 	udiv	r3, r0, r1
 800c700:	fb01 0013 	mls	r0, r1, r3, r0
 800c704:	1a08      	subs	r0, r1, r0
 800c706:	3901      	subs	r1, #1
 800c708:	4008      	ands	r0, r1
 800c70a:	4770      	bx	lr
 800c70c:	2000      	movs	r0, #0
 800c70e:	4770      	bx	lr

0800c710 <ucdr_align_to>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4604      	mov	r4, r0
 800c714:	460d      	mov	r5, r1
 800c716:	f7ff ffed 	bl	800c6f4 <ucdr_buffer_alignment>
 800c71a:	68a3      	ldr	r3, [r4, #8]
 800c71c:	6861      	ldr	r1, [r4, #4]
 800c71e:	6922      	ldr	r2, [r4, #16]
 800c720:	7565      	strb	r5, [r4, #21]
 800c722:	4403      	add	r3, r0
 800c724:	428b      	cmp	r3, r1
 800c726:	bf28      	it	cs
 800c728:	460b      	movcs	r3, r1
 800c72a:	4402      	add	r2, r0
 800c72c:	60a3      	str	r3, [r4, #8]
 800c72e:	6122      	str	r2, [r4, #16]
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	bf00      	nop

0800c734 <ucdr_buffer_length>:
 800c734:	6882      	ldr	r2, [r0, #8]
 800c736:	6800      	ldr	r0, [r0, #0]
 800c738:	1a10      	subs	r0, r2, r0
 800c73a:	4770      	bx	lr

0800c73c <ucdr_buffer_remaining>:
 800c73c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c740:	1a10      	subs	r0, r2, r0
 800c742:	4770      	bx	lr

0800c744 <ucdr_check_final_buffer_behavior_array>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	7d83      	ldrb	r3, [r0, #22]
 800c748:	b963      	cbnz	r3, 800c764 <ucdr_check_final_buffer_behavior_array+0x20>
 800c74a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	4604      	mov	r4, r0
 800c752:	460d      	mov	r5, r1
 800c754:	d308      	bcc.n	800c768 <ucdr_check_final_buffer_behavior_array+0x24>
 800c756:	b139      	cbz	r1, 800c768 <ucdr_check_final_buffer_behavior_array+0x24>
 800c758:	6983      	ldr	r3, [r0, #24]
 800c75a:	b163      	cbz	r3, 800c776 <ucdr_check_final_buffer_behavior_array+0x32>
 800c75c:	69c1      	ldr	r1, [r0, #28]
 800c75e:	4798      	blx	r3
 800c760:	75a0      	strb	r0, [r4, #22]
 800c762:	b108      	cbz	r0, 800c768 <ucdr_check_final_buffer_behavior_array+0x24>
 800c764:	2000      	movs	r0, #0
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	4620      	mov	r0, r4
 800c76a:	f7ff ffe7 	bl	800c73c <ucdr_buffer_remaining>
 800c76e:	42a8      	cmp	r0, r5
 800c770:	bf28      	it	cs
 800c772:	4628      	movcs	r0, r5
 800c774:	bd38      	pop	{r3, r4, r5, pc}
 800c776:	2301      	movs	r3, #1
 800c778:	7583      	strb	r3, [r0, #22]
 800c77a:	e7f3      	b.n	800c764 <ucdr_check_final_buffer_behavior_array+0x20>

0800c77c <ucdr_advance_buffer>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	f7ff ff57 	bl	800c634 <ucdr_check_buffer_available_for>
 800c786:	b178      	cbz	r0, 800c7a8 <ucdr_advance_buffer+0x2c>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	68a2      	ldr	r2, [r4, #8]
 800c78c:	442b      	add	r3, r5
 800c78e:	6123      	str	r3, [r4, #16]
 800c790:	2301      	movs	r3, #1
 800c792:	442a      	add	r2, r5
 800c794:	7563      	strb	r3, [r4, #21]
 800c796:	60a2      	str	r2, [r4, #8]
 800c798:	bd38      	pop	{r3, r4, r5, pc}
 800c79a:	68a2      	ldr	r2, [r4, #8]
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	4402      	add	r2, r0
 800c7a0:	4403      	add	r3, r0
 800c7a2:	1a2d      	subs	r5, r5, r0
 800c7a4:	60a2      	str	r2, [r4, #8]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f7ff ffc9 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d1f1      	bne.n	800c79a <ucdr_advance_buffer+0x1e>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	7563      	strb	r3, [r4, #21]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}

0800c7bc <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c7bc:	4b04      	ldr	r3, [pc, #16]	@ (800c7d0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	b10a      	cbz	r2, 800c7c6 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800c7c2:	4803      	ldr	r0, [pc, #12]	@ (800c7d0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c7c4:	4770      	bx	lr
 800c7c6:	4a03      	ldr	r2, [pc, #12]	@ (800c7d4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800c7c8:	4801      	ldr	r0, [pc, #4]	@ (800c7d0 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800c7ca:	6812      	ldr	r2, [r2, #0]
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	4770      	bx	lr
 800c7d0:	20000230 	.word	0x20000230
 800c7d4:	200003a0 	.word	0x200003a0

0800c7d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c7d8:	4a02      	ldr	r2, [pc, #8]	@ (800c7e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800c7da:	4b03      	ldr	r3, [pc, #12]	@ (800c7e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800c7dc:	6812      	ldr	r2, [r2, #0]
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	200003a0 	.word	0x200003a0
 800c7e8:	20000230 	.word	0x20000230

0800c7ec <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800c7ec:	f006 be6c 	b.w	80134c8 <nav_msgs__msg__Odometry__init>

0800c7f0 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800c7f0:	f006 beb6 	b.w	8013560 <nav_msgs__msg__Odometry__fini>

0800c7f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	f002 f90b 	bl	800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c7fa:	4c0a      	ldr	r4, [pc, #40]	@ (800c824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800c7fc:	60e0      	str	r0, [r4, #12]
 800c7fe:	f002 fc7f 	bl	800f100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c802:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c806:	f002 fcaf 	bl	800f168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c80a:	4b07      	ldr	r3, [pc, #28]	@ (800c828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c80c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	b10a      	cbz	r2, 800c818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800c814:	4804      	ldr	r0, [pc, #16]	@ (800c828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c816:	bd10      	pop	{r4, pc}
 800c818:	4a04      	ldr	r2, [pc, #16]	@ (800c82c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800c81a:	4803      	ldr	r0, [pc, #12]	@ (800c828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	601a      	str	r2, [r3, #0]
 800c820:	bd10      	pop	{r4, pc}
 800c822:	bf00      	nop
 800c824:	20000268 	.word	0x20000268
 800c828:	20000250 	.word	0x20000250
 800c82c:	200003a4 	.word	0x200003a4

0800c830 <get_serialized_size_nav_msgs__msg__Odometry>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	b1c0      	cbz	r0, 800c868 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800c836:	460e      	mov	r6, r1
 800c838:	f002 f9f4 	bl	800ec24 <get_serialized_size_std_msgs__msg__Header>
 800c83c:	1837      	adds	r7, r6, r0
 800c83e:	2104      	movs	r1, #4
 800c840:	4638      	mov	r0, r7
 800c842:	f7ff ff4f 	bl	800c6e4 <ucdr_alignment>
 800c846:	69a5      	ldr	r5, [r4, #24]
 800c848:	3505      	adds	r5, #5
 800c84a:	4405      	add	r5, r0
 800c84c:	443d      	add	r5, r7
 800c84e:	4629      	mov	r1, r5
 800c850:	f104 0020 	add.w	r0, r4, #32
 800c854:	f002 fc9e 	bl	800f194 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c858:	4405      	add	r5, r0
 800c85a:	4629      	mov	r1, r5
 800c85c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c860:	f002 fd08 	bl	800f274 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c864:	1b80      	subs	r0, r0, r6
 800c866:	4428      	add	r0, r5
 800c868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c86a:	bf00      	nop

0800c86c <_Odometry__cdr_deserialize>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	b082      	sub	sp, #8
 800c872:	b349      	cbz	r1, 800c8c8 <_Odometry__cdr_deserialize+0x5c>
 800c874:	4605      	mov	r5, r0
 800c876:	f002 fa57 	bl	800ed28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c87a:	6843      	ldr	r3, [r0, #4]
 800c87c:	4621      	mov	r1, r4
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	4628      	mov	r0, r5
 800c882:	4798      	blx	r3
 800c884:	69e6      	ldr	r6, [r4, #28]
 800c886:	6961      	ldr	r1, [r4, #20]
 800c888:	ab01      	add	r3, sp, #4
 800c88a:	4632      	mov	r2, r6
 800c88c:	4628      	mov	r0, r5
 800c88e:	f002 fff3 	bl	800f878 <ucdr_deserialize_sequence_char>
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	b9a0      	cbnz	r0, 800c8c0 <_Odometry__cdr_deserialize+0x54>
 800c896:	429e      	cmp	r6, r3
 800c898:	d319      	bcc.n	800c8ce <_Odometry__cdr_deserialize+0x62>
 800c89a:	f002 fce7 	bl	800f26c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c89e:	6843      	ldr	r3, [r0, #4]
 800c8a0:	f104 0120 	add.w	r1, r4, #32
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	4798      	blx	r3
 800c8aa:	f002 fd4f 	bl	800f34c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c8ae:	6843      	ldr	r3, [r0, #4]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	b002      	add	sp, #8
 800c8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8be:	4718      	bx	r3
 800c8c0:	b103      	cbz	r3, 800c8c4 <_Odometry__cdr_deserialize+0x58>
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	61a3      	str	r3, [r4, #24]
 800c8c6:	e7e8      	b.n	800c89a <_Odometry__cdr_deserialize+0x2e>
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	b002      	add	sp, #8
 800c8cc:	bd70      	pop	{r4, r5, r6, pc}
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	75a8      	strb	r0, [r5, #22]
 800c8d2:	7569      	strb	r1, [r5, #21]
 800c8d4:	61a0      	str	r0, [r4, #24]
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f7ff ff1a 	bl	800c710 <ucdr_align_to>
 800c8dc:	9901      	ldr	r1, [sp, #4]
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7ff ff4c 	bl	800c77c <ucdr_advance_buffer>
 800c8e4:	e7d9      	b.n	800c89a <_Odometry__cdr_deserialize+0x2e>
 800c8e6:	bf00      	nop

0800c8e8 <_Odometry__cdr_serialize>:
 800c8e8:	b348      	cbz	r0, 800c93e <_Odometry__cdr_serialize+0x56>
 800c8ea:	b570      	push	{r4, r5, r6, lr}
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	460e      	mov	r6, r1
 800c8f0:	f002 fa1a 	bl	800ed28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c8f4:	6843      	ldr	r3, [r0, #4]
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	4798      	blx	r3
 800c8fe:	6965      	ldr	r5, [r4, #20]
 800c900:	b1d5      	cbz	r5, 800c938 <_Odometry__cdr_serialize+0x50>
 800c902:	4628      	mov	r0, r5
 800c904:	f7f3 fce4 	bl	80002d0 <strlen>
 800c908:	1c42      	adds	r2, r0, #1
 800c90a:	4629      	mov	r1, r5
 800c90c:	61a0      	str	r0, [r4, #24]
 800c90e:	4630      	mov	r0, r6
 800c910:	f002 ffa0 	bl	800f854 <ucdr_serialize_sequence_char>
 800c914:	f002 fcaa 	bl	800f26c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800c918:	6843      	ldr	r3, [r0, #4]
 800c91a:	4631      	mov	r1, r6
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f104 0020 	add.w	r0, r4, #32
 800c922:	4798      	blx	r3
 800c924:	f002 fd12 	bl	800f34c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800c928:	6843      	ldr	r3, [r0, #4]
 800c92a:	4631      	mov	r1, r6
 800c92c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c936:	4718      	bx	r3
 800c938:	462a      	mov	r2, r5
 800c93a:	4628      	mov	r0, r5
 800c93c:	e7e5      	b.n	800c90a <_Odometry__cdr_serialize+0x22>
 800c93e:	4770      	bx	lr

0800c940 <_Odometry__max_serialized_size>:
 800c940:	b510      	push	{r4, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	2301      	movs	r3, #1
 800c946:	2100      	movs	r1, #0
 800c948:	f10d 0007 	add.w	r0, sp, #7
 800c94c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c950:	f002 f9e0 	bl	800ed14 <max_serialized_size_std_msgs__msg__Header>
 800c954:	2300      	movs	r3, #0
 800c956:	4601      	mov	r1, r0
 800c958:	4604      	mov	r4, r0
 800c95a:	f10d 0007 	add.w	r0, sp, #7
 800c95e:	f88d 3007 	strb.w	r3, [sp, #7]
 800c962:	f002 fc73 	bl	800f24c <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c966:	4404      	add	r4, r0
 800c968:	4621      	mov	r1, r4
 800c96a:	f10d 0007 	add.w	r0, sp, #7
 800c96e:	f002 fcdd 	bl	800f32c <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c972:	4420      	add	r0, r4
 800c974:	b002      	add	sp, #8
 800c976:	bd10      	pop	{r4, pc}

0800c978 <_Odometry__get_serialized_size>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	4604      	mov	r4, r0
 800c97c:	b1b8      	cbz	r0, 800c9ae <_Odometry__get_serialized_size+0x36>
 800c97e:	2100      	movs	r1, #0
 800c980:	f002 f950 	bl	800ec24 <get_serialized_size_std_msgs__msg__Header>
 800c984:	2104      	movs	r1, #4
 800c986:	4606      	mov	r6, r0
 800c988:	f7ff feac 	bl	800c6e4 <ucdr_alignment>
 800c98c:	69a5      	ldr	r5, [r4, #24]
 800c98e:	3505      	adds	r5, #5
 800c990:	4603      	mov	r3, r0
 800c992:	4435      	add	r5, r6
 800c994:	441d      	add	r5, r3
 800c996:	4629      	mov	r1, r5
 800c998:	f104 0020 	add.w	r0, r4, #32
 800c99c:	f002 fbfa 	bl	800f194 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800c9a0:	4405      	add	r5, r0
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800c9a8:	f002 fc64 	bl	800f274 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800c9ac:	4428      	add	r0, r5
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}

0800c9b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800c9b0:	4800      	ldr	r0, [pc, #0]	@ (800c9b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800c9b2:	4770      	bx	lr
 800c9b4:	20000358 	.word	0x20000358

0800c9b8 <rcl_get_zero_initialized_publisher>:
 800c9b8:	4b01      	ldr	r3, [pc, #4]	@ (800c9c0 <rcl_get_zero_initialized_publisher+0x8>)
 800c9ba:	6818      	ldr	r0, [r3, #0]
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	08021544 	.word	0x08021544

0800c9c4 <rcl_publisher_init>:
 800c9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c8:	b088      	sub	sp, #32
 800c9ca:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c9cc:	2d00      	cmp	r5, #0
 800c9ce:	d06a      	beq.n	800caa6 <rcl_publisher_init+0xe2>
 800c9d0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	4648      	mov	r0, r9
 800c9d8:	460e      	mov	r6, r1
 800c9da:	4690      	mov	r8, r2
 800c9dc:	461f      	mov	r7, r3
 800c9de:	f001 f83b 	bl	800da58 <rcutils_allocator_is_valid>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d05f      	beq.n	800caa6 <rcl_publisher_init+0xe2>
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	d05d      	beq.n	800caa6 <rcl_publisher_init+0xe2>
 800c9ea:	f8d4 a000 	ldr.w	sl, [r4]
 800c9ee:	f1ba 0f00 	cmp.w	sl, #0
 800c9f2:	d004      	beq.n	800c9fe <rcl_publisher_init+0x3a>
 800c9f4:	2764      	movs	r7, #100	@ 0x64
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	b008      	add	sp, #32
 800c9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f007 fa58 	bl	8013eb4 <rcl_node_is_valid>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d053      	beq.n	800cab0 <rcl_publisher_init+0xec>
 800ca08:	f1b8 0f00 	cmp.w	r8, #0
 800ca0c:	d04b      	beq.n	800caa6 <rcl_publisher_init+0xe2>
 800ca0e:	2f00      	cmp	r7, #0
 800ca10:	d049      	beq.n	800caa6 <rcl_publisher_init+0xe2>
 800ca12:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ca16:	aa07      	add	r2, sp, #28
 800ca18:	9205      	str	r2, [sp, #20]
 800ca1a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ca1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ca26:	f8cd a01c 	str.w	sl, [sp, #28]
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ca30:	4630      	mov	r0, r6
 800ca32:	f007 facf 	bl	8013fd4 <rcl_node_resolve_name>
 800ca36:	4607      	mov	r7, r0
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d150      	bne.n	800cade <rcl_publisher_init+0x11a>
 800ca3c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800ca40:	21c8      	movs	r1, #200	@ 0xc8
 800ca42:	2001      	movs	r0, #1
 800ca44:	4798      	blx	r3
 800ca46:	6020      	str	r0, [r4, #0]
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d04e      	beq.n	800caea <rcl_publisher_init+0x126>
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f007 fa53 	bl	8013ef8 <rcl_node_get_rmw_handle>
 800ca52:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	9a07      	ldr	r2, [sp, #28]
 800ca5a:	6827      	ldr	r7, [r4, #0]
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	4641      	mov	r1, r8
 800ca60:	f001 f95e 	bl	800dd20 <rmw_create_publisher>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ca6a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ca6e:	b370      	cbz	r0, 800cace <rcl_publisher_init+0x10a>
 800ca70:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ca74:	f001 fa30 	bl	800ded8 <rmw_publisher_get_actual_qos>
 800ca78:	6823      	ldr	r3, [r4, #0]
 800ca7a:	4607      	mov	r7, r0
 800ca7c:	b9d0      	cbnz	r0, 800cab4 <rcl_publisher_init+0xf0>
 800ca7e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ca82:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ca86:	4629      	mov	r1, r5
 800ca88:	2270      	movs	r2, #112	@ 0x70
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f00e ffcc 	bl	801ba28 <memcpy>
 800ca90:	6832      	ldr	r2, [r6, #0]
 800ca92:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ca96:	9807      	ldr	r0, [sp, #28]
 800ca98:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ca9a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ca9c:	4798      	blx	r3
 800ca9e:	4638      	mov	r0, r7
 800caa0:	b008      	add	sp, #32
 800caa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa6:	270b      	movs	r7, #11
 800caa8:	4638      	mov	r0, r7
 800caaa:	b008      	add	sp, #32
 800caac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab0:	27c8      	movs	r7, #200	@ 0xc8
 800cab2:	e7a0      	b.n	800c9f6 <rcl_publisher_init+0x32>
 800cab4:	b18b      	cbz	r3, 800cada <rcl_publisher_init+0x116>
 800cab6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800caba:	b142      	cbz	r2, 800cace <rcl_publisher_init+0x10a>
 800cabc:	4630      	mov	r0, r6
 800cabe:	f007 fa1b 	bl	8013ef8 <rcl_node_get_rmw_handle>
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cac8:	f001 fa14 	bl	800def4 <rmw_destroy_publisher>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cad0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cad2:	4618      	mov	r0, r3
 800cad4:	4790      	blx	r2
 800cad6:	2300      	movs	r3, #0
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	2701      	movs	r7, #1
 800cadc:	e7db      	b.n	800ca96 <rcl_publisher_init+0xd2>
 800cade:	2867      	cmp	r0, #103	@ 0x67
 800cae0:	d0d9      	beq.n	800ca96 <rcl_publisher_init+0xd2>
 800cae2:	2869      	cmp	r0, #105	@ 0x69
 800cae4:	d003      	beq.n	800caee <rcl_publisher_init+0x12a>
 800cae6:	280a      	cmp	r0, #10
 800cae8:	d1f7      	bne.n	800cada <rcl_publisher_init+0x116>
 800caea:	270a      	movs	r7, #10
 800caec:	e7d3      	b.n	800ca96 <rcl_publisher_init+0xd2>
 800caee:	2767      	movs	r7, #103	@ 0x67
 800caf0:	e7d1      	b.n	800ca96 <rcl_publisher_init+0xd2>
 800caf2:	bf00      	nop

0800caf4 <rcl_publisher_get_default_options>:
 800caf4:	b530      	push	{r4, r5, lr}
 800caf6:	4912      	ldr	r1, [pc, #72]	@ (800cb40 <rcl_publisher_get_default_options+0x4c>)
 800caf8:	b083      	sub	sp, #12
 800cafa:	2250      	movs	r2, #80	@ 0x50
 800cafc:	4604      	mov	r4, r0
 800cafe:	f00e ff93 	bl	801ba28 <memcpy>
 800cb02:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cb06:	f000 ff7b 	bl	800da00 <rcutils_get_default_allocator>
 800cb0a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800cb0e:	f001 f83f 	bl	800db90 <rmw_get_default_publisher_options>
 800cb12:	2500      	movs	r5, #0
 800cb14:	f10d 0007 	add.w	r0, sp, #7
 800cb18:	f88d 5007 	strb.w	r5, [sp, #7]
 800cb1c:	f007 f9f2 	bl	8013f04 <rcl_get_disable_loaned_message>
 800cb20:	b930      	cbnz	r0, 800cb30 <rcl_publisher_get_default_options+0x3c>
 800cb22:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800cb26:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	b003      	add	sp, #12
 800cb2e:	bd30      	pop	{r4, r5, pc}
 800cb30:	f000 ffbe 	bl	800dab0 <rcutils_reset_error>
 800cb34:	4620      	mov	r0, r4
 800cb36:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800cb3a:	b003      	add	sp, #12
 800cb3c:	bd30      	pop	{r4, r5, pc}
 800cb3e:	bf00      	nop
 800cb40:	08021548 	.word	0x08021548

0800cb44 <rcl_publish>:
 800cb44:	b308      	cbz	r0, 800cb8a <rcl_publish+0x46>
 800cb46:	6803      	ldr	r3, [r0, #0]
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	b1c3      	cbz	r3, 800cb80 <rcl_publish+0x3c>
 800cb4e:	4616      	mov	r6, r2
 800cb50:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cb54:	b1a2      	cbz	r2, 800cb80 <rcl_publish+0x3c>
 800cb56:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	f006 fdfc 	bl	8013758 <rcl_context_is_valid>
 800cb60:	b160      	cbz	r0, 800cb7c <rcl_publish+0x38>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cb68:	b150      	cbz	r0, 800cb80 <rcl_publish+0x3c>
 800cb6a:	b165      	cbz	r5, 800cb86 <rcl_publish+0x42>
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f001 f876 	bl	800dc60 <rmw_publish>
 800cb74:	3800      	subs	r0, #0
 800cb76:	bf18      	it	ne
 800cb78:	2001      	movne	r0, #1
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	f000 ff7a 	bl	800da74 <rcutils_error_is_set>
 800cb80:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cb84:	bd70      	pop	{r4, r5, r6, pc}
 800cb86:	200b      	movs	r0, #11
 800cb88:	bd70      	pop	{r4, r5, r6, pc}
 800cb8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cb8e:	4770      	bx	lr

0800cb90 <rcl_publisher_is_valid>:
 800cb90:	b1b0      	cbz	r0, 800cbc0 <rcl_publisher_is_valid+0x30>
 800cb92:	6803      	ldr	r3, [r0, #0]
 800cb94:	b510      	push	{r4, lr}
 800cb96:	4604      	mov	r4, r0
 800cb98:	b183      	cbz	r3, 800cbbc <rcl_publisher_is_valid+0x2c>
 800cb9a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cb9e:	b16a      	cbz	r2, 800cbbc <rcl_publisher_is_valid+0x2c>
 800cba0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cba4:	f006 fdd8 	bl	8013758 <rcl_context_is_valid>
 800cba8:	b130      	cbz	r0, 800cbb8 <rcl_publisher_is_valid+0x28>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cbb0:	3800      	subs	r0, #0
 800cbb2:	bf18      	it	ne
 800cbb4:	2001      	movne	r0, #1
 800cbb6:	bd10      	pop	{r4, pc}
 800cbb8:	f000 ff5c 	bl	800da74 <rcutils_error_is_set>
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	bd10      	pop	{r4, pc}
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	4770      	bx	lr

0800cbc4 <rcl_publisher_is_valid_except_context>:
 800cbc4:	b130      	cbz	r0, 800cbd4 <rcl_publisher_is_valid_except_context+0x10>
 800cbc6:	6800      	ldr	r0, [r0, #0]
 800cbc8:	b120      	cbz	r0, 800cbd4 <rcl_publisher_is_valid_except_context+0x10>
 800cbca:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800cbce:	3800      	subs	r0, #0
 800cbd0:	bf18      	it	ne
 800cbd2:	2001      	movne	r0, #1
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop

0800cbd8 <_rclc_check_for_new_data>:
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d046      	beq.n	800cc6a <_rclc_check_for_new_data+0x92>
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	7802      	ldrb	r2, [r0, #0]
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2a0a      	cmp	r2, #10
 800cbe6:	d842      	bhi.n	800cc6e <_rclc_check_for_new_data+0x96>
 800cbe8:	e8df f002 	tbb	[pc, r2]
 800cbec:	14181212 	.word	0x14181212
 800cbf0:	06060614 	.word	0x06060614
 800cbf4:	2e1a      	.short	0x2e1a
 800cbf6:	16          	.byte	0x16
 800cbf7:	00          	.byte	0x00
 800cbf8:	6a0a      	ldr	r2, [r1, #32]
 800cbfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cbfc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cc00:	3a00      	subs	r2, #0
 800cc02:	bf18      	it	ne
 800cc04:	2201      	movne	r2, #1
 800cc06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	b004      	add	sp, #16
 800cc0e:	bd10      	pop	{r4, pc}
 800cc10:	680a      	ldr	r2, [r1, #0]
 800cc12:	e7f2      	b.n	800cbfa <_rclc_check_for_new_data+0x22>
 800cc14:	698a      	ldr	r2, [r1, #24]
 800cc16:	e7f0      	b.n	800cbfa <_rclc_check_for_new_data+0x22>
 800cc18:	688a      	ldr	r2, [r1, #8]
 800cc1a:	e7ee      	b.n	800cbfa <_rclc_check_for_new_data+0x22>
 800cc1c:	690a      	ldr	r2, [r1, #16]
 800cc1e:	e7ec      	b.n	800cbfa <_rclc_check_for_new_data+0x22>
 800cc20:	685c      	ldr	r4, [r3, #4]
 800cc22:	4608      	mov	r0, r1
 800cc24:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cc28:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cc2c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cc30:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cc3a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cc3e:	f104 0110 	add.w	r1, r4, #16
 800cc42:	f009 f86d 	bl	8015d20 <rcl_action_client_wait_set_get_entities_ready>
 800cc46:	e7e1      	b.n	800cc0c <_rclc_check_for_new_data+0x34>
 800cc48:	685c      	ldr	r4, [r3, #4]
 800cc4a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800cc4e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800cc52:	e9cd 3200 	strd	r3, r2, [sp]
 800cc56:	4608      	mov	r0, r1
 800cc58:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cc5c:	f104 0220 	add.w	r2, r4, #32
 800cc60:	f104 0110 	add.w	r1, r4, #16
 800cc64:	f009 fa5e 	bl	8016124 <rcl_action_server_wait_set_get_entities_ready>
 800cc68:	e7d0      	b.n	800cc0c <_rclc_check_for_new_data+0x34>
 800cc6a:	200b      	movs	r0, #11
 800cc6c:	4770      	bx	lr
 800cc6e:	2001      	movs	r0, #1
 800cc70:	e7cc      	b.n	800cc0c <_rclc_check_for_new_data+0x34>
 800cc72:	bf00      	nop

0800cc74 <_rclc_take_new_data>:
 800cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc76:	b099      	sub	sp, #100	@ 0x64
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	f000 8082 	beq.w	800cd82 <_rclc_take_new_data+0x10e>
 800cc7e:	7803      	ldrb	r3, [r0, #0]
 800cc80:	4604      	mov	r4, r0
 800cc82:	2b0a      	cmp	r3, #10
 800cc84:	f200 815d 	bhi.w	800cf42 <_rclc_take_new_data+0x2ce>
 800cc88:	e8df f003 	tbb	[pc, r3]
 800cc8c:	31531f1f 	.word	0x31531f1f
 800cc90:	06060631 	.word	0x06060631
 800cc94:	4555      	.short	0x4555
 800cc96:	53          	.byte	0x53
 800cc97:	00          	.byte	0x00
 800cc98:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cc9a:	6a0b      	ldr	r3, [r1, #32]
 800cc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d046      	beq.n	800cd32 <_rclc_take_new_data+0xbe>
 800cca4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cca8:	f104 0110 	add.w	r1, r4, #16
 800ccac:	f007 fa40 	bl	8014130 <rcl_take_request>
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d03d      	beq.n	800cd32 <_rclc_take_new_data+0xbe>
 800ccb6:	f240 2359 	movw	r3, #601	@ 0x259
 800ccba:	4298      	cmp	r0, r3
 800ccbc:	d128      	bne.n	800cd10 <_rclc_take_new_data+0x9c>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	b019      	add	sp, #100	@ 0x64
 800ccc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccca:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cccc:	680b      	ldr	r3, [r1, #0]
 800ccce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd2:	b373      	cbz	r3, 800cd32 <_rclc_take_new_data+0xbe>
 800ccd4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	aa0a      	add	r2, sp, #40	@ 0x28
 800ccdc:	f007 fbfc 	bl	80144d8 <rcl_take>
 800cce0:	4605      	mov	r5, r0
 800cce2:	b330      	cbz	r0, 800cd32 <_rclc_take_new_data+0xbe>
 800cce4:	f240 1391 	movw	r3, #401	@ 0x191
 800cce8:	4298      	cmp	r0, r3
 800ccea:	d0e8      	beq.n	800ccbe <_rclc_take_new_data+0x4a>
 800ccec:	e010      	b.n	800cd10 <_rclc_take_new_data+0x9c>
 800ccee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ccf0:	698b      	ldr	r3, [r1, #24]
 800ccf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf6:	b1e3      	cbz	r3, 800cd32 <_rclc_take_new_data+0xbe>
 800ccf8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ccfc:	f104 0110 	add.w	r1, r4, #16
 800cd00:	f006 fc9a 	bl	8013638 <rcl_take_response>
 800cd04:	4605      	mov	r5, r0
 800cd06:	b1a0      	cbz	r0, 800cd32 <_rclc_take_new_data+0xbe>
 800cd08:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cd0c:	4298      	cmp	r0, r3
 800cd0e:	d0d9      	beq.n	800ccc4 <_rclc_take_new_data+0x50>
 800cd10:	f000 fece 	bl	800dab0 <rcutils_reset_error>
 800cd14:	e7d6      	b.n	800ccc4 <_rclc_take_new_data+0x50>
 800cd16:	6840      	ldr	r0, [r0, #4]
 800cd18:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d15f      	bne.n	800cde0 <_rclc_take_new_data+0x16c>
 800cd20:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d179      	bne.n	800ce1c <_rclc_take_new_data+0x1a8>
 800cd28:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f040 8096 	bne.w	800ce5e <_rclc_take_new_data+0x1ea>
 800cd32:	2500      	movs	r5, #0
 800cd34:	e7c6      	b.n	800ccc4 <_rclc_take_new_data+0x50>
 800cd36:	6840      	ldr	r0, [r0, #4]
 800cd38:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d138      	bne.n	800cdb2 <_rclc_take_new_data+0x13e>
 800cd40:	69c3      	ldr	r3, [r0, #28]
 800cd42:	b113      	cbz	r3, 800cd4a <_rclc_take_new_data+0xd6>
 800cd44:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cd48:	b9fb      	cbnz	r3, 800cd8a <_rclc_take_new_data+0x116>
 800cd4a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 80a8 	bne.w	800cea4 <_rclc_take_new_data+0x230>
 800cd54:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0ea      	beq.n	800cd32 <_rclc_take_new_data+0xbe>
 800cd5c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cd5e:	a90a      	add	r1, sp, #40	@ 0x28
 800cd60:	3010      	adds	r0, #16
 800cd62:	f008 fec1 	bl	8015ae8 <rcl_action_take_result_response>
 800cd66:	4605      	mov	r5, r0
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d1d1      	bne.n	800cd10 <_rclc_take_new_data+0x9c>
 800cd6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd70:	6860      	ldr	r0, [r4, #4]
 800cd72:	f009 fb01 	bl	8016378 <rclc_action_find_handle_by_result_request_sequence_number>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d0db      	beq.n	800cd32 <_rclc_take_new_data+0xbe>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800cd80:	e7d7      	b.n	800cd32 <_rclc_take_new_data+0xbe>
 800cd82:	250b      	movs	r5, #11
 800cd84:	4628      	mov	r0, r5
 800cd86:	b019      	add	sp, #100	@ 0x64
 800cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cd8c:	3010      	adds	r0, #16
 800cd8e:	f008 ff27 	bl	8015be0 <rcl_action_take_feedback>
 800cd92:	4605      	mov	r5, r0
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d1bb      	bne.n	800cd10 <_rclc_take_new_data+0x9c>
 800cd98:	6860      	ldr	r0, [r4, #4]
 800cd9a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cd9c:	f009 faaa 	bl	80162f4 <rclc_action_find_goal_handle_by_uuid>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2800      	cmp	r0, #0
 800cda4:	f000 80c4 	beq.w	800cf30 <_rclc_take_new_data+0x2bc>
 800cda8:	2201      	movs	r2, #1
 800cdaa:	6860      	ldr	r0, [r4, #4]
 800cdac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800cdb0:	e7cb      	b.n	800cd4a <_rclc_take_new_data+0xd6>
 800cdb2:	aa04      	add	r2, sp, #16
 800cdb4:	a90a      	add	r1, sp, #40	@ 0x28
 800cdb6:	3010      	adds	r0, #16
 800cdb8:	f008 fe26 	bl	8015a08 <rcl_action_take_goal_response>
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d1a6      	bne.n	800cd10 <_rclc_take_new_data+0x9c>
 800cdc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cdc6:	6860      	ldr	r0, [r4, #4]
 800cdc8:	f009 fac4 	bl	8016354 <rclc_action_find_handle_by_goal_request_sequence_number>
 800cdcc:	b130      	cbz	r0, 800cddc <_rclc_take_new_data+0x168>
 800cdce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cdd2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f880 2020 	strb.w	r2, [r0, #32]
 800cddc:	6860      	ldr	r0, [r4, #4]
 800cdde:	e7af      	b.n	800cd40 <_rclc_take_new_data+0xcc>
 800cde0:	f009 fa62 	bl	80162a8 <rclc_action_take_goal_handle>
 800cde4:	4606      	mov	r6, r0
 800cde6:	6860      	ldr	r0, [r4, #4]
 800cde8:	2e00      	cmp	r6, #0
 800cdea:	d099      	beq.n	800cd20 <_rclc_take_new_data+0xac>
 800cdec:	6070      	str	r0, [r6, #4]
 800cdee:	69f2      	ldr	r2, [r6, #28]
 800cdf0:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800cdf4:	3010      	adds	r0, #16
 800cdf6:	f009 f823 	bl	8015e40 <rcl_action_take_goal_request>
 800cdfa:	4605      	mov	r5, r0
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	f040 8099 	bne.w	800cf34 <_rclc_take_new_data+0x2c0>
 800ce02:	69f7      	ldr	r7, [r6, #28]
 800ce04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce06:	7235      	strb	r5, [r6, #8]
 800ce08:	f8c6 0009 	str.w	r0, [r6, #9]
 800ce0c:	f8c6 100d 	str.w	r1, [r6, #13]
 800ce10:	6860      	ldr	r0, [r4, #4]
 800ce12:	f8c6 2011 	str.w	r2, [r6, #17]
 800ce16:	f8c6 3015 	str.w	r3, [r6, #21]
 800ce1a:	e781      	b.n	800cd20 <_rclc_take_new_data+0xac>
 800ce1c:	aa04      	add	r2, sp, #16
 800ce1e:	3010      	adds	r0, #16
 800ce20:	a90a      	add	r1, sp, #40	@ 0x28
 800ce22:	f009 f87d 	bl	8015f20 <rcl_action_take_result_request>
 800ce26:	4605      	mov	r5, r0
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	f47f af71 	bne.w	800cd10 <_rclc_take_new_data+0x9c>
 800ce2e:	6860      	ldr	r0, [r4, #4]
 800ce30:	a904      	add	r1, sp, #16
 800ce32:	f009 fa5f 	bl	80162f4 <rclc_action_find_goal_handle_by_uuid>
 800ce36:	4607      	mov	r7, r0
 800ce38:	b160      	cbz	r0, 800ce54 <_rclc_take_new_data+0x1e0>
 800ce3a:	ad0a      	add	r5, sp, #40	@ 0x28
 800ce3c:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ce40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce44:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce48:	f04f 0c02 	mov.w	ip, #2
 800ce4c:	e886 0003 	stmia.w	r6, {r0, r1}
 800ce50:	f887 c008 	strb.w	ip, [r7, #8]
 800ce54:	6860      	ldr	r0, [r4, #4]
 800ce56:	2300      	movs	r3, #0
 800ce58:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ce5c:	e764      	b.n	800cd28 <_rclc_take_new_data+0xb4>
 800ce5e:	ae04      	add	r6, sp, #16
 800ce60:	aa0a      	add	r2, sp, #40	@ 0x28
 800ce62:	3010      	adds	r0, #16
 800ce64:	4631      	mov	r1, r6
 800ce66:	f009 f899 	bl	8015f9c <rcl_action_take_cancel_request>
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	f47f af4f 	bne.w	800cd10 <_rclc_take_new_data+0x9c>
 800ce72:	6860      	ldr	r0, [r4, #4]
 800ce74:	a90a      	add	r1, sp, #40	@ 0x28
 800ce76:	f009 fa3d 	bl	80162f4 <rclc_action_find_goal_handle_by_uuid>
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d04c      	beq.n	800cf1a <_rclc_take_new_data+0x2a6>
 800ce80:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ce84:	2101      	movs	r1, #1
 800ce86:	f009 f9bd 	bl	8016204 <rcl_action_transition_goal_state>
 800ce8a:	2803      	cmp	r0, #3
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	d139      	bne.n	800cf04 <_rclc_take_new_data+0x290>
 800ce90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce92:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800ce96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce98:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ce9c:	e884 0003 	stmia.w	r4, {r0, r1}
 800cea0:	722f      	strb	r7, [r5, #8]
 800cea2:	e746      	b.n	800cd32 <_rclc_take_new_data+0xbe>
 800cea4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800cea8:	a90a      	add	r1, sp, #40	@ 0x28
 800ceaa:	3010      	adds	r0, #16
 800ceac:	f008 fe5a 	bl	8015b64 <rcl_action_take_cancel_response>
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f47f af2c 	bne.w	800cd10 <_rclc_take_new_data+0x9c>
 800ceb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cebc:	6860      	ldr	r0, [r4, #4]
 800cebe:	f009 fa6d 	bl	801639c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800cec2:	4606      	mov	r6, r0
 800cec4:	6860      	ldr	r0, [r4, #4]
 800cec6:	2e00      	cmp	r6, #0
 800cec8:	f43f af44 	beq.w	800cd54 <_rclc_take_new_data+0xe0>
 800cecc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cece:	2701      	movs	r7, #1
 800ced0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f43f af3e 	beq.w	800cd54 <_rclc_take_new_data+0xe0>
 800ced8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ceda:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cede:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cee2:	f009 fa07 	bl	80162f4 <rclc_action_find_goal_handle_by_uuid>
 800cee6:	b138      	cbz	r0, 800cef8 <_rclc_take_new_data+0x284>
 800cee8:	6860      	ldr	r0, [r4, #4]
 800ceea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ceec:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800cef0:	3501      	adds	r5, #1
 800cef2:	42ab      	cmp	r3, r5
 800cef4:	d8f0      	bhi.n	800ced8 <_rclc_take_new_data+0x264>
 800cef6:	e72d      	b.n	800cd54 <_rclc_take_new_data+0xe0>
 800cef8:	6860      	ldr	r0, [r4, #4]
 800cefa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cefc:	3501      	adds	r5, #1
 800cefe:	42ab      	cmp	r3, r5
 800cf00:	d8ea      	bhi.n	800ced8 <_rclc_take_new_data+0x264>
 800cf02:	e727      	b.n	800cd54 <_rclc_take_new_data+0xe0>
 800cf04:	ab06      	add	r3, sp, #24
 800cf06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf08:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cf0c:	2103      	movs	r1, #3
 800cf0e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cf12:	6860      	ldr	r0, [r4, #4]
 800cf14:	f009 fab8 	bl	8016488 <rclc_action_server_goal_cancel_reject>
 800cf18:	e70b      	b.n	800cd32 <_rclc_take_new_data+0xbe>
 800cf1a:	ab06      	add	r3, sp, #24
 800cf1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf1e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cf22:	2102      	movs	r1, #2
 800cf24:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cf28:	6860      	ldr	r0, [r4, #4]
 800cf2a:	f009 faad 	bl	8016488 <rclc_action_server_goal_cancel_reject>
 800cf2e:	e700      	b.n	800cd32 <_rclc_take_new_data+0xbe>
 800cf30:	6860      	ldr	r0, [r4, #4]
 800cf32:	e70a      	b.n	800cd4a <_rclc_take_new_data+0xd6>
 800cf34:	6860      	ldr	r0, [r4, #4]
 800cf36:	4631      	mov	r1, r6
 800cf38:	f009 f9c6 	bl	80162c8 <rclc_action_remove_used_goal_handle>
 800cf3c:	f000 fdb8 	bl	800dab0 <rcutils_reset_error>
 800cf40:	e6c0      	b.n	800ccc4 <_rclc_take_new_data+0x50>
 800cf42:	2501      	movs	r5, #1
 800cf44:	e6be      	b.n	800ccc4 <_rclc_take_new_data+0x50>
 800cf46:	bf00      	nop

0800cf48 <rclc_executor_trigger_any>:
 800cf48:	4603      	mov	r3, r0
 800cf4a:	b370      	cbz	r0, 800cfaa <rclc_executor_trigger_any+0x62>
 800cf4c:	b379      	cbz	r1, 800cfae <rclc_executor_trigger_any+0x66>
 800cf4e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800cf52:	2200      	movs	r2, #0
 800cf54:	b350      	cbz	r0, 800cfac <rclc_executor_trigger_any+0x64>
 800cf56:	b430      	push	{r4, r5}
 800cf58:	f893 c000 	ldrb.w	ip, [r3]
 800cf5c:	f1bc 0f08 	cmp.w	ip, #8
 800cf60:	d017      	beq.n	800cf92 <rclc_executor_trigger_any+0x4a>
 800cf62:	f1bc 0f09 	cmp.w	ip, #9
 800cf66:	d00d      	beq.n	800cf84 <rclc_executor_trigger_any+0x3c>
 800cf68:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cf6c:	b940      	cbnz	r0, 800cf80 <rclc_executor_trigger_any+0x38>
 800cf6e:	3201      	adds	r2, #1
 800cf70:	4291      	cmp	r1, r2
 800cf72:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cf76:	d003      	beq.n	800cf80 <rclc_executor_trigger_any+0x38>
 800cf78:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d1eb      	bne.n	800cf58 <rclc_executor_trigger_any+0x10>
 800cf80:	bc30      	pop	{r4, r5}
 800cf82:	4770      	bx	lr
 800cf84:	685c      	ldr	r4, [r3, #4]
 800cf86:	6a25      	ldr	r5, [r4, #32]
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	d1f9      	bne.n	800cf80 <rclc_executor_trigger_any+0x38>
 800cf8c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cf90:	e7ec      	b.n	800cf6c <rclc_executor_trigger_any+0x24>
 800cf92:	685c      	ldr	r4, [r3, #4]
 800cf94:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cf96:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cf9a:	d1f1      	bne.n	800cf80 <rclc_executor_trigger_any+0x38>
 800cf9c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d1ed      	bne.n	800cf80 <rclc_executor_trigger_any+0x38>
 800cfa4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cfa8:	e7e0      	b.n	800cf6c <rclc_executor_trigger_any+0x24>
 800cfaa:	4770      	bx	lr
 800cfac:	4770      	bx	lr
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop

0800cfb4 <_rclc_execute>:
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	f000 80dc 	beq.w	800d172 <_rclc_execute+0x1be>
 800cfba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfbc:	7843      	ldrb	r3, [r0, #1]
 800cfbe:	b087      	sub	sp, #28
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	b123      	cbz	r3, 800cfce <_rclc_execute+0x1a>
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d01c      	beq.n	800d002 <_rclc_execute+0x4e>
 800cfc8:	2000      	movs	r0, #0
 800cfca:	b007      	add	sp, #28
 800cfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfce:	7803      	ldrb	r3, [r0, #0]
 800cfd0:	2b08      	cmp	r3, #8
 800cfd2:	f000 80a0 	beq.w	800d116 <_rclc_execute+0x162>
 800cfd6:	2b09      	cmp	r3, #9
 800cfd8:	d024      	beq.n	800d024 <_rclc_execute+0x70>
 800cfda:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d0f2      	beq.n	800cfc8 <_rclc_execute+0x14>
 800cfe2:	2b0a      	cmp	r3, #10
 800cfe4:	f200 815a 	bhi.w	800d29c <_rclc_execute+0x2e8>
 800cfe8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cfec:	008e006f 	.word	0x008e006f
 800cff0:	006f007c 	.word	0x006f007c
 800cff4:	00590073 	.word	0x00590073
 800cff8:	00590059 	.word	0x00590059
 800cffc:	01580158 	.word	0x01580158
 800d000:	0079      	.short	0x0079
 800d002:	7803      	ldrb	r3, [r0, #0]
 800d004:	2b0a      	cmp	r3, #10
 800d006:	f200 8149 	bhi.w	800d29c <_rclc_execute+0x2e8>
 800d00a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d00e:	00f9      	.short	0x00f9
 800d010:	006b007b 	.word	0x006b007b
 800d014:	0062005e 	.word	0x0062005e
 800d018:	00480048 	.word	0x00480048
 800d01c:	01000048 	.word	0x01000048
 800d020:	00680102 	.word	0x00680102
 800d024:	6840      	ldr	r0, [r0, #4]
 800d026:	6a02      	ldr	r2, [r0, #32]
 800d028:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	f040 80f3 	bne.w	800d218 <_rclc_execute+0x264>
 800d032:	2b00      	cmp	r3, #0
 800d034:	d0c8      	beq.n	800cfc8 <_rclc_execute+0x14>
 800d036:	e003      	b.n	800d040 <_rclc_execute+0x8c>
 800d038:	6858      	ldr	r0, [r3, #4]
 800d03a:	f009 f945 	bl	80162c8 <rclc_action_remove_used_goal_handle>
 800d03e:	6860      	ldr	r0, [r4, #4]
 800d040:	f009 f97c 	bl	801633c <rclc_action_find_first_terminated_handle>
 800d044:	4603      	mov	r3, r0
 800d046:	4601      	mov	r1, r0
 800d048:	2800      	cmp	r0, #0
 800d04a:	d1f5      	bne.n	800d038 <_rclc_execute+0x84>
 800d04c:	6860      	ldr	r0, [r4, #4]
 800d04e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800d052:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80eb 	beq.w	800d232 <_rclc_execute+0x27e>
 800d05c:	f241 0604 	movw	r6, #4100	@ 0x1004
 800d060:	2701      	movs	r7, #1
 800d062:	e007      	b.n	800d074 <_rclc_execute+0xc0>
 800d064:	4628      	mov	r0, r5
 800d066:	f009 f9c3 	bl	80163f0 <rclc_action_server_response_goal_request>
 800d06a:	6860      	ldr	r0, [r4, #4]
 800d06c:	4629      	mov	r1, r5
 800d06e:	f009 f92b 	bl	80162c8 <rclc_action_remove_used_goal_handle>
 800d072:	6860      	ldr	r0, [r4, #4]
 800d074:	2100      	movs	r1, #0
 800d076:	f009 f955 	bl	8016324 <rclc_action_find_first_handle_by_status>
 800d07a:	4605      	mov	r5, r0
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f000 80d5 	beq.w	800d22c <_rclc_execute+0x278>
 800d082:	6863      	ldr	r3, [r4, #4]
 800d084:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	4798      	blx	r3
 800d08a:	42b0      	cmp	r0, r6
 800d08c:	f04f 0100 	mov.w	r1, #0
 800d090:	d1e8      	bne.n	800d064 <_rclc_execute+0xb0>
 800d092:	2101      	movs	r1, #1
 800d094:	4628      	mov	r0, r5
 800d096:	f009 f9ab 	bl	80163f0 <rclc_action_server_response_goal_request>
 800d09a:	722f      	strb	r7, [r5, #8]
 800d09c:	e7e9      	b.n	800d072 <_rclc_execute+0xbe>
 800d09e:	2b06      	cmp	r3, #6
 800d0a0:	68a0      	ldr	r0, [r4, #8]
 800d0a2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d0a4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800d0a6:	f000 80bb 	beq.w	800d220 <_rclc_execute+0x26c>
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	f000 80f1 	beq.w	800d292 <_rclc_execute+0x2de>
 800d0b0:	47b0      	blx	r6
 800d0b2:	f104 0510 	add.w	r5, r4, #16
 800d0b6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d0b8:	6860      	ldr	r0, [r4, #4]
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	f007 f888 	bl	80141d0 <rcl_send_response>
 800d0c0:	2802      	cmp	r0, #2
 800d0c2:	d117      	bne.n	800d0f4 <_rclc_execute+0x140>
 800d0c4:	f000 fcf4 	bl	800dab0 <rcutils_reset_error>
 800d0c8:	e77e      	b.n	800cfc8 <_rclc_execute+0x14>
 800d0ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d0cc:	68a0      	ldr	r0, [r4, #8]
 800d0ce:	4798      	blx	r3
 800d0d0:	e77a      	b.n	800cfc8 <_rclc_execute+0x14>
 800d0d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d0d4:	68a0      	ldr	r0, [r4, #8]
 800d0d6:	f104 0110 	add.w	r1, r4, #16
 800d0da:	4798      	blx	r3
 800d0dc:	e774      	b.n	800cfc8 <_rclc_execute+0x14>
 800d0de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d0e0:	4798      	blx	r3
 800d0e2:	e771      	b.n	800cfc8 <_rclc_execute+0x14>
 800d0e4:	6860      	ldr	r0, [r4, #4]
 800d0e6:	f007 fd3b 	bl	8014b60 <rcl_timer_call>
 800d0ea:	f240 3321 	movw	r3, #801	@ 0x321
 800d0ee:	4298      	cmp	r0, r3
 800d0f0:	f43f af6a 	beq.w	800cfc8 <_rclc_execute+0x14>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	f43f af68 	beq.w	800cfca <_rclc_execute+0x16>
 800d0fa:	9005      	str	r0, [sp, #20]
 800d0fc:	f000 fcd8 	bl	800dab0 <rcutils_reset_error>
 800d100:	9805      	ldr	r0, [sp, #20]
 800d102:	e762      	b.n	800cfca <_rclc_execute+0x16>
 800d104:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800d108:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d0e4      	beq.n	800d0da <_rclc_execute+0x126>
 800d110:	68a0      	ldr	r0, [r4, #8]
 800d112:	4798      	blx	r3
 800d114:	e758      	b.n	800cfc8 <_rclc_execute+0x14>
 800d116:	6840      	ldr	r0, [r0, #4]
 800d118:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d11a:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800d11e:	d107      	bne.n	800d130 <_rclc_execute+0x17c>
 800d120:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d124:	b923      	cbnz	r3, 800d130 <_rclc_execute+0x17c>
 800d126:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f43f af4c 	beq.w	800cfc8 <_rclc_execute+0x14>
 800d130:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d134:	b303      	cbz	r3, 800d178 <_rclc_execute+0x1c4>
 800d136:	2600      	movs	r6, #0
 800d138:	2701      	movs	r7, #1
 800d13a:	e004      	b.n	800d146 <_rclc_execute+0x192>
 800d13c:	f009 f88e 	bl	801625c <rclc_action_send_result_request>
 800d140:	b990      	cbnz	r0, 800d168 <_rclc_execute+0x1b4>
 800d142:	722f      	strb	r7, [r5, #8]
 800d144:	6860      	ldr	r0, [r4, #4]
 800d146:	f009 f93b 	bl	80163c0 <rclc_action_find_first_handle_with_goal_response>
 800d14a:	4605      	mov	r5, r0
 800d14c:	b198      	cbz	r0, 800d176 <_rclc_execute+0x1c2>
 800d14e:	6863      	ldr	r3, [r4, #4]
 800d150:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d158:	f885 6020 	strb.w	r6, [r5, #32]
 800d15c:	4798      	blx	r3
 800d15e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d162:	4628      	mov	r0, r5
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e9      	bne.n	800d13c <_rclc_execute+0x188>
 800d168:	6860      	ldr	r0, [r4, #4]
 800d16a:	4629      	mov	r1, r5
 800d16c:	f009 f8ac 	bl	80162c8 <rclc_action_remove_used_goal_handle>
 800d170:	e7e8      	b.n	800d144 <_rclc_execute+0x190>
 800d172:	200b      	movs	r0, #11
 800d174:	4770      	bx	lr
 800d176:	6860      	ldr	r0, [r4, #4]
 800d178:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d17c:	b18b      	cbz	r3, 800d1a2 <_rclc_execute+0x1ee>
 800d17e:	68c5      	ldr	r5, [r0, #12]
 800d180:	b32d      	cbz	r5, 800d1ce <_rclc_execute+0x21a>
 800d182:	2600      	movs	r6, #0
 800d184:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d188:	b143      	cbz	r3, 800d19c <_rclc_execute+0x1e8>
 800d18a:	69c3      	ldr	r3, [r0, #28]
 800d18c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d190:	b123      	cbz	r3, 800d19c <_rclc_execute+0x1e8>
 800d192:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d194:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d196:	4628      	mov	r0, r5
 800d198:	4798      	blx	r3
 800d19a:	6860      	ldr	r0, [r4, #4]
 800d19c:	682d      	ldr	r5, [r5, #0]
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	d1f0      	bne.n	800d184 <_rclc_execute+0x1d0>
 800d1a2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d1a6:	b193      	cbz	r3, 800d1ce <_rclc_execute+0x21a>
 800d1a8:	68c5      	ldr	r5, [r0, #12]
 800d1aa:	b185      	cbz	r5, 800d1ce <_rclc_execute+0x21a>
 800d1ac:	2600      	movs	r6, #0
 800d1ae:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d1b2:	b14b      	cbz	r3, 800d1c8 <_rclc_execute+0x214>
 800d1b4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d1b6:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d1ba:	b12b      	cbz	r3, 800d1c8 <_rclc_execute+0x214>
 800d1bc:	4628      	mov	r0, r5
 800d1be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d1c0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d1c4:	4798      	blx	r3
 800d1c6:	6860      	ldr	r0, [r4, #4]
 800d1c8:	682d      	ldr	r5, [r5, #0]
 800d1ca:	2d00      	cmp	r5, #0
 800d1cc:	d1ef      	bne.n	800d1ae <_rclc_execute+0x1fa>
 800d1ce:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f43f aef8 	beq.w	800cfc8 <_rclc_execute+0x14>
 800d1d8:	2700      	movs	r7, #0
 800d1da:	e00b      	b.n	800d1f4 <_rclc_execute+0x240>
 800d1dc:	6863      	ldr	r3, [r4, #4]
 800d1de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d1e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d1e2:	6a1e      	ldr	r6, [r3, #32]
 800d1e4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d1e8:	47b0      	blx	r6
 800d1ea:	6860      	ldr	r0, [r4, #4]
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	f009 f86b 	bl	80162c8 <rclc_action_remove_used_goal_handle>
 800d1f2:	6860      	ldr	r0, [r4, #4]
 800d1f4:	f009 f8f0 	bl	80163d8 <rclc_action_find_first_handle_with_result_response>
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	d1ee      	bne.n	800d1dc <_rclc_execute+0x228>
 800d1fe:	e6e3      	b.n	800cfc8 <_rclc_execute+0x14>
 800d200:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800d204:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d206:	2800      	cmp	r0, #0
 800d208:	f43f af61 	beq.w	800d0ce <_rclc_execute+0x11a>
 800d20c:	e75e      	b.n	800d0cc <_rclc_execute+0x118>
 800d20e:	6840      	ldr	r0, [r0, #4]
 800d210:	e78e      	b.n	800d130 <_rclc_execute+0x17c>
 800d212:	6840      	ldr	r0, [r0, #4]
 800d214:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f43f af1a 	beq.w	800d052 <_rclc_execute+0x9e>
 800d21e:	e70f      	b.n	800d040 <_rclc_execute+0x8c>
 800d220:	f104 0510 	add.w	r5, r4, #16
 800d224:	460a      	mov	r2, r1
 800d226:	4629      	mov	r1, r5
 800d228:	47b0      	blx	r6
 800d22a:	e744      	b.n	800d0b6 <_rclc_execute+0x102>
 800d22c:	6860      	ldr	r0, [r4, #4]
 800d22e:	f880 5020 	strb.w	r5, [r0, #32]
 800d232:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d236:	2b00      	cmp	r3, #0
 800d238:	f43f aec6 	beq.w	800cfc8 <_rclc_execute+0x14>
 800d23c:	68c5      	ldr	r5, [r0, #12]
 800d23e:	b325      	cbz	r5, 800d28a <_rclc_execute+0x2d6>
 800d240:	2602      	movs	r6, #2
 800d242:	e001      	b.n	800d248 <_rclc_execute+0x294>
 800d244:	682d      	ldr	r5, [r5, #0]
 800d246:	b305      	cbz	r5, 800d28a <_rclc_execute+0x2d6>
 800d248:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	d1f9      	bne.n	800d244 <_rclc_execute+0x290>
 800d250:	69c3      	ldr	r3, [r0, #28]
 800d252:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d254:	4628      	mov	r0, r5
 800d256:	4798      	blx	r3
 800d258:	4603      	mov	r3, r0
 800d25a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d25e:	4628      	mov	r0, r5
 800d260:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d264:	b11b      	cbz	r3, 800d26e <_rclc_execute+0x2ba>
 800d266:	f009 f8e3 	bl	8016430 <rclc_action_server_goal_cancel_accept>
 800d26a:	6860      	ldr	r0, [r4, #4]
 800d26c:	e7ea      	b.n	800d244 <_rclc_execute+0x290>
 800d26e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d270:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d274:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d27c:	6860      	ldr	r0, [r4, #4]
 800d27e:	2101      	movs	r1, #1
 800d280:	f009 f902 	bl	8016488 <rclc_action_server_goal_cancel_reject>
 800d284:	722e      	strb	r6, [r5, #8]
 800d286:	6860      	ldr	r0, [r4, #4]
 800d288:	e7dc      	b.n	800d244 <_rclc_execute+0x290>
 800d28a:	2300      	movs	r3, #0
 800d28c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d290:	e69a      	b.n	800cfc8 <_rclc_execute+0x14>
 800d292:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d294:	47b0      	blx	r6
 800d296:	f104 0510 	add.w	r5, r4, #16
 800d29a:	e70c      	b.n	800d0b6 <_rclc_execute+0x102>
 800d29c:	2001      	movs	r0, #1
 800d29e:	e694      	b.n	800cfca <_rclc_execute+0x16>

0800d2a0 <rclc_executor_init>:
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d05a      	beq.n	800d35a <rclc_executor_init+0xba>
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	b0b2      	sub	sp, #200	@ 0xc8
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	d050      	beq.n	800d352 <rclc_executor_init+0xb2>
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	4616      	mov	r6, r2
 800d2b6:	461f      	mov	r7, r3
 800d2b8:	f000 fbce 	bl	800da58 <rcutils_allocator_is_valid>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d048      	beq.n	800d352 <rclc_executor_init+0xb2>
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	d046      	beq.n	800d352 <rclc_executor_init+0xb2>
 800d2c4:	492a      	ldr	r1, [pc, #168]	@ (800d370 <rclc_executor_init+0xd0>)
 800d2c6:	2290      	movs	r2, #144	@ 0x90
 800d2c8:	a80e      	add	r0, sp, #56	@ 0x38
 800d2ca:	f00e fbad 	bl	801ba28 <memcpy>
 800d2ce:	a90e      	add	r1, sp, #56	@ 0x38
 800d2d0:	2290      	movs	r2, #144	@ 0x90
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f00e fba8 	bl	801ba28 <memcpy>
 800d2d8:	6065      	str	r5, [r4, #4]
 800d2da:	4668      	mov	r0, sp
 800d2dc:	60e6      	str	r6, [r4, #12]
 800d2de:	466d      	mov	r5, sp
 800d2e0:	f007 fd30 	bl	8014d44 <rcl_get_zero_initialized_wait_set>
 800d2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2e6:	f104 0c18 	add.w	ip, r4, #24
 800d2ea:	f8d7 8000 	ldr.w	r8, [r7]
 800d2ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2fe:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800d368 <rclc_executor_init+0xc8>
 800d302:	682b      	ldr	r3, [r5, #0]
 800d304:	f8cc 3000 	str.w	r3, [ip]
 800d308:	6939      	ldr	r1, [r7, #16]
 800d30a:	6167      	str	r7, [r4, #20]
 800d30c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800d310:	01b0      	lsls	r0, r6, #6
 800d312:	47c0      	blx	r8
 800d314:	60a0      	str	r0, [r4, #8]
 800d316:	b310      	cbz	r0, 800d35e <rclc_executor_init+0xbe>
 800d318:	2500      	movs	r5, #0
 800d31a:	e000      	b.n	800d31e <rclc_executor_init+0x7e>
 800d31c:	68a0      	ldr	r0, [r4, #8]
 800d31e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800d322:	4631      	mov	r1, r6
 800d324:	3501      	adds	r5, #1
 800d326:	f000 fa25 	bl	800d774 <rclc_executor_handle_init>
 800d32a:	42ae      	cmp	r6, r5
 800d32c:	d1f6      	bne.n	800d31c <rclc_executor_init+0x7c>
 800d32e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800d332:	f000 fa15 	bl	800d760 <rclc_executor_handle_counters_zero_init>
 800d336:	490f      	ldr	r1, [pc, #60]	@ (800d374 <rclc_executor_init+0xd4>)
 800d338:	68a2      	ldr	r2, [r4, #8]
 800d33a:	2300      	movs	r3, #0
 800d33c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800d340:	b12a      	cbz	r2, 800d34e <rclc_executor_init+0xae>
 800d342:	6962      	ldr	r2, [r4, #20]
 800d344:	b11a      	cbz	r2, 800d34e <rclc_executor_init+0xae>
 800d346:	68e2      	ldr	r2, [r4, #12]
 800d348:	b10a      	cbz	r2, 800d34e <rclc_executor_init+0xae>
 800d34a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800d34e:	2000      	movs	r0, #0
 800d350:	e000      	b.n	800d354 <rclc_executor_init+0xb4>
 800d352:	200b      	movs	r0, #11
 800d354:	b032      	add	sp, #200	@ 0xc8
 800d356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35a:	200b      	movs	r0, #11
 800d35c:	4770      	bx	lr
 800d35e:	200a      	movs	r0, #10
 800d360:	e7f8      	b.n	800d354 <rclc_executor_init+0xb4>
 800d362:	bf00      	nop
 800d364:	f3af 8000 	nop.w
 800d368:	3b9aca00 	.word	0x3b9aca00
 800d36c:	00000000 	.word	0x00000000
 800d370:	08021598 	.word	0x08021598
 800d374:	0800cf49 	.word	0x0800cf49

0800d378 <rclc_executor_add_subscription>:
 800d378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d37e:	b338      	cbz	r0, 800d3d0 <rclc_executor_add_subscription+0x58>
 800d380:	b331      	cbz	r1, 800d3d0 <rclc_executor_add_subscription+0x58>
 800d382:	b32a      	cbz	r2, 800d3d0 <rclc_executor_add_subscription+0x58>
 800d384:	b323      	cbz	r3, 800d3d0 <rclc_executor_add_subscription+0x58>
 800d386:	4604      	mov	r4, r0
 800d388:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800d38c:	42a8      	cmp	r0, r5
 800d38e:	d301      	bcc.n	800d394 <rclc_executor_add_subscription+0x1c>
 800d390:	2001      	movs	r0, #1
 800d392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d394:	68a6      	ldr	r6, [r4, #8]
 800d396:	0187      	lsls	r7, r0, #6
 800d398:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d39c:	2500      	movs	r5, #0
 800d39e:	55f5      	strb	r5, [r6, r7]
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d3a6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	f104 0518 	add.w	r5, r4, #24
 800d3b0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d3b4:	f88c e001 	strb.w	lr, [ip, #1]
 800d3b8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d3bc:	6120      	str	r0, [r4, #16]
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f007 fcd4 	bl	8014d6c <rcl_wait_set_is_valid>
 800d3c4:	b930      	cbnz	r0, 800d3d4 <rclc_executor_add_subscription+0x5c>
 800d3c6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d0:	200b      	movs	r0, #11
 800d3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	f007 fccf 	bl	8014d78 <rcl_wait_set_fini>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d0f3      	beq.n	800d3c6 <rclc_executor_add_subscription+0x4e>
 800d3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3e0 <rclc_executor_add_timer>:
 800d3e0:	b300      	cbz	r0, 800d424 <rclc_executor_add_timer+0x44>
 800d3e2:	b1f9      	cbz	r1, 800d424 <rclc_executor_add_timer+0x44>
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	d301      	bcc.n	800d3f4 <rclc_executor_add_timer+0x14>
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	bd38      	pop	{r3, r4, r5, pc}
 800d3f4:	6880      	ldr	r0, [r0, #8]
 800d3f6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d3fa:	019d      	lsls	r5, r3, #6
 800d3fc:	6051      	str	r1, [r2, #4]
 800d3fe:	2102      	movs	r1, #2
 800d400:	5341      	strh	r1, [r0, r5]
 800d402:	3301      	adds	r3, #1
 800d404:	2000      	movs	r0, #0
 800d406:	2101      	movs	r1, #1
 800d408:	f104 0518 	add.w	r5, r4, #24
 800d40c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d40e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d410:	4628      	mov	r0, r5
 800d412:	6123      	str	r3, [r4, #16]
 800d414:	f007 fcaa 	bl	8014d6c <rcl_wait_set_is_valid>
 800d418:	b930      	cbnz	r0, 800d428 <rclc_executor_add_timer+0x48>
 800d41a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d41c:	3301      	adds	r3, #1
 800d41e:	2000      	movs	r0, #0
 800d420:	6523      	str	r3, [r4, #80]	@ 0x50
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	200b      	movs	r0, #11
 800d426:	4770      	bx	lr
 800d428:	4628      	mov	r0, r5
 800d42a:	f007 fca5 	bl	8014d78 <rcl_wait_set_fini>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d0f3      	beq.n	800d41a <rclc_executor_add_timer+0x3a>
 800d432:	bd38      	pop	{r3, r4, r5, pc}

0800d434 <rclc_executor_prepare>:
 800d434:	2800      	cmp	r0, #0
 800d436:	d044      	beq.n	800d4c2 <rclc_executor_prepare+0x8e>
 800d438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43a:	f100 0518 	add.w	r5, r0, #24
 800d43e:	b09b      	sub	sp, #108	@ 0x6c
 800d440:	4604      	mov	r4, r0
 800d442:	4628      	mov	r0, r5
 800d444:	f007 fc92 	bl	8014d6c <rcl_wait_set_is_valid>
 800d448:	b110      	cbz	r0, 800d450 <rclc_executor_prepare+0x1c>
 800d44a:	2000      	movs	r0, #0
 800d44c:	b01b      	add	sp, #108	@ 0x6c
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d450:	4628      	mov	r0, r5
 800d452:	f007 fc91 	bl	8014d78 <rcl_wait_set_fini>
 800d456:	2800      	cmp	r0, #0
 800d458:	d130      	bne.n	800d4bc <rclc_executor_prepare+0x88>
 800d45a:	a80c      	add	r0, sp, #48	@ 0x30
 800d45c:	f007 fc72 	bl	8014d44 <rcl_get_zero_initialized_wait_set>
 800d460:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d468:	46ae      	mov	lr, r5
 800d46a:	6967      	ldr	r7, [r4, #20]
 800d46c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d474:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d478:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d47c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d480:	f8dc 3000 	ldr.w	r3, [ip]
 800d484:	f8ce 3000 	str.w	r3, [lr]
 800d488:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d48a:	ae04      	add	r6, sp, #16
 800d48c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	6862      	ldr	r2, [r4, #4]
 800d492:	6033      	str	r3, [r6, #0]
 800d494:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d496:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800d498:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d49c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800d4a0:	e9cd 2100 	strd	r2, r1, [sp]
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4a8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800d4aa:	f007 ff95 	bl	80153d8 <rcl_wait_set_init>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d0cc      	beq.n	800d44c <rclc_executor_prepare+0x18>
 800d4b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d4b4:	f000 fafc 	bl	800dab0 <rcutils_reset_error>
 800d4b8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d4ba:	e7c7      	b.n	800d44c <rclc_executor_prepare+0x18>
 800d4bc:	f000 faf8 	bl	800dab0 <rcutils_reset_error>
 800d4c0:	e7cb      	b.n	800d45a <rclc_executor_prepare+0x26>
 800d4c2:	200b      	movs	r0, #11
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop

0800d4c8 <rclc_executor_spin_some>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f000 8091 	beq.w	800d5f6 <rclc_executor_spin_some+0x12e>
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	6840      	ldr	r0, [r0, #4]
 800d4d8:	4690      	mov	r8, r2
 800d4da:	4699      	mov	r9, r3
 800d4dc:	f006 f93c 	bl	8013758 <rcl_context_is_valid>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d037      	beq.n	800d554 <rclc_executor_spin_some+0x8c>
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f104 0718 	add.w	r7, r4, #24
 800d4ea:	f7ff ffa3 	bl	800d434 <rclc_executor_prepare>
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	f007 fd26 	bl	8014f40 <rcl_wait_set_clear>
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d177      	bne.n	800d5ea <rclc_executor_spin_some+0x122>
 800d4fa:	68e3      	ldr	r3, [r4, #12]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	b1eb      	cbz	r3, 800d53c <rclc_executor_spin_some+0x74>
 800d500:	68a1      	ldr	r1, [r4, #8]
 800d502:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800d506:	01aa      	lsls	r2, r5, #6
 800d508:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d50c:	b1b3      	cbz	r3, 800d53c <rclc_executor_spin_some+0x74>
 800d50e:	5c8b      	ldrb	r3, [r1, r2]
 800d510:	2b0a      	cmp	r3, #10
 800d512:	d81f      	bhi.n	800d554 <rclc_executor_spin_some+0x8c>
 800d514:	e8df f003 	tbb	[pc, r3]
 800d518:	253e3434 	.word	0x253e3434
 800d51c:	06060625 	.word	0x06060625
 800d520:	525d      	.short	0x525d
 800d522:	48          	.byte	0x48
 800d523:	00          	.byte	0x00
 800d524:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d528:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d52c:	4638      	mov	r0, r7
 800d52e:	f008 f85d 	bl	80155ec <rcl_wait_set_add_service>
 800d532:	b9f8      	cbnz	r0, 800d574 <rclc_executor_spin_some+0xac>
 800d534:	68e3      	ldr	r3, [r4, #12]
 800d536:	3501      	adds	r5, #1
 800d538:	42ab      	cmp	r3, r5
 800d53a:	d8e1      	bhi.n	800d500 <rclc_executor_spin_some+0x38>
 800d53c:	4642      	mov	r2, r8
 800d53e:	464b      	mov	r3, r9
 800d540:	4638      	mov	r0, r7
 800d542:	f008 f881 	bl	8015648 <rcl_wait>
 800d546:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800d54a:	2d00      	cmp	r5, #0
 800d54c:	f000 80ab 	beq.w	800d6a6 <rclc_executor_spin_some+0x1de>
 800d550:	2d01      	cmp	r5, #1
 800d552:	d055      	beq.n	800d600 <rclc_executor_spin_some+0x138>
 800d554:	f000 faac 	bl	800dab0 <rcutils_reset_error>
 800d558:	2601      	movs	r6, #1
 800d55a:	4630      	mov	r0, r6
 800d55c:	b003      	add	sp, #12
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d566:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d56a:	4638      	mov	r0, r7
 800d56c:	f008 f812 	bl	8015594 <rcl_wait_set_add_client>
 800d570:	2800      	cmp	r0, #0
 800d572:	d0df      	beq.n	800d534 <rclc_executor_spin_some+0x6c>
 800d574:	9001      	str	r0, [sp, #4]
 800d576:	f000 fa9b 	bl	800dab0 <rcutils_reset_error>
 800d57a:	9801      	ldr	r0, [sp, #4]
 800d57c:	4606      	mov	r6, r0
 800d57e:	e7ec      	b.n	800d55a <rclc_executor_spin_some+0x92>
 800d580:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d584:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d588:	4638      	mov	r0, r7
 800d58a:	f007 fcad 	bl	8014ee8 <rcl_wait_set_add_subscription>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d0d0      	beq.n	800d534 <rclc_executor_spin_some+0x6c>
 800d592:	e7ef      	b.n	800d574 <rclc_executor_spin_some+0xac>
 800d594:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d598:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d59c:	4638      	mov	r0, r7
 800d59e:	f007 ffc9 	bl	8015534 <rcl_wait_set_add_timer>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0c6      	beq.n	800d534 <rclc_executor_spin_some+0x6c>
 800d5a6:	e7e5      	b.n	800d574 <rclc_executor_spin_some+0xac>
 800d5a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d5ac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d5b0:	4638      	mov	r0, r7
 800d5b2:	f007 ff93 	bl	80154dc <rcl_wait_set_add_guard_condition>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d0bc      	beq.n	800d534 <rclc_executor_spin_some+0x6c>
 800d5ba:	e7db      	b.n	800d574 <rclc_executor_spin_some+0xac>
 800d5bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d5c0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d5c4:	3110      	adds	r1, #16
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	f008 fd5c 	bl	8016084 <rcl_action_wait_set_add_action_server>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d0b1      	beq.n	800d534 <rclc_executor_spin_some+0x6c>
 800d5d0:	e7d0      	b.n	800d574 <rclc_executor_spin_some+0xac>
 800d5d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d5dc:	3110      	adds	r1, #16
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f008 fb3e 	bl	8015c60 <rcl_action_wait_set_add_action_client>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d0a5      	beq.n	800d534 <rclc_executor_spin_some+0x6c>
 800d5e8:	e7c4      	b.n	800d574 <rclc_executor_spin_some+0xac>
 800d5ea:	f000 fa61 	bl	800dab0 <rcutils_reset_error>
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	b003      	add	sp, #12
 800d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f6:	260b      	movs	r6, #11
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	b003      	add	sp, #12
 800d5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d600:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800d604:	4663      	mov	r3, ip
 800d606:	4615      	mov	r5, r2
 800d608:	b1ca      	cbz	r2, 800d63e <rclc_executor_spin_some+0x176>
 800d60a:	2500      	movs	r5, #0
 800d60c:	46a8      	mov	r8, r5
 800d60e:	f240 1991 	movw	r9, #401	@ 0x191
 800d612:	e00c      	b.n	800d62e <rclc_executor_spin_some+0x166>
 800d614:	f7ff fae0 	bl	800cbd8 <_rclc_check_for_new_data>
 800d618:	f108 0801 	add.w	r8, r8, #1
 800d61c:	4605      	mov	r5, r0
 800d61e:	b108      	cbz	r0, 800d624 <rclc_executor_spin_some+0x15c>
 800d620:	4548      	cmp	r0, r9
 800d622:	d13e      	bne.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d624:	68e2      	ldr	r2, [r4, #12]
 800d626:	4590      	cmp	r8, r2
 800d628:	f080 808b 	bcs.w	800d742 <rclc_executor_spin_some+0x27a>
 800d62c:	68a3      	ldr	r3, [r4, #8]
 800d62e:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800d632:	469c      	mov	ip, r3
 800d634:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d638:	4639      	mov	r1, r7
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1ea      	bne.n	800d614 <rclc_executor_spin_some+0x14c>
 800d63e:	4611      	mov	r1, r2
 800d640:	4660      	mov	r0, ip
 800d642:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800d646:	4798      	blx	r3
 800d648:	b358      	cbz	r0, 800d6a2 <rclc_executor_spin_some+0x1da>
 800d64a:	68e3      	ldr	r3, [r4, #12]
 800d64c:	b34b      	cbz	r3, 800d6a2 <rclc_executor_spin_some+0x1da>
 800d64e:	f04f 0800 	mov.w	r8, #0
 800d652:	f240 1991 	movw	r9, #401	@ 0x191
 800d656:	e00a      	b.n	800d66e <rclc_executor_spin_some+0x1a6>
 800d658:	f7ff fb0c 	bl	800cc74 <_rclc_take_new_data>
 800d65c:	f108 0801 	add.w	r8, r8, #1
 800d660:	4605      	mov	r5, r0
 800d662:	b108      	cbz	r0, 800d668 <rclc_executor_spin_some+0x1a0>
 800d664:	4548      	cmp	r0, r9
 800d666:	d11c      	bne.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d668:	68e3      	ldr	r3, [r4, #12]
 800d66a:	4598      	cmp	r8, r3
 800d66c:	d26f      	bcs.n	800d74e <rclc_executor_spin_some+0x286>
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800d674:	4639      	mov	r1, r7
 800d676:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d67a:	2a00      	cmp	r2, #0
 800d67c:	d1ec      	bne.n	800d658 <rclc_executor_spin_some+0x190>
 800d67e:	2700      	movs	r7, #0
 800d680:	e009      	b.n	800d696 <rclc_executor_spin_some+0x1ce>
 800d682:	f7ff fc97 	bl	800cfb4 <_rclc_execute>
 800d686:	3701      	adds	r7, #1
 800d688:	4605      	mov	r5, r0
 800d68a:	b950      	cbnz	r0, 800d6a2 <rclc_executor_spin_some+0x1da>
 800d68c:	68e3      	ldr	r3, [r4, #12]
 800d68e:	429f      	cmp	r7, r3
 800d690:	f4bf af63 	bcs.w	800d55a <rclc_executor_spin_some+0x92>
 800d694:	68a3      	ldr	r3, [r4, #8]
 800d696:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800d69a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1ef      	bne.n	800d682 <rclc_executor_spin_some+0x1ba>
 800d6a2:	462e      	mov	r6, r5
 800d6a4:	e759      	b.n	800d55a <rclc_executor_spin_some+0x92>
 800d6a6:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800d6aa:	4663      	mov	r3, ip
 800d6ac:	2a00      	cmp	r2, #0
 800d6ae:	d054      	beq.n	800d75a <rclc_executor_spin_some+0x292>
 800d6b0:	46a8      	mov	r8, r5
 800d6b2:	f240 1991 	movw	r9, #401	@ 0x191
 800d6b6:	e00b      	b.n	800d6d0 <rclc_executor_spin_some+0x208>
 800d6b8:	f7ff fa8e 	bl	800cbd8 <_rclc_check_for_new_data>
 800d6bc:	f108 0801 	add.w	r8, r8, #1
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	b108      	cbz	r0, 800d6c8 <rclc_executor_spin_some+0x200>
 800d6c4:	4548      	cmp	r0, r9
 800d6c6:	d1ec      	bne.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d6c8:	68e2      	ldr	r2, [r4, #12]
 800d6ca:	4590      	cmp	r8, r2
 800d6cc:	d23c      	bcs.n	800d748 <rclc_executor_spin_some+0x280>
 800d6ce:	68a3      	ldr	r3, [r4, #8]
 800d6d0:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800d6d4:	469c      	mov	ip, r3
 800d6d6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d6da:	4639      	mov	r1, r7
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1eb      	bne.n	800d6b8 <rclc_executor_spin_some+0x1f0>
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	4660      	mov	r0, ip
 800d6e4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800d6e8:	4798      	blx	r3
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d0d9      	beq.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d6ee:	68e3      	ldr	r3, [r4, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d0d6      	beq.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d6f4:	f04f 0a00 	mov.w	sl, #0
 800d6f8:	f240 1891 	movw	r8, #401	@ 0x191
 800d6fc:	f240 2959 	movw	r9, #601	@ 0x259
 800d700:	e013      	b.n	800d72a <rclc_executor_spin_some+0x262>
 800d702:	f7ff fab7 	bl	800cc74 <_rclc_take_new_data>
 800d706:	b118      	cbz	r0, 800d710 <rclc_executor_spin_some+0x248>
 800d708:	4540      	cmp	r0, r8
 800d70a:	d001      	beq.n	800d710 <rclc_executor_spin_some+0x248>
 800d70c:	4548      	cmp	r0, r9
 800d70e:	d122      	bne.n	800d756 <rclc_executor_spin_some+0x28e>
 800d710:	68a0      	ldr	r0, [r4, #8]
 800d712:	4458      	add	r0, fp
 800d714:	f7ff fc4e 	bl	800cfb4 <_rclc_execute>
 800d718:	f10a 0a01 	add.w	sl, sl, #1
 800d71c:	4605      	mov	r5, r0
 800d71e:	2800      	cmp	r0, #0
 800d720:	d1bf      	bne.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d722:	68e3      	ldr	r3, [r4, #12]
 800d724:	459a      	cmp	sl, r3
 800d726:	f4bf af18 	bcs.w	800d55a <rclc_executor_spin_some+0x92>
 800d72a:	68a0      	ldr	r0, [r4, #8]
 800d72c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d730:	4639      	mov	r1, r7
 800d732:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d736:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1e1      	bne.n	800d702 <rclc_executor_spin_some+0x23a>
 800d73e:	462e      	mov	r6, r5
 800d740:	e70b      	b.n	800d55a <rclc_executor_spin_some+0x92>
 800d742:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d746:	e77a      	b.n	800d63e <rclc_executor_spin_some+0x176>
 800d748:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d74c:	e7c8      	b.n	800d6e0 <rclc_executor_spin_some+0x218>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0a7      	beq.n	800d6a2 <rclc_executor_spin_some+0x1da>
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	e793      	b.n	800d67e <rclc_executor_spin_some+0x1b6>
 800d756:	4606      	mov	r6, r0
 800d758:	e6ff      	b.n	800d55a <rclc_executor_spin_some+0x92>
 800d75a:	4615      	mov	r5, r2
 800d75c:	e7c0      	b.n	800d6e0 <rclc_executor_spin_some+0x218>
 800d75e:	bf00      	nop

0800d760 <rclc_executor_handle_counters_zero_init>:
 800d760:	b130      	cbz	r0, 800d770 <rclc_executor_handle_counters_zero_init+0x10>
 800d762:	b508      	push	{r3, lr}
 800d764:	2220      	movs	r2, #32
 800d766:	2100      	movs	r1, #0
 800d768:	f00e f876 	bl	801b858 <memset>
 800d76c:	2000      	movs	r0, #0
 800d76e:	bd08      	pop	{r3, pc}
 800d770:	200b      	movs	r0, #11
 800d772:	4770      	bx	lr

0800d774 <rclc_executor_handle_init>:
 800d774:	b158      	cbz	r0, 800d78e <rclc_executor_handle_init+0x1a>
 800d776:	2300      	movs	r3, #0
 800d778:	220b      	movs	r2, #11
 800d77a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d77e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800d782:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d786:	8002      	strh	r2, [r0, #0]
 800d788:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d78a:	4618      	mov	r0, r3
 800d78c:	4770      	bx	lr
 800d78e:	200b      	movs	r0, #11
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop

0800d794 <rclc_support_init>:
 800d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d798:	b086      	sub	sp, #24
 800d79a:	b3b8      	cbz	r0, 800d80c <rclc_support_init+0x78>
 800d79c:	461c      	mov	r4, r3
 800d79e:	b3ab      	cbz	r3, 800d80c <rclc_support_init+0x78>
 800d7a0:	460f      	mov	r7, r1
 800d7a2:	4690      	mov	r8, r2
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	f006 f941 	bl	8013a2c <rcl_get_zero_initialized_init_options>
 800d7aa:	f104 030c 	add.w	r3, r4, #12
 800d7ae:	9005      	str	r0, [sp, #20]
 800d7b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7b4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d7b8:	a805      	add	r0, sp, #20
 800d7ba:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d7be:	f006 f937 	bl	8013a30 <rcl_init_options_init>
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	b9e0      	cbnz	r0, 800d800 <rclc_support_init+0x6c>
 800d7c6:	ad02      	add	r5, sp, #8
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	f005 ffc1 	bl	8013750 <rcl_get_zero_initialized_context>
 800d7ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d7d2:	4633      	mov	r3, r6
 800d7d4:	e886 0003 	stmia.w	r6, {r0, r1}
 800d7d8:	aa05      	add	r2, sp, #20
 800d7da:	4641      	mov	r1, r8
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f006 f821 	bl	8013824 <rcl_init>
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	b9b8      	cbnz	r0, 800d816 <rclc_support_init+0x82>
 800d7e6:	60b4      	str	r4, [r6, #8]
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	f106 010c 	add.w	r1, r6, #12
 800d7ee:	2003      	movs	r0, #3
 800d7f0:	f006 fefe 	bl	80145f0 <rcl_clock_init>
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	b970      	cbnz	r0, 800d816 <rclc_support_init+0x82>
 800d7f8:	a805      	add	r0, sp, #20
 800d7fa:	f006 f975 	bl	8013ae8 <rcl_init_options_fini>
 800d7fe:	b108      	cbz	r0, 800d804 <rclc_support_init+0x70>
 800d800:	f000 f956 	bl	800dab0 <rcutils_reset_error>
 800d804:	4628      	mov	r0, r5
 800d806:	b006      	add	sp, #24
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80c:	250b      	movs	r5, #11
 800d80e:	4628      	mov	r0, r5
 800d810:	b006      	add	sp, #24
 800d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d816:	f000 f94b 	bl	800dab0 <rcutils_reset_error>
 800d81a:	a805      	add	r0, sp, #20
 800d81c:	f006 f964 	bl	8013ae8 <rcl_init_options_fini>
 800d820:	2800      	cmp	r0, #0
 800d822:	d0ef      	beq.n	800d804 <rclc_support_init+0x70>
 800d824:	e7ec      	b.n	800d800 <rclc_support_init+0x6c>
 800d826:	bf00      	nop

0800d828 <rclc_node_init_default>:
 800d828:	b3b8      	cbz	r0, 800d89a <rclc_node_init_default+0x72>
 800d82a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d82e:	460d      	mov	r5, r1
 800d830:	b0a1      	sub	sp, #132	@ 0x84
 800d832:	b329      	cbz	r1, 800d880 <rclc_node_init_default+0x58>
 800d834:	4616      	mov	r6, r2
 800d836:	b31a      	cbz	r2, 800d880 <rclc_node_init_default+0x58>
 800d838:	461f      	mov	r7, r3
 800d83a:	b30b      	cbz	r3, 800d880 <rclc_node_init_default+0x58>
 800d83c:	f10d 0810 	add.w	r8, sp, #16
 800d840:	4604      	mov	r4, r0
 800d842:	4640      	mov	r0, r8
 800d844:	f006 f9d6 	bl	8013bf4 <rcl_get_zero_initialized_node>
 800d848:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d84c:	f10d 0918 	add.w	r9, sp, #24
 800d850:	e884 0003 	stmia.w	r4, {r0, r1}
 800d854:	4648      	mov	r0, r9
 800d856:	f006 fb75 	bl	8013f44 <rcl_node_get_default_options>
 800d85a:	4640      	mov	r0, r8
 800d85c:	f006 f9ca 	bl	8013bf4 <rcl_get_zero_initialized_node>
 800d860:	f8cd 9000 	str.w	r9, [sp]
 800d864:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d868:	463b      	mov	r3, r7
 800d86a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d86e:	4632      	mov	r2, r6
 800d870:	4629      	mov	r1, r5
 800d872:	4620      	mov	r0, r4
 800d874:	f006 f9c8 	bl	8013c08 <rcl_node_init>
 800d878:	b930      	cbnz	r0, 800d888 <rclc_node_init_default+0x60>
 800d87a:	b021      	add	sp, #132	@ 0x84
 800d87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d880:	200b      	movs	r0, #11
 800d882:	b021      	add	sp, #132	@ 0x84
 800d884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d888:	9003      	str	r0, [sp, #12]
 800d88a:	f000 f911 	bl	800dab0 <rcutils_reset_error>
 800d88e:	f000 f90f 	bl	800dab0 <rcutils_reset_error>
 800d892:	9803      	ldr	r0, [sp, #12]
 800d894:	b021      	add	sp, #132	@ 0x84
 800d896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d89a:	200b      	movs	r0, #11
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop

0800d8a0 <rclc_publisher_init_default>:
 800d8a0:	b368      	cbz	r0, 800d8fe <rclc_publisher_init_default+0x5e>
 800d8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a6:	460d      	mov	r5, r1
 800d8a8:	b0a0      	sub	sp, #128	@ 0x80
 800d8aa:	b321      	cbz	r1, 800d8f6 <rclc_publisher_init_default+0x56>
 800d8ac:	4616      	mov	r6, r2
 800d8ae:	b312      	cbz	r2, 800d8f6 <rclc_publisher_init_default+0x56>
 800d8b0:	461f      	mov	r7, r3
 800d8b2:	b303      	cbz	r3, 800d8f6 <rclc_publisher_init_default+0x56>
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	f7ff f87f 	bl	800c9b8 <rcl_get_zero_initialized_publisher>
 800d8ba:	f10d 0810 	add.w	r8, sp, #16
 800d8be:	6020      	str	r0, [r4, #0]
 800d8c0:	4640      	mov	r0, r8
 800d8c2:	f7ff f917 	bl	800caf4 <rcl_publisher_get_default_options>
 800d8c6:	490f      	ldr	r1, [pc, #60]	@ (800d904 <rclc_publisher_init_default+0x64>)
 800d8c8:	2250      	movs	r2, #80	@ 0x50
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	f00e f8ac 	bl	801ba28 <memcpy>
 800d8d0:	f8cd 8000 	str.w	r8, [sp]
 800d8d4:	463b      	mov	r3, r7
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f7ff f872 	bl	800c9c4 <rcl_publisher_init>
 800d8e0:	b910      	cbnz	r0, 800d8e8 <rclc_publisher_init_default+0x48>
 800d8e2:	b020      	add	sp, #128	@ 0x80
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	9003      	str	r0, [sp, #12]
 800d8ea:	f000 f8e1 	bl	800dab0 <rcutils_reset_error>
 800d8ee:	9803      	ldr	r0, [sp, #12]
 800d8f0:	b020      	add	sp, #128	@ 0x80
 800d8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f6:	200b      	movs	r0, #11
 800d8f8:	b020      	add	sp, #128	@ 0x80
 800d8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fe:	200b      	movs	r0, #11
 800d900:	4770      	bx	lr
 800d902:	bf00      	nop
 800d904:	08021628 	.word	0x08021628

0800d908 <rclc_subscription_init_default>:
 800d908:	b368      	cbz	r0, 800d966 <rclc_subscription_init_default+0x5e>
 800d90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90e:	460d      	mov	r5, r1
 800d910:	b0a2      	sub	sp, #136	@ 0x88
 800d912:	b321      	cbz	r1, 800d95e <rclc_subscription_init_default+0x56>
 800d914:	4616      	mov	r6, r2
 800d916:	b312      	cbz	r2, 800d95e <rclc_subscription_init_default+0x56>
 800d918:	461f      	mov	r7, r3
 800d91a:	b303      	cbz	r3, 800d95e <rclc_subscription_init_default+0x56>
 800d91c:	4604      	mov	r4, r0
 800d91e:	f006 fd1b 	bl	8014358 <rcl_get_zero_initialized_subscription>
 800d922:	f10d 0810 	add.w	r8, sp, #16
 800d926:	6020      	str	r0, [r4, #0]
 800d928:	4640      	mov	r0, r8
 800d92a:	f006 fdc3 	bl	80144b4 <rcl_subscription_get_default_options>
 800d92e:	490f      	ldr	r1, [pc, #60]	@ (800d96c <rclc_subscription_init_default+0x64>)
 800d930:	2250      	movs	r2, #80	@ 0x50
 800d932:	4640      	mov	r0, r8
 800d934:	f00e f878 	bl	801ba28 <memcpy>
 800d938:	f8cd 8000 	str.w	r8, [sp]
 800d93c:	463b      	mov	r3, r7
 800d93e:	4632      	mov	r2, r6
 800d940:	4629      	mov	r1, r5
 800d942:	4620      	mov	r0, r4
 800d944:	f006 fd0e 	bl	8014364 <rcl_subscription_init>
 800d948:	b910      	cbnz	r0, 800d950 <rclc_subscription_init_default+0x48>
 800d94a:	b022      	add	sp, #136	@ 0x88
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d950:	9003      	str	r0, [sp, #12]
 800d952:	f000 f8ad 	bl	800dab0 <rcutils_reset_error>
 800d956:	9803      	ldr	r0, [sp, #12]
 800d958:	b022      	add	sp, #136	@ 0x88
 800d95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95e:	200b      	movs	r0, #11
 800d960:	b022      	add	sp, #136	@ 0x88
 800d962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d966:	200b      	movs	r0, #11
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	08021678 	.word	0x08021678

0800d970 <rclc_timer_init_default2>:
 800d970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d974:	b08c      	sub	sp, #48	@ 0x30
 800d976:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800d97a:	b330      	cbz	r0, 800d9ca <rclc_timer_init_default2+0x5a>
 800d97c:	460e      	mov	r6, r1
 800d97e:	b321      	cbz	r1, 800d9ca <rclc_timer_init_default2+0x5a>
 800d980:	4690      	mov	r8, r2
 800d982:	461f      	mov	r7, r3
 800d984:	4605      	mov	r5, r0
 800d986:	f007 f813 	bl	80149b0 <rcl_get_zero_initialized_timer>
 800d98a:	9408      	str	r4, [sp, #32]
 800d98c:	68b4      	ldr	r4, [r6, #8]
 800d98e:	6028      	str	r0, [r5, #0]
 800d990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d992:	f10d 0c0c 	add.w	ip, sp, #12
 800d996:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	f8cc 3000 	str.w	r3, [ip]
 800d9a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9a2:	9302      	str	r3, [sp, #8]
 800d9a4:	e9cd 8700 	strd	r8, r7, [sp]
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	4632      	mov	r2, r6
 800d9ac:	f106 010c 	add.w	r1, r6, #12
 800d9b0:	f007 f806 	bl	80149c0 <rcl_timer_init2>
 800d9b4:	b910      	cbnz	r0, 800d9bc <rclc_timer_init_default2+0x4c>
 800d9b6:	b00c      	add	sp, #48	@ 0x30
 800d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d9be:	f000 f877 	bl	800dab0 <rcutils_reset_error>
 800d9c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d9c4:	b00c      	add	sp, #48	@ 0x30
 800d9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ca:	200b      	movs	r0, #11
 800d9cc:	b00c      	add	sp, #48	@ 0x30
 800d9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d2:	bf00      	nop

0800d9d4 <__default_zero_allocate>:
 800d9d4:	f00d b802 	b.w	801a9dc <calloc>

0800d9d8 <__default_reallocate>:
 800d9d8:	f00d bb10 	b.w	801affc <realloc>

0800d9dc <__default_deallocate>:
 800d9dc:	f00d b89a 	b.w	801ab14 <free>

0800d9e0 <__default_allocate>:
 800d9e0:	f00d b890 	b.w	801ab04 <malloc>

0800d9e4 <rcutils_get_zero_initialized_allocator>:
 800d9e4:	b510      	push	{r4, lr}
 800d9e6:	4c05      	ldr	r4, [pc, #20]	@ (800d9fc <rcutils_get_zero_initialized_allocator+0x18>)
 800d9e8:	4686      	mov	lr, r0
 800d9ea:	4684      	mov	ip, r0
 800d9ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	f8cc 3000 	str.w	r3, [ip]
 800d9f8:	4670      	mov	r0, lr
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	080216c8 	.word	0x080216c8

0800da00 <rcutils_get_default_allocator>:
 800da00:	b510      	push	{r4, lr}
 800da02:	4c05      	ldr	r4, [pc, #20]	@ (800da18 <rcutils_get_default_allocator+0x18>)
 800da04:	4686      	mov	lr, r0
 800da06:	4684      	mov	ip, r0
 800da08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	f8cc 3000 	str.w	r3, [ip]
 800da14:	4670      	mov	r0, lr
 800da16:	bd10      	pop	{r4, pc}
 800da18:	2000038c 	.word	0x2000038c

0800da1c <rcutils_set_default_allocator>:
 800da1c:	b1a8      	cbz	r0, 800da4a <rcutils_set_default_allocator+0x2e>
 800da1e:	6802      	ldr	r2, [r0, #0]
 800da20:	b1a2      	cbz	r2, 800da4c <rcutils_set_default_allocator+0x30>
 800da22:	6841      	ldr	r1, [r0, #4]
 800da24:	b1a1      	cbz	r1, 800da50 <rcutils_set_default_allocator+0x34>
 800da26:	b410      	push	{r4}
 800da28:	68c4      	ldr	r4, [r0, #12]
 800da2a:	b164      	cbz	r4, 800da46 <rcutils_set_default_allocator+0x2a>
 800da2c:	6880      	ldr	r0, [r0, #8]
 800da2e:	b138      	cbz	r0, 800da40 <rcutils_set_default_allocator+0x24>
 800da30:	4b08      	ldr	r3, [pc, #32]	@ (800da54 <rcutils_set_default_allocator+0x38>)
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	2200      	movs	r2, #0
 800da36:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800da3a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800da3e:	2001      	movs	r0, #1
 800da40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	4620      	mov	r0, r4
 800da48:	e7fa      	b.n	800da40 <rcutils_set_default_allocator+0x24>
 800da4a:	4770      	bx	lr
 800da4c:	4610      	mov	r0, r2
 800da4e:	4770      	bx	lr
 800da50:	4608      	mov	r0, r1
 800da52:	4770      	bx	lr
 800da54:	2000038c 	.word	0x2000038c

0800da58 <rcutils_allocator_is_valid>:
 800da58:	b158      	cbz	r0, 800da72 <rcutils_allocator_is_valid+0x1a>
 800da5a:	6803      	ldr	r3, [r0, #0]
 800da5c:	b143      	cbz	r3, 800da70 <rcutils_allocator_is_valid+0x18>
 800da5e:	6843      	ldr	r3, [r0, #4]
 800da60:	b133      	cbz	r3, 800da70 <rcutils_allocator_is_valid+0x18>
 800da62:	68c3      	ldr	r3, [r0, #12]
 800da64:	b123      	cbz	r3, 800da70 <rcutils_allocator_is_valid+0x18>
 800da66:	6880      	ldr	r0, [r0, #8]
 800da68:	3800      	subs	r0, #0
 800da6a:	bf18      	it	ne
 800da6c:	2001      	movne	r0, #1
 800da6e:	4770      	bx	lr
 800da70:	4618      	mov	r0, r3
 800da72:	4770      	bx	lr

0800da74 <rcutils_error_is_set>:
 800da74:	4b01      	ldr	r3, [pc, #4]	@ (800da7c <rcutils_error_is_set+0x8>)
 800da76:	7818      	ldrb	r0, [r3, #0]
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	2000cde8 	.word	0x2000cde8

0800da80 <rcutils_get_error_string>:
 800da80:	4b06      	ldr	r3, [pc, #24]	@ (800da9c <rcutils_get_error_string+0x1c>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	b13b      	cbz	r3, 800da96 <rcutils_get_error_string+0x16>
 800da86:	4b06      	ldr	r3, [pc, #24]	@ (800daa0 <rcutils_get_error_string+0x20>)
 800da88:	781a      	ldrb	r2, [r3, #0]
 800da8a:	b90a      	cbnz	r2, 800da90 <rcutils_get_error_string+0x10>
 800da8c:	2201      	movs	r2, #1
 800da8e:	701a      	strb	r2, [r3, #0]
 800da90:	4b04      	ldr	r3, [pc, #16]	@ (800daa4 <rcutils_get_error_string+0x24>)
 800da92:	7818      	ldrb	r0, [r3, #0]
 800da94:	4770      	bx	lr
 800da96:	4b04      	ldr	r3, [pc, #16]	@ (800daa8 <rcutils_get_error_string+0x28>)
 800da98:	7818      	ldrb	r0, [r3, #0]
 800da9a:	4770      	bx	lr
 800da9c:	2000cde8 	.word	0x2000cde8
 800daa0:	2000cded 	.word	0x2000cded
 800daa4:	2000cdec 	.word	0x2000cdec
 800daa8:	08020c84 	.word	0x08020c84
 800daac:	00000000 	.word	0x00000000

0800dab0 <rcutils_reset_error>:
 800dab0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800dad0 <rcutils_reset_error+0x20>
 800dab4:	4a08      	ldr	r2, [pc, #32]	@ (800dad8 <rcutils_reset_error+0x28>)
 800dab6:	4809      	ldr	r0, [pc, #36]	@ (800dadc <rcutils_reset_error+0x2c>)
 800dab8:	4909      	ldr	r1, [pc, #36]	@ (800dae0 <rcutils_reset_error+0x30>)
 800daba:	2300      	movs	r3, #0
 800dabc:	8013      	strh	r3, [r2, #0]
 800dabe:	ed82 7b02 	vstr	d7, [r2, #8]
 800dac2:	4a08      	ldr	r2, [pc, #32]	@ (800dae4 <rcutils_reset_error+0x34>)
 800dac4:	7003      	strb	r3, [r0, #0]
 800dac6:	700b      	strb	r3, [r1, #0]
 800dac8:	7013      	strb	r3, [r2, #0]
 800daca:	4770      	bx	lr
 800dacc:	f3af 8000 	nop.w
	...
 800dad8:	2000cdf0 	.word	0x2000cdf0
 800dadc:	2000cded 	.word	0x2000cded
 800dae0:	2000cdec 	.word	0x2000cdec
 800dae4:	2000cde8 	.word	0x2000cde8

0800dae8 <rcutils_system_time_now>:
 800dae8:	b318      	cbz	r0, 800db32 <rcutils_system_time_now+0x4a>
 800daea:	b570      	push	{r4, r5, r6, lr}
 800daec:	b084      	sub	sp, #16
 800daee:	4604      	mov	r4, r0
 800daf0:	4669      	mov	r1, sp
 800daf2:	2001      	movs	r0, #1
 800daf4:	f7f5 fbf8 	bl	80032e8 <clock_gettime>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	db17      	blt.n	800db2c <rcutils_system_time_now+0x44>
 800dafc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800db00:	2900      	cmp	r1, #0
 800db02:	db13      	blt.n	800db2c <rcutils_system_time_now+0x44>
 800db04:	9d02      	ldr	r5, [sp, #8]
 800db06:	2d00      	cmp	r5, #0
 800db08:	db0d      	blt.n	800db26 <rcutils_system_time_now+0x3e>
 800db0a:	4e0b      	ldr	r6, [pc, #44]	@ (800db38 <rcutils_system_time_now+0x50>)
 800db0c:	fba3 3206 	umull	r3, r2, r3, r6
 800db10:	195b      	adds	r3, r3, r5
 800db12:	fb06 2201 	mla	r2, r6, r1, r2
 800db16:	f04f 0000 	mov.w	r0, #0
 800db1a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800db1e:	e9c4 3200 	strd	r3, r2, [r4]
 800db22:	b004      	add	sp, #16
 800db24:	bd70      	pop	{r4, r5, r6, pc}
 800db26:	ea53 0201 	orrs.w	r2, r3, r1
 800db2a:	d1ee      	bne.n	800db0a <rcutils_system_time_now+0x22>
 800db2c:	2002      	movs	r0, #2
 800db2e:	b004      	add	sp, #16
 800db30:	bd70      	pop	{r4, r5, r6, pc}
 800db32:	200b      	movs	r0, #11
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	3b9aca00 	.word	0x3b9aca00

0800db3c <rcutils_steady_time_now>:
 800db3c:	b318      	cbz	r0, 800db86 <rcutils_steady_time_now+0x4a>
 800db3e:	b570      	push	{r4, r5, r6, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	4604      	mov	r4, r0
 800db44:	4669      	mov	r1, sp
 800db46:	2000      	movs	r0, #0
 800db48:	f7f5 fbce 	bl	80032e8 <clock_gettime>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	db17      	blt.n	800db80 <rcutils_steady_time_now+0x44>
 800db50:	e9dd 3100 	ldrd	r3, r1, [sp]
 800db54:	2900      	cmp	r1, #0
 800db56:	db13      	blt.n	800db80 <rcutils_steady_time_now+0x44>
 800db58:	9d02      	ldr	r5, [sp, #8]
 800db5a:	2d00      	cmp	r5, #0
 800db5c:	db0d      	blt.n	800db7a <rcutils_steady_time_now+0x3e>
 800db5e:	4e0b      	ldr	r6, [pc, #44]	@ (800db8c <rcutils_steady_time_now+0x50>)
 800db60:	fba3 3206 	umull	r3, r2, r3, r6
 800db64:	195b      	adds	r3, r3, r5
 800db66:	fb06 2201 	mla	r2, r6, r1, r2
 800db6a:	f04f 0000 	mov.w	r0, #0
 800db6e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800db72:	e9c4 3200 	strd	r3, r2, [r4]
 800db76:	b004      	add	sp, #16
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	ea53 0201 	orrs.w	r2, r3, r1
 800db7e:	d1ee      	bne.n	800db5e <rcutils_steady_time_now+0x22>
 800db80:	2002      	movs	r0, #2
 800db82:	b004      	add	sp, #16
 800db84:	bd70      	pop	{r4, r5, r6, pc}
 800db86:	200b      	movs	r0, #11
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	3b9aca00 	.word	0x3b9aca00

0800db90 <rmw_get_default_publisher_options>:
 800db90:	2200      	movs	r2, #0
 800db92:	6002      	str	r2, [r0, #0]
 800db94:	7102      	strb	r2, [r0, #4]
 800db96:	4770      	bx	lr

0800db98 <rmw_uros_set_custom_transport>:
 800db98:	b470      	push	{r4, r5, r6}
 800db9a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800db9e:	b162      	cbz	r2, 800dbba <rmw_uros_set_custom_transport+0x22>
 800dba0:	b15b      	cbz	r3, 800dbba <rmw_uros_set_custom_transport+0x22>
 800dba2:	b155      	cbz	r5, 800dbba <rmw_uros_set_custom_transport+0x22>
 800dba4:	b14e      	cbz	r6, 800dbba <rmw_uros_set_custom_transport+0x22>
 800dba6:	4c06      	ldr	r4, [pc, #24]	@ (800dbc0 <rmw_uros_set_custom_transport+0x28>)
 800dba8:	7020      	strb	r0, [r4, #0]
 800dbaa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dbae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dbb2:	6166      	str	r6, [r4, #20]
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	bc70      	pop	{r4, r5, r6}
 800dbb8:	4770      	bx	lr
 800dbba:	200b      	movs	r0, #11
 800dbbc:	bc70      	pop	{r4, r5, r6}
 800dbbe:	4770      	bx	lr
 800dbc0:	2000ce00 	.word	0x2000ce00

0800dbc4 <rmw_uros_ping_agent>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	4b22      	ldr	r3, [pc, #136]	@ (800dc50 <rmw_uros_ping_agent+0x8c>)
 800dbc8:	7b1a      	ldrb	r2, [r3, #12]
 800dbca:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dbce:	4605      	mov	r5, r0
 800dbd0:	460e      	mov	r6, r1
 800dbd2:	b10a      	cbz	r2, 800dbd8 <rmw_uros_ping_agent+0x14>
 800dbd4:	681c      	ldr	r4, [r3, #0]
 800dbd6:	b9bc      	cbnz	r4, 800dc08 <rmw_uros_ping_agent+0x44>
 800dbd8:	4b1e      	ldr	r3, [pc, #120]	@ (800dc54 <rmw_uros_ping_agent+0x90>)
 800dbda:	781a      	ldrb	r2, [r3, #0]
 800dbdc:	6918      	ldr	r0, [r3, #16]
 800dbde:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	68da      	ldr	r2, [r3, #12]
 800dbea:	909c      	str	r0, [sp, #624]	@ 0x270
 800dbec:	6958      	ldr	r0, [r3, #20]
 800dbee:	929b      	str	r2, [sp, #620]	@ 0x26c
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	909d      	str	r0, [sp, #628]	@ 0x274
 800dbf4:	466a      	mov	r2, sp
 800dbf6:	4608      	mov	r0, r1
 800dbf8:	939a      	str	r3, [sp, #616]	@ 0x268
 800dbfa:	f000 f9cd 	bl	800df98 <rmw_uxrce_transport_init>
 800dbfe:	b198      	cbz	r0, 800dc28 <rmw_uros_ping_agent+0x64>
 800dc00:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	b9f0      	cbnz	r0, 800dc46 <rmw_uros_ping_agent+0x82>
 800dc08:	68a0      	ldr	r0, [r4, #8]
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc12:	f002 f971 	bl	800fef8 <uxr_ping_agent_session>
 800dc16:	6864      	ldr	r4, [r4, #4]
 800dc18:	2c00      	cmp	r4, #0
 800dc1a:	d1f4      	bne.n	800dc06 <rmw_uros_ping_agent+0x42>
 800dc1c:	f080 0001 	eor.w	r0, r0, #1
 800dc20:	b2c0      	uxtb	r0, r0
 800dc22:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc26:	bd70      	pop	{r4, r5, r6, pc}
 800dc28:	4632      	mov	r2, r6
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	a89e      	add	r0, sp, #632	@ 0x278
 800dc2e:	f002 f9b3 	bl	800ff98 <uxr_ping_agent_attempts>
 800dc32:	4604      	mov	r4, r0
 800dc34:	4668      	mov	r0, sp
 800dc36:	f002 f92d 	bl	800fe94 <uxr_close_custom_transport>
 800dc3a:	f084 0001 	eor.w	r0, r4, #1
 800dc3e:	b2c0      	uxtb	r0, r0
 800dc40:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc44:	bd70      	pop	{r4, r5, r6, pc}
 800dc46:	2000      	movs	r0, #0
 800dc48:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc4c:	bd70      	pop	{r4, r5, r6, pc}
 800dc4e:	bf00      	nop
 800dc50:	20011760 	.word	0x20011760
 800dc54:	2000ce00 	.word	0x2000ce00

0800dc58 <flush_session>:
 800dc58:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800dc5a:	f002 beed 	b.w	8010a38 <uxr_run_session_until_confirm_delivery>
 800dc5e:	bf00      	nop

0800dc60 <rmw_publish>:
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d053      	beq.n	800dd0c <rmw_publish+0xac>
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	460d      	mov	r5, r1
 800dc68:	b08e      	sub	sp, #56	@ 0x38
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	d04b      	beq.n	800dd06 <rmw_publish+0xa6>
 800dc6e:	4604      	mov	r4, r0
 800dc70:	6800      	ldr	r0, [r0, #0]
 800dc72:	f000 fd2d 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d045      	beq.n	800dd06 <rmw_publish+0xa6>
 800dc7a:	6866      	ldr	r6, [r4, #4]
 800dc7c:	2e00      	cmp	r6, #0
 800dc7e:	d042      	beq.n	800dd06 <rmw_publish+0xa6>
 800dc80:	69b4      	ldr	r4, [r6, #24]
 800dc82:	4628      	mov	r0, r5
 800dc84:	6923      	ldr	r3, [r4, #16]
 800dc86:	4798      	blx	r3
 800dc88:	69f3      	ldr	r3, [r6, #28]
 800dc8a:	9005      	str	r0, [sp, #20]
 800dc8c:	b113      	cbz	r3, 800dc94 <rmw_publish+0x34>
 800dc8e:	a805      	add	r0, sp, #20
 800dc90:	4798      	blx	r3
 800dc92:	9805      	ldr	r0, [sp, #20]
 800dc94:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	9000      	str	r0, [sp, #0]
 800dc9c:	6972      	ldr	r2, [r6, #20]
 800dc9e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dca0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dca4:	ab06      	add	r3, sp, #24
 800dca6:	f004 f987 	bl	8011fb8 <uxr_prepare_output_stream>
 800dcaa:	b1d8      	cbz	r0, 800dce4 <rmw_publish+0x84>
 800dcac:	68a3      	ldr	r3, [r4, #8]
 800dcae:	a906      	add	r1, sp, #24
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	4798      	blx	r3
 800dcb4:	6a33      	ldr	r3, [r6, #32]
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	b10b      	cbz	r3, 800dcbe <rmw_publish+0x5e>
 800dcba:	a806      	add	r0, sp, #24
 800dcbc:	4798      	blx	r3
 800dcbe:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800dcc2:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	6910      	ldr	r0, [r2, #16]
 800dcca:	d021      	beq.n	800dd10 <rmw_publish+0xb0>
 800dccc:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dcce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcd2:	f002 feb1 	bl	8010a38 <uxr_run_session_until_confirm_delivery>
 800dcd6:	4004      	ands	r4, r0
 800dcd8:	b2e4      	uxtb	r4, r4
 800dcda:	f084 0001 	eor.w	r0, r4, #1
 800dcde:	b2c0      	uxtb	r0, r0
 800dce0:	b00e      	add	sp, #56	@ 0x38
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dce8:	6918      	ldr	r0, [r3, #16]
 800dcea:	4b0c      	ldr	r3, [pc, #48]	@ (800dd1c <rmw_publish+0xbc>)
 800dcec:	9301      	str	r3, [sp, #4]
 800dcee:	9b05      	ldr	r3, [sp, #20]
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	9602      	str	r6, [sp, #8]
 800dcf4:	6972      	ldr	r2, [r6, #20]
 800dcf6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dcf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcfc:	ab06      	add	r3, sp, #24
 800dcfe:	f004 f98b 	bl	8012018 <uxr_prepare_output_stream_fragmented>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d1d2      	bne.n	800dcac <rmw_publish+0x4c>
 800dd06:	2001      	movs	r0, #1
 800dd08:	b00e      	add	sp, #56	@ 0x38
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}
 800dd0c:	2001      	movs	r0, #1
 800dd0e:	4770      	bx	lr
 800dd10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd14:	f002 faf8 	bl	8010308 <uxr_flash_output_streams>
 800dd18:	e7df      	b.n	800dcda <rmw_publish+0x7a>
 800dd1a:	bf00      	nop
 800dd1c:	0800dc59 	.word	0x0800dc59

0800dd20 <rmw_create_publisher>:
 800dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	b087      	sub	sp, #28
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f000 80c9 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd2c:	460f      	mov	r7, r1
 800dd2e:	2900      	cmp	r1, #0
 800dd30:	f000 80c5 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd34:	4604      	mov	r4, r0
 800dd36:	6800      	ldr	r0, [r0, #0]
 800dd38:	4615      	mov	r5, r2
 800dd3a:	461e      	mov	r6, r3
 800dd3c:	f000 fcc8 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	f000 80bc 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd46:	2d00      	cmp	r5, #0
 800dd48:	f000 80b9 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd4c:	782b      	ldrb	r3, [r5, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f000 80b5 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd54:	2e00      	cmp	r6, #0
 800dd56:	f000 80b2 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd5a:	485c      	ldr	r0, [pc, #368]	@ (800decc <rmw_create_publisher+0x1ac>)
 800dd5c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dd60:	f009 f908 	bl	8016f74 <get_memory>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	f000 80aa 	beq.w	800debe <rmw_create_publisher+0x19e>
 800dd6a:	6884      	ldr	r4, [r0, #8]
 800dd6c:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dd70:	f009 f986 	bl	8017080 <rmw_get_implementation_identifier>
 800dd74:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dd78:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dd7c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dd80:	4628      	mov	r0, r5
 800dd82:	f7f2 faa5 	bl	80002d0 <strlen>
 800dd86:	3001      	adds	r0, #1
 800dd88:	283c      	cmp	r0, #60	@ 0x3c
 800dd8a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800dd8e:	f200 808f 	bhi.w	800deb0 <rmw_create_publisher+0x190>
 800dd92:	4a4f      	ldr	r2, [pc, #316]	@ (800ded0 <rmw_create_publisher+0x1b0>)
 800dd94:	462b      	mov	r3, r5
 800dd96:	213c      	movs	r1, #60	@ 0x3c
 800dd98:	4650      	mov	r0, sl
 800dd9a:	f00d fc7d 	bl	801b698 <snprintf>
 800dd9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dda2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dda4:	4631      	mov	r1, r6
 800dda6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ddaa:	2250      	movs	r2, #80	@ 0x50
 800ddac:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ddb0:	f00d fe3a 	bl	801ba28 <memcpy>
 800ddb4:	7a33      	ldrb	r3, [r6, #8]
 800ddb6:	4947      	ldr	r1, [pc, #284]	@ (800ded4 <rmw_create_publisher+0x1b4>)
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddbe:	bf0c      	ite	eq
 800ddc0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ddc4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ddc8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	f000 fc8b 	bl	800e6ec <get_message_typesupport_handle>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d06a      	beq.n	800deb0 <rmw_create_publisher+0x190>
 800ddda:	6842      	ldr	r2, [r0, #4]
 800dddc:	61a2      	str	r2, [r4, #24]
 800ddde:	2a00      	cmp	r2, #0
 800dde0:	d066      	beq.n	800deb0 <rmw_create_publisher+0x190>
 800dde2:	4629      	mov	r1, r5
 800dde4:	4633      	mov	r3, r6
 800dde6:	4648      	mov	r0, r9
 800dde8:	f009 fba6 	bl	8017538 <create_topic>
 800ddec:	6260      	str	r0, [r4, #36]	@ 0x24
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d062      	beq.n	800deb8 <rmw_create_publisher+0x198>
 800ddf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddfa:	2103      	movs	r1, #3
 800ddfc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800de00:	1c42      	adds	r2, r0, #1
 800de02:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800de06:	f002 f849 	bl	800fe9c <uxr_object_id>
 800de0a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800de0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de12:	6120      	str	r0, [r4, #16]
 800de14:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800de18:	6910      	ldr	r0, [r2, #16]
 800de1a:	2506      	movs	r5, #6
 800de1c:	9500      	str	r5, [sp, #0]
 800de1e:	6819      	ldr	r1, [r3, #0]
 800de20:	6922      	ldr	r2, [r4, #16]
 800de22:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800de26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de2a:	f001 fe4d 	bl	800fac8 <uxr_buffer_create_publisher_bin>
 800de2e:	4602      	mov	r2, r0
 800de30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800de34:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800de38:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800de3c:	f000 fbc2 	bl	800e5c4 <run_xrce_session>
 800de40:	b3b0      	cbz	r0, 800deb0 <rmw_create_publisher+0x190>
 800de42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de4a:	2105      	movs	r1, #5
 800de4c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800de50:	1c42      	adds	r2, r0, #1
 800de52:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800de56:	f002 f821 	bl	800fe9c <uxr_object_id>
 800de5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de5e:	6160      	str	r0, [r4, #20]
 800de60:	4631      	mov	r1, r6
 800de62:	af04      	add	r7, sp, #16
 800de64:	691e      	ldr	r6, [r3, #16]
 800de66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de6a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800de6e:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800de72:	4638      	mov	r0, r7
 800de74:	f000 fbc6 	bl	800e604 <convert_qos_profile>
 800de78:	9503      	str	r5, [sp, #12]
 800de7a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800de7e:	9001      	str	r0, [sp, #4]
 800de80:	f8ad 1008 	strh.w	r1, [sp, #8]
 800de84:	f8db 3010 	ldr.w	r3, [fp, #16]
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800de8e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800de92:	f8da 1000 	ldr.w	r1, [sl]
 800de96:	4630      	mov	r0, r6
 800de98:	f001 fe74 	bl	800fb84 <uxr_buffer_create_datawriter_bin>
 800de9c:	4602      	mov	r2, r0
 800de9e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dea2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dea6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800deaa:	f000 fb8b 	bl	800e5c4 <run_xrce_session>
 800deae:	b940      	cbnz	r0, 800dec2 <rmw_create_publisher+0x1a2>
 800deb0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800deb2:	b108      	cbz	r0, 800deb8 <rmw_create_publisher+0x198>
 800deb4:	f000 fa7e 	bl	800e3b4 <rmw_uxrce_fini_topic_memory>
 800deb8:	4640      	mov	r0, r8
 800deba:	f000 fa23 	bl	800e304 <rmw_uxrce_fini_publisher_memory>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	4640      	mov	r0, r8
 800dec4:	b007      	add	sp, #28
 800dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deca:	bf00      	nop
 800decc:	200100f0 	.word	0x200100f0
 800ded0:	08020c98 	.word	0x08020c98
 800ded4:	08020b08 	.word	0x08020b08

0800ded8 <rmw_publisher_get_actual_qos>:
 800ded8:	b508      	push	{r3, lr}
 800deda:	4603      	mov	r3, r0
 800dedc:	b140      	cbz	r0, 800def0 <rmw_publisher_get_actual_qos+0x18>
 800dede:	4608      	mov	r0, r1
 800dee0:	b131      	cbz	r1, 800def0 <rmw_publisher_get_actual_qos+0x18>
 800dee2:	6859      	ldr	r1, [r3, #4]
 800dee4:	2250      	movs	r2, #80	@ 0x50
 800dee6:	3128      	adds	r1, #40	@ 0x28
 800dee8:	f00d fd9e 	bl	801ba28 <memcpy>
 800deec:	2000      	movs	r0, #0
 800deee:	bd08      	pop	{r3, pc}
 800def0:	200b      	movs	r0, #11
 800def2:	bd08      	pop	{r3, pc}

0800def4 <rmw_destroy_publisher>:
 800def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def8:	b128      	cbz	r0, 800df06 <rmw_destroy_publisher+0x12>
 800defa:	4604      	mov	r4, r0
 800defc:	6800      	ldr	r0, [r0, #0]
 800defe:	460d      	mov	r5, r1
 800df00:	f000 fbe6 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 800df04:	b918      	cbnz	r0, 800df0e <rmw_destroy_publisher+0x1a>
 800df06:	2401      	movs	r4, #1
 800df08:	4620      	mov	r0, r4
 800df0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0e:	6863      	ldr	r3, [r4, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d0f8      	beq.n	800df06 <rmw_destroy_publisher+0x12>
 800df14:	2d00      	cmp	r5, #0
 800df16:	d0f6      	beq.n	800df06 <rmw_destroy_publisher+0x12>
 800df18:	6828      	ldr	r0, [r5, #0]
 800df1a:	f000 fbd9 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d0f1      	beq.n	800df06 <rmw_destroy_publisher+0x12>
 800df22:	686c      	ldr	r4, [r5, #4]
 800df24:	2c00      	cmp	r4, #0
 800df26:	d0ee      	beq.n	800df06 <rmw_destroy_publisher+0x12>
 800df28:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800df2a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800df2e:	f009 fb57 	bl	80175e0 <destroy_topic>
 800df32:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800df36:	6962      	ldr	r2, [r4, #20]
 800df38:	6918      	ldr	r0, [r3, #16]
 800df3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df42:	6819      	ldr	r1, [r3, #0]
 800df44:	f001 fd10 	bl	800f968 <uxr_buffer_delete_entity>
 800df48:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800df4c:	6922      	ldr	r2, [r4, #16]
 800df4e:	4680      	mov	r8, r0
 800df50:	6918      	ldr	r0, [r3, #16]
 800df52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df5a:	6819      	ldr	r1, [r3, #0]
 800df5c:	f001 fd04 	bl	800f968 <uxr_buffer_delete_entity>
 800df60:	4606      	mov	r6, r0
 800df62:	6938      	ldr	r0, [r7, #16]
 800df64:	4642      	mov	r2, r8
 800df66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df6e:	f000 fb29 	bl	800e5c4 <run_xrce_session>
 800df72:	4604      	mov	r4, r0
 800df74:	6938      	ldr	r0, [r7, #16]
 800df76:	4632      	mov	r2, r6
 800df78:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df80:	f000 fb20 	bl	800e5c4 <run_xrce_session>
 800df84:	4004      	ands	r4, r0
 800df86:	f084 0401 	eor.w	r4, r4, #1
 800df8a:	b2e4      	uxtb	r4, r4
 800df8c:	4628      	mov	r0, r5
 800df8e:	0064      	lsls	r4, r4, #1
 800df90:	f000 f9b8 	bl	800e304 <rmw_uxrce_fini_publisher_memory>
 800df94:	e7b8      	b.n	800df08 <rmw_destroy_publisher+0x14>
 800df96:	bf00      	nop

0800df98 <rmw_uxrce_transport_init>:
 800df98:	b508      	push	{r3, lr}
 800df9a:	b108      	cbz	r0, 800dfa0 <rmw_uxrce_transport_init+0x8>
 800df9c:	f100 0210 	add.w	r2, r0, #16
 800dfa0:	b139      	cbz	r1, 800dfb2 <rmw_uxrce_transport_init+0x1a>
 800dfa2:	6949      	ldr	r1, [r1, #20]
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	f001 ff41 	bl	800fe2c <uxr_init_custom_transport>
 800dfaa:	f080 0001 	eor.w	r0, r0, #1
 800dfae:	b2c0      	uxtb	r0, r0
 800dfb0:	bd08      	pop	{r3, pc}
 800dfb2:	4b04      	ldr	r3, [pc, #16]	@ (800dfc4 <rmw_uxrce_transport_init+0x2c>)
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	6859      	ldr	r1, [r3, #4]
 800dfb8:	f001 ff38 	bl	800fe2c <uxr_init_custom_transport>
 800dfbc:	f080 0001 	eor.w	r0, r0, #1
 800dfc0:	b2c0      	uxtb	r0, r0
 800dfc2:	bd08      	pop	{r3, pc}
 800dfc4:	2000ce00 	.word	0x2000ce00

0800dfc8 <rmw_uros_epoch_nanos>:
 800dfc8:	4b05      	ldr	r3, [pc, #20]	@ (800dfe0 <rmw_uros_epoch_nanos+0x18>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	b123      	cbz	r3, 800dfd8 <rmw_uros_epoch_nanos+0x10>
 800dfce:	6898      	ldr	r0, [r3, #8]
 800dfd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfd4:	f002 b98e 	b.w	80102f4 <uxr_epoch_nanos>
 800dfd8:	2000      	movs	r0, #0
 800dfda:	2100      	movs	r1, #0
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	20011760 	.word	0x20011760

0800dfe4 <rmw_uros_sync_session>:
 800dfe4:	b508      	push	{r3, lr}
 800dfe6:	4b07      	ldr	r3, [pc, #28]	@ (800e004 <rmw_uros_sync_session+0x20>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	b14b      	cbz	r3, 800e000 <rmw_uros_sync_session+0x1c>
 800dfec:	4601      	mov	r1, r0
 800dfee:	6898      	ldr	r0, [r3, #8]
 800dff0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dff4:	f002 fd9c 	bl	8010b30 <uxr_sync_session>
 800dff8:	f080 0001 	eor.w	r0, r0, #1
 800dffc:	b2c0      	uxtb	r0, r0
 800dffe:	bd08      	pop	{r3, pc}
 800e000:	2001      	movs	r0, #1
 800e002:	bd08      	pop	{r3, pc}
 800e004:	20011760 	.word	0x20011760

0800e008 <rmw_uxrce_init_service_memory>:
 800e008:	b1e2      	cbz	r2, 800e044 <rmw_uxrce_init_service_memory+0x3c>
 800e00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00e:	7b05      	ldrb	r5, [r0, #12]
 800e010:	4606      	mov	r6, r0
 800e012:	b9ad      	cbnz	r5, 800e040 <rmw_uxrce_init_service_memory+0x38>
 800e014:	23c8      	movs	r3, #200	@ 0xc8
 800e016:	e9c0 5500 	strd	r5, r5, [r0]
 800e01a:	6083      	str	r3, [r0, #8]
 800e01c:	f240 1301 	movw	r3, #257	@ 0x101
 800e020:	4617      	mov	r7, r2
 800e022:	8183      	strh	r3, [r0, #12]
 800e024:	460c      	mov	r4, r1
 800e026:	46a8      	mov	r8, r5
 800e028:	4621      	mov	r1, r4
 800e02a:	4630      	mov	r0, r6
 800e02c:	3501      	adds	r5, #1
 800e02e:	f008 ffb1 	bl	8016f94 <put_memory>
 800e032:	42af      	cmp	r7, r5
 800e034:	60a4      	str	r4, [r4, #8]
 800e036:	f884 800c 	strb.w	r8, [r4, #12]
 800e03a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e03e:	d1f3      	bne.n	800e028 <rmw_uxrce_init_service_memory+0x20>
 800e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop

0800e048 <rmw_uxrce_init_client_memory>:
 800e048:	b1e2      	cbz	r2, 800e084 <rmw_uxrce_init_client_memory+0x3c>
 800e04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e04e:	7b05      	ldrb	r5, [r0, #12]
 800e050:	4606      	mov	r6, r0
 800e052:	b9ad      	cbnz	r5, 800e080 <rmw_uxrce_init_client_memory+0x38>
 800e054:	23c8      	movs	r3, #200	@ 0xc8
 800e056:	e9c0 5500 	strd	r5, r5, [r0]
 800e05a:	6083      	str	r3, [r0, #8]
 800e05c:	f240 1301 	movw	r3, #257	@ 0x101
 800e060:	4617      	mov	r7, r2
 800e062:	8183      	strh	r3, [r0, #12]
 800e064:	460c      	mov	r4, r1
 800e066:	46a8      	mov	r8, r5
 800e068:	4621      	mov	r1, r4
 800e06a:	4630      	mov	r0, r6
 800e06c:	3501      	adds	r5, #1
 800e06e:	f008 ff91 	bl	8016f94 <put_memory>
 800e072:	42af      	cmp	r7, r5
 800e074:	60a4      	str	r4, [r4, #8]
 800e076:	f884 800c 	strb.w	r8, [r4, #12]
 800e07a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e07e:	d1f3      	bne.n	800e068 <rmw_uxrce_init_client_memory+0x20>
 800e080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop

0800e088 <rmw_uxrce_init_publisher_memory>:
 800e088:	b1e2      	cbz	r2, 800e0c4 <rmw_uxrce_init_publisher_memory+0x3c>
 800e08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08e:	7b05      	ldrb	r5, [r0, #12]
 800e090:	4606      	mov	r6, r0
 800e092:	b9ad      	cbnz	r5, 800e0c0 <rmw_uxrce_init_publisher_memory+0x38>
 800e094:	23d8      	movs	r3, #216	@ 0xd8
 800e096:	e9c0 5500 	strd	r5, r5, [r0]
 800e09a:	6083      	str	r3, [r0, #8]
 800e09c:	f240 1301 	movw	r3, #257	@ 0x101
 800e0a0:	4617      	mov	r7, r2
 800e0a2:	8183      	strh	r3, [r0, #12]
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	46a8      	mov	r8, r5
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	3501      	adds	r5, #1
 800e0ae:	f008 ff71 	bl	8016f94 <put_memory>
 800e0b2:	42af      	cmp	r7, r5
 800e0b4:	60a4      	str	r4, [r4, #8]
 800e0b6:	f884 800c 	strb.w	r8, [r4, #12]
 800e0ba:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e0be:	d1f3      	bne.n	800e0a8 <rmw_uxrce_init_publisher_memory+0x20>
 800e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop

0800e0c8 <rmw_uxrce_init_subscription_memory>:
 800e0c8:	b1e2      	cbz	r2, 800e104 <rmw_uxrce_init_subscription_memory+0x3c>
 800e0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ce:	7b05      	ldrb	r5, [r0, #12]
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	b9ad      	cbnz	r5, 800e100 <rmw_uxrce_init_subscription_memory+0x38>
 800e0d4:	23d8      	movs	r3, #216	@ 0xd8
 800e0d6:	e9c0 5500 	strd	r5, r5, [r0]
 800e0da:	6083      	str	r3, [r0, #8]
 800e0dc:	f240 1301 	movw	r3, #257	@ 0x101
 800e0e0:	4617      	mov	r7, r2
 800e0e2:	8183      	strh	r3, [r0, #12]
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	46a8      	mov	r8, r5
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	3501      	adds	r5, #1
 800e0ee:	f008 ff51 	bl	8016f94 <put_memory>
 800e0f2:	42af      	cmp	r7, r5
 800e0f4:	60a4      	str	r4, [r4, #8]
 800e0f6:	f884 800c 	strb.w	r8, [r4, #12]
 800e0fa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e0fe:	d1f3      	bne.n	800e0e8 <rmw_uxrce_init_subscription_memory+0x20>
 800e100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop

0800e108 <rmw_uxrce_init_node_memory>:
 800e108:	b1e2      	cbz	r2, 800e144 <rmw_uxrce_init_node_memory+0x3c>
 800e10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10e:	7b05      	ldrb	r5, [r0, #12]
 800e110:	4606      	mov	r6, r0
 800e112:	b9ad      	cbnz	r5, 800e140 <rmw_uxrce_init_node_memory+0x38>
 800e114:	23a4      	movs	r3, #164	@ 0xa4
 800e116:	e9c0 5500 	strd	r5, r5, [r0]
 800e11a:	6083      	str	r3, [r0, #8]
 800e11c:	f240 1301 	movw	r3, #257	@ 0x101
 800e120:	4617      	mov	r7, r2
 800e122:	8183      	strh	r3, [r0, #12]
 800e124:	460c      	mov	r4, r1
 800e126:	46a8      	mov	r8, r5
 800e128:	4621      	mov	r1, r4
 800e12a:	4630      	mov	r0, r6
 800e12c:	3501      	adds	r5, #1
 800e12e:	f008 ff31 	bl	8016f94 <put_memory>
 800e132:	42af      	cmp	r7, r5
 800e134:	60a4      	str	r4, [r4, #8]
 800e136:	f884 800c 	strb.w	r8, [r4, #12]
 800e13a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e13e:	d1f3      	bne.n	800e128 <rmw_uxrce_init_node_memory+0x20>
 800e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop

0800e148 <rmw_uxrce_init_session_memory>:
 800e148:	b1ea      	cbz	r2, 800e186 <rmw_uxrce_init_session_memory+0x3e>
 800e14a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e14e:	7b05      	ldrb	r5, [r0, #12]
 800e150:	4606      	mov	r6, r0
 800e152:	b9b5      	cbnz	r5, 800e182 <rmw_uxrce_init_session_memory+0x3a>
 800e154:	e9c0 5500 	strd	r5, r5, [r0]
 800e158:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e15c:	f240 1301 	movw	r3, #257	@ 0x101
 800e160:	4617      	mov	r7, r2
 800e162:	f8c0 8008 	str.w	r8, [r0, #8]
 800e166:	460c      	mov	r4, r1
 800e168:	8183      	strh	r3, [r0, #12]
 800e16a:	46a9      	mov	r9, r5
 800e16c:	4621      	mov	r1, r4
 800e16e:	4630      	mov	r0, r6
 800e170:	3501      	adds	r5, #1
 800e172:	f008 ff0f 	bl	8016f94 <put_memory>
 800e176:	42af      	cmp	r7, r5
 800e178:	60a4      	str	r4, [r4, #8]
 800e17a:	f884 900c 	strb.w	r9, [r4, #12]
 800e17e:	4444      	add	r4, r8
 800e180:	d1f4      	bne.n	800e16c <rmw_uxrce_init_session_memory+0x24>
 800e182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e186:	4770      	bx	lr

0800e188 <rmw_uxrce_init_topic_memory>:
 800e188:	b1e2      	cbz	r2, 800e1c4 <rmw_uxrce_init_topic_memory+0x3c>
 800e18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e18e:	7b05      	ldrb	r5, [r0, #12]
 800e190:	4606      	mov	r6, r0
 800e192:	b9ad      	cbnz	r5, 800e1c0 <rmw_uxrce_init_topic_memory+0x38>
 800e194:	231c      	movs	r3, #28
 800e196:	e9c0 5500 	strd	r5, r5, [r0]
 800e19a:	6083      	str	r3, [r0, #8]
 800e19c:	f240 1301 	movw	r3, #257	@ 0x101
 800e1a0:	4617      	mov	r7, r2
 800e1a2:	8183      	strh	r3, [r0, #12]
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	46a8      	mov	r8, r5
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	f008 fef1 	bl	8016f94 <put_memory>
 800e1b2:	42af      	cmp	r7, r5
 800e1b4:	60a4      	str	r4, [r4, #8]
 800e1b6:	f884 800c 	strb.w	r8, [r4, #12]
 800e1ba:	f104 041c 	add.w	r4, r4, #28
 800e1be:	d1f3      	bne.n	800e1a8 <rmw_uxrce_init_topic_memory+0x20>
 800e1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop

0800e1c8 <rmw_uxrce_init_static_input_buffer_memory>:
 800e1c8:	b1ea      	cbz	r2, 800e206 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ce:	7b05      	ldrb	r5, [r0, #12]
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	b9b5      	cbnz	r5, 800e202 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e1d4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e1d8:	e9c0 5500 	strd	r5, r5, [r0]
 800e1dc:	6083      	str	r3, [r0, #8]
 800e1de:	f240 1301 	movw	r3, #257	@ 0x101
 800e1e2:	4617      	mov	r7, r2
 800e1e4:	8183      	strh	r3, [r0, #12]
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	46a8      	mov	r8, r5
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	3501      	adds	r5, #1
 800e1f0:	f008 fed0 	bl	8016f94 <put_memory>
 800e1f4:	42af      	cmp	r7, r5
 800e1f6:	60a4      	str	r4, [r4, #8]
 800e1f8:	f884 800c 	strb.w	r8, [r4, #12]
 800e1fc:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e200:	d1f3      	bne.n	800e1ea <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e206:	4770      	bx	lr

0800e208 <rmw_uxrce_init_init_options_impl_memory>:
 800e208:	b1e2      	cbz	r2, 800e244 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e20e:	7b05      	ldrb	r5, [r0, #12]
 800e210:	4606      	mov	r6, r0
 800e212:	b9ad      	cbnz	r5, 800e240 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e214:	232c      	movs	r3, #44	@ 0x2c
 800e216:	e9c0 5500 	strd	r5, r5, [r0]
 800e21a:	6083      	str	r3, [r0, #8]
 800e21c:	f240 1301 	movw	r3, #257	@ 0x101
 800e220:	4617      	mov	r7, r2
 800e222:	8183      	strh	r3, [r0, #12]
 800e224:	460c      	mov	r4, r1
 800e226:	46a8      	mov	r8, r5
 800e228:	4621      	mov	r1, r4
 800e22a:	4630      	mov	r0, r6
 800e22c:	3501      	adds	r5, #1
 800e22e:	f008 feb1 	bl	8016f94 <put_memory>
 800e232:	42af      	cmp	r7, r5
 800e234:	60a4      	str	r4, [r4, #8]
 800e236:	f884 800c 	strb.w	r8, [r4, #12]
 800e23a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e23e:	d1f3      	bne.n	800e228 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop

0800e248 <rmw_uxrce_init_wait_set_memory>:
 800e248:	b1e2      	cbz	r2, 800e284 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e24e:	7b05      	ldrb	r5, [r0, #12]
 800e250:	4606      	mov	r6, r0
 800e252:	b9ad      	cbnz	r5, 800e280 <rmw_uxrce_init_wait_set_memory+0x38>
 800e254:	231c      	movs	r3, #28
 800e256:	e9c0 5500 	strd	r5, r5, [r0]
 800e25a:	6083      	str	r3, [r0, #8]
 800e25c:	f240 1301 	movw	r3, #257	@ 0x101
 800e260:	4617      	mov	r7, r2
 800e262:	8183      	strh	r3, [r0, #12]
 800e264:	460c      	mov	r4, r1
 800e266:	46a8      	mov	r8, r5
 800e268:	4621      	mov	r1, r4
 800e26a:	4630      	mov	r0, r6
 800e26c:	3501      	adds	r5, #1
 800e26e:	f008 fe91 	bl	8016f94 <put_memory>
 800e272:	42af      	cmp	r7, r5
 800e274:	60a4      	str	r4, [r4, #8]
 800e276:	f884 800c 	strb.w	r8, [r4, #12]
 800e27a:	f104 041c 	add.w	r4, r4, #28
 800e27e:	d1f3      	bne.n	800e268 <rmw_uxrce_init_wait_set_memory+0x20>
 800e280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop

0800e288 <rmw_uxrce_init_guard_condition_memory>:
 800e288:	b1e2      	cbz	r2, 800e2c4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28e:	7b05      	ldrb	r5, [r0, #12]
 800e290:	4606      	mov	r6, r0
 800e292:	b9ad      	cbnz	r5, 800e2c0 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e294:	2320      	movs	r3, #32
 800e296:	e9c0 5500 	strd	r5, r5, [r0]
 800e29a:	6083      	str	r3, [r0, #8]
 800e29c:	f240 1301 	movw	r3, #257	@ 0x101
 800e2a0:	4617      	mov	r7, r2
 800e2a2:	8183      	strh	r3, [r0, #12]
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	46a8      	mov	r8, r5
 800e2a8:	4621      	mov	r1, r4
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	3501      	adds	r5, #1
 800e2ae:	f008 fe71 	bl	8016f94 <put_memory>
 800e2b2:	42af      	cmp	r7, r5
 800e2b4:	60a4      	str	r4, [r4, #8]
 800e2b6:	f884 800c 	strb.w	r8, [r4, #12]
 800e2ba:	f104 0420 	add.w	r4, r4, #32
 800e2be:	d1f3      	bne.n	800e2a8 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop

0800e2c8 <rmw_uxrce_fini_session_memory>:
 800e2c8:	4601      	mov	r1, r0
 800e2ca:	4801      	ldr	r0, [pc, #4]	@ (800e2d0 <rmw_uxrce_fini_session_memory+0x8>)
 800e2cc:	f008 be62 	b.w	8016f94 <put_memory>
 800e2d0:	20011760 	.word	0x20011760

0800e2d4 <rmw_uxrce_fini_node_memory>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	6800      	ldr	r0, [r0, #0]
 800e2da:	b128      	cbz	r0, 800e2e8 <rmw_uxrce_fini_node_memory+0x14>
 800e2dc:	4b07      	ldr	r3, [pc, #28]	@ (800e2fc <rmw_uxrce_fini_node_memory+0x28>)
 800e2de:	6819      	ldr	r1, [r3, #0]
 800e2e0:	f7f1 ff96 	bl	8000210 <strcmp>
 800e2e4:	b940      	cbnz	r0, 800e2f8 <rmw_uxrce_fini_node_memory+0x24>
 800e2e6:	6020      	str	r0, [r4, #0]
 800e2e8:	6861      	ldr	r1, [r4, #4]
 800e2ea:	b129      	cbz	r1, 800e2f8 <rmw_uxrce_fini_node_memory+0x24>
 800e2ec:	2500      	movs	r5, #0
 800e2ee:	4804      	ldr	r0, [pc, #16]	@ (800e300 <rmw_uxrce_fini_node_memory+0x2c>)
 800e2f0:	610d      	str	r5, [r1, #16]
 800e2f2:	f008 fe4f 	bl	8016f94 <put_memory>
 800e2f6:	6065      	str	r5, [r4, #4]
 800e2f8:	bd38      	pop	{r3, r4, r5, pc}
 800e2fa:	bf00      	nop
 800e2fc:	08021d44 	.word	0x08021d44
 800e300:	200101a4 	.word	0x200101a4

0800e304 <rmw_uxrce_fini_publisher_memory>:
 800e304:	b510      	push	{r4, lr}
 800e306:	4604      	mov	r4, r0
 800e308:	6800      	ldr	r0, [r0, #0]
 800e30a:	b128      	cbz	r0, 800e318 <rmw_uxrce_fini_publisher_memory+0x14>
 800e30c:	4b06      	ldr	r3, [pc, #24]	@ (800e328 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e30e:	6819      	ldr	r1, [r3, #0]
 800e310:	f7f1 ff7e 	bl	8000210 <strcmp>
 800e314:	b938      	cbnz	r0, 800e326 <rmw_uxrce_fini_publisher_memory+0x22>
 800e316:	6020      	str	r0, [r4, #0]
 800e318:	6861      	ldr	r1, [r4, #4]
 800e31a:	b121      	cbz	r1, 800e326 <rmw_uxrce_fini_publisher_memory+0x22>
 800e31c:	4803      	ldr	r0, [pc, #12]	@ (800e32c <rmw_uxrce_fini_publisher_memory+0x28>)
 800e31e:	f008 fe39 	bl	8016f94 <put_memory>
 800e322:	2300      	movs	r3, #0
 800e324:	6063      	str	r3, [r4, #4]
 800e326:	bd10      	pop	{r4, pc}
 800e328:	08021d44 	.word	0x08021d44
 800e32c:	200100f0 	.word	0x200100f0

0800e330 <rmw_uxrce_fini_subscription_memory>:
 800e330:	b510      	push	{r4, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	6800      	ldr	r0, [r0, #0]
 800e336:	b128      	cbz	r0, 800e344 <rmw_uxrce_fini_subscription_memory+0x14>
 800e338:	4b06      	ldr	r3, [pc, #24]	@ (800e354 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e33a:	6819      	ldr	r1, [r3, #0]
 800e33c:	f7f1 ff68 	bl	8000210 <strcmp>
 800e340:	b938      	cbnz	r0, 800e352 <rmw_uxrce_fini_subscription_memory+0x22>
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	6861      	ldr	r1, [r4, #4]
 800e346:	b121      	cbz	r1, 800e352 <rmw_uxrce_fini_subscription_memory+0x22>
 800e348:	4803      	ldr	r0, [pc, #12]	@ (800e358 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e34a:	f008 fe23 	bl	8016f94 <put_memory>
 800e34e:	2300      	movs	r3, #0
 800e350:	6063      	str	r3, [r4, #4]
 800e352:	bd10      	pop	{r4, pc}
 800e354:	08021d44 	.word	0x08021d44
 800e358:	2000f870 	.word	0x2000f870

0800e35c <rmw_uxrce_fini_service_memory>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	4604      	mov	r4, r0
 800e360:	6800      	ldr	r0, [r0, #0]
 800e362:	b128      	cbz	r0, 800e370 <rmw_uxrce_fini_service_memory+0x14>
 800e364:	4b06      	ldr	r3, [pc, #24]	@ (800e380 <rmw_uxrce_fini_service_memory+0x24>)
 800e366:	6819      	ldr	r1, [r3, #0]
 800e368:	f7f1 ff52 	bl	8000210 <strcmp>
 800e36c:	b938      	cbnz	r0, 800e37e <rmw_uxrce_fini_service_memory+0x22>
 800e36e:	6020      	str	r0, [r4, #0]
 800e370:	6861      	ldr	r1, [r4, #4]
 800e372:	b121      	cbz	r1, 800e37e <rmw_uxrce_fini_service_memory+0x22>
 800e374:	4803      	ldr	r0, [pc, #12]	@ (800e384 <rmw_uxrce_fini_service_memory+0x28>)
 800e376:	f008 fe0d 	bl	8016f94 <put_memory>
 800e37a:	2300      	movs	r3, #0
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	bd10      	pop	{r4, pc}
 800e380:	08021d44 	.word	0x08021d44
 800e384:	2000f428 	.word	0x2000f428

0800e388 <rmw_uxrce_fini_client_memory>:
 800e388:	b510      	push	{r4, lr}
 800e38a:	4604      	mov	r4, r0
 800e38c:	6800      	ldr	r0, [r0, #0]
 800e38e:	b128      	cbz	r0, 800e39c <rmw_uxrce_fini_client_memory+0x14>
 800e390:	4b06      	ldr	r3, [pc, #24]	@ (800e3ac <rmw_uxrce_fini_client_memory+0x24>)
 800e392:	6819      	ldr	r1, [r3, #0]
 800e394:	f7f1 ff3c 	bl	8000210 <strcmp>
 800e398:	b938      	cbnz	r0, 800e3aa <rmw_uxrce_fini_client_memory+0x22>
 800e39a:	6020      	str	r0, [r4, #0]
 800e39c:	6861      	ldr	r1, [r4, #4]
 800e39e:	b121      	cbz	r1, 800e3aa <rmw_uxrce_fini_client_memory+0x22>
 800e3a0:	4803      	ldr	r0, [pc, #12]	@ (800e3b0 <rmw_uxrce_fini_client_memory+0x28>)
 800e3a2:	f008 fdf7 	bl	8016f94 <put_memory>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	6063      	str	r3, [r4, #4]
 800e3aa:	bd10      	pop	{r4, pc}
 800e3ac:	08021d44 	.word	0x08021d44
 800e3b0:	2000f350 	.word	0x2000f350

0800e3b4 <rmw_uxrce_fini_topic_memory>:
 800e3b4:	b510      	push	{r4, lr}
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	4803      	ldr	r0, [pc, #12]	@ (800e3c8 <rmw_uxrce_fini_topic_memory+0x14>)
 800e3bc:	f008 fdea 	bl	8016f94 <put_memory>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61a3      	str	r3, [r4, #24]
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	bf00      	nop
 800e3c8:	2000f274 	.word	0x2000f274

0800e3cc <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	b530      	push	{r4, r5, lr}
 800e3d0:	4929      	ldr	r1, [pc, #164]	@ (800e478 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800e3d2:	ac03      	add	r4, sp, #12
 800e3d4:	e884 000c 	stmia.w	r4, {r2, r3}
 800e3d8:	680c      	ldr	r4, [r1, #0]
 800e3da:	461d      	mov	r5, r3
 800e3dc:	4602      	mov	r2, r0
 800e3de:	2c00      	cmp	r4, #0
 800e3e0:	d043      	beq.n	800e46a <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	6883      	ldr	r3, [r0, #8]
 800e3e8:	6840      	ldr	r0, [r0, #4]
 800e3ea:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	bf08      	it	eq
 800e3f2:	3101      	addeq	r1, #1
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d1f6      	bne.n	800e3e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800e3f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d027      	beq.n	800e450 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800e400:	d906      	bls.n	800e410 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e402:	2b03      	cmp	r3, #3
 800e404:	d004      	beq.n	800e410 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e40a:	2000      	movs	r0, #0
 800e40c:	b002      	add	sp, #8
 800e40e:	4770      	bx	lr
 800e410:	b1fd      	cbz	r5, 800e452 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e412:	428d      	cmp	r5, r1
 800e414:	d81d      	bhi.n	800e452 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e416:	2c00      	cmp	r4, #0
 800e418:	d0f5      	beq.n	800e406 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e41a:	2000      	movs	r0, #0
 800e41c:	f04f 3cff 	mov.w	ip, #4294967295
 800e420:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800e424:	e001      	b.n	800e42a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800e426:	6864      	ldr	r4, [r4, #4]
 800e428:	b1dc      	cbz	r4, 800e462 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800e42a:	68a3      	ldr	r3, [r4, #8]
 800e42c:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800e430:	428a      	cmp	r2, r1
 800e432:	d1f8      	bne.n	800e426 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e434:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800e438:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e43c:	4561      	cmp	r1, ip
 800e43e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e442:	eb73 0e05 	sbcs.w	lr, r3, r5
 800e446:	daee      	bge.n	800e426 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e448:	468c      	mov	ip, r1
 800e44a:	461d      	mov	r5, r3
 800e44c:	4620      	mov	r0, r4
 800e44e:	e7ea      	b.n	800e426 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e450:	b92d      	cbnz	r5, 800e45e <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800e452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e456:	4808      	ldr	r0, [pc, #32]	@ (800e478 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800e458:	b002      	add	sp, #8
 800e45a:	f008 bd8b 	b.w	8016f74 <get_memory>
 800e45e:	428d      	cmp	r5, r1
 800e460:	d8f7      	bhi.n	800e452 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e466:	b002      	add	sp, #8
 800e468:	4770      	bx	lr
 800e46a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d0ef      	beq.n	800e452 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e472:	d9ee      	bls.n	800e452 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e474:	4621      	mov	r1, r4
 800e476:	e7c4      	b.n	800e402 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800e478:	2000f0c0 	.word	0x2000f0c0

0800e47c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e47c:	4b11      	ldr	r3, [pc, #68]	@ (800e4c4 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	b1eb      	cbz	r3, 800e4be <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e482:	b530      	push	{r4, r5, lr}
 800e484:	4684      	mov	ip, r0
 800e486:	f04f 34ff 	mov.w	r4, #4294967295
 800e48a:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800e48e:	2000      	movs	r0, #0
 800e490:	e001      	b.n	800e496 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	b193      	cbz	r3, 800e4bc <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800e496:	689a      	ldr	r2, [r3, #8]
 800e498:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e49c:	458c      	cmp	ip, r1
 800e49e:	d1f8      	bne.n	800e492 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e4a0:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e4a4:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e4a8:	42a1      	cmp	r1, r4
 800e4aa:	eb72 050e 	sbcs.w	r5, r2, lr
 800e4ae:	daf0      	bge.n	800e492 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	4696      	mov	lr, r2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1ec      	bne.n	800e496 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e4bc:	bd30      	pop	{r4, r5, pc}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	2000f0c0 	.word	0x2000f0c0

0800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	4b3c      	ldr	r3, [pc, #240]	@ (800e5c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e4ce:	ed2d 8b06 	vpush	{d8-d10}
 800e4d2:	f8d3 8000 	ldr.w	r8, [r3]
 800e4d6:	b08d      	sub	sp, #52	@ 0x34
 800e4d8:	f7ff fd76 	bl	800dfc8 <rmw_uros_epoch_nanos>
 800e4dc:	f1b8 0f00 	cmp.w	r8, #0
 800e4e0:	d05c      	beq.n	800e59c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800e4e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e4e6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e4ea:	2b04      	cmp	r3, #4
 800e4ec:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800e5a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e4f0:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800e5b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e4f4:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800e5b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e4f8:	4683      	mov	fp, r0
 800e4fa:	ac04      	add	r4, sp, #16
 800e4fc:	468a      	mov	sl, r1
 800e4fe:	d03f      	beq.n	800e580 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800e500:	2b05      	cmp	r3, #5
 800e502:	d044      	beq.n	800e58e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800e504:	2b03      	cmp	r3, #3
 800e506:	d03b      	beq.n	800e580 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800e508:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e50c:	ed8d ab06 	vstr	d10, [sp, #24]
 800e510:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e514:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e518:	ab08      	add	r3, sp, #32
 800e51a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e51c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e520:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e524:	f008 fb5c 	bl	8016be0 <rmw_time_equal>
 800e528:	b118      	cbz	r0, 800e532 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800e52a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e52e:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e532:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e536:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800e53a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800e53e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800e542:	f008 fba1 	bl	8016c88 <rmw_time_total_nsec>
 800e546:	183f      	adds	r7, r7, r0
 800e548:	eb46 0601 	adc.w	r6, r6, r1
 800e54c:	455f      	cmp	r7, fp
 800e54e:	eb76 060a 	sbcs.w	r6, r6, sl
 800e552:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e556:	db05      	blt.n	800e564 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800e558:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e55c:	4593      	cmp	fp, r2
 800e55e:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e562:	da03      	bge.n	800e56c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800e564:	4816      	ldr	r0, [pc, #88]	@ (800e5c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e566:	4641      	mov	r1, r8
 800e568:	f008 fd14 	bl	8016f94 <put_memory>
 800e56c:	f1b9 0f00 	cmp.w	r9, #0
 800e570:	d014      	beq.n	800e59c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800e572:	46c8      	mov	r8, r9
 800e574:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e578:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e57c:	2b04      	cmp	r3, #4
 800e57e:	d1bf      	bne.n	800e500 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800e580:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e584:	3340      	adds	r3, #64	@ 0x40
 800e586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e58c:	e7c0      	b.n	800e510 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800e58e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e592:	3348      	adds	r3, #72	@ 0x48
 800e594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e59a:	e7b9      	b.n	800e510 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800e59c:	b00d      	add	sp, #52	@ 0x34
 800e59e:	ecbd 8b06 	vpop	{d8-d10}
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	bf00      	nop
	...
 800e5b0:	00000001 	.word	0x00000001
 800e5b4:	00000000 	.word	0x00000000
 800e5b8:	0000001e 	.word	0x0000001e
 800e5bc:	00000000 	.word	0x00000000
 800e5c0:	2000f0c0 	.word	0x2000f0c0

0800e5c4 <run_xrce_session>:
 800e5c4:	b500      	push	{lr}
 800e5c6:	f891 c002 	ldrb.w	ip, [r1, #2]
 800e5ca:	b087      	sub	sp, #28
 800e5cc:	f1bc 0f01 	cmp.w	ip, #1
 800e5d0:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e5d4:	d00f      	beq.n	800e5f6 <run_xrce_session+0x32>
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	2301      	movs	r3, #1
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	f10d 020e 	add.w	r2, sp, #14
 800e5e0:	f10d 0317 	add.w	r3, sp, #23
 800e5e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5e8:	f002 fa4c 	bl	8010a84 <uxr_run_session_until_all_status>
 800e5ec:	b100      	cbz	r0, 800e5f0 <run_xrce_session+0x2c>
 800e5ee:	2001      	movs	r0, #1
 800e5f0:	b007      	add	sp, #28
 800e5f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5fa:	f001 fe85 	bl	8010308 <uxr_flash_output_streams>
 800e5fe:	2001      	movs	r0, #1
 800e600:	e7f6      	b.n	800e5f0 <run_xrce_session+0x2c>
 800e602:	bf00      	nop

0800e604 <convert_qos_profile>:
 800e604:	780a      	ldrb	r2, [r1, #0]
 800e606:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e60a:	f1a2 0202 	sub.w	r2, r2, #2
 800e60e:	fab2 f282 	clz	r2, r2
 800e612:	0952      	lsrs	r2, r2, #5
 800e614:	7082      	strb	r2, [r0, #2]
 800e616:	7a4a      	ldrb	r2, [r1, #9]
 800e618:	8889      	ldrh	r1, [r1, #4]
 800e61a:	8081      	strh	r1, [r0, #4]
 800e61c:	f1a2 0202 	sub.w	r2, r2, #2
 800e620:	f1ac 0c02 	sub.w	ip, ip, #2
 800e624:	fab2 f282 	clz	r2, r2
 800e628:	fabc fc8c 	clz	ip, ip
 800e62c:	0952      	lsrs	r2, r2, #5
 800e62e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e632:	0052      	lsls	r2, r2, #1
 800e634:	f880 c001 	strb.w	ip, [r0, #1]
 800e638:	7002      	strb	r2, [r0, #0]
 800e63a:	4770      	bx	lr

0800e63c <generate_type_name>:
 800e63c:	b530      	push	{r4, r5, lr}
 800e63e:	2300      	movs	r3, #0
 800e640:	700b      	strb	r3, [r1, #0]
 800e642:	6803      	ldr	r3, [r0, #0]
 800e644:	b087      	sub	sp, #28
 800e646:	4614      	mov	r4, r2
 800e648:	b1d3      	cbz	r3, 800e680 <generate_type_name+0x44>
 800e64a:	4a0f      	ldr	r2, [pc, #60]	@ (800e688 <generate_type_name+0x4c>)
 800e64c:	4615      	mov	r5, r2
 800e64e:	9203      	str	r2, [sp, #12]
 800e650:	9500      	str	r5, [sp, #0]
 800e652:	6842      	ldr	r2, [r0, #4]
 800e654:	480d      	ldr	r0, [pc, #52]	@ (800e68c <generate_type_name+0x50>)
 800e656:	9001      	str	r0, [sp, #4]
 800e658:	4608      	mov	r0, r1
 800e65a:	490d      	ldr	r1, [pc, #52]	@ (800e690 <generate_type_name+0x54>)
 800e65c:	9204      	str	r2, [sp, #16]
 800e65e:	9105      	str	r1, [sp, #20]
 800e660:	9102      	str	r1, [sp, #8]
 800e662:	4a0c      	ldr	r2, [pc, #48]	@ (800e694 <generate_type_name+0x58>)
 800e664:	4621      	mov	r1, r4
 800e666:	f00d f817 	bl	801b698 <snprintf>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	db05      	blt.n	800e67a <generate_type_name+0x3e>
 800e66e:	4284      	cmp	r4, r0
 800e670:	bfd4      	ite	le
 800e672:	2000      	movle	r0, #0
 800e674:	2001      	movgt	r0, #1
 800e676:	b007      	add	sp, #28
 800e678:	bd30      	pop	{r4, r5, pc}
 800e67a:	2000      	movs	r0, #0
 800e67c:	b007      	add	sp, #28
 800e67e:	bd30      	pop	{r4, r5, pc}
 800e680:	4b05      	ldr	r3, [pc, #20]	@ (800e698 <generate_type_name+0x5c>)
 800e682:	4a01      	ldr	r2, [pc, #4]	@ (800e688 <generate_type_name+0x4c>)
 800e684:	461d      	mov	r5, r3
 800e686:	e7e2      	b.n	800e64e <generate_type_name+0x12>
 800e688:	08020c88 	.word	0x08020c88
 800e68c:	08020ca0 	.word	0x08020ca0
 800e690:	08020c9c 	.word	0x08020c9c
 800e694:	08020c8c 	.word	0x08020c8c
 800e698:	08020cf8 	.word	0x08020cf8

0800e69c <generate_topic_name>:
 800e69c:	b510      	push	{r4, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	9000      	str	r0, [sp, #0]
 800e6a4:	4b08      	ldr	r3, [pc, #32]	@ (800e6c8 <generate_topic_name+0x2c>)
 800e6a6:	4a09      	ldr	r2, [pc, #36]	@ (800e6cc <generate_topic_name+0x30>)
 800e6a8:	4608      	mov	r0, r1
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	f00c fff4 	bl	801b698 <snprintf>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	db05      	blt.n	800e6c0 <generate_topic_name+0x24>
 800e6b4:	4284      	cmp	r4, r0
 800e6b6:	bfd4      	ite	le
 800e6b8:	2000      	movle	r0, #0
 800e6ba:	2001      	movgt	r0, #1
 800e6bc:	b002      	add	sp, #8
 800e6be:	bd10      	pop	{r4, pc}
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	b002      	add	sp, #8
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	bf00      	nop
 800e6c8:	080216dc 	.word	0x080216dc
 800e6cc:	08020ca4 	.word	0x08020ca4

0800e6d0 <is_uxrce_rmw_identifier_valid>:
 800e6d0:	b510      	push	{r4, lr}
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	b140      	cbz	r0, 800e6e8 <is_uxrce_rmw_identifier_valid+0x18>
 800e6d6:	f008 fcd3 	bl	8017080 <rmw_get_implementation_identifier>
 800e6da:	4601      	mov	r1, r0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f7f1 fd97 	bl	8000210 <strcmp>
 800e6e2:	fab0 f080 	clz	r0, r0
 800e6e6:	0940      	lsrs	r0, r0, #5
 800e6e8:	bd10      	pop	{r4, pc}
 800e6ea:	bf00      	nop

0800e6ec <get_message_typesupport_handle>:
 800e6ec:	6883      	ldr	r3, [r0, #8]
 800e6ee:	4718      	bx	r3

0800e6f0 <get_message_typesupport_handle_function>:
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	6800      	ldr	r0, [r0, #0]
 800e6f6:	f7f1 fd8b 	bl	8000210 <strcmp>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	bf0c      	ite	eq
 800e6fe:	4620      	moveq	r0, r4
 800e700:	2000      	movne	r0, #0
 800e702:	bd10      	pop	{r4, pc}

0800e704 <rosidl_runtime_c__float__Sequence__init>:
 800e704:	b1b0      	cbz	r0, 800e734 <rosidl_runtime_c__float__Sequence__init+0x30>
 800e706:	b530      	push	{r4, r5, lr}
 800e708:	460d      	mov	r5, r1
 800e70a:	b087      	sub	sp, #28
 800e70c:	4604      	mov	r4, r0
 800e70e:	b931      	cbnz	r1, 800e71e <rosidl_runtime_c__float__Sequence__init+0x1a>
 800e710:	4608      	mov	r0, r1
 800e712:	e9c4 0500 	strd	r0, r5, [r4]
 800e716:	60a5      	str	r5, [r4, #8]
 800e718:	2001      	movs	r0, #1
 800e71a:	b007      	add	sp, #28
 800e71c:	bd30      	pop	{r4, r5, pc}
 800e71e:	a801      	add	r0, sp, #4
 800e720:	f7ff f96e 	bl	800da00 <rcutils_get_default_allocator>
 800e724:	9b01      	ldr	r3, [sp, #4]
 800e726:	9905      	ldr	r1, [sp, #20]
 800e728:	00a8      	lsls	r0, r5, #2
 800e72a:	4798      	blx	r3
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d1f0      	bne.n	800e712 <rosidl_runtime_c__float__Sequence__init+0xe>
 800e730:	2000      	movs	r0, #0
 800e732:	e7f2      	b.n	800e71a <rosidl_runtime_c__float__Sequence__init+0x16>
 800e734:	2000      	movs	r0, #0
 800e736:	4770      	bx	lr

0800e738 <rosidl_runtime_c__float__Sequence__fini>:
 800e738:	b188      	cbz	r0, 800e75e <rosidl_runtime_c__float__Sequence__fini+0x26>
 800e73a:	b510      	push	{r4, lr}
 800e73c:	6803      	ldr	r3, [r0, #0]
 800e73e:	b086      	sub	sp, #24
 800e740:	4604      	mov	r4, r0
 800e742:	b153      	cbz	r3, 800e75a <rosidl_runtime_c__float__Sequence__fini+0x22>
 800e744:	a801      	add	r0, sp, #4
 800e746:	f7ff f95b 	bl	800da00 <rcutils_get_default_allocator>
 800e74a:	9b02      	ldr	r3, [sp, #8]
 800e74c:	9905      	ldr	r1, [sp, #20]
 800e74e:	6820      	ldr	r0, [r4, #0]
 800e750:	4798      	blx	r3
 800e752:	2300      	movs	r3, #0
 800e754:	e9c4 3300 	strd	r3, r3, [r4]
 800e758:	60a3      	str	r3, [r4, #8]
 800e75a:	b006      	add	sp, #24
 800e75c:	bd10      	pop	{r4, pc}
 800e75e:	4770      	bx	lr

0800e760 <rosidl_runtime_c__String__init>:
 800e760:	b1b0      	cbz	r0, 800e790 <rosidl_runtime_c__String__init+0x30>
 800e762:	b510      	push	{r4, lr}
 800e764:	b086      	sub	sp, #24
 800e766:	4604      	mov	r4, r0
 800e768:	a801      	add	r0, sp, #4
 800e76a:	f7ff f949 	bl	800da00 <rcutils_get_default_allocator>
 800e76e:	9b01      	ldr	r3, [sp, #4]
 800e770:	9905      	ldr	r1, [sp, #20]
 800e772:	2001      	movs	r0, #1
 800e774:	4798      	blx	r3
 800e776:	6020      	str	r0, [r4, #0]
 800e778:	b138      	cbz	r0, 800e78a <rosidl_runtime_c__String__init+0x2a>
 800e77a:	2200      	movs	r2, #0
 800e77c:	2301      	movs	r3, #1
 800e77e:	7002      	strb	r2, [r0, #0]
 800e780:	4618      	mov	r0, r3
 800e782:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800e786:	b006      	add	sp, #24
 800e788:	bd10      	pop	{r4, pc}
 800e78a:	2000      	movs	r0, #0
 800e78c:	b006      	add	sp, #24
 800e78e:	bd10      	pop	{r4, pc}
 800e790:	2000      	movs	r0, #0
 800e792:	4770      	bx	lr

0800e794 <rosidl_runtime_c__String__fini>:
 800e794:	b320      	cbz	r0, 800e7e0 <rosidl_runtime_c__String__fini+0x4c>
 800e796:	b510      	push	{r4, lr}
 800e798:	6803      	ldr	r3, [r0, #0]
 800e79a:	b086      	sub	sp, #24
 800e79c:	4604      	mov	r4, r0
 800e79e:	b173      	cbz	r3, 800e7be <rosidl_runtime_c__String__fini+0x2a>
 800e7a0:	6883      	ldr	r3, [r0, #8]
 800e7a2:	b1f3      	cbz	r3, 800e7e2 <rosidl_runtime_c__String__fini+0x4e>
 800e7a4:	a801      	add	r0, sp, #4
 800e7a6:	f7ff f92b 	bl	800da00 <rcutils_get_default_allocator>
 800e7aa:	9b02      	ldr	r3, [sp, #8]
 800e7ac:	9905      	ldr	r1, [sp, #20]
 800e7ae:	6820      	ldr	r0, [r4, #0]
 800e7b0:	4798      	blx	r3
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e9c4 3300 	strd	r3, r3, [r4]
 800e7b8:	60a3      	str	r3, [r4, #8]
 800e7ba:	b006      	add	sp, #24
 800e7bc:	bd10      	pop	{r4, pc}
 800e7be:	6843      	ldr	r3, [r0, #4]
 800e7c0:	b9db      	cbnz	r3, 800e7fa <rosidl_runtime_c__String__fini+0x66>
 800e7c2:	6883      	ldr	r3, [r0, #8]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d0f8      	beq.n	800e7ba <rosidl_runtime_c__String__fini+0x26>
 800e7c8:	4b12      	ldr	r3, [pc, #72]	@ (800e814 <rosidl_runtime_c__String__fini+0x80>)
 800e7ca:	4813      	ldr	r0, [pc, #76]	@ (800e818 <rosidl_runtime_c__String__fini+0x84>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2251      	movs	r2, #81	@ 0x51
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	f00c ff52 	bl	801b67c <fwrite>
 800e7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7dc:	f00c f93c 	bl	801aa58 <exit>
 800e7e0:	4770      	bx	lr
 800e7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e814 <rosidl_runtime_c__String__fini+0x80>)
 800e7e4:	480d      	ldr	r0, [pc, #52]	@ (800e81c <rosidl_runtime_c__String__fini+0x88>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	224c      	movs	r2, #76	@ 0x4c
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	2101      	movs	r1, #1
 800e7ee:	f00c ff45 	bl	801b67c <fwrite>
 800e7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f6:	f00c f92f 	bl	801aa58 <exit>
 800e7fa:	4b06      	ldr	r3, [pc, #24]	@ (800e814 <rosidl_runtime_c__String__fini+0x80>)
 800e7fc:	4808      	ldr	r0, [pc, #32]	@ (800e820 <rosidl_runtime_c__String__fini+0x8c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	224e      	movs	r2, #78	@ 0x4e
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	2101      	movs	r1, #1
 800e806:	f00c ff39 	bl	801b67c <fwrite>
 800e80a:	f04f 30ff 	mov.w	r0, #4294967295
 800e80e:	f00c f923 	bl	801aa58 <exit>
 800e812:	bf00      	nop
 800e814:	20003554 	.word	0x20003554
 800e818:	08020d4c 	.word	0x08020d4c
 800e81c:	08020cac 	.word	0x08020cac
 800e820:	08020cfc 	.word	0x08020cfc

0800e824 <rosidl_runtime_c__String__assign>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	460c      	mov	r4, r1
 800e82a:	b086      	sub	sp, #24
 800e82c:	b319      	cbz	r1, 800e876 <rosidl_runtime_c__String__assign+0x52>
 800e82e:	4605      	mov	r5, r0
 800e830:	4608      	mov	r0, r1
 800e832:	f7f1 fd4d 	bl	80002d0 <strlen>
 800e836:	4606      	mov	r6, r0
 800e838:	b1cd      	cbz	r5, 800e86e <rosidl_runtime_c__String__assign+0x4a>
 800e83a:	a801      	add	r0, sp, #4
 800e83c:	f106 0801 	add.w	r8, r6, #1
 800e840:	f7ff f8de 	bl	800da00 <rcutils_get_default_allocator>
 800e844:	9b03      	ldr	r3, [sp, #12]
 800e846:	9a05      	ldr	r2, [sp, #20]
 800e848:	6828      	ldr	r0, [r5, #0]
 800e84a:	4641      	mov	r1, r8
 800e84c:	4798      	blx	r3
 800e84e:	4607      	mov	r7, r0
 800e850:	b168      	cbz	r0, 800e86e <rosidl_runtime_c__String__assign+0x4a>
 800e852:	4621      	mov	r1, r4
 800e854:	4632      	mov	r2, r6
 800e856:	f00d f8e7 	bl	801ba28 <memcpy>
 800e85a:	2300      	movs	r3, #0
 800e85c:	2001      	movs	r0, #1
 800e85e:	55bb      	strb	r3, [r7, r6]
 800e860:	e9c5 7600 	strd	r7, r6, [r5]
 800e864:	f8c5 8008 	str.w	r8, [r5, #8]
 800e868:	b006      	add	sp, #24
 800e86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e86e:	2000      	movs	r0, #0
 800e870:	b006      	add	sp, #24
 800e872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e876:	4608      	mov	r0, r1
 800e878:	b006      	add	sp, #24
 800e87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87e:	bf00      	nop

0800e880 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e884:	6805      	ldr	r5, [r0, #0]
 800e886:	4604      	mov	r4, r0
 800e888:	4628      	mov	r0, r5
 800e88a:	460e      	mov	r6, r1
 800e88c:	f7f1 fcc0 	bl	8000210 <strcmp>
 800e890:	b308      	cbz	r0, 800e8d6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800e892:	4b12      	ldr	r3, [pc, #72]	@ (800e8dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800e894:	4628      	mov	r0, r5
 800e896:	6819      	ldr	r1, [r3, #0]
 800e898:	f7f1 fcba 	bl	8000210 <strcmp>
 800e89c:	4605      	mov	r5, r0
 800e89e:	b980      	cbnz	r0, 800e8c2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800e8a0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e8a4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8a8:	b1ac      	cbz	r4, 800e8d6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800e8aa:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800e8ae:	3f04      	subs	r7, #4
 800e8b0:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	f7f1 fcab 	bl	8000210 <strcmp>
 800e8ba:	b128      	cbz	r0, 800e8c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800e8bc:	3501      	adds	r5, #1
 800e8be:	42a5      	cmp	r5, r4
 800e8c0:	d1f6      	bne.n	800e8b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e8cc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d4:	4718      	bx	r3
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8dc:	200003a0 	.word	0x200003a0

0800e8e0 <std_msgs__msg__Float32MultiArray__init>:
 800e8e0:	b1e0      	cbz	r0, 800e91c <std_msgs__msg__Float32MultiArray__init+0x3c>
 800e8e2:	b538      	push	{r3, r4, r5, lr}
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	f000 f827 	bl	800e938 <std_msgs__msg__MultiArrayLayout__init>
 800e8ea:	b138      	cbz	r0, 800e8fc <std_msgs__msg__Float32MultiArray__init+0x1c>
 800e8ec:	f104 0510 	add.w	r5, r4, #16
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	f7ff ff06 	bl	800e704 <rosidl_runtime_c__float__Sequence__init>
 800e8f8:	b148      	cbz	r0, 800e90e <std_msgs__msg__Float32MultiArray__init+0x2e>
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 f82b 	bl	800e958 <std_msgs__msg__MultiArrayLayout__fini>
 800e902:	f104 0010 	add.w	r0, r4, #16
 800e906:	f7ff ff17 	bl	800e738 <rosidl_runtime_c__float__Sequence__fini>
 800e90a:	2000      	movs	r0, #0
 800e90c:	bd38      	pop	{r3, r4, r5, pc}
 800e90e:	4620      	mov	r0, r4
 800e910:	f000 f822 	bl	800e958 <std_msgs__msg__MultiArrayLayout__fini>
 800e914:	4628      	mov	r0, r5
 800e916:	f7ff ff0f 	bl	800e738 <rosidl_runtime_c__float__Sequence__fini>
 800e91a:	e7f6      	b.n	800e90a <std_msgs__msg__Float32MultiArray__init+0x2a>
 800e91c:	2000      	movs	r0, #0
 800e91e:	4770      	bx	lr

0800e920 <std_msgs__msg__Float32MultiArray__fini>:
 800e920:	b148      	cbz	r0, 800e936 <std_msgs__msg__Float32MultiArray__fini+0x16>
 800e922:	b510      	push	{r4, lr}
 800e924:	4604      	mov	r4, r0
 800e926:	f000 f817 	bl	800e958 <std_msgs__msg__MultiArrayLayout__fini>
 800e92a:	f104 0010 	add.w	r0, r4, #16
 800e92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e932:	f7ff bf01 	b.w	800e738 <rosidl_runtime_c__float__Sequence__fini>
 800e936:	4770      	bx	lr

0800e938 <std_msgs__msg__MultiArrayLayout__init>:
 800e938:	b158      	cbz	r0, 800e952 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800e93a:	b510      	push	{r4, lr}
 800e93c:	2100      	movs	r1, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	f009 fd64 	bl	801840c <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800e944:	b100      	cbz	r0, 800e948 <std_msgs__msg__MultiArrayLayout__init+0x10>
 800e946:	bd10      	pop	{r4, pc}
 800e948:	4620      	mov	r0, r4
 800e94a:	f009 fda3 	bl	8018494 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800e94e:	2000      	movs	r0, #0
 800e950:	bd10      	pop	{r4, pc}
 800e952:	2000      	movs	r0, #0
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop

0800e958 <std_msgs__msg__MultiArrayLayout__fini>:
 800e958:	b108      	cbz	r0, 800e95e <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800e95a:	f009 bd9b 	b.w	8018494 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800e95e:	4770      	bx	lr

0800e960 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800e960:	4b04      	ldr	r3, [pc, #16]	@ (800e974 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	b10a      	cbz	r2, 800e96a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xa>
 800e966:	4803      	ldr	r0, [pc, #12]	@ (800e974 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800e968:	4770      	bx	lr
 800e96a:	4a03      	ldr	r2, [pc, #12]	@ (800e978 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x18>)
 800e96c:	4801      	ldr	r0, [pc, #4]	@ (800e974 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800e96e:	6812      	ldr	r2, [r2, #0]
 800e970:	601a      	str	r2, [r3, #0]
 800e972:	4770      	bx	lr
 800e974:	200003a8 	.word	0x200003a8
 800e978:	200003a0 	.word	0x200003a0

0800e97c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800e97c:	4a02      	ldr	r2, [pc, #8]	@ (800e988 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xc>)
 800e97e:	4b03      	ldr	r3, [pc, #12]	@ (800e98c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x10>)
 800e980:	6812      	ldr	r2, [r2, #0]
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	200003a0 	.word	0x200003a0
 800e98c:	200003a8 	.word	0x200003a8

0800e990 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__size_function__Float32MultiArray__data>:
 800e990:	6840      	ldr	r0, [r0, #4]
 800e992:	4770      	bx	lr

0800e994 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float32MultiArray__data>:
 800e994:	6800      	ldr	r0, [r0, #0]
 800e996:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e99a:	4770      	bx	lr

0800e99c <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float32MultiArray__data>:
 800e99c:	6803      	ldr	r3, [r0, #0]
 800e99e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	4770      	bx	lr

0800e9a8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__assign_function__Float32MultiArray__data>:
 800e9a8:	6803      	ldr	r3, [r0, #0]
 800e9aa:	6812      	ldr	r2, [r2, #0]
 800e9ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	4770      	bx	lr

0800e9b4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_init_function>:
 800e9b4:	f7ff bf94 	b.w	800e8e0 <std_msgs__msg__Float32MultiArray__init>

0800e9b8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_fini_function>:
 800e9b8:	f7ff bfb2 	b.w	800e920 <std_msgs__msg__Float32MultiArray__fini>

0800e9bc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__resize_function__Float32MultiArray__data>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4604      	mov	r4, r0
 800e9c0:	460d      	mov	r5, r1
 800e9c2:	f7ff feb9 	bl	800e738 <rosidl_runtime_c__float__Sequence__fini>
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ce:	f7ff be99 	b.w	800e704 <rosidl_runtime_c__float__Sequence__init>
 800e9d2:	bf00      	nop

0800e9d4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_function__Float32MultiArray__data>:
 800e9d4:	6800      	ldr	r0, [r0, #0]
 800e9d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e9da:	4770      	bx	lr

0800e9dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800e9dc:	b508      	push	{r3, lr}
 800e9de:	f000 f86f 	bl	800eac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800e9e2:	4b06      	ldr	r3, [pc, #24]	@ (800e9fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800e9e4:	4906      	ldr	r1, [pc, #24]	@ (800ea00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x24>)
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	60c8      	str	r0, [r1, #12]
 800e9ea:	b10a      	cbz	r2, 800e9f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>
 800e9ec:	4803      	ldr	r0, [pc, #12]	@ (800e9fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800e9ee:	bd08      	pop	{r3, pc}
 800e9f0:	4a04      	ldr	r2, [pc, #16]	@ (800ea04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x28>)
 800e9f2:	4802      	ldr	r0, [pc, #8]	@ (800e9fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800e9f4:	6812      	ldr	r2, [r2, #0]
 800e9f6:	601a      	str	r2, [r3, #0]
 800e9f8:	bd08      	pop	{r3, pc}
 800e9fa:	bf00      	nop
 800e9fc:	200003c8 	.word	0x200003c8
 800ea00:	200003e0 	.word	0x200003e0
 800ea04:	200003a4 	.word	0x200003a4

0800ea08 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800ea08:	f009 bc92 	b.w	8018330 <std_msgs__msg__Header__init>

0800ea0c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800ea0c:	f009 bcb0 	b.w	8018370 <std_msgs__msg__Header__fini>

0800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ea10:	b508      	push	{r3, lr}
 800ea12:	f000 fa37 	bl	800ee84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea16:	4b06      	ldr	r3, [pc, #24]	@ (800ea30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ea18:	4906      	ldr	r1, [pc, #24]	@ (800ea34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	60c8      	str	r0, [r1, #12]
 800ea1e:	b10a      	cbz	r2, 800ea24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800ea20:	4803      	ldr	r0, [pc, #12]	@ (800ea30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ea22:	bd08      	pop	{r3, pc}
 800ea24:	4a04      	ldr	r2, [pc, #16]	@ (800ea38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800ea26:	4802      	ldr	r0, [pc, #8]	@ (800ea30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ea28:	6812      	ldr	r2, [r2, #0]
 800ea2a:	601a      	str	r2, [r3, #0]
 800ea2c:	bd08      	pop	{r3, pc}
 800ea2e:	bf00      	nop
 800ea30:	20000458 	.word	0x20000458
 800ea34:	20000470 	.word	0x20000470
 800ea38:	200003a4 	.word	0x200003a4

0800ea3c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800ea3c:	6840      	ldr	r0, [r0, #4]
 800ea3e:	4770      	bx	lr

0800ea40 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800ea40:	6800      	ldr	r0, [r0, #0]
 800ea42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ea46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ea4a:	4770      	bx	lr

0800ea4c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800ea4c:	6803      	ldr	r3, [r0, #0]
 800ea4e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ea52:	b500      	push	{lr}
 800ea54:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800ea58:	4694      	mov	ip, r2
 800ea5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea62:	f8de 3000 	ldr.w	r3, [lr]
 800ea66:	f8cc 3000 	str.w	r3, [ip]
 800ea6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea6e:	bf00      	nop

0800ea70 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800ea70:	6803      	ldr	r3, [r0, #0]
 800ea72:	b500      	push	{lr}
 800ea74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ea78:	4696      	mov	lr, r2
 800ea7a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800ea7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea86:	f8de 3000 	ldr.w	r3, [lr]
 800ea8a:	f8cc 3000 	str.w	r3, [ip]
 800ea8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea92:	bf00      	nop

0800ea94 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800ea94:	f7ff bf50 	b.w	800e938 <std_msgs__msg__MultiArrayLayout__init>

0800ea98 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800ea98:	f7ff bf5e 	b.w	800e958 <std_msgs__msg__MultiArrayLayout__fini>

0800ea9c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800ea9c:	b538      	push	{r3, r4, r5, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	f009 fcf7 	bl	8018494 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaae:	f009 bcad 	b.w	801840c <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800eab2:	bf00      	nop

0800eab4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800eab4:	6800      	ldr	r0, [r0, #0]
 800eab6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800eaba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800eabe:	4770      	bx	lr

0800eac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800eac0:	b508      	push	{r3, lr}
 800eac2:	f009 fd5b 	bl	801857c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800eac6:	4b06      	ldr	r3, [pc, #24]	@ (800eae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800eac8:	4906      	ldr	r1, [pc, #24]	@ (800eae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	60c8      	str	r0, [r1, #12]
 800eace:	b10a      	cbz	r2, 800ead4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800ead0:	4803      	ldr	r0, [pc, #12]	@ (800eae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ead2:	bd08      	pop	{r3, pc}
 800ead4:	4a04      	ldr	r2, [pc, #16]	@ (800eae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800ead6:	4802      	ldr	r0, [pc, #8]	@ (800eae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ead8:	6812      	ldr	r2, [r2, #0]
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	bd08      	pop	{r3, pc}
 800eade:	bf00      	nop
 800eae0:	200004e8 	.word	0x200004e8
 800eae4:	20000500 	.word	0x20000500
 800eae8:	200003a4 	.word	0x200003a4

0800eaec <_Float32MultiArray__max_serialized_size>:
 800eaec:	b500      	push	{lr}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	f10d 0007 	add.w	r0, sp, #7
 800eaf8:	f88d 3007 	strb.w	r3, [sp, #7]
 800eafc:	f000 f9b0 	bl	800ee60 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800eb00:	b003      	add	sp, #12
 800eb02:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb06:	bf00      	nop

0800eb08 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	b160      	cbz	r0, 800eb28 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>
 800eb0e:	460d      	mov	r5, r1
 800eb10:	f000 f978 	bl	800ee04 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800eb14:	182e      	adds	r6, r5, r0
 800eb16:	2104      	movs	r1, #4
 800eb18:	4630      	mov	r0, r6
 800eb1a:	6967      	ldr	r7, [r4, #20]
 800eb1c:	f7fd fde2 	bl	800c6e4 <ucdr_alignment>
 800eb20:	1d04      	adds	r4, r0, #4
 800eb22:	4434      	add	r4, r6
 800eb24:	b90f      	cbnz	r7, 800eb2a <get_serialized_size_std_msgs__msg__Float32MultiArray+0x22>
 800eb26:	1b60      	subs	r0, r4, r5
 800eb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	2104      	movs	r1, #4
 800eb2e:	f7fd fdd9 	bl	800c6e4 <ucdr_alignment>
 800eb32:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800eb36:	4404      	add	r4, r0
 800eb38:	1b60      	subs	r0, r4, r5
 800eb3a:	e7f5      	b.n	800eb28 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>

0800eb3c <_Float32MultiArray__cdr_deserialize>:
 800eb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3e:	460c      	mov	r4, r1
 800eb40:	b083      	sub	sp, #12
 800eb42:	b1d1      	cbz	r1, 800eb7a <_Float32MultiArray__cdr_deserialize+0x3e>
 800eb44:	4606      	mov	r6, r0
 800eb46:	f000 f995 	bl	800ee74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800eb4a:	6843      	ldr	r3, [r0, #4]
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	4630      	mov	r0, r6
 800eb52:	4798      	blx	r3
 800eb54:	69a7      	ldr	r7, [r4, #24]
 800eb56:	6921      	ldr	r1, [r4, #16]
 800eb58:	ab01      	add	r3, sp, #4
 800eb5a:	463a      	mov	r2, r7
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	f000 fee7 	bl	800f930 <ucdr_deserialize_sequence_float>
 800eb62:	9b01      	ldr	r3, [sp, #4]
 800eb64:	4605      	mov	r5, r0
 800eb66:	b920      	cbnz	r0, 800eb72 <_Float32MultiArray__cdr_deserialize+0x36>
 800eb68:	429f      	cmp	r7, r3
 800eb6a:	d30a      	bcc.n	800eb82 <_Float32MultiArray__cdr_deserialize+0x46>
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	b003      	add	sp, #12
 800eb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb72:	4628      	mov	r0, r5
 800eb74:	6163      	str	r3, [r4, #20]
 800eb76:	b003      	add	sp, #12
 800eb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb7a:	460d      	mov	r5, r1
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	b003      	add	sp, #12
 800eb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb82:	2301      	movs	r3, #1
 800eb84:	75b0      	strb	r0, [r6, #22]
 800eb86:	7573      	strb	r3, [r6, #21]
 800eb88:	2104      	movs	r1, #4
 800eb8a:	6160      	str	r0, [r4, #20]
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f7fd fdbf 	bl	800c710 <ucdr_align_to>
 800eb92:	9901      	ldr	r1, [sp, #4]
 800eb94:	4630      	mov	r0, r6
 800eb96:	0089      	lsls	r1, r1, #2
 800eb98:	f7fd fdf0 	bl	800c77c <ucdr_advance_buffer>
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	b003      	add	sp, #12
 800eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba2:	bf00      	nop

0800eba4 <_Float32MultiArray__cdr_serialize>:
 800eba4:	b180      	cbz	r0, 800ebc8 <_Float32MultiArray__cdr_serialize+0x24>
 800eba6:	b538      	push	{r3, r4, r5, lr}
 800eba8:	460d      	mov	r5, r1
 800ebaa:	4604      	mov	r4, r0
 800ebac:	f000 f962 	bl	800ee74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ebb0:	6843      	ldr	r3, [r0, #4]
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	4798      	blx	r3
 800ebba:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebc4:	f000 bea2 	b.w	800f90c <ucdr_serialize_sequence_float>
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop

0800ebcc <_Float32MultiArray__get_serialized_size>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4604      	mov	r4, r0
 800ebd0:	b150      	cbz	r0, 800ebe8 <_Float32MultiArray__get_serialized_size+0x1c>
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	f000 f916 	bl	800ee04 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ebd8:	2104      	movs	r1, #4
 800ebda:	6965      	ldr	r5, [r4, #20]
 800ebdc:	4604      	mov	r4, r0
 800ebde:	f7fd fd81 	bl	800c6e4 <ucdr_alignment>
 800ebe2:	4404      	add	r4, r0
 800ebe4:	3404      	adds	r4, #4
 800ebe6:	b90d      	cbnz	r5, 800ebec <_Float32MultiArray__get_serialized_size+0x20>
 800ebe8:	4620      	mov	r0, r4
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	2104      	movs	r1, #4
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7fd fd78 	bl	800c6e4 <ucdr_alignment>
 800ebf4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800ebf8:	4404      	add	r4, r0
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	bd38      	pop	{r3, r4, r5, pc}
 800ebfe:	bf00      	nop

0800ec00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800ec00:	4800      	ldr	r0, [pc, #0]	@ (800ec04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800ec02:	4770      	bx	lr
 800ec04:	20000578 	.word	0x20000578

0800ec08 <_Header__max_serialized_size>:
 800ec08:	b500      	push	{lr}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	2100      	movs	r1, #0
 800ec10:	f10d 0007 	add.w	r0, sp, #7
 800ec14:	f88d 3007 	strb.w	r3, [sp, #7]
 800ec18:	f000 f992 	bl	800ef40 <max_serialized_size_builtin_interfaces__msg__Time>
 800ec1c:	b003      	add	sp, #12
 800ec1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec22:	bf00      	nop

0800ec24 <get_serialized_size_std_msgs__msg__Header>:
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	4605      	mov	r5, r0
 800ec28:	b168      	cbz	r0, 800ec46 <get_serialized_size_std_msgs__msg__Header+0x22>
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	f000 f938 	bl	800eea0 <get_serialized_size_builtin_interfaces__msg__Time>
 800ec30:	1826      	adds	r6, r4, r0
 800ec32:	2104      	movs	r1, #4
 800ec34:	4630      	mov	r0, r6
 800ec36:	f7fd fd55 	bl	800c6e4 <ucdr_alignment>
 800ec3a:	68eb      	ldr	r3, [r5, #12]
 800ec3c:	f1c4 0405 	rsb	r4, r4, #5
 800ec40:	441c      	add	r4, r3
 800ec42:	4404      	add	r4, r0
 800ec44:	19a0      	adds	r0, r4, r6
 800ec46:	bd70      	pop	{r4, r5, r6, pc}

0800ec48 <_Header__cdr_deserialize>:
 800ec48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	b083      	sub	sp, #12
 800ec4e:	b1e1      	cbz	r1, 800ec8a <_Header__cdr_deserialize+0x42>
 800ec50:	4606      	mov	r6, r0
 800ec52:	f000 f989 	bl	800ef68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ec56:	6843      	ldr	r3, [r0, #4]
 800ec58:	4621      	mov	r1, r4
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	4798      	blx	r3
 800ec60:	6927      	ldr	r7, [r4, #16]
 800ec62:	68a1      	ldr	r1, [r4, #8]
 800ec64:	ab01      	add	r3, sp, #4
 800ec66:	463a      	mov	r2, r7
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f000 fe05 	bl	800f878 <ucdr_deserialize_sequence_char>
 800ec6e:	9b01      	ldr	r3, [sp, #4]
 800ec70:	4605      	mov	r5, r0
 800ec72:	b920      	cbnz	r0, 800ec7e <_Header__cdr_deserialize+0x36>
 800ec74:	429f      	cmp	r7, r3
 800ec76:	d30c      	bcc.n	800ec92 <_Header__cdr_deserialize+0x4a>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	b003      	add	sp, #12
 800ec7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec7e:	b103      	cbz	r3, 800ec82 <_Header__cdr_deserialize+0x3a>
 800ec80:	3b01      	subs	r3, #1
 800ec82:	4628      	mov	r0, r5
 800ec84:	60e3      	str	r3, [r4, #12]
 800ec86:	b003      	add	sp, #12
 800ec88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec8a:	460d      	mov	r5, r1
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	b003      	add	sp, #12
 800ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec92:	2101      	movs	r1, #1
 800ec94:	75b0      	strb	r0, [r6, #22]
 800ec96:	7571      	strb	r1, [r6, #21]
 800ec98:	60e0      	str	r0, [r4, #12]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f7fd fd38 	bl	800c710 <ucdr_align_to>
 800eca0:	4630      	mov	r0, r6
 800eca2:	9901      	ldr	r1, [sp, #4]
 800eca4:	f7fd fd6a 	bl	800c77c <ucdr_advance_buffer>
 800eca8:	4628      	mov	r0, r5
 800ecaa:	b003      	add	sp, #12
 800ecac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecae:	bf00      	nop

0800ecb0 <_Header__cdr_serialize>:
 800ecb0:	b1f8      	cbz	r0, 800ecf2 <_Header__cdr_serialize+0x42>
 800ecb2:	b570      	push	{r4, r5, r6, lr}
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	f000 f956 	bl	800ef68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ecbc:	6843      	ldr	r3, [r0, #4]
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4798      	blx	r3
 800ecc6:	68a6      	ldr	r6, [r4, #8]
 800ecc8:	b156      	cbz	r6, 800ece0 <_Header__cdr_serialize+0x30>
 800ecca:	4630      	mov	r0, r6
 800eccc:	f7f1 fb00 	bl	80002d0 <strlen>
 800ecd0:	4631      	mov	r1, r6
 800ecd2:	60e0      	str	r0, [r4, #12]
 800ecd4:	1c42      	adds	r2, r0, #1
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecdc:	f000 bdba 	b.w	800f854 <ucdr_serialize_sequence_char>
 800ece0:	4630      	mov	r0, r6
 800ece2:	60e0      	str	r0, [r4, #12]
 800ece4:	4632      	mov	r2, r6
 800ece6:	4631      	mov	r1, r6
 800ece8:	4628      	mov	r0, r5
 800ecea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecee:	f000 bdb1 	b.w	800f854 <ucdr_serialize_sequence_char>
 800ecf2:	4770      	bx	lr

0800ecf4 <_Header__get_serialized_size>:
 800ecf4:	b538      	push	{r3, r4, r5, lr}
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	b150      	cbz	r0, 800ed10 <_Header__get_serialized_size+0x1c>
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	f000 f8d0 	bl	800eea0 <get_serialized_size_builtin_interfaces__msg__Time>
 800ed00:	2104      	movs	r1, #4
 800ed02:	4605      	mov	r5, r0
 800ed04:	f7fd fcee 	bl	800c6e4 <ucdr_alignment>
 800ed08:	68e4      	ldr	r4, [r4, #12]
 800ed0a:	3405      	adds	r4, #5
 800ed0c:	442c      	add	r4, r5
 800ed0e:	4420      	add	r0, r4
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	bf00      	nop

0800ed14 <max_serialized_size_std_msgs__msg__Header>:
 800ed14:	b510      	push	{r4, lr}
 800ed16:	2301      	movs	r3, #1
 800ed18:	4604      	mov	r4, r0
 800ed1a:	7003      	strb	r3, [r0, #0]
 800ed1c:	f000 f910 	bl	800ef40 <max_serialized_size_builtin_interfaces__msg__Time>
 800ed20:	2300      	movs	r3, #0
 800ed22:	7023      	strb	r3, [r4, #0]
 800ed24:	bd10      	pop	{r4, pc}
 800ed26:	bf00      	nop

0800ed28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ed28:	4800      	ldr	r0, [pc, #0]	@ (800ed2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800ed2a:	4770      	bx	lr
 800ed2c:	200005ac 	.word	0x200005ac

0800ed30 <_MultiArrayLayout__max_serialized_size>:
 800ed30:	b508      	push	{r3, lr}
 800ed32:	2104      	movs	r1, #4
 800ed34:	2000      	movs	r0, #0
 800ed36:	f7fd fcd5 	bl	800c6e4 <ucdr_alignment>
 800ed3a:	3004      	adds	r0, #4
 800ed3c:	bd08      	pop	{r3, pc}
 800ed3e:	bf00      	nop

0800ed40 <_MultiArrayLayout__cdr_deserialize>:
 800ed40:	b351      	cbz	r1, 800ed98 <_MultiArrayLayout__cdr_deserialize+0x58>
 800ed42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed44:	460e      	mov	r6, r1
 800ed46:	b083      	sub	sp, #12
 800ed48:	a901      	add	r1, sp, #4
 800ed4a:	4607      	mov	r7, r0
 800ed4c:	f7fc fc2e 	bl	800b5ac <ucdr_deserialize_uint32_t>
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	68b2      	ldr	r2, [r6, #8]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d31c      	bcc.n	800ed92 <_MultiArrayLayout__cdr_deserialize+0x52>
 800ed58:	6073      	str	r3, [r6, #4]
 800ed5a:	b193      	cbz	r3, 800ed82 <_MultiArrayLayout__cdr_deserialize+0x42>
 800ed5c:	2400      	movs	r4, #0
 800ed5e:	4625      	mov	r5, r4
 800ed60:	e005      	b.n	800ed6e <_MultiArrayLayout__cdr_deserialize+0x2e>
 800ed62:	9b01      	ldr	r3, [sp, #4]
 800ed64:	3501      	adds	r5, #1
 800ed66:	42ab      	cmp	r3, r5
 800ed68:	f104 0414 	add.w	r4, r4, #20
 800ed6c:	d909      	bls.n	800ed82 <_MultiArrayLayout__cdr_deserialize+0x42>
 800ed6e:	f009 fca3 	bl	80186b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ed72:	6831      	ldr	r1, [r6, #0]
 800ed74:	6843      	ldr	r3, [r0, #4]
 800ed76:	4421      	add	r1, r4
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	4798      	blx	r3
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d1ef      	bne.n	800ed62 <_MultiArrayLayout__cdr_deserialize+0x22>
 800ed82:	f106 010c 	add.w	r1, r6, #12
 800ed86:	4638      	mov	r0, r7
 800ed88:	b003      	add	sp, #12
 800ed8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ed8e:	f7fc bc0d 	b.w	800b5ac <ucdr_deserialize_uint32_t>
 800ed92:	2000      	movs	r0, #0
 800ed94:	b003      	add	sp, #12
 800ed96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed98:	2000      	movs	r0, #0
 800ed9a:	4770      	bx	lr

0800ed9c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800ed9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda0:	4689      	mov	r9, r1
 800eda2:	4607      	mov	r7, r0
 800eda4:	2104      	movs	r1, #4
 800eda6:	4648      	mov	r0, r9
 800eda8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800edac:	f7fd fc9a 	bl	800c6e4 <ucdr_alignment>
 800edb0:	f109 0304 	add.w	r3, r9, #4
 800edb4:	18c6      	adds	r6, r0, r3
 800edb6:	f1b8 0f00 	cmp.w	r8, #0
 800edba:	d019      	beq.n	800edf0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800edbc:	2500      	movs	r5, #0
 800edbe:	f009 fc7b 	bl	80186b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800edc2:	683a      	ldr	r2, [r7, #0]
 800edc4:	6843      	ldr	r3, [r0, #4]
 800edc6:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800edca:	4631      	mov	r1, r6
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800edd2:	4798      	blx	r3
 800edd4:	2804      	cmp	r0, #4
 800edd6:	4601      	mov	r1, r0
 800edd8:	4604      	mov	r4, r0
 800edda:	bf28      	it	cs
 800eddc:	2104      	movcs	r1, #4
 800edde:	4630      	mov	r0, r6
 800ede0:	f7fd fc80 	bl	800c6e4 <ucdr_alignment>
 800ede4:	3501      	adds	r5, #1
 800ede6:	4434      	add	r4, r6
 800ede8:	45a8      	cmp	r8, r5
 800edea:	eb00 0604 	add.w	r6, r0, r4
 800edee:	d1e6      	bne.n	800edbe <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800edf0:	2104      	movs	r1, #4
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7fd fc76 	bl	800c6e4 <ucdr_alignment>
 800edf8:	f1c9 0904 	rsb	r9, r9, #4
 800edfc:	44b1      	add	r9, r6
 800edfe:	4448      	add	r0, r9
 800ee00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ee04 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800ee04:	b108      	cbz	r0, 800ee0a <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800ee06:	f7ff bfc9 	b.w	800ed9c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ee0a:	4770      	bx	lr

0800ee0c <_MultiArrayLayout__get_serialized_size>:
 800ee0c:	b110      	cbz	r0, 800ee14 <_MultiArrayLayout__get_serialized_size+0x8>
 800ee0e:	2100      	movs	r1, #0
 800ee10:	f7ff bfc4 	b.w	800ed9c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop

0800ee18 <_MultiArrayLayout__cdr_serialize>:
 800ee18:	b308      	cbz	r0, 800ee5e <_MultiArrayLayout__cdr_serialize+0x46>
 800ee1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1c:	6847      	ldr	r7, [r0, #4]
 800ee1e:	460e      	mov	r6, r1
 800ee20:	4605      	mov	r5, r0
 800ee22:	4608      	mov	r0, r1
 800ee24:	4639      	mov	r1, r7
 800ee26:	f7fc fa97 	bl	800b358 <ucdr_serialize_uint32_t>
 800ee2a:	b190      	cbz	r0, 800ee52 <_MultiArrayLayout__cdr_serialize+0x3a>
 800ee2c:	b18f      	cbz	r7, 800ee52 <_MultiArrayLayout__cdr_serialize+0x3a>
 800ee2e:	2400      	movs	r4, #0
 800ee30:	e002      	b.n	800ee38 <_MultiArrayLayout__cdr_serialize+0x20>
 800ee32:	3401      	adds	r4, #1
 800ee34:	42a7      	cmp	r7, r4
 800ee36:	d00c      	beq.n	800ee52 <_MultiArrayLayout__cdr_serialize+0x3a>
 800ee38:	f009 fc3e 	bl	80186b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ee3c:	6841      	ldr	r1, [r0, #4]
 800ee3e:	6828      	ldr	r0, [r5, #0]
 800ee40:	688a      	ldr	r2, [r1, #8]
 800ee42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ee46:	4631      	mov	r1, r6
 800ee48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ee4c:	4790      	blx	r2
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d1ef      	bne.n	800ee32 <_MultiArrayLayout__cdr_serialize+0x1a>
 800ee52:	68e9      	ldr	r1, [r5, #12]
 800ee54:	4630      	mov	r0, r6
 800ee56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ee5a:	f7fc ba7d 	b.w	800b358 <ucdr_serialize_uint32_t>
 800ee5e:	4770      	bx	lr

0800ee60 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800ee60:	b508      	push	{r3, lr}
 800ee62:	4603      	mov	r3, r0
 800ee64:	2200      	movs	r2, #0
 800ee66:	4608      	mov	r0, r1
 800ee68:	701a      	strb	r2, [r3, #0]
 800ee6a:	2104      	movs	r1, #4
 800ee6c:	f7fd fc3a 	bl	800c6e4 <ucdr_alignment>
 800ee70:	3004      	adds	r0, #4
 800ee72:	bd08      	pop	{r3, pc}

0800ee74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800ee74:	4800      	ldr	r0, [pc, #0]	@ (800ee78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800ee76:	4770      	bx	lr
 800ee78:	200005e0 	.word	0x200005e0

0800ee7c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800ee7c:	f009 bc50 	b.w	8018720 <builtin_interfaces__msg__Time__init>

0800ee80 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ee80:	f009 bc52 	b.w	8018728 <builtin_interfaces__msg__Time__fini>

0800ee84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ee84:	4b04      	ldr	r3, [pc, #16]	@ (800ee98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	b10a      	cbz	r2, 800ee8e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ee8a:	4803      	ldr	r0, [pc, #12]	@ (800ee98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ee8c:	4770      	bx	lr
 800ee8e:	4a03      	ldr	r2, [pc, #12]	@ (800ee9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ee90:	4801      	ldr	r0, [pc, #4]	@ (800ee98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ee92:	6812      	ldr	r2, [r2, #0]
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	4770      	bx	lr
 800ee98:	20000614 	.word	0x20000614
 800ee9c:	200003a4 	.word	0x200003a4

0800eea0 <get_serialized_size_builtin_interfaces__msg__Time>:
 800eea0:	b180      	cbz	r0, 800eec4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800eea2:	b538      	push	{r3, r4, r5, lr}
 800eea4:	460d      	mov	r5, r1
 800eea6:	4628      	mov	r0, r5
 800eea8:	2104      	movs	r1, #4
 800eeaa:	f7fd fc1b 	bl	800c6e4 <ucdr_alignment>
 800eeae:	2104      	movs	r1, #4
 800eeb0:	186c      	adds	r4, r5, r1
 800eeb2:	4404      	add	r4, r0
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f7fd fc15 	bl	800c6e4 <ucdr_alignment>
 800eeba:	f1c5 0504 	rsb	r5, r5, #4
 800eebe:	4405      	add	r5, r0
 800eec0:	1928      	adds	r0, r5, r4
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop

0800eec8 <_Time__cdr_deserialize>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	460c      	mov	r4, r1
 800eecc:	b141      	cbz	r1, 800eee0 <_Time__cdr_deserialize+0x18>
 800eece:	4605      	mov	r5, r0
 800eed0:	f7fc feee 	bl	800bcb0 <ucdr_deserialize_int32_t>
 800eed4:	1d21      	adds	r1, r4, #4
 800eed6:	4628      	mov	r0, r5
 800eed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eedc:	f7fc bb66 	b.w	800b5ac <ucdr_deserialize_uint32_t>
 800eee0:	4608      	mov	r0, r1
 800eee2:	bd38      	pop	{r3, r4, r5, pc}

0800eee4 <_Time__cdr_serialize>:
 800eee4:	b160      	cbz	r0, 800ef00 <_Time__cdr_serialize+0x1c>
 800eee6:	b538      	push	{r3, r4, r5, lr}
 800eee8:	460d      	mov	r5, r1
 800eeea:	4604      	mov	r4, r0
 800eeec:	6801      	ldr	r1, [r0, #0]
 800eeee:	4628      	mov	r0, r5
 800eef0:	f7fc fe44 	bl	800bb7c <ucdr_serialize_int32_t>
 800eef4:	6861      	ldr	r1, [r4, #4]
 800eef6:	4628      	mov	r0, r5
 800eef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eefc:	f7fc ba2c 	b.w	800b358 <ucdr_serialize_uint32_t>
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop

0800ef04 <_Time__get_serialized_size>:
 800ef04:	b160      	cbz	r0, 800ef20 <_Time__get_serialized_size+0x1c>
 800ef06:	b510      	push	{r4, lr}
 800ef08:	2104      	movs	r1, #4
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	f7fd fbea 	bl	800c6e4 <ucdr_alignment>
 800ef10:	1d04      	adds	r4, r0, #4
 800ef12:	2104      	movs	r1, #4
 800ef14:	4620      	mov	r0, r4
 800ef16:	f7fd fbe5 	bl	800c6e4 <ucdr_alignment>
 800ef1a:	3004      	adds	r0, #4
 800ef1c:	4420      	add	r0, r4
 800ef1e:	bd10      	pop	{r4, pc}
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop

0800ef24 <_Time__max_serialized_size>:
 800ef24:	b510      	push	{r4, lr}
 800ef26:	2104      	movs	r1, #4
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f7fd fbdb 	bl	800c6e4 <ucdr_alignment>
 800ef2e:	1d04      	adds	r4, r0, #4
 800ef30:	2104      	movs	r1, #4
 800ef32:	4620      	mov	r0, r4
 800ef34:	f7fd fbd6 	bl	800c6e4 <ucdr_alignment>
 800ef38:	3004      	adds	r0, #4
 800ef3a:	4420      	add	r0, r4
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop

0800ef40 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	460c      	mov	r4, r1
 800ef44:	2301      	movs	r3, #1
 800ef46:	7003      	strb	r3, [r0, #0]
 800ef48:	2104      	movs	r1, #4
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f7fd fbca 	bl	800c6e4 <ucdr_alignment>
 800ef50:	2104      	movs	r1, #4
 800ef52:	1863      	adds	r3, r4, r1
 800ef54:	18c5      	adds	r5, r0, r3
 800ef56:	4628      	mov	r0, r5
 800ef58:	f7fd fbc4 	bl	800c6e4 <ucdr_alignment>
 800ef5c:	f1c4 0404 	rsb	r4, r4, #4
 800ef60:	4420      	add	r0, r4
 800ef62:	4428      	add	r0, r5
 800ef64:	bd38      	pop	{r3, r4, r5, pc}
 800ef66:	bf00      	nop

0800ef68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ef68:	4800      	ldr	r0, [pc, #0]	@ (800ef6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ef6a:	4770      	bx	lr
 800ef6c:	200006a4 	.word	0x200006a4

0800ef70 <geometry_msgs__msg__Twist__get_type_hash>:
 800ef70:	4800      	ldr	r0, [pc, #0]	@ (800ef74 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 800ef72:	4770      	bx	lr
 800ef74:	200006d8 	.word	0x200006d8

0800ef78 <geometry_msgs__msg__Twist__get_type_description>:
 800ef78:	b510      	push	{r4, lr}
 800ef7a:	4c08      	ldr	r4, [pc, #32]	@ (800ef9c <geometry_msgs__msg__Twist__get_type_description+0x24>)
 800ef7c:	7820      	ldrb	r0, [r4, #0]
 800ef7e:	b108      	cbz	r0, 800ef84 <geometry_msgs__msg__Twist__get_type_description+0xc>
 800ef80:	4807      	ldr	r0, [pc, #28]	@ (800efa0 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800ef82:	bd10      	pop	{r4, pc}
 800ef84:	f000 f86c 	bl	800f060 <geometry_msgs__msg__Vector3__get_type_description>
 800ef88:	300c      	adds	r0, #12
 800ef8a:	c807      	ldmia	r0, {r0, r1, r2}
 800ef8c:	4b05      	ldr	r3, [pc, #20]	@ (800efa4 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 800ef8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef92:	2301      	movs	r3, #1
 800ef94:	4802      	ldr	r0, [pc, #8]	@ (800efa0 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800ef96:	7023      	strb	r3, [r4, #0]
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	bf00      	nop
 800ef9c:	200117b9 	.word	0x200117b9
 800efa0:	080217b4 	.word	0x080217b4
 800efa4:	20000780 	.word	0x20000780

0800efa8 <geometry_msgs__msg__Twist__get_individual_type_description_source>:
 800efa8:	4800      	ldr	r0, [pc, #0]	@ (800efac <geometry_msgs__msg__Twist__get_individual_type_description_source+0x4>)
 800efaa:	4770      	bx	lr
 800efac:	08021790 	.word	0x08021790

0800efb0 <geometry_msgs__msg__Twist__get_type_description_sources>:
 800efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb2:	4e0f      	ldr	r6, [pc, #60]	@ (800eff0 <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 800efb4:	7837      	ldrb	r7, [r6, #0]
 800efb6:	b10f      	cbz	r7, 800efbc <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 800efb8:	480e      	ldr	r0, [pc, #56]	@ (800eff4 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800efba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efbc:	4d0e      	ldr	r5, [pc, #56]	@ (800eff8 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 800efbe:	4c0f      	ldr	r4, [pc, #60]	@ (800effc <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 800efc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	f844 3b04 	str.w	r3, [r4], #4
 800efce:	4638      	mov	r0, r7
 800efd0:	f000 f852 	bl	800f078 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800efd4:	2301      	movs	r3, #1
 800efd6:	4684      	mov	ip, r0
 800efd8:	7033      	strb	r3, [r6, #0]
 800efda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efe0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efe6:	f8dc 3000 	ldr.w	r3, [ip]
 800efea:	4802      	ldr	r0, [pc, #8]	@ (800eff4 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff0:	200117b8 	.word	0x200117b8
 800eff4:	08021784 	.word	0x08021784
 800eff8:	08021790 	.word	0x08021790
 800effc:	20011770 	.word	0x20011770

0800f000 <geometry_msgs__msg__Twist__init>:
 800f000:	b1d8      	cbz	r0, 800f03a <geometry_msgs__msg__Twist__init+0x3a>
 800f002:	b538      	push	{r3, r4, r5, lr}
 800f004:	4604      	mov	r4, r0
 800f006:	f000 f857 	bl	800f0b8 <geometry_msgs__msg__Vector3__init>
 800f00a:	b130      	cbz	r0, 800f01a <geometry_msgs__msg__Twist__init+0x1a>
 800f00c:	f104 0518 	add.w	r5, r4, #24
 800f010:	4628      	mov	r0, r5
 800f012:	f000 f851 	bl	800f0b8 <geometry_msgs__msg__Vector3__init>
 800f016:	b148      	cbz	r0, 800f02c <geometry_msgs__msg__Twist__init+0x2c>
 800f018:	bd38      	pop	{r3, r4, r5, pc}
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 f850 	bl	800f0c0 <geometry_msgs__msg__Vector3__fini>
 800f020:	f104 0018 	add.w	r0, r4, #24
 800f024:	f000 f84c 	bl	800f0c0 <geometry_msgs__msg__Vector3__fini>
 800f028:	2000      	movs	r0, #0
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 f847 	bl	800f0c0 <geometry_msgs__msg__Vector3__fini>
 800f032:	4628      	mov	r0, r5
 800f034:	f000 f844 	bl	800f0c0 <geometry_msgs__msg__Vector3__fini>
 800f038:	e7f6      	b.n	800f028 <geometry_msgs__msg__Twist__init+0x28>
 800f03a:	2000      	movs	r0, #0
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop

0800f040 <geometry_msgs__msg__Twist__fini>:
 800f040:	b148      	cbz	r0, 800f056 <geometry_msgs__msg__Twist__fini+0x16>
 800f042:	b510      	push	{r4, lr}
 800f044:	4604      	mov	r4, r0
 800f046:	f000 f83b 	bl	800f0c0 <geometry_msgs__msg__Vector3__fini>
 800f04a:	f104 0018 	add.w	r0, r4, #24
 800f04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f052:	f000 b835 	b.w	800f0c0 <geometry_msgs__msg__Vector3__fini>
 800f056:	4770      	bx	lr

0800f058 <geometry_msgs__msg__Vector3__get_type_hash>:
 800f058:	4800      	ldr	r0, [pc, #0]	@ (800f05c <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 800f05a:	4770      	bx	lr
 800f05c:	20000864 	.word	0x20000864

0800f060 <geometry_msgs__msg__Vector3__get_type_description>:
 800f060:	4b03      	ldr	r3, [pc, #12]	@ (800f070 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 800f062:	781a      	ldrb	r2, [r3, #0]
 800f064:	b90a      	cbnz	r2, 800f06a <geometry_msgs__msg__Vector3__get_type_description+0xa>
 800f066:	2201      	movs	r2, #1
 800f068:	701a      	strb	r2, [r3, #0]
 800f06a:	4802      	ldr	r0, [pc, #8]	@ (800f074 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	200117e1 	.word	0x200117e1
 800f074:	08021808 	.word	0x08021808

0800f078 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 800f078:	4800      	ldr	r0, [pc, #0]	@ (800f07c <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 800f07a:	4770      	bx	lr
 800f07c:	080217e4 	.word	0x080217e4

0800f080 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 800f080:	4b09      	ldr	r3, [pc, #36]	@ (800f0a8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 800f082:	781a      	ldrb	r2, [r3, #0]
 800f084:	b96a      	cbnz	r2, 800f0a2 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 800f086:	b430      	push	{r4, r5}
 800f088:	4d08      	ldr	r5, [pc, #32]	@ (800f0ac <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 800f08a:	4c09      	ldr	r4, [pc, #36]	@ (800f0b0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	701a      	strb	r2, [r3, #0]
 800f090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	4806      	ldr	r0, [pc, #24]	@ (800f0b4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	bc30      	pop	{r4, r5}
 800f0a0:	4770      	bx	lr
 800f0a2:	4804      	ldr	r0, [pc, #16]	@ (800f0b4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	200117e0 	.word	0x200117e0
 800f0ac:	080217e4 	.word	0x080217e4
 800f0b0:	200117bc 	.word	0x200117bc
 800f0b4:	080217d8 	.word	0x080217d8

0800f0b8 <geometry_msgs__msg__Vector3__init>:
 800f0b8:	3800      	subs	r0, #0
 800f0ba:	bf18      	it	ne
 800f0bc:	2001      	movne	r0, #1
 800f0be:	4770      	bx	lr

0800f0c0 <geometry_msgs__msg__Vector3__fini>:
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop

0800f0c4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 800f0c4:	2024      	movs	r0, #36	@ 0x24
 800f0c6:	4770      	bx	lr

0800f0c8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 800f0c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop

0800f0d0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 800f0d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f0d4:	e9d0 0100 	ldrd	r0, r1, [r0]
 800f0d8:	e9c2 0100 	strd	r0, r1, [r2]
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop

0800f0e0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 800f0e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f0e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f0e8:	e9c0 2300 	strd	r2, r3, [r0]
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop

0800f0f0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 800f0f0:	f009 bc24 	b.w	801893c <geometry_msgs__msg__PoseWithCovariance__init>

0800f0f4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 800f0f4:	f009 bc30 	b.w	8018958 <geometry_msgs__msg__PoseWithCovariance__fini>

0800f0f8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 800f0f8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop

0800f100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800f100:	b508      	push	{r3, lr}
 800f102:	f009 fcd3 	bl	8018aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800f106:	4b06      	ldr	r3, [pc, #24]	@ (800f120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800f108:	4906      	ldr	r1, [pc, #24]	@ (800f124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	60c8      	str	r0, [r1, #12]
 800f10e:	b10a      	cbz	r2, 800f114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 800f110:	4803      	ldr	r0, [pc, #12]	@ (800f120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800f112:	bd08      	pop	{r3, pc}
 800f114:	4a04      	ldr	r2, [pc, #16]	@ (800f128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 800f116:	4802      	ldr	r0, [pc, #8]	@ (800f120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800f118:	6812      	ldr	r2, [r2, #0]
 800f11a:	601a      	str	r2, [r3, #0]
 800f11c:	bd08      	pop	{r3, pc}
 800f11e:	bf00      	nop
 800f120:	20000a88 	.word	0x20000a88
 800f124:	20000aa0 	.word	0x20000aa0
 800f128:	200003a4 	.word	0x200003a4

0800f12c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 800f12c:	2024      	movs	r0, #36	@ 0x24
 800f12e:	4770      	bx	lr

0800f130 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 800f130:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop

0800f138 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 800f138:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f13c:	e9d0 0100 	ldrd	r0, r1, [r0]
 800f140:	e9c2 0100 	strd	r0, r1, [r2]
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop

0800f148 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 800f148:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f14c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f150:	e9c0 2300 	strd	r2, r3, [r0]
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop

0800f158 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 800f158:	f009 bc92 	b.w	8018a80 <geometry_msgs__msg__TwistWithCovariance__init>

0800f15c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 800f15c:	f009 bc9e 	b.w	8018a9c <geometry_msgs__msg__TwistWithCovariance__fini>

0800f160 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 800f160:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop

0800f168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800f168:	b508      	push	{r3, lr}
 800f16a:	f7fb fd81 	bl	800ac70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800f16e:	4b06      	ldr	r3, [pc, #24]	@ (800f188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800f170:	4906      	ldr	r1, [pc, #24]	@ (800f18c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	60c8      	str	r0, [r1, #12]
 800f176:	b10a      	cbz	r2, 800f17c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 800f178:	4803      	ldr	r0, [pc, #12]	@ (800f188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800f17a:	bd08      	pop	{r3, pc}
 800f17c:	4a04      	ldr	r2, [pc, #16]	@ (800f190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 800f17e:	4802      	ldr	r0, [pc, #8]	@ (800f188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800f180:	6812      	ldr	r2, [r2, #0]
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	bd08      	pop	{r3, pc}
 800f186:	bf00      	nop
 800f188:	20000b18 	.word	0x20000b18
 800f18c:	20000b30 	.word	0x20000b30
 800f190:	200003a4 	.word	0x200003a4

0800f194 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	b158      	cbz	r0, 800f1b0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 800f198:	460d      	mov	r5, r1
 800f19a:	f009 fcb1 	bl	8018b00 <get_serialized_size_geometry_msgs__msg__Pose>
 800f19e:	182c      	adds	r4, r5, r0
 800f1a0:	2108      	movs	r1, #8
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f7fd fa9e 	bl	800c6e4 <ucdr_alignment>
 800f1a8:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800f1ac:	4405      	add	r5, r0
 800f1ae:	1928      	adds	r0, r5, r4
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	bf00      	nop

0800f1b4 <_PoseWithCovariance__cdr_deserialize>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	b179      	cbz	r1, 800f1da <_PoseWithCovariance__cdr_deserialize+0x26>
 800f1ba:	4605      	mov	r5, r0
 800f1bc:	f009 fd0c 	bl	8018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800f1c0:	6843      	ldr	r3, [r0, #4]
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	4798      	blx	r3
 800f1ca:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	2224      	movs	r2, #36	@ 0x24
 800f1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1d6:	f000 bae7 	b.w	800f7a8 <ucdr_deserialize_array_double>
 800f1da:	4608      	mov	r0, r1
 800f1dc:	bd38      	pop	{r3, r4, r5, pc}
 800f1de:	bf00      	nop

0800f1e0 <_PoseWithCovariance__cdr_serialize>:
 800f1e0:	b188      	cbz	r0, 800f206 <_PoseWithCovariance__cdr_serialize+0x26>
 800f1e2:	b538      	push	{r3, r4, r5, lr}
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	f009 fcf6 	bl	8018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800f1ec:	6843      	ldr	r3, [r0, #4]
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	4798      	blx	r3
 800f1f6:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	2224      	movs	r2, #36	@ 0x24
 800f1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f202:	f000 ba7d 	b.w	800f700 <ucdr_serialize_array_double>
 800f206:	4770      	bx	lr

0800f208 <_PoseWithCovariance__get_serialized_size>:
 800f208:	b158      	cbz	r0, 800f222 <_PoseWithCovariance__get_serialized_size+0x1a>
 800f20a:	b510      	push	{r4, lr}
 800f20c:	2100      	movs	r1, #0
 800f20e:	f009 fc77 	bl	8018b00 <get_serialized_size_geometry_msgs__msg__Pose>
 800f212:	2108      	movs	r1, #8
 800f214:	4604      	mov	r4, r0
 800f216:	f7fd fa65 	bl	800c6e4 <ucdr_alignment>
 800f21a:	4420      	add	r0, r4
 800f21c:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800f220:	bd10      	pop	{r4, pc}
 800f222:	4770      	bx	lr

0800f224 <_PoseWithCovariance__max_serialized_size>:
 800f224:	b510      	push	{r4, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	2301      	movs	r3, #1
 800f22a:	2100      	movs	r1, #0
 800f22c:	f10d 0007 	add.w	r0, sp, #7
 800f230:	f88d 3007 	strb.w	r3, [sp, #7]
 800f234:	f009 fcc2 	bl	8018bbc <max_serialized_size_geometry_msgs__msg__Pose>
 800f238:	2108      	movs	r1, #8
 800f23a:	4604      	mov	r4, r0
 800f23c:	f7fd fa52 	bl	800c6e4 <ucdr_alignment>
 800f240:	4420      	add	r0, r4
 800f242:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800f246:	b002      	add	sp, #8
 800f248:	bd10      	pop	{r4, pc}
 800f24a:	bf00      	nop

0800f24c <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	2301      	movs	r3, #1
 800f250:	7003      	strb	r3, [r0, #0]
 800f252:	460c      	mov	r4, r1
 800f254:	f009 fcb2 	bl	8018bbc <max_serialized_size_geometry_msgs__msg__Pose>
 800f258:	1825      	adds	r5, r4, r0
 800f25a:	2108      	movs	r1, #8
 800f25c:	4628      	mov	r0, r5
 800f25e:	f7fd fa41 	bl	800c6e4 <ucdr_alignment>
 800f262:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800f266:	4420      	add	r0, r4
 800f268:	4428      	add	r0, r5
 800f26a:	bd38      	pop	{r3, r4, r5, pc}

0800f26c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800f26c:	4800      	ldr	r0, [pc, #0]	@ (800f270 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 800f26e:	4770      	bx	lr
 800f270:	20000ba8 	.word	0x20000ba8

0800f274 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	b158      	cbz	r0, 800f290 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 800f278:	460d      	mov	r5, r1
 800f27a:	f7fb fd23 	bl	800acc4 <get_serialized_size_geometry_msgs__msg__Twist>
 800f27e:	182c      	adds	r4, r5, r0
 800f280:	2108      	movs	r1, #8
 800f282:	4620      	mov	r0, r4
 800f284:	f7fd fa2e 	bl	800c6e4 <ucdr_alignment>
 800f288:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800f28c:	4405      	add	r5, r0
 800f28e:	1928      	adds	r0, r5, r4
 800f290:	bd38      	pop	{r3, r4, r5, pc}
 800f292:	bf00      	nop

0800f294 <_TwistWithCovariance__cdr_deserialize>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	460c      	mov	r4, r1
 800f298:	b179      	cbz	r1, 800f2ba <_TwistWithCovariance__cdr_deserialize+0x26>
 800f29a:	4605      	mov	r5, r0
 800f29c:	f7fb fd7e 	bl	800ad9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800f2a0:	6843      	ldr	r3, [r0, #4]
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	4798      	blx	r3
 800f2aa:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	2224      	movs	r2, #36	@ 0x24
 800f2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2b6:	f000 ba77 	b.w	800f7a8 <ucdr_deserialize_array_double>
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	bd38      	pop	{r3, r4, r5, pc}
 800f2be:	bf00      	nop

0800f2c0 <_TwistWithCovariance__cdr_serialize>:
 800f2c0:	b188      	cbz	r0, 800f2e6 <_TwistWithCovariance__cdr_serialize+0x26>
 800f2c2:	b538      	push	{r3, r4, r5, lr}
 800f2c4:	460d      	mov	r5, r1
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	f7fb fd68 	bl	800ad9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800f2cc:	6843      	ldr	r3, [r0, #4]
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	4798      	blx	r3
 800f2d6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f2da:	4628      	mov	r0, r5
 800f2dc:	2224      	movs	r2, #36	@ 0x24
 800f2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2e2:	f000 ba0d 	b.w	800f700 <ucdr_serialize_array_double>
 800f2e6:	4770      	bx	lr

0800f2e8 <_TwistWithCovariance__get_serialized_size>:
 800f2e8:	b158      	cbz	r0, 800f302 <_TwistWithCovariance__get_serialized_size+0x1a>
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	f7fb fce9 	bl	800acc4 <get_serialized_size_geometry_msgs__msg__Twist>
 800f2f2:	2108      	movs	r1, #8
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	f7fd f9f5 	bl	800c6e4 <ucdr_alignment>
 800f2fa:	4420      	add	r0, r4
 800f2fc:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800f300:	bd10      	pop	{r4, pc}
 800f302:	4770      	bx	lr

0800f304 <_TwistWithCovariance__max_serialized_size>:
 800f304:	b510      	push	{r4, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	2301      	movs	r3, #1
 800f30a:	2100      	movs	r1, #0
 800f30c:	f10d 0007 	add.w	r0, sp, #7
 800f310:	f88d 3007 	strb.w	r3, [sp, #7]
 800f314:	f7fb fd34 	bl	800ad80 <max_serialized_size_geometry_msgs__msg__Twist>
 800f318:	2108      	movs	r1, #8
 800f31a:	4604      	mov	r4, r0
 800f31c:	f7fd f9e2 	bl	800c6e4 <ucdr_alignment>
 800f320:	4420      	add	r0, r4
 800f322:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800f326:	b002      	add	sp, #8
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	bf00      	nop

0800f32c <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	2301      	movs	r3, #1
 800f330:	7003      	strb	r3, [r0, #0]
 800f332:	460c      	mov	r4, r1
 800f334:	f7fb fd24 	bl	800ad80 <max_serialized_size_geometry_msgs__msg__Twist>
 800f338:	1825      	adds	r5, r4, r0
 800f33a:	2108      	movs	r1, #8
 800f33c:	4628      	mov	r0, r5
 800f33e:	f7fd f9d1 	bl	800c6e4 <ucdr_alignment>
 800f342:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800f346:	4420      	add	r0, r4
 800f348:	4428      	add	r0, r5
 800f34a:	bd38      	pop	{r3, r4, r5, pc}

0800f34c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800f34c:	4800      	ldr	r0, [pc, #0]	@ (800f350 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 800f34e:	4770      	bx	lr
 800f350:	20000bdc 	.word	0x20000bdc

0800f354 <ucdr_serialize_endian_array_char>:
 800f354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f358:	4619      	mov	r1, r3
 800f35a:	461f      	mov	r7, r3
 800f35c:	4605      	mov	r5, r0
 800f35e:	4690      	mov	r8, r2
 800f360:	f7fd f968 	bl	800c634 <ucdr_check_buffer_available_for>
 800f364:	b9e0      	cbnz	r0, 800f3a0 <ucdr_serialize_endian_array_char+0x4c>
 800f366:	463e      	mov	r6, r7
 800f368:	e009      	b.n	800f37e <ucdr_serialize_endian_array_char+0x2a>
 800f36a:	68a8      	ldr	r0, [r5, #8]
 800f36c:	f00c fb5c 	bl	801ba28 <memcpy>
 800f370:	68ab      	ldr	r3, [r5, #8]
 800f372:	6928      	ldr	r0, [r5, #16]
 800f374:	4423      	add	r3, r4
 800f376:	4420      	add	r0, r4
 800f378:	1b36      	subs	r6, r6, r4
 800f37a:	60ab      	str	r3, [r5, #8]
 800f37c:	6128      	str	r0, [r5, #16]
 800f37e:	2201      	movs	r2, #1
 800f380:	4631      	mov	r1, r6
 800f382:	4628      	mov	r0, r5
 800f384:	f7fd f9de 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f388:	1bb9      	subs	r1, r7, r6
 800f38a:	4604      	mov	r4, r0
 800f38c:	4602      	mov	r2, r0
 800f38e:	4441      	add	r1, r8
 800f390:	2800      	cmp	r0, #0
 800f392:	d1ea      	bne.n	800f36a <ucdr_serialize_endian_array_char+0x16>
 800f394:	2301      	movs	r3, #1
 800f396:	7da8      	ldrb	r0, [r5, #22]
 800f398:	756b      	strb	r3, [r5, #21]
 800f39a:	4058      	eors	r0, r3
 800f39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a0:	463a      	mov	r2, r7
 800f3a2:	68a8      	ldr	r0, [r5, #8]
 800f3a4:	4641      	mov	r1, r8
 800f3a6:	f00c fb3f 	bl	801ba28 <memcpy>
 800f3aa:	68aa      	ldr	r2, [r5, #8]
 800f3ac:	692b      	ldr	r3, [r5, #16]
 800f3ae:	443a      	add	r2, r7
 800f3b0:	443b      	add	r3, r7
 800f3b2:	60aa      	str	r2, [r5, #8]
 800f3b4:	612b      	str	r3, [r5, #16]
 800f3b6:	e7ed      	b.n	800f394 <ucdr_serialize_endian_array_char+0x40>

0800f3b8 <ucdr_deserialize_endian_array_char>:
 800f3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3bc:	4619      	mov	r1, r3
 800f3be:	461f      	mov	r7, r3
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	4690      	mov	r8, r2
 800f3c4:	f7fd f936 	bl	800c634 <ucdr_check_buffer_available_for>
 800f3c8:	b9e0      	cbnz	r0, 800f404 <ucdr_deserialize_endian_array_char+0x4c>
 800f3ca:	463e      	mov	r6, r7
 800f3cc:	e009      	b.n	800f3e2 <ucdr_deserialize_endian_array_char+0x2a>
 800f3ce:	68a9      	ldr	r1, [r5, #8]
 800f3d0:	f00c fb2a 	bl	801ba28 <memcpy>
 800f3d4:	68aa      	ldr	r2, [r5, #8]
 800f3d6:	692b      	ldr	r3, [r5, #16]
 800f3d8:	4422      	add	r2, r4
 800f3da:	4423      	add	r3, r4
 800f3dc:	1b36      	subs	r6, r6, r4
 800f3de:	60aa      	str	r2, [r5, #8]
 800f3e0:	612b      	str	r3, [r5, #16]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	4631      	mov	r1, r6
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f7fd f9ac 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	1bb8      	subs	r0, r7, r6
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	4440      	add	r0, r8
 800f3f4:	2c00      	cmp	r4, #0
 800f3f6:	d1ea      	bne.n	800f3ce <ucdr_deserialize_endian_array_char+0x16>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	7da8      	ldrb	r0, [r5, #22]
 800f3fc:	756b      	strb	r3, [r5, #21]
 800f3fe:	4058      	eors	r0, r3
 800f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f404:	463a      	mov	r2, r7
 800f406:	68a9      	ldr	r1, [r5, #8]
 800f408:	4640      	mov	r0, r8
 800f40a:	f00c fb0d 	bl	801ba28 <memcpy>
 800f40e:	68aa      	ldr	r2, [r5, #8]
 800f410:	692b      	ldr	r3, [r5, #16]
 800f412:	443a      	add	r2, r7
 800f414:	443b      	add	r3, r7
 800f416:	60aa      	str	r2, [r5, #8]
 800f418:	612b      	str	r3, [r5, #16]
 800f41a:	e7ed      	b.n	800f3f8 <ucdr_deserialize_endian_array_char+0x40>

0800f41c <ucdr_serialize_array_uint8_t>:
 800f41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f420:	4688      	mov	r8, r1
 800f422:	4611      	mov	r1, r2
 800f424:	4617      	mov	r7, r2
 800f426:	4605      	mov	r5, r0
 800f428:	f7fd f904 	bl	800c634 <ucdr_check_buffer_available_for>
 800f42c:	b9e0      	cbnz	r0, 800f468 <ucdr_serialize_array_uint8_t+0x4c>
 800f42e:	463e      	mov	r6, r7
 800f430:	e009      	b.n	800f446 <ucdr_serialize_array_uint8_t+0x2a>
 800f432:	68a8      	ldr	r0, [r5, #8]
 800f434:	f00c faf8 	bl	801ba28 <memcpy>
 800f438:	68aa      	ldr	r2, [r5, #8]
 800f43a:	692b      	ldr	r3, [r5, #16]
 800f43c:	4422      	add	r2, r4
 800f43e:	4423      	add	r3, r4
 800f440:	1b36      	subs	r6, r6, r4
 800f442:	60aa      	str	r2, [r5, #8]
 800f444:	612b      	str	r3, [r5, #16]
 800f446:	2201      	movs	r2, #1
 800f448:	4631      	mov	r1, r6
 800f44a:	4628      	mov	r0, r5
 800f44c:	f7fd f97a 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f450:	1bb9      	subs	r1, r7, r6
 800f452:	4604      	mov	r4, r0
 800f454:	4602      	mov	r2, r0
 800f456:	4441      	add	r1, r8
 800f458:	2800      	cmp	r0, #0
 800f45a:	d1ea      	bne.n	800f432 <ucdr_serialize_array_uint8_t+0x16>
 800f45c:	2301      	movs	r3, #1
 800f45e:	7da8      	ldrb	r0, [r5, #22]
 800f460:	756b      	strb	r3, [r5, #21]
 800f462:	4058      	eors	r0, r3
 800f464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f468:	463a      	mov	r2, r7
 800f46a:	68a8      	ldr	r0, [r5, #8]
 800f46c:	4641      	mov	r1, r8
 800f46e:	f00c fadb 	bl	801ba28 <memcpy>
 800f472:	68aa      	ldr	r2, [r5, #8]
 800f474:	692b      	ldr	r3, [r5, #16]
 800f476:	443a      	add	r2, r7
 800f478:	443b      	add	r3, r7
 800f47a:	60aa      	str	r2, [r5, #8]
 800f47c:	612b      	str	r3, [r5, #16]
 800f47e:	e7ed      	b.n	800f45c <ucdr_serialize_array_uint8_t+0x40>

0800f480 <ucdr_serialize_endian_array_uint8_t>:
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	4619      	mov	r1, r3
 800f486:	461f      	mov	r7, r3
 800f488:	4605      	mov	r5, r0
 800f48a:	4690      	mov	r8, r2
 800f48c:	f7fd f8d2 	bl	800c634 <ucdr_check_buffer_available_for>
 800f490:	b9e0      	cbnz	r0, 800f4cc <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f492:	463e      	mov	r6, r7
 800f494:	e009      	b.n	800f4aa <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f496:	68a8      	ldr	r0, [r5, #8]
 800f498:	f00c fac6 	bl	801ba28 <memcpy>
 800f49c:	68ab      	ldr	r3, [r5, #8]
 800f49e:	6928      	ldr	r0, [r5, #16]
 800f4a0:	4423      	add	r3, r4
 800f4a2:	4420      	add	r0, r4
 800f4a4:	1b36      	subs	r6, r6, r4
 800f4a6:	60ab      	str	r3, [r5, #8]
 800f4a8:	6128      	str	r0, [r5, #16]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f7fd f948 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f4b4:	1bb9      	subs	r1, r7, r6
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	4441      	add	r1, r8
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d1ea      	bne.n	800f496 <ucdr_serialize_endian_array_uint8_t+0x16>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	7da8      	ldrb	r0, [r5, #22]
 800f4c4:	756b      	strb	r3, [r5, #21]
 800f4c6:	4058      	eors	r0, r3
 800f4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4cc:	463a      	mov	r2, r7
 800f4ce:	68a8      	ldr	r0, [r5, #8]
 800f4d0:	4641      	mov	r1, r8
 800f4d2:	f00c faa9 	bl	801ba28 <memcpy>
 800f4d6:	68aa      	ldr	r2, [r5, #8]
 800f4d8:	692b      	ldr	r3, [r5, #16]
 800f4da:	443a      	add	r2, r7
 800f4dc:	443b      	add	r3, r7
 800f4de:	60aa      	str	r2, [r5, #8]
 800f4e0:	612b      	str	r3, [r5, #16]
 800f4e2:	e7ed      	b.n	800f4c0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f4e4 <ucdr_deserialize_array_uint8_t>:
 800f4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e8:	4688      	mov	r8, r1
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4617      	mov	r7, r2
 800f4ee:	4605      	mov	r5, r0
 800f4f0:	f7fd f8a0 	bl	800c634 <ucdr_check_buffer_available_for>
 800f4f4:	b9e0      	cbnz	r0, 800f530 <ucdr_deserialize_array_uint8_t+0x4c>
 800f4f6:	463e      	mov	r6, r7
 800f4f8:	e009      	b.n	800f50e <ucdr_deserialize_array_uint8_t+0x2a>
 800f4fa:	68a9      	ldr	r1, [r5, #8]
 800f4fc:	f00c fa94 	bl	801ba28 <memcpy>
 800f500:	68aa      	ldr	r2, [r5, #8]
 800f502:	692b      	ldr	r3, [r5, #16]
 800f504:	4422      	add	r2, r4
 800f506:	4423      	add	r3, r4
 800f508:	1b36      	subs	r6, r6, r4
 800f50a:	60aa      	str	r2, [r5, #8]
 800f50c:	612b      	str	r3, [r5, #16]
 800f50e:	2201      	movs	r2, #1
 800f510:	4631      	mov	r1, r6
 800f512:	4628      	mov	r0, r5
 800f514:	f7fd f916 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f518:	4604      	mov	r4, r0
 800f51a:	1bb8      	subs	r0, r7, r6
 800f51c:	4622      	mov	r2, r4
 800f51e:	4440      	add	r0, r8
 800f520:	2c00      	cmp	r4, #0
 800f522:	d1ea      	bne.n	800f4fa <ucdr_deserialize_array_uint8_t+0x16>
 800f524:	2301      	movs	r3, #1
 800f526:	7da8      	ldrb	r0, [r5, #22]
 800f528:	756b      	strb	r3, [r5, #21]
 800f52a:	4058      	eors	r0, r3
 800f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f530:	463a      	mov	r2, r7
 800f532:	68a9      	ldr	r1, [r5, #8]
 800f534:	4640      	mov	r0, r8
 800f536:	f00c fa77 	bl	801ba28 <memcpy>
 800f53a:	68aa      	ldr	r2, [r5, #8]
 800f53c:	692b      	ldr	r3, [r5, #16]
 800f53e:	443a      	add	r2, r7
 800f540:	443b      	add	r3, r7
 800f542:	60aa      	str	r2, [r5, #8]
 800f544:	612b      	str	r3, [r5, #16]
 800f546:	e7ed      	b.n	800f524 <ucdr_deserialize_array_uint8_t+0x40>

0800f548 <ucdr_deserialize_endian_array_uint8_t>:
 800f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54c:	4619      	mov	r1, r3
 800f54e:	461f      	mov	r7, r3
 800f550:	4605      	mov	r5, r0
 800f552:	4690      	mov	r8, r2
 800f554:	f7fd f86e 	bl	800c634 <ucdr_check_buffer_available_for>
 800f558:	b9e0      	cbnz	r0, 800f594 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f55a:	463e      	mov	r6, r7
 800f55c:	e009      	b.n	800f572 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f55e:	68a9      	ldr	r1, [r5, #8]
 800f560:	f00c fa62 	bl	801ba28 <memcpy>
 800f564:	68aa      	ldr	r2, [r5, #8]
 800f566:	692b      	ldr	r3, [r5, #16]
 800f568:	4422      	add	r2, r4
 800f56a:	4423      	add	r3, r4
 800f56c:	1b36      	subs	r6, r6, r4
 800f56e:	60aa      	str	r2, [r5, #8]
 800f570:	612b      	str	r3, [r5, #16]
 800f572:	2201      	movs	r2, #1
 800f574:	4631      	mov	r1, r6
 800f576:	4628      	mov	r0, r5
 800f578:	f7fd f8e4 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f57c:	4604      	mov	r4, r0
 800f57e:	1bb8      	subs	r0, r7, r6
 800f580:	4622      	mov	r2, r4
 800f582:	4440      	add	r0, r8
 800f584:	2c00      	cmp	r4, #0
 800f586:	d1ea      	bne.n	800f55e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f588:	2301      	movs	r3, #1
 800f58a:	7da8      	ldrb	r0, [r5, #22]
 800f58c:	756b      	strb	r3, [r5, #21]
 800f58e:	4058      	eors	r0, r3
 800f590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f594:	463a      	mov	r2, r7
 800f596:	68a9      	ldr	r1, [r5, #8]
 800f598:	4640      	mov	r0, r8
 800f59a:	f00c fa45 	bl	801ba28 <memcpy>
 800f59e:	68aa      	ldr	r2, [r5, #8]
 800f5a0:	692b      	ldr	r3, [r5, #16]
 800f5a2:	443a      	add	r2, r7
 800f5a4:	443b      	add	r3, r7
 800f5a6:	60aa      	str	r2, [r5, #8]
 800f5a8:	612b      	str	r3, [r5, #16]
 800f5aa:	e7ed      	b.n	800f588 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f5ac <ucdr_serialize_endian_array_float>:
 800f5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b0:	4688      	mov	r8, r1
 800f5b2:	2104      	movs	r1, #4
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	4616      	mov	r6, r2
 800f5b8:	461f      	mov	r7, r3
 800f5ba:	f7fd f89b 	bl	800c6f4 <ucdr_buffer_alignment>
 800f5be:	4601      	mov	r1, r0
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	7d65      	ldrb	r5, [r4, #21]
 800f5c4:	f7fd f8da 	bl	800c77c <ucdr_advance_buffer>
 800f5c8:	f1b8 0f01 	cmp.w	r8, #1
 800f5cc:	7565      	strb	r5, [r4, #21]
 800f5ce:	d00f      	beq.n	800f5f0 <ucdr_serialize_endian_array_float+0x44>
 800f5d0:	2500      	movs	r5, #0
 800f5d2:	b147      	cbz	r7, 800f5e6 <ucdr_serialize_endian_array_float+0x3a>
 800f5d4:	ecb6 0a01 	vldmia	r6!, {s0}
 800f5d8:	4641      	mov	r1, r8
 800f5da:	4620      	mov	r0, r4
 800f5dc:	3501      	adds	r5, #1
 800f5de:	f7fc fbf5 	bl	800bdcc <ucdr_serialize_endian_float>
 800f5e2:	42af      	cmp	r7, r5
 800f5e4:	d1f6      	bne.n	800f5d4 <ucdr_serialize_endian_array_float+0x28>
 800f5e6:	7da0      	ldrb	r0, [r4, #22]
 800f5e8:	f080 0001 	eor.w	r0, r0, #1
 800f5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f0:	00bf      	lsls	r7, r7, #2
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f7fd f81d 	bl	800c634 <ucdr_check_buffer_available_for>
 800f5fa:	b9f8      	cbnz	r0, 800f63c <ucdr_serialize_endian_array_float+0x90>
 800f5fc:	46b8      	mov	r8, r7
 800f5fe:	e00a      	b.n	800f616 <ucdr_serialize_endian_array_float+0x6a>
 800f600:	68a0      	ldr	r0, [r4, #8]
 800f602:	f00c fa11 	bl	801ba28 <memcpy>
 800f606:	68a2      	ldr	r2, [r4, #8]
 800f608:	6923      	ldr	r3, [r4, #16]
 800f60a:	442a      	add	r2, r5
 800f60c:	442b      	add	r3, r5
 800f60e:	eba8 0805 	sub.w	r8, r8, r5
 800f612:	60a2      	str	r2, [r4, #8]
 800f614:	6123      	str	r3, [r4, #16]
 800f616:	2204      	movs	r2, #4
 800f618:	4641      	mov	r1, r8
 800f61a:	4620      	mov	r0, r4
 800f61c:	f7fd f892 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f620:	eba7 0108 	sub.w	r1, r7, r8
 800f624:	4605      	mov	r5, r0
 800f626:	4602      	mov	r2, r0
 800f628:	4431      	add	r1, r6
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d1e8      	bne.n	800f600 <ucdr_serialize_endian_array_float+0x54>
 800f62e:	7da0      	ldrb	r0, [r4, #22]
 800f630:	2304      	movs	r3, #4
 800f632:	7563      	strb	r3, [r4, #21]
 800f634:	f080 0001 	eor.w	r0, r0, #1
 800f638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63c:	463a      	mov	r2, r7
 800f63e:	68a0      	ldr	r0, [r4, #8]
 800f640:	4631      	mov	r1, r6
 800f642:	f00c f9f1 	bl	801ba28 <memcpy>
 800f646:	68a2      	ldr	r2, [r4, #8]
 800f648:	6923      	ldr	r3, [r4, #16]
 800f64a:	443a      	add	r2, r7
 800f64c:	443b      	add	r3, r7
 800f64e:	60a2      	str	r2, [r4, #8]
 800f650:	6123      	str	r3, [r4, #16]
 800f652:	e7ec      	b.n	800f62e <ucdr_serialize_endian_array_float+0x82>

0800f654 <ucdr_deserialize_endian_array_float>:
 800f654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f658:	4688      	mov	r8, r1
 800f65a:	2104      	movs	r1, #4
 800f65c:	4605      	mov	r5, r0
 800f65e:	4614      	mov	r4, r2
 800f660:	461f      	mov	r7, r3
 800f662:	f7fd f847 	bl	800c6f4 <ucdr_buffer_alignment>
 800f666:	4601      	mov	r1, r0
 800f668:	4628      	mov	r0, r5
 800f66a:	7d6e      	ldrb	r6, [r5, #21]
 800f66c:	f7fd f886 	bl	800c77c <ucdr_advance_buffer>
 800f670:	f1b8 0f01 	cmp.w	r8, #1
 800f674:	756e      	strb	r6, [r5, #21]
 800f676:	d010      	beq.n	800f69a <ucdr_deserialize_endian_array_float+0x46>
 800f678:	2600      	movs	r6, #0
 800f67a:	b14f      	cbz	r7, 800f690 <ucdr_deserialize_endian_array_float+0x3c>
 800f67c:	4622      	mov	r2, r4
 800f67e:	4641      	mov	r1, r8
 800f680:	4628      	mov	r0, r5
 800f682:	3601      	adds	r6, #1
 800f684:	f7fc fc34 	bl	800bef0 <ucdr_deserialize_endian_float>
 800f688:	42b7      	cmp	r7, r6
 800f68a:	f104 0404 	add.w	r4, r4, #4
 800f68e:	d1f5      	bne.n	800f67c <ucdr_deserialize_endian_array_float+0x28>
 800f690:	7da8      	ldrb	r0, [r5, #22]
 800f692:	f080 0001 	eor.w	r0, r0, #1
 800f696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f69a:	00bf      	lsls	r7, r7, #2
 800f69c:	4639      	mov	r1, r7
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f7fc ffc8 	bl	800c634 <ucdr_check_buffer_available_for>
 800f6a4:	b9f8      	cbnz	r0, 800f6e6 <ucdr_deserialize_endian_array_float+0x92>
 800f6a6:	46b8      	mov	r8, r7
 800f6a8:	e00a      	b.n	800f6c0 <ucdr_deserialize_endian_array_float+0x6c>
 800f6aa:	68a9      	ldr	r1, [r5, #8]
 800f6ac:	f00c f9bc 	bl	801ba28 <memcpy>
 800f6b0:	68aa      	ldr	r2, [r5, #8]
 800f6b2:	692b      	ldr	r3, [r5, #16]
 800f6b4:	4432      	add	r2, r6
 800f6b6:	4433      	add	r3, r6
 800f6b8:	eba8 0806 	sub.w	r8, r8, r6
 800f6bc:	60aa      	str	r2, [r5, #8]
 800f6be:	612b      	str	r3, [r5, #16]
 800f6c0:	2204      	movs	r2, #4
 800f6c2:	4641      	mov	r1, r8
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f7fd f83d 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	eba7 0008 	sub.w	r0, r7, r8
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	4420      	add	r0, r4
 800f6d4:	2e00      	cmp	r6, #0
 800f6d6:	d1e8      	bne.n	800f6aa <ucdr_deserialize_endian_array_float+0x56>
 800f6d8:	7da8      	ldrb	r0, [r5, #22]
 800f6da:	2304      	movs	r3, #4
 800f6dc:	756b      	strb	r3, [r5, #21]
 800f6de:	f080 0001 	eor.w	r0, r0, #1
 800f6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e6:	463a      	mov	r2, r7
 800f6e8:	68a9      	ldr	r1, [r5, #8]
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f00c f99c 	bl	801ba28 <memcpy>
 800f6f0:	68aa      	ldr	r2, [r5, #8]
 800f6f2:	692b      	ldr	r3, [r5, #16]
 800f6f4:	443a      	add	r2, r7
 800f6f6:	443b      	add	r3, r7
 800f6f8:	60aa      	str	r2, [r5, #8]
 800f6fa:	612b      	str	r3, [r5, #16]
 800f6fc:	e7ec      	b.n	800f6d8 <ucdr_deserialize_endian_array_float+0x84>
 800f6fe:	bf00      	nop

0800f700 <ucdr_serialize_array_double>:
 800f700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f704:	460e      	mov	r6, r1
 800f706:	2108      	movs	r1, #8
 800f708:	4604      	mov	r4, r0
 800f70a:	4617      	mov	r7, r2
 800f70c:	f7fc fff2 	bl	800c6f4 <ucdr_buffer_alignment>
 800f710:	4601      	mov	r1, r0
 800f712:	4620      	mov	r0, r4
 800f714:	7d65      	ldrb	r5, [r4, #21]
 800f716:	f7fd f831 	bl	800c77c <ucdr_advance_buffer>
 800f71a:	7d21      	ldrb	r1, [r4, #20]
 800f71c:	7565      	strb	r5, [r4, #21]
 800f71e:	2901      	cmp	r1, #1
 800f720:	d010      	beq.n	800f744 <ucdr_serialize_array_double+0x44>
 800f722:	b157      	cbz	r7, 800f73a <ucdr_serialize_array_double+0x3a>
 800f724:	2500      	movs	r5, #0
 800f726:	e000      	b.n	800f72a <ucdr_serialize_array_double+0x2a>
 800f728:	7d21      	ldrb	r1, [r4, #20]
 800f72a:	ecb6 0b02 	vldmia	r6!, {d0}
 800f72e:	4620      	mov	r0, r4
 800f730:	3501      	adds	r5, #1
 800f732:	f7fc fd31 	bl	800c198 <ucdr_serialize_endian_double>
 800f736:	42af      	cmp	r7, r5
 800f738:	d1f6      	bne.n	800f728 <ucdr_serialize_array_double+0x28>
 800f73a:	7da0      	ldrb	r0, [r4, #22]
 800f73c:	f080 0001 	eor.w	r0, r0, #1
 800f740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f744:	00ff      	lsls	r7, r7, #3
 800f746:	4639      	mov	r1, r7
 800f748:	4620      	mov	r0, r4
 800f74a:	f7fc ff73 	bl	800c634 <ucdr_check_buffer_available_for>
 800f74e:	b9f8      	cbnz	r0, 800f790 <ucdr_serialize_array_double+0x90>
 800f750:	46b8      	mov	r8, r7
 800f752:	e00a      	b.n	800f76a <ucdr_serialize_array_double+0x6a>
 800f754:	68a0      	ldr	r0, [r4, #8]
 800f756:	f00c f967 	bl	801ba28 <memcpy>
 800f75a:	68a2      	ldr	r2, [r4, #8]
 800f75c:	6923      	ldr	r3, [r4, #16]
 800f75e:	442a      	add	r2, r5
 800f760:	442b      	add	r3, r5
 800f762:	eba8 0805 	sub.w	r8, r8, r5
 800f766:	60a2      	str	r2, [r4, #8]
 800f768:	6123      	str	r3, [r4, #16]
 800f76a:	2208      	movs	r2, #8
 800f76c:	4641      	mov	r1, r8
 800f76e:	4620      	mov	r0, r4
 800f770:	f7fc ffe8 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f774:	eba7 0108 	sub.w	r1, r7, r8
 800f778:	4605      	mov	r5, r0
 800f77a:	4602      	mov	r2, r0
 800f77c:	4431      	add	r1, r6
 800f77e:	2800      	cmp	r0, #0
 800f780:	d1e8      	bne.n	800f754 <ucdr_serialize_array_double+0x54>
 800f782:	7da0      	ldrb	r0, [r4, #22]
 800f784:	2308      	movs	r3, #8
 800f786:	7563      	strb	r3, [r4, #21]
 800f788:	f080 0001 	eor.w	r0, r0, #1
 800f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f790:	463a      	mov	r2, r7
 800f792:	68a0      	ldr	r0, [r4, #8]
 800f794:	4631      	mov	r1, r6
 800f796:	f00c f947 	bl	801ba28 <memcpy>
 800f79a:	68a2      	ldr	r2, [r4, #8]
 800f79c:	6923      	ldr	r3, [r4, #16]
 800f79e:	443a      	add	r2, r7
 800f7a0:	443b      	add	r3, r7
 800f7a2:	60a2      	str	r2, [r4, #8]
 800f7a4:	6123      	str	r3, [r4, #16]
 800f7a6:	e7ec      	b.n	800f782 <ucdr_serialize_array_double+0x82>

0800f7a8 <ucdr_deserialize_array_double>:
 800f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ac:	460e      	mov	r6, r1
 800f7ae:	2108      	movs	r1, #8
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	4617      	mov	r7, r2
 800f7b4:	f7fc ff9e 	bl	800c6f4 <ucdr_buffer_alignment>
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	7d65      	ldrb	r5, [r4, #21]
 800f7be:	f7fc ffdd 	bl	800c77c <ucdr_advance_buffer>
 800f7c2:	7d21      	ldrb	r1, [r4, #20]
 800f7c4:	7565      	strb	r5, [r4, #21]
 800f7c6:	2901      	cmp	r1, #1
 800f7c8:	d011      	beq.n	800f7ee <ucdr_deserialize_array_double+0x46>
 800f7ca:	b15f      	cbz	r7, 800f7e4 <ucdr_deserialize_array_double+0x3c>
 800f7cc:	2500      	movs	r5, #0
 800f7ce:	e000      	b.n	800f7d2 <ucdr_deserialize_array_double+0x2a>
 800f7d0:	7d21      	ldrb	r1, [r4, #20]
 800f7d2:	4632      	mov	r2, r6
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	3501      	adds	r5, #1
 800f7d8:	f7fc fe64 	bl	800c4a4 <ucdr_deserialize_endian_double>
 800f7dc:	42af      	cmp	r7, r5
 800f7de:	f106 0608 	add.w	r6, r6, #8
 800f7e2:	d1f5      	bne.n	800f7d0 <ucdr_deserialize_array_double+0x28>
 800f7e4:	7da0      	ldrb	r0, [r4, #22]
 800f7e6:	f080 0001 	eor.w	r0, r0, #1
 800f7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ee:	00ff      	lsls	r7, r7, #3
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f7fc ff1e 	bl	800c634 <ucdr_check_buffer_available_for>
 800f7f8:	b9f8      	cbnz	r0, 800f83a <ucdr_deserialize_array_double+0x92>
 800f7fa:	46b8      	mov	r8, r7
 800f7fc:	e00a      	b.n	800f814 <ucdr_deserialize_array_double+0x6c>
 800f7fe:	68a1      	ldr	r1, [r4, #8]
 800f800:	f00c f912 	bl	801ba28 <memcpy>
 800f804:	68a2      	ldr	r2, [r4, #8]
 800f806:	6923      	ldr	r3, [r4, #16]
 800f808:	442a      	add	r2, r5
 800f80a:	442b      	add	r3, r5
 800f80c:	eba8 0805 	sub.w	r8, r8, r5
 800f810:	60a2      	str	r2, [r4, #8]
 800f812:	6123      	str	r3, [r4, #16]
 800f814:	2208      	movs	r2, #8
 800f816:	4641      	mov	r1, r8
 800f818:	4620      	mov	r0, r4
 800f81a:	f7fc ff93 	bl	800c744 <ucdr_check_final_buffer_behavior_array>
 800f81e:	4605      	mov	r5, r0
 800f820:	eba7 0008 	sub.w	r0, r7, r8
 800f824:	462a      	mov	r2, r5
 800f826:	4430      	add	r0, r6
 800f828:	2d00      	cmp	r5, #0
 800f82a:	d1e8      	bne.n	800f7fe <ucdr_deserialize_array_double+0x56>
 800f82c:	7da0      	ldrb	r0, [r4, #22]
 800f82e:	2308      	movs	r3, #8
 800f830:	7563      	strb	r3, [r4, #21]
 800f832:	f080 0001 	eor.w	r0, r0, #1
 800f836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83a:	463a      	mov	r2, r7
 800f83c:	68a1      	ldr	r1, [r4, #8]
 800f83e:	4630      	mov	r0, r6
 800f840:	f00c f8f2 	bl	801ba28 <memcpy>
 800f844:	68a2      	ldr	r2, [r4, #8]
 800f846:	6923      	ldr	r3, [r4, #16]
 800f848:	443a      	add	r2, r7
 800f84a:	443b      	add	r3, r7
 800f84c:	60a2      	str	r2, [r4, #8]
 800f84e:	6123      	str	r3, [r4, #16]
 800f850:	e7ec      	b.n	800f82c <ucdr_deserialize_array_double+0x84>
 800f852:	bf00      	nop

0800f854 <ucdr_serialize_sequence_char>:
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	460e      	mov	r6, r1
 800f858:	4615      	mov	r5, r2
 800f85a:	7d01      	ldrb	r1, [r0, #20]
 800f85c:	4604      	mov	r4, r0
 800f85e:	f7fb fe15 	bl	800b48c <ucdr_serialize_endian_uint32_t>
 800f862:	b90d      	cbnz	r5, 800f868 <ucdr_serialize_sequence_char+0x14>
 800f864:	2001      	movs	r0, #1
 800f866:	bd70      	pop	{r4, r5, r6, pc}
 800f868:	7d21      	ldrb	r1, [r4, #20]
 800f86a:	462b      	mov	r3, r5
 800f86c:	4632      	mov	r2, r6
 800f86e:	4620      	mov	r0, r4
 800f870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f874:	f7ff bd6e 	b.w	800f354 <ucdr_serialize_endian_array_char>

0800f878 <ucdr_deserialize_sequence_char>:
 800f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87c:	461d      	mov	r5, r3
 800f87e:	4616      	mov	r6, r2
 800f880:	460f      	mov	r7, r1
 800f882:	461a      	mov	r2, r3
 800f884:	7d01      	ldrb	r1, [r0, #20]
 800f886:	4604      	mov	r4, r0
 800f888:	f7fb ff1e 	bl	800b6c8 <ucdr_deserialize_endian_uint32_t>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	429e      	cmp	r6, r3
 800f890:	d208      	bcs.n	800f8a4 <ucdr_deserialize_sequence_char+0x2c>
 800f892:	2201      	movs	r2, #1
 800f894:	75a2      	strb	r2, [r4, #22]
 800f896:	7d21      	ldrb	r1, [r4, #20]
 800f898:	463a      	mov	r2, r7
 800f89a:	4620      	mov	r0, r4
 800f89c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	f7ff bd8a 	b.w	800f3b8 <ucdr_deserialize_endian_array_char>
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1f6      	bne.n	800f896 <ucdr_deserialize_sequence_char+0x1e>
 800f8a8:	2001      	movs	r0, #1
 800f8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ae:	bf00      	nop

0800f8b0 <ucdr_serialize_sequence_uint8_t>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	460e      	mov	r6, r1
 800f8b4:	4615      	mov	r5, r2
 800f8b6:	7d01      	ldrb	r1, [r0, #20]
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	f7fb fde7 	bl	800b48c <ucdr_serialize_endian_uint32_t>
 800f8be:	b90d      	cbnz	r5, 800f8c4 <ucdr_serialize_sequence_uint8_t+0x14>
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	bd70      	pop	{r4, r5, r6, pc}
 800f8c4:	7d21      	ldrb	r1, [r4, #20]
 800f8c6:	462b      	mov	r3, r5
 800f8c8:	4632      	mov	r2, r6
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8d0:	f7ff bdd6 	b.w	800f480 <ucdr_serialize_endian_array_uint8_t>

0800f8d4 <ucdr_deserialize_sequence_uint8_t>:
 800f8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d8:	461d      	mov	r5, r3
 800f8da:	4616      	mov	r6, r2
 800f8dc:	460f      	mov	r7, r1
 800f8de:	461a      	mov	r2, r3
 800f8e0:	7d01      	ldrb	r1, [r0, #20]
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	f7fb fef0 	bl	800b6c8 <ucdr_deserialize_endian_uint32_t>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	429e      	cmp	r6, r3
 800f8ec:	d208      	bcs.n	800f900 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	75a2      	strb	r2, [r4, #22]
 800f8f2:	7d21      	ldrb	r1, [r4, #20]
 800f8f4:	463a      	mov	r2, r7
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	f7ff be24 	b.w	800f548 <ucdr_deserialize_endian_array_uint8_t>
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1f6      	bne.n	800f8f2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f904:	2001      	movs	r0, #1
 800f906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90a:	bf00      	nop

0800f90c <ucdr_serialize_sequence_float>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	460e      	mov	r6, r1
 800f910:	4615      	mov	r5, r2
 800f912:	7d01      	ldrb	r1, [r0, #20]
 800f914:	4604      	mov	r4, r0
 800f916:	f7fb fdb9 	bl	800b48c <ucdr_serialize_endian_uint32_t>
 800f91a:	b90d      	cbnz	r5, 800f920 <ucdr_serialize_sequence_float+0x14>
 800f91c:	2001      	movs	r0, #1
 800f91e:	bd70      	pop	{r4, r5, r6, pc}
 800f920:	7d21      	ldrb	r1, [r4, #20]
 800f922:	462b      	mov	r3, r5
 800f924:	4632      	mov	r2, r6
 800f926:	4620      	mov	r0, r4
 800f928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f92c:	f7ff be3e 	b.w	800f5ac <ucdr_serialize_endian_array_float>

0800f930 <ucdr_deserialize_sequence_float>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	461d      	mov	r5, r3
 800f936:	4616      	mov	r6, r2
 800f938:	460f      	mov	r7, r1
 800f93a:	461a      	mov	r2, r3
 800f93c:	7d01      	ldrb	r1, [r0, #20]
 800f93e:	4604      	mov	r4, r0
 800f940:	f7fb fec2 	bl	800b6c8 <ucdr_deserialize_endian_uint32_t>
 800f944:	682b      	ldr	r3, [r5, #0]
 800f946:	429e      	cmp	r6, r3
 800f948:	d208      	bcs.n	800f95c <ucdr_deserialize_sequence_float+0x2c>
 800f94a:	2201      	movs	r2, #1
 800f94c:	75a2      	strb	r2, [r4, #22]
 800f94e:	7d21      	ldrb	r1, [r4, #20]
 800f950:	463a      	mov	r2, r7
 800f952:	4620      	mov	r0, r4
 800f954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f958:	f7ff be7c 	b.w	800f654 <ucdr_deserialize_endian_array_float>
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1f6      	bne.n	800f94e <ucdr_deserialize_sequence_float+0x1e>
 800f960:	2001      	movs	r0, #1
 800f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f966:	bf00      	nop

0800f968 <uxr_buffer_delete_entity>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	2300      	movs	r3, #0
 800f96c:	b08e      	sub	sp, #56	@ 0x38
 800f96e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f972:	2303      	movs	r3, #3
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	2204      	movs	r2, #4
 800f978:	ab06      	add	r3, sp, #24
 800f97a:	4604      	mov	r4, r0
 800f97c:	f001 fb30 	bl	8010fe0 <uxr_prepare_stream_to_write_submessage>
 800f980:	b918      	cbnz	r0, 800f98a <uxr_buffer_delete_entity+0x22>
 800f982:	4604      	mov	r4, r0
 800f984:	4620      	mov	r0, r4
 800f986:	b00e      	add	sp, #56	@ 0x38
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	9902      	ldr	r1, [sp, #8]
 800f98c:	aa05      	add	r2, sp, #20
 800f98e:	4620      	mov	r0, r4
 800f990:	f001 fc60 	bl	8011254 <uxr_init_base_object_request>
 800f994:	a905      	add	r1, sp, #20
 800f996:	4604      	mov	r4, r0
 800f998:	a806      	add	r0, sp, #24
 800f99a:	f003 fae7 	bl	8012f6c <uxr_serialize_DELETE_Payload>
 800f99e:	4620      	mov	r0, r4
 800f9a0:	b00e      	add	sp, #56	@ 0x38
 800f9a2:	bd10      	pop	{r4, pc}

0800f9a4 <uxr_common_create_entity>:
 800f9a4:	b510      	push	{r4, lr}
 800f9a6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f9aa:	b08c      	sub	sp, #48	@ 0x30
 800f9ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f9b0:	f1bc 0f01 	cmp.w	ip, #1
 800f9b4:	bf08      	it	eq
 800f9b6:	f003 0201 	andeq.w	r2, r3, #1
 800f9ba:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f9be:	bf18      	it	ne
 800f9c0:	2200      	movne	r2, #0
 800f9c2:	330e      	adds	r3, #14
 800f9c4:	441a      	add	r2, r3
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e9cd 3100 	strd	r3, r1, [sp]
 800f9cc:	b292      	uxth	r2, r2
 800f9ce:	9903      	ldr	r1, [sp, #12]
 800f9d0:	ab04      	add	r3, sp, #16
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	f001 fb04 	bl	8010fe0 <uxr_prepare_stream_to_write_submessage>
 800f9d8:	b918      	cbnz	r0, 800f9e2 <uxr_common_create_entity+0x3e>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4620      	mov	r0, r4
 800f9de:	b00c      	add	sp, #48	@ 0x30
 800f9e0:	bd10      	pop	{r4, pc}
 800f9e2:	9902      	ldr	r1, [sp, #8]
 800f9e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f001 fc34 	bl	8011254 <uxr_init_base_object_request>
 800f9ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	a804      	add	r0, sp, #16
 800f9f2:	f003 fa05 	bl	8012e00 <uxr_serialize_CREATE_Payload>
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	b00c      	add	sp, #48	@ 0x30
 800f9fa:	bd10      	pop	{r4, pc}

0800f9fc <uxr_buffer_create_participant_bin>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fa02:	ac11      	add	r4, sp, #68	@ 0x44
 800fa04:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fa08:	2303      	movs	r3, #3
 800fa0a:	7223      	strb	r3, [r4, #8]
 800fa0c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fa0e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fa12:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fa16:	2201      	movs	r2, #1
 800fa18:	2100      	movs	r1, #0
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	7122      	strb	r2, [r4, #4]
 800fa1e:	f88d 1014 	strb.w	r1, [sp, #20]
 800fa22:	b1cb      	cbz	r3, 800fa58 <uxr_buffer_create_participant_bin+0x5c>
 800fa24:	f88d 201c 	strb.w	r2, [sp, #28]
 800fa28:	9308      	str	r3, [sp, #32]
 800fa2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa2e:	a915      	add	r1, sp, #84	@ 0x54
 800fa30:	a809      	add	r0, sp, #36	@ 0x24
 800fa32:	f7fc fe53 	bl	800c6dc <ucdr_init_buffer>
 800fa36:	a905      	add	r1, sp, #20
 800fa38:	a809      	add	r0, sp, #36	@ 0x24
 800fa3a:	f002 fde9 	bl	8012610 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fa3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa40:	9600      	str	r6, [sp, #0]
 800fa42:	9401      	str	r4, [sp, #4]
 800fa44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa48:	60e3      	str	r3, [r4, #12]
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	f7ff ffa9 	bl	800f9a4 <uxr_common_create_entity>
 800fa52:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
 800fa58:	f88d 301c 	strb.w	r3, [sp, #28]
 800fa5c:	e7e5      	b.n	800fa2a <uxr_buffer_create_participant_bin+0x2e>
 800fa5e:	bf00      	nop

0800fa60 <uxr_buffer_create_topic_bin>:
 800fa60:	b570      	push	{r4, r5, r6, lr}
 800fa62:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fa66:	4605      	mov	r5, r0
 800fa68:	9105      	str	r1, [sp, #20]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	a997      	add	r1, sp, #604	@ 0x25c
 800fa6e:	2302      	movs	r3, #2
 800fa70:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fa74:	9204      	str	r2, [sp, #16]
 800fa76:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fa7a:	f000 fa31 	bl	800fee0 <uxr_object_id_to_raw>
 800fa7e:	2303      	movs	r3, #3
 800fa80:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fa84:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fa86:	9306      	str	r3, [sp, #24]
 800fa88:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fa8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fa92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa96:	2300      	movs	r3, #0
 800fa98:	a917      	add	r1, sp, #92	@ 0x5c
 800fa9a:	a80b      	add	r0, sp, #44	@ 0x2c
 800fa9c:	f88d 301c 	strb.w	r3, [sp, #28]
 800faa0:	f7fc fe1c 	bl	800c6dc <ucdr_init_buffer>
 800faa4:	a906      	add	r1, sp, #24
 800faa6:	a80b      	add	r0, sp, #44	@ 0x2c
 800faa8:	f002 fdd4 	bl	8012654 <uxr_serialize_OBJK_Topic_Binary>
 800faac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faae:	9316      	str	r3, [sp, #88]	@ 0x58
 800fab0:	ac13      	add	r4, sp, #76	@ 0x4c
 800fab2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fab6:	9600      	str	r6, [sp, #0]
 800fab8:	9401      	str	r4, [sp, #4]
 800faba:	b29b      	uxth	r3, r3
 800fabc:	4628      	mov	r0, r5
 800fabe:	f7ff ff71 	bl	800f9a4 <uxr_common_create_entity>
 800fac2:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fac6:	bd70      	pop	{r4, r5, r6, pc}

0800fac8 <uxr_buffer_create_publisher_bin>:
 800fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faca:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800face:	4605      	mov	r5, r0
 800fad0:	9105      	str	r1, [sp, #20]
 800fad2:	4618      	mov	r0, r3
 800fad4:	2603      	movs	r6, #3
 800fad6:	a992      	add	r1, sp, #584	@ 0x248
 800fad8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fadc:	9204      	str	r2, [sp, #16]
 800fade:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fae2:	f000 f9fd 	bl	800fee0 <uxr_object_id_to_raw>
 800fae6:	2300      	movs	r3, #0
 800fae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faec:	a912      	add	r1, sp, #72	@ 0x48
 800faee:	a806      	add	r0, sp, #24
 800faf0:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800faf4:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800faf8:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fafc:	f7fc fdee 	bl	800c6dc <ucdr_init_buffer>
 800fb00:	a993      	add	r1, sp, #588	@ 0x24c
 800fb02:	a806      	add	r0, sp, #24
 800fb04:	f002 fe5c 	bl	80127c0 <uxr_serialize_OBJK_Publisher_Binary>
 800fb08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb0a:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb0c:	ac0e      	add	r4, sp, #56	@ 0x38
 800fb0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb12:	9700      	str	r7, [sp, #0]
 800fb14:	9401      	str	r4, [sp, #4]
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	4628      	mov	r0, r5
 800fb1a:	f7ff ff43 	bl	800f9a4 <uxr_common_create_entity>
 800fb1e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fb22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb24 <uxr_buffer_create_subscriber_bin>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	9105      	str	r1, [sp, #20]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	a992      	add	r1, sp, #584	@ 0x248
 800fb32:	2304      	movs	r3, #4
 800fb34:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fb38:	9204      	str	r2, [sp, #16]
 800fb3a:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fb3e:	f000 f9cf 	bl	800fee0 <uxr_object_id_to_raw>
 800fb42:	2203      	movs	r2, #3
 800fb44:	2300      	movs	r3, #0
 800fb46:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800fb4a:	a912      	add	r1, sp, #72	@ 0x48
 800fb4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb50:	a806      	add	r0, sp, #24
 800fb52:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fb56:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fb5a:	f7fc fdbf 	bl	800c6dc <ucdr_init_buffer>
 800fb5e:	a993      	add	r1, sp, #588	@ 0x24c
 800fb60:	a806      	add	r0, sp, #24
 800fb62:	f002 fedf 	bl	8012924 <uxr_serialize_OBJK_Subscriber_Binary>
 800fb66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb68:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb6a:	ac0e      	add	r4, sp, #56	@ 0x38
 800fb6c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb70:	9600      	str	r6, [sp, #0]
 800fb72:	9401      	str	r4, [sp, #4]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	4628      	mov	r0, r5
 800fb78:	f7ff ff14 	bl	800f9a4 <uxr_common_create_entity>
 800fb7c:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fb80:	bd70      	pop	{r4, r5, r6, pc}
 800fb82:	bf00      	nop

0800fb84 <uxr_buffer_create_datawriter_bin>:
 800fb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb86:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800fb8a:	ac1d      	add	r4, sp, #116	@ 0x74
 800fb8c:	9105      	str	r1, [sp, #20]
 800fb8e:	4605      	mov	r5, r0
 800fb90:	a9a1      	add	r1, sp, #644	@ 0x284
 800fb92:	4618      	mov	r0, r3
 800fb94:	2305      	movs	r3, #5
 800fb96:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800fb9a:	9204      	str	r2, [sp, #16]
 800fb9c:	7123      	strb	r3, [r4, #4]
 800fb9e:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800fba2:	f000 f99d 	bl	800fee0 <uxr_object_id_to_raw>
 800fba6:	2303      	movs	r3, #3
 800fba8:	a90e      	add	r1, sp, #56	@ 0x38
 800fbaa:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fbac:	7223      	strb	r3, [r4, #8]
 800fbae:	f000 f997 	bl	800fee0 <uxr_object_id_to_raw>
 800fbb2:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800fbb6:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800fbba:	2200      	movs	r2, #0
 800fbbc:	3f00      	subs	r7, #0
 800fbbe:	fab3 f383 	clz	r3, r3
 800fbc2:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800fbc6:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800fbca:	bf18      	it	ne
 800fbcc:	2701      	movne	r7, #1
 800fbce:	095b      	lsrs	r3, r3, #5
 800fbd0:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800fbd4:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800fbd8:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800fbe2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fbe6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800fbea:	b919      	cbnz	r1, 800fbf4 <uxr_buffer_create_datawriter_bin+0x70>
 800fbec:	f043 0302 	orr.w	r3, r3, #2
 800fbf0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fbf4:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800fbf8:	2a01      	cmp	r2, #1
 800fbfa:	d022      	beq.n	800fc42 <uxr_buffer_create_datawriter_bin+0xbe>
 800fbfc:	2a03      	cmp	r2, #3
 800fbfe:	d01b      	beq.n	800fc38 <uxr_buffer_create_datawriter_bin+0xb4>
 800fc00:	b91a      	cbnz	r2, 800fc0a <uxr_buffer_create_datawriter_bin+0x86>
 800fc02:	f043 0308 	orr.w	r3, r3, #8
 800fc06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc0e:	a921      	add	r1, sp, #132	@ 0x84
 800fc10:	a806      	add	r0, sp, #24
 800fc12:	f7fc fd63 	bl	800c6dc <ucdr_init_buffer>
 800fc16:	a90e      	add	r1, sp, #56	@ 0x38
 800fc18:	a806      	add	r0, sp, #24
 800fc1a:	f002 ff25 	bl	8012a68 <uxr_serialize_OBJK_DataWriter_Binary>
 800fc1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc20:	9600      	str	r6, [sp, #0]
 800fc22:	9401      	str	r4, [sp, #4]
 800fc24:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc28:	60e3      	str	r3, [r4, #12]
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	f7ff feb9 	bl	800f9a4 <uxr_common_create_entity>
 800fc32:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800fc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc38:	f043 0320 	orr.w	r3, r3, #32
 800fc3c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc40:	e7e3      	b.n	800fc0a <uxr_buffer_create_datawriter_bin+0x86>
 800fc42:	f043 0310 	orr.w	r3, r3, #16
 800fc46:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc4a:	e7de      	b.n	800fc0a <uxr_buffer_create_datawriter_bin+0x86>

0800fc4c <uxr_buffer_create_datareader_bin>:
 800fc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc4e:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800fc52:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fc54:	9105      	str	r1, [sp, #20]
 800fc56:	4605      	mov	r5, r0
 800fc58:	a9a3      	add	r1, sp, #652	@ 0x28c
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	2306      	movs	r3, #6
 800fc5e:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800fc62:	9204      	str	r2, [sp, #16]
 800fc64:	7123      	strb	r3, [r4, #4]
 800fc66:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800fc6a:	f000 f939 	bl	800fee0 <uxr_object_id_to_raw>
 800fc6e:	2303      	movs	r3, #3
 800fc70:	a90e      	add	r1, sp, #56	@ 0x38
 800fc72:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800fc74:	7223      	strb	r3, [r4, #8]
 800fc76:	f000 f933 	bl	800fee0 <uxr_object_id_to_raw>
 800fc7a:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800fc7e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800fc82:	2200      	movs	r2, #0
 800fc84:	3f00      	subs	r7, #0
 800fc86:	fab3 f383 	clz	r3, r3
 800fc8a:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800fc8e:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800fc92:	bf18      	it	ne
 800fc94:	2701      	movne	r7, #1
 800fc96:	095b      	lsrs	r3, r3, #5
 800fc98:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800fc9c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800fca0:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800fca4:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800fcae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcb2:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800fcb6:	b919      	cbnz	r1, 800fcc0 <uxr_buffer_create_datareader_bin+0x74>
 800fcb8:	f043 0302 	orr.w	r3, r3, #2
 800fcbc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcc0:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800fcc4:	2a01      	cmp	r2, #1
 800fcc6:	d022      	beq.n	800fd0e <uxr_buffer_create_datareader_bin+0xc2>
 800fcc8:	2a03      	cmp	r2, #3
 800fcca:	d01b      	beq.n	800fd04 <uxr_buffer_create_datareader_bin+0xb8>
 800fccc:	b91a      	cbnz	r2, 800fcd6 <uxr_buffer_create_datareader_bin+0x8a>
 800fcce:	f043 0308 	orr.w	r3, r3, #8
 800fcd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcda:	a923      	add	r1, sp, #140	@ 0x8c
 800fcdc:	a806      	add	r0, sp, #24
 800fcde:	f7fc fcfd 	bl	800c6dc <ucdr_init_buffer>
 800fce2:	a90e      	add	r1, sp, #56	@ 0x38
 800fce4:	a806      	add	r0, sp, #24
 800fce6:	f002 fe83 	bl	80129f0 <uxr_serialize_OBJK_DataReader_Binary>
 800fcea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcec:	9600      	str	r6, [sp, #0]
 800fcee:	9401      	str	r4, [sp, #4]
 800fcf0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fcf4:	60e3      	str	r3, [r4, #12]
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	f7ff fe53 	bl	800f9a4 <uxr_common_create_entity>
 800fcfe:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800fd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd04:	f043 0320 	orr.w	r3, r3, #32
 800fd08:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd0c:	e7e3      	b.n	800fcd6 <uxr_buffer_create_datareader_bin+0x8a>
 800fd0e:	f043 0310 	orr.w	r3, r3, #16
 800fd12:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd16:	e7de      	b.n	800fcd6 <uxr_buffer_create_datareader_bin+0x8a>

0800fd18 <get_custom_error>:
 800fd18:	4b01      	ldr	r3, [pc, #4]	@ (800fd20 <get_custom_error+0x8>)
 800fd1a:	7818      	ldrb	r0, [r3, #0]
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	200117e2 	.word	0x200117e2

0800fd24 <recv_custom_msg>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	b089      	sub	sp, #36	@ 0x24
 800fd2a:	4693      	mov	fp, r2
 800fd2c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fd30:	9104      	str	r1, [sp, #16]
 800fd32:	2100      	movs	r1, #0
 800fd34:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fd38:	9305      	str	r3, [sp, #20]
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	f88d 101e 	strb.w	r1, [sp, #30]
 800fd40:	b332      	cbz	r2, 800fd90 <recv_custom_msg+0x6c>
 800fd42:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800fd46:	f10d 091f 	add.w	r9, sp, #31
 800fd4a:	f10d 0814 	add.w	r8, sp, #20
 800fd4e:	f10d 071e 	add.w	r7, sp, #30
 800fd52:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800fd56:	e004      	b.n	800fd62 <recv_custom_msg+0x3e>
 800fd58:	9b05      	ldr	r3, [sp, #20]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	dd10      	ble.n	800fd80 <recv_custom_msg+0x5c>
 800fd5e:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800fd62:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fd66:	e9cd 6700 	strd	r6, r7, [sp]
 800fd6a:	4623      	mov	r3, r4
 800fd6c:	4622      	mov	r2, r4
 800fd6e:	4629      	mov	r1, r5
 800fd70:	4650      	mov	r0, sl
 800fd72:	f001 fc81 	bl	8011678 <uxr_read_framed_msg>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d0ee      	beq.n	800fd58 <recv_custom_msg+0x34>
 800fd7a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fd7e:	b1a3      	cbz	r3, 800fdaa <recv_custom_msg+0x86>
 800fd80:	4b0e      	ldr	r3, [pc, #56]	@ (800fdbc <recv_custom_msg+0x98>)
 800fd82:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fd86:	701a      	strb	r2, [r3, #0]
 800fd88:	2000      	movs	r0, #0
 800fd8a:	b009      	add	sp, #36	@ 0x24
 800fd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd90:	f10d 021f 	add.w	r2, sp, #31
 800fd94:	9200      	str	r2, [sp, #0]
 800fd96:	4601      	mov	r1, r0
 800fd98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd9c:	47a8      	blx	r5
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	d0ee      	beq.n	800fd80 <recv_custom_msg+0x5c>
 800fda2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1ea      	bne.n	800fd80 <recv_custom_msg+0x5c>
 800fdaa:	9b04      	ldr	r3, [sp, #16]
 800fdac:	f8cb 0000 	str.w	r0, [fp]
 800fdb0:	2001      	movs	r0, #1
 800fdb2:	601c      	str	r4, [r3, #0]
 800fdb4:	b009      	add	sp, #36	@ 0x24
 800fdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdba:	bf00      	nop
 800fdbc:	200117e2 	.word	0x200117e2

0800fdc0 <send_custom_msg>:
 800fdc0:	b570      	push	{r4, r5, r6, lr}
 800fdc2:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800fdc6:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fdca:	b086      	sub	sp, #24
 800fdcc:	4616      	mov	r6, r2
 800fdce:	b965      	cbnz	r5, 800fdea <send_custom_msg+0x2a>
 800fdd0:	f10d 0317 	add.w	r3, sp, #23
 800fdd4:	47a0      	blx	r4
 800fdd6:	b108      	cbz	r0, 800fddc <send_custom_msg+0x1c>
 800fdd8:	42b0      	cmp	r0, r6
 800fdda:	d014      	beq.n	800fe06 <send_custom_msg+0x46>
 800fddc:	4b0b      	ldr	r3, [pc, #44]	@ (800fe0c <send_custom_msg+0x4c>)
 800fdde:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	2000      	movs	r0, #0
 800fde6:	b006      	add	sp, #24
 800fde8:	bd70      	pop	{r4, r5, r6, pc}
 800fdea:	f10d 0217 	add.w	r2, sp, #23
 800fdee:	9202      	str	r2, [sp, #8]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	e9cd 6200 	strd	r6, r2, [sp]
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fe00:	f001 fa5c 	bl	80112bc <uxr_write_framed_msg>
 800fe04:	e7e7      	b.n	800fdd6 <send_custom_msg+0x16>
 800fe06:	2001      	movs	r0, #1
 800fe08:	b006      	add	sp, #24
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	200117e2 	.word	0x200117e2

0800fe10 <uxr_set_custom_transport_callbacks>:
 800fe10:	b410      	push	{r4}
 800fe12:	9c01      	ldr	r4, [sp, #4]
 800fe14:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800fe18:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fe1c:	9b02      	ldr	r3, [sp, #8]
 800fe1e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fe22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe26:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800fe2a:	4770      	bx	lr

0800fe2c <uxr_init_custom_transport>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fe32:	b303      	cbz	r3, 800fe76 <uxr_init_custom_transport+0x4a>
 800fe34:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fe38:	4604      	mov	r4, r0
 800fe3a:	b1e2      	cbz	r2, 800fe76 <uxr_init_custom_transport+0x4a>
 800fe3c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fe40:	b1ca      	cbz	r2, 800fe76 <uxr_init_custom_transport+0x4a>
 800fe42:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fe46:	b1b2      	cbz	r2, 800fe76 <uxr_init_custom_transport+0x4a>
 800fe48:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fe4c:	4798      	blx	r3
 800fe4e:	4605      	mov	r5, r0
 800fe50:	b188      	cbz	r0, 800fe76 <uxr_init_custom_transport+0x4a>
 800fe52:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800fe56:	b98b      	cbnz	r3, 800fe7c <uxr_init_custom_transport+0x50>
 800fe58:	490b      	ldr	r1, [pc, #44]	@ (800fe88 <uxr_init_custom_transport+0x5c>)
 800fe5a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe8c <uxr_init_custom_transport+0x60>)
 800fe5c:	4a0c      	ldr	r2, [pc, #48]	@ (800fe90 <uxr_init_custom_transport+0x64>)
 800fe5e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800fe62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe66:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800fe6a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800fe6e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800fe72:	4628      	mov	r0, r5
 800fe74:	bd38      	pop	{r3, r4, r5, pc}
 800fe76:	2500      	movs	r5, #0
 800fe78:	4628      	mov	r0, r5
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800fe82:	f001 fa15 	bl	80112b0 <uxr_init_framing_io>
 800fe86:	e7e7      	b.n	800fe58 <uxr_init_custom_transport+0x2c>
 800fe88:	0800fdc1 	.word	0x0800fdc1
 800fe8c:	0800fd25 	.word	0x0800fd25
 800fe90:	0800fd19 	.word	0x0800fd19

0800fe94 <uxr_close_custom_transport>:
 800fe94:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800fe98:	4718      	bx	r3
 800fe9a:	bf00      	nop

0800fe9c <uxr_object_id>:
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	2300      	movs	r3, #0
 800fea0:	f88d 1006 	strb.w	r1, [sp, #6]
 800fea4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fea8:	f360 030f 	bfi	r3, r0, #0, #16
 800feac:	f362 431f 	bfi	r3, r2, #16, #16
 800feb0:	4618      	mov	r0, r3
 800feb2:	b002      	add	sp, #8
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop

0800feb8 <uxr_object_id_from_raw>:
 800feb8:	7843      	ldrb	r3, [r0, #1]
 800feba:	7801      	ldrb	r1, [r0, #0]
 800febc:	b082      	sub	sp, #8
 800febe:	f003 020f 	and.w	r2, r3, #15
 800fec2:	f88d 2006 	strb.w	r2, [sp, #6]
 800fec6:	091b      	lsrs	r3, r3, #4
 800fec8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fecc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fed0:	2000      	movs	r0, #0
 800fed2:	f363 000f 	bfi	r0, r3, #0, #16
 800fed6:	f362 401f 	bfi	r0, r2, #16, #16
 800feda:	b002      	add	sp, #8
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop

0800fee0 <uxr_object_id_to_raw>:
 800fee0:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fee4:	b082      	sub	sp, #8
 800fee6:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800feea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800feee:	700a      	strb	r2, [r1, #0]
 800fef0:	704b      	strb	r3, [r1, #1]
 800fef2:	b002      	add	sp, #8
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop

0800fef8 <uxr_ping_agent_session>:
 800fef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fefc:	4616      	mov	r6, r2
 800fefe:	b091      	sub	sp, #68	@ 0x44
 800ff00:	2210      	movs	r2, #16
 800ff02:	4605      	mov	r5, r0
 800ff04:	460f      	mov	r7, r1
 800ff06:	a808      	add	r0, sp, #32
 800ff08:	eb0d 0102 	add.w	r1, sp, r2
 800ff0c:	f7fc fbe6 	bl	800c6dc <ucdr_init_buffer>
 800ff10:	4b20      	ldr	r3, [pc, #128]	@ (800ff94 <uxr_ping_agent_session+0x9c>)
 800ff12:	2400      	movs	r4, #0
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	f8ad 300a 	strh.w	r3, [sp, #10]
 800ff1a:	9400      	str	r4, [sp, #0]
 800ff1c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ff20:	f04f 0802 	mov.w	r8, #2
 800ff24:	7829      	ldrb	r1, [r5, #0]
 800ff26:	f8ad 3008 	strh.w	r3, [sp, #8]
 800ff2a:	4622      	mov	r2, r4
 800ff2c:	4623      	mov	r3, r4
 800ff2e:	a808      	add	r0, sp, #32
 800ff30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff34:	f002 f93c 	bl	80121b0 <uxr_serialize_message_header>
 800ff38:	4641      	mov	r1, r8
 800ff3a:	4623      	mov	r3, r4
 800ff3c:	2208      	movs	r2, #8
 800ff3e:	a808      	add	r0, sp, #32
 800ff40:	f001 ff38 	bl	8011db4 <uxr_buffer_submessage_header>
 800ff44:	a902      	add	r1, sp, #8
 800ff46:	4680      	mov	r8, r0
 800ff48:	a808      	add	r0, sp, #32
 800ff4a:	f002 ffe7 	bl	8012f1c <uxr_serialize_GET_INFO_Payload>
 800ff4e:	f1b8 0f00 	cmp.w	r8, #0
 800ff52:	d000      	beq.n	800ff56 <uxr_ping_agent_session+0x5e>
 800ff54:	b918      	cbnz	r0, 800ff5e <uxr_ping_agent_session+0x66>
 800ff56:	2000      	movs	r0, #0
 800ff58:	b011      	add	sp, #68	@ 0x44
 800ff5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff5e:	a808      	add	r0, sp, #32
 800ff60:	f7fc fbe8 	bl	800c734 <ucdr_buffer_length>
 800ff64:	4680      	mov	r8, r0
 800ff66:	2e00      	cmp	r6, #0
 800ff68:	d0f5      	beq.n	800ff56 <uxr_ping_agent_session+0x5e>
 800ff6a:	46a1      	mov	r9, r4
 800ff6c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ff6e:	4642      	mov	r2, r8
 800ff70:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ff74:	a904      	add	r1, sp, #16
 800ff76:	47a0      	blx	r4
 800ff78:	4639      	mov	r1, r7
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f000 fe23 	bl	8010bc8 <uxr_run_session_until_pong>
 800ff82:	4020      	ands	r0, r4
 800ff84:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800ff88:	f109 0901 	add.w	r9, r9, #1
 800ff8c:	d1e4      	bne.n	800ff58 <uxr_ping_agent_session+0x60>
 800ff8e:	454e      	cmp	r6, r9
 800ff90:	d1ec      	bne.n	800ff6c <uxr_ping_agent_session+0x74>
 800ff92:	e7e0      	b.n	800ff56 <uxr_ping_agent_session+0x5e>
 800ff94:	0802099c 	.word	0x0802099c

0800ff98 <uxr_ping_agent_attempts>:
 800ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9c:	b0d3      	sub	sp, #332	@ 0x14c
 800ff9e:	4606      	mov	r6, r0
 800ffa0:	4688      	mov	r8, r1
 800ffa2:	a810      	add	r0, sp, #64	@ 0x40
 800ffa4:	a90c      	add	r1, sp, #48	@ 0x30
 800ffa6:	4692      	mov	sl, r2
 800ffa8:	2210      	movs	r2, #16
 800ffaa:	f7fc fb97 	bl	800c6dc <ucdr_init_buffer>
 800ffae:	4b56      	ldr	r3, [pc, #344]	@ (8010108 <uxr_ping_agent_attempts+0x170>)
 800ffb0:	881b      	ldrh	r3, [r3, #0]
 800ffb2:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800ffb6:	2400      	movs	r4, #0
 800ffb8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ffbc:	2502      	movs	r5, #2
 800ffbe:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800ffc2:	4622      	mov	r2, r4
 800ffc4:	4623      	mov	r3, r4
 800ffc6:	2180      	movs	r1, #128	@ 0x80
 800ffc8:	a810      	add	r0, sp, #64	@ 0x40
 800ffca:	9400      	str	r4, [sp, #0]
 800ffcc:	9521      	str	r5, [sp, #132]	@ 0x84
 800ffce:	f002 f8ef 	bl	80121b0 <uxr_serialize_message_header>
 800ffd2:	4629      	mov	r1, r5
 800ffd4:	4623      	mov	r3, r4
 800ffd6:	2208      	movs	r2, #8
 800ffd8:	a810      	add	r0, sp, #64	@ 0x40
 800ffda:	f001 feeb 	bl	8011db4 <uxr_buffer_submessage_header>
 800ffde:	a920      	add	r1, sp, #128	@ 0x80
 800ffe0:	4605      	mov	r5, r0
 800ffe2:	a810      	add	r0, sp, #64	@ 0x40
 800ffe4:	f002 ff9a 	bl	8012f1c <uxr_serialize_GET_INFO_Payload>
 800ffe8:	4005      	ands	r5, r0
 800ffea:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800ffee:	d104      	bne.n	800fffa <uxr_ping_agent_attempts+0x62>
 800fff0:	2500      	movs	r5, #0
 800fff2:	4628      	mov	r0, r5
 800fff4:	b053      	add	sp, #332	@ 0x14c
 800fff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fffa:	a810      	add	r0, sp, #64	@ 0x40
 800fffc:	f7fc fb9a 	bl	800c734 <ucdr_buffer_length>
 8010000:	9004      	str	r0, [sp, #16]
 8010002:	f1ba 0f00 	cmp.w	sl, #0
 8010006:	d0f3      	beq.n	800fff0 <uxr_ping_agent_attempts+0x58>
 8010008:	9505      	str	r5, [sp, #20]
 801000a:	46a1      	mov	r9, r4
 801000c:	4627      	mov	r7, r4
 801000e:	4655      	mov	r5, sl
 8010010:	e9d6 0300 	ldrd	r0, r3, [r6]
 8010014:	9a04      	ldr	r2, [sp, #16]
 8010016:	a90c      	add	r1, sp, #48	@ 0x30
 8010018:	4798      	blx	r3
 801001a:	f001 ff11 	bl	8011e40 <uxr_millis>
 801001e:	46c2      	mov	sl, r8
 8010020:	4604      	mov	r4, r0
 8010022:	9503      	str	r5, [sp, #12]
 8010024:	6830      	ldr	r0, [r6, #0]
 8010026:	68b5      	ldr	r5, [r6, #8]
 8010028:	9708      	str	r7, [sp, #32]
 801002a:	4643      	mov	r3, r8
 801002c:	aa09      	add	r2, sp, #36	@ 0x24
 801002e:	a908      	add	r1, sp, #32
 8010030:	47a8      	blx	r5
 8010032:	4683      	mov	fp, r0
 8010034:	b998      	cbnz	r0, 801005e <uxr_ping_agent_attempts+0xc6>
 8010036:	f001 ff03 	bl	8011e40 <uxr_millis>
 801003a:	1b00      	subs	r0, r0, r4
 801003c:	ebaa 0a00 	sub.w	sl, sl, r0
 8010040:	f001 fefe 	bl	8011e40 <uxr_millis>
 8010044:	f1ba 0f00 	cmp.w	sl, #0
 8010048:	4604      	mov	r4, r0
 801004a:	dceb      	bgt.n	8010024 <uxr_ping_agent_attempts+0x8c>
 801004c:	9d03      	ldr	r5, [sp, #12]
 801004e:	f109 0901 	add.w	r9, r9, #1
 8010052:	f1bb 0f00 	cmp.w	fp, #0
 8010056:	d12a      	bne.n	80100ae <uxr_ping_agent_attempts+0x116>
 8010058:	45a9      	cmp	r9, r5
 801005a:	d1d9      	bne.n	8010010 <uxr_ping_agent_attempts+0x78>
 801005c:	e7c8      	b.n	800fff0 <uxr_ping_agent_attempts+0x58>
 801005e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010062:	a818      	add	r0, sp, #96	@ 0x60
 8010064:	f7fc fb3a 	bl	800c6dc <ucdr_init_buffer>
 8010068:	ab07      	add	r3, sp, #28
 801006a:	f10d 0219 	add.w	r2, sp, #25
 801006e:	a918      	add	r1, sp, #96	@ 0x60
 8010070:	a80a      	add	r0, sp, #40	@ 0x28
 8010072:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 8010076:	f001 f8a7 	bl	80111c8 <uxr_read_session_header>
 801007a:	22c8      	movs	r2, #200	@ 0xc8
 801007c:	2100      	movs	r1, #0
 801007e:	a820      	add	r0, sp, #128	@ 0x80
 8010080:	f00b fbea 	bl	801b858 <memset>
 8010084:	a818      	add	r0, sp, #96	@ 0x60
 8010086:	f7fc fb59 	bl	800c73c <ucdr_buffer_remaining>
 801008a:	2804      	cmp	r0, #4
 801008c:	d814      	bhi.n	80100b8 <uxr_ping_agent_attempts+0x120>
 801008e:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 8010092:	f001 fed5 	bl	8011e40 <uxr_millis>
 8010096:	1b00      	subs	r0, r0, r4
 8010098:	ebaa 0a00 	sub.w	sl, sl, r0
 801009c:	f001 fed0 	bl	8011e40 <uxr_millis>
 80100a0:	f1ba 0f00 	cmp.w	sl, #0
 80100a4:	4604      	mov	r4, r0
 80100a6:	dd28      	ble.n	80100fa <uxr_ping_agent_attempts+0x162>
 80100a8:	f1bb 0f00 	cmp.w	fp, #0
 80100ac:	d0ba      	beq.n	8010024 <uxr_ping_agent_attempts+0x8c>
 80100ae:	9d05      	ldr	r5, [sp, #20]
 80100b0:	4628      	mov	r0, r5
 80100b2:	b053      	add	sp, #332	@ 0x14c
 80100b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b8:	f10d 031e 	add.w	r3, sp, #30
 80100bc:	f10d 021b 	add.w	r2, sp, #27
 80100c0:	f10d 011a 	add.w	r1, sp, #26
 80100c4:	a818      	add	r0, sp, #96	@ 0x60
 80100c6:	f88d 701a 	strb.w	r7, [sp, #26]
 80100ca:	f88d 701b 	strb.w	r7, [sp, #27]
 80100ce:	f8ad 701e 	strh.w	r7, [sp, #30]
 80100d2:	f002 f8bd 	bl	8012250 <uxr_deserialize_submessage_header>
 80100d6:	a818      	add	r0, sp, #96	@ 0x60
 80100d8:	f7fc fb30 	bl	800c73c <ucdr_buffer_remaining>
 80100dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80100e0:	4298      	cmp	r0, r3
 80100e2:	d3d4      	bcc.n	801008e <uxr_ping_agent_attempts+0xf6>
 80100e4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80100e8:	2b06      	cmp	r3, #6
 80100ea:	d1d0      	bne.n	801008e <uxr_ping_agent_attempts+0xf6>
 80100ec:	a918      	add	r1, sp, #96	@ 0x60
 80100ee:	a820      	add	r0, sp, #128	@ 0x80
 80100f0:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 80100f4:	f000 f974 	bl	80103e0 <read_submessage_info>
 80100f8:	e7c9      	b.n	801008e <uxr_ping_agent_attempts+0xf6>
 80100fa:	f1bb 0b00 	subs.w	fp, fp, #0
 80100fe:	9d03      	ldr	r5, [sp, #12]
 8010100:	bf18      	it	ne
 8010102:	f04f 0b01 	movne.w	fp, #1
 8010106:	e7a2      	b.n	801004e <uxr_ping_agent_attempts+0xb6>
 8010108:	0802099c 	.word	0x0802099c

0801010c <on_get_fragmentation_info>:
 801010c:	b500      	push	{lr}
 801010e:	b08b      	sub	sp, #44	@ 0x2c
 8010110:	4601      	mov	r1, r0
 8010112:	2204      	movs	r2, #4
 8010114:	a802      	add	r0, sp, #8
 8010116:	f7fc fae1 	bl	800c6dc <ucdr_init_buffer>
 801011a:	f10d 0305 	add.w	r3, sp, #5
 801011e:	f10d 0206 	add.w	r2, sp, #6
 8010122:	a901      	add	r1, sp, #4
 8010124:	a802      	add	r0, sp, #8
 8010126:	f001 fe5f 	bl	8011de8 <uxr_read_submessage_header>
 801012a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801012e:	2b0d      	cmp	r3, #13
 8010130:	d003      	beq.n	801013a <on_get_fragmentation_info+0x2e>
 8010132:	2000      	movs	r0, #0
 8010134:	b00b      	add	sp, #44	@ 0x2c
 8010136:	f85d fb04 	ldr.w	pc, [sp], #4
 801013a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801013e:	f013 0f02 	tst.w	r3, #2
 8010142:	bf0c      	ite	eq
 8010144:	2001      	moveq	r0, #1
 8010146:	2002      	movne	r0, #2
 8010148:	b00b      	add	sp, #44	@ 0x2c
 801014a:	f85d fb04 	ldr.w	pc, [sp], #4
 801014e:	bf00      	nop

08010150 <read_submessage_get_info>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	2500      	movs	r5, #0
 8010154:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010158:	4604      	mov	r4, r0
 801015a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801015e:	460e      	mov	r6, r1
 8010160:	a810      	add	r0, sp, #64	@ 0x40
 8010162:	4629      	mov	r1, r5
 8010164:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010168:	f00b fb76 	bl	801b858 <memset>
 801016c:	a903      	add	r1, sp, #12
 801016e:	4630      	mov	r0, r6
 8010170:	f002 fee8 	bl	8012f44 <uxr_deserialize_GET_INFO_Payload>
 8010174:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010178:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801017c:	4620      	mov	r0, r4
 801017e:	f001 f861 	bl	8011244 <uxr_session_header_offset>
 8010182:	462b      	mov	r3, r5
 8010184:	9000      	str	r0, [sp, #0]
 8010186:	220c      	movs	r2, #12
 8010188:	a905      	add	r1, sp, #20
 801018a:	a808      	add	r0, sp, #32
 801018c:	f7fc fa94 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8010190:	a910      	add	r1, sp, #64	@ 0x40
 8010192:	a808      	add	r0, sp, #32
 8010194:	f002 ff48 	bl	8013028 <uxr_serialize_INFO_Payload>
 8010198:	9b08      	ldr	r3, [sp, #32]
 801019a:	462a      	mov	r2, r5
 801019c:	4629      	mov	r1, r5
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fffc 	bl	801119c <uxr_stamp_session_header>
 80101a4:	a808      	add	r0, sp, #32
 80101a6:	f7fc fac5 	bl	800c734 <ucdr_buffer_length>
 80101aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80101ac:	4602      	mov	r2, r0
 80101ae:	a905      	add	r1, sp, #20
 80101b0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80101b4:	47a0      	blx	r4
 80101b6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80101ba:	bd70      	pop	{r4, r5, r6, pc}

080101bc <write_submessage_acknack.isra.0>:
 80101bc:	b570      	push	{r4, r5, r6, lr}
 80101be:	b092      	sub	sp, #72	@ 0x48
 80101c0:	4605      	mov	r5, r0
 80101c2:	460e      	mov	r6, r1
 80101c4:	4614      	mov	r4, r2
 80101c6:	f001 f83d 	bl	8011244 <uxr_session_header_offset>
 80101ca:	a905      	add	r1, sp, #20
 80101cc:	9000      	str	r0, [sp, #0]
 80101ce:	2300      	movs	r3, #0
 80101d0:	a80a      	add	r0, sp, #40	@ 0x28
 80101d2:	2211      	movs	r2, #17
 80101d4:	f7fc fa70 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 80101d8:	2318      	movs	r3, #24
 80101da:	fb03 5404 	mla	r4, r3, r4, r5
 80101de:	2205      	movs	r2, #5
 80101e0:	2300      	movs	r3, #0
 80101e2:	3450      	adds	r4, #80	@ 0x50
 80101e4:	210a      	movs	r1, #10
 80101e6:	a80a      	add	r0, sp, #40	@ 0x28
 80101e8:	f001 fde4 	bl	8011db4 <uxr_buffer_submessage_header>
 80101ec:	a903      	add	r1, sp, #12
 80101ee:	4620      	mov	r0, r4
 80101f0:	f008 ff5a 	bl	80190a8 <uxr_compute_acknack>
 80101f4:	ba40      	rev16	r0, r0
 80101f6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80101fa:	a903      	add	r1, sp, #12
 80101fc:	a80a      	add	r0, sp, #40	@ 0x28
 80101fe:	f88d 6010 	strb.w	r6, [sp, #16]
 8010202:	f002 ff81 	bl	8013108 <uxr_serialize_ACKNACK_Payload>
 8010206:	2200      	movs	r2, #0
 8010208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801020a:	4611      	mov	r1, r2
 801020c:	4628      	mov	r0, r5
 801020e:	f000 ffc5 	bl	801119c <uxr_stamp_session_header>
 8010212:	a80a      	add	r0, sp, #40	@ 0x28
 8010214:	f7fc fa8e 	bl	800c734 <ucdr_buffer_length>
 8010218:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801021a:	4602      	mov	r2, r0
 801021c:	a905      	add	r1, sp, #20
 801021e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010222:	47a0      	blx	r4
 8010224:	b012      	add	sp, #72	@ 0x48
 8010226:	bd70      	pop	{r4, r5, r6, pc}

08010228 <uxr_init_session>:
 8010228:	b510      	push	{r4, lr}
 801022a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010260 <uxr_init_session+0x38>
 801022e:	2300      	movs	r3, #0
 8010230:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010234:	4604      	mov	r4, r0
 8010236:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801023a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801023e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010242:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010246:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801024a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801024e:	2181      	movs	r1, #129	@ 0x81
 8010250:	f000 ff08 	bl	8011064 <uxr_init_session_info>
 8010254:	f104 0008 	add.w	r0, r4, #8
 8010258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801025c:	f001 bcc6 	b.w	8011bec <uxr_init_stream_storage>
	...

08010268 <uxr_set_status_callback>:
 8010268:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop

08010270 <uxr_set_topic_callback>:
 8010270:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop

08010278 <uxr_set_request_callback>:
 8010278:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <uxr_set_reply_callback>:
 8010280:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop

08010288 <uxr_create_output_best_effort_stream>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	4604      	mov	r4, r0
 801028e:	460d      	mov	r5, r1
 8010290:	4616      	mov	r6, r2
 8010292:	f000 ffd7 	bl	8011244 <uxr_session_header_offset>
 8010296:	4632      	mov	r2, r6
 8010298:	4603      	mov	r3, r0
 801029a:	4629      	mov	r1, r5
 801029c:	f104 0008 	add.w	r0, r4, #8
 80102a0:	b002      	add	sp, #8
 80102a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102a6:	f001 bceb 	b.w	8011c80 <uxr_add_output_best_effort_buffer>
 80102aa:	bf00      	nop

080102ac <uxr_create_output_reliable_stream>:
 80102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ae:	b085      	sub	sp, #20
 80102b0:	4604      	mov	r4, r0
 80102b2:	460d      	mov	r5, r1
 80102b4:	4616      	mov	r6, r2
 80102b6:	461f      	mov	r7, r3
 80102b8:	f000 ffc4 	bl	8011244 <uxr_session_header_offset>
 80102bc:	463b      	mov	r3, r7
 80102be:	9000      	str	r0, [sp, #0]
 80102c0:	4632      	mov	r2, r6
 80102c2:	4629      	mov	r1, r5
 80102c4:	f104 0008 	add.w	r0, r4, #8
 80102c8:	f001 fcee 	bl	8011ca8 <uxr_add_output_reliable_buffer>
 80102cc:	b005      	add	sp, #20
 80102ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102d0 <uxr_create_input_best_effort_stream>:
 80102d0:	b082      	sub	sp, #8
 80102d2:	3008      	adds	r0, #8
 80102d4:	b002      	add	sp, #8
 80102d6:	f001 bd01 	b.w	8011cdc <uxr_add_input_best_effort_buffer>
 80102da:	bf00      	nop

080102dc <uxr_create_input_reliable_stream>:
 80102dc:	b510      	push	{r4, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	4c03      	ldr	r4, [pc, #12]	@ (80102f0 <uxr_create_input_reliable_stream+0x14>)
 80102e2:	9400      	str	r4, [sp, #0]
 80102e4:	3008      	adds	r0, #8
 80102e6:	f001 fd0f 	bl	8011d08 <uxr_add_input_reliable_buffer>
 80102ea:	b004      	add	sp, #16
 80102ec:	bd10      	pop	{r4, pc}
 80102ee:	bf00      	nop
 80102f0:	0801010d 	.word	0x0801010d

080102f4 <uxr_epoch_nanos>:
 80102f4:	b510      	push	{r4, lr}
 80102f6:	4604      	mov	r4, r0
 80102f8:	f001 fdbc 	bl	8011e74 <uxr_nanos>
 80102fc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010300:	1ac0      	subs	r0, r0, r3
 8010302:	eb61 0102 	sbc.w	r1, r1, r2
 8010306:	bd10      	pop	{r4, pc}

08010308 <uxr_flash_output_streams>:
 8010308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801030c:	7e03      	ldrb	r3, [r0, #24]
 801030e:	b084      	sub	sp, #16
 8010310:	4604      	mov	r4, r0
 8010312:	b373      	cbz	r3, 8010372 <uxr_flash_output_streams+0x6a>
 8010314:	2500      	movs	r5, #0
 8010316:	f100 0908 	add.w	r9, r0, #8
 801031a:	f10d 0802 	add.w	r8, sp, #2
 801031e:	4628      	mov	r0, r5
 8010320:	af03      	add	r7, sp, #12
 8010322:	ae02      	add	r6, sp, #8
 8010324:	e006      	b.n	8010334 <uxr_flash_output_streams+0x2c>
 8010326:	7e23      	ldrb	r3, [r4, #24]
 8010328:	3501      	adds	r5, #1
 801032a:	b2e8      	uxtb	r0, r5
 801032c:	4283      	cmp	r3, r0
 801032e:	f109 0910 	add.w	r9, r9, #16
 8010332:	d91e      	bls.n	8010372 <uxr_flash_output_streams+0x6a>
 8010334:	2201      	movs	r2, #1
 8010336:	4611      	mov	r1, r2
 8010338:	f001 fc20 	bl	8011b7c <uxr_stream_id>
 801033c:	4643      	mov	r3, r8
 801033e:	4684      	mov	ip, r0
 8010340:	463a      	mov	r2, r7
 8010342:	4631      	mov	r1, r6
 8010344:	4648      	mov	r0, r9
 8010346:	f8cd c004 	str.w	ip, [sp, #4]
 801034a:	f008 ff31 	bl	80191b0 <uxr_prepare_best_effort_buffer_to_send>
 801034e:	2800      	cmp	r0, #0
 8010350:	d0e9      	beq.n	8010326 <uxr_flash_output_streams+0x1e>
 8010352:	9b02      	ldr	r3, [sp, #8]
 8010354:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010358:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801035c:	4620      	mov	r0, r4
 801035e:	f000 ff1d 	bl	801119c <uxr_stamp_session_header>
 8010362:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010364:	9a03      	ldr	r2, [sp, #12]
 8010366:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801036a:	9902      	ldr	r1, [sp, #8]
 801036c:	6818      	ldr	r0, [r3, #0]
 801036e:	47d0      	blx	sl
 8010370:	e7d9      	b.n	8010326 <uxr_flash_output_streams+0x1e>
 8010372:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010376:	b37b      	cbz	r3, 80103d8 <uxr_flash_output_streams+0xd0>
 8010378:	f04f 0900 	mov.w	r9, #0
 801037c:	f104 0520 	add.w	r5, r4, #32
 8010380:	f10d 0802 	add.w	r8, sp, #2
 8010384:	af03      	add	r7, sp, #12
 8010386:	ae02      	add	r6, sp, #8
 8010388:	4648      	mov	r0, r9
 801038a:	2201      	movs	r2, #1
 801038c:	2102      	movs	r1, #2
 801038e:	f001 fbf5 	bl	8011b7c <uxr_stream_id>
 8010392:	9001      	str	r0, [sp, #4]
 8010394:	e00e      	b.n	80103b4 <uxr_flash_output_streams+0xac>
 8010396:	9b02      	ldr	r3, [sp, #8]
 8010398:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801039c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 fefb 	bl	801119c <uxr_stamp_session_header>
 80103a6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80103a8:	9a03      	ldr	r2, [sp, #12]
 80103aa:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80103ae:	9902      	ldr	r1, [sp, #8]
 80103b0:	6818      	ldr	r0, [r3, #0]
 80103b2:	47d0      	blx	sl
 80103b4:	4643      	mov	r3, r8
 80103b6:	463a      	mov	r2, r7
 80103b8:	4631      	mov	r1, r6
 80103ba:	4628      	mov	r0, r5
 80103bc:	f009 f90c 	bl	80195d8 <uxr_prepare_next_reliable_buffer_to_send>
 80103c0:	2800      	cmp	r0, #0
 80103c2:	d1e8      	bne.n	8010396 <uxr_flash_output_streams+0x8e>
 80103c4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80103c8:	f109 0901 	add.w	r9, r9, #1
 80103cc:	fa5f f089 	uxtb.w	r0, r9
 80103d0:	4283      	cmp	r3, r0
 80103d2:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80103d6:	d8d8      	bhi.n	801038a <uxr_flash_output_streams+0x82>
 80103d8:	b004      	add	sp, #16
 80103da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103de:	bf00      	nop

080103e0 <read_submessage_info>:
 80103e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e4:	460d      	mov	r5, r1
 80103e6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80103ea:	4669      	mov	r1, sp
 80103ec:	4607      	mov	r7, r0
 80103ee:	4628      	mov	r0, r5
 80103f0:	f002 fca4 	bl	8012d3c <uxr_deserialize_BaseObjectReply>
 80103f4:	a902      	add	r1, sp, #8
 80103f6:	4604      	mov	r4, r0
 80103f8:	4628      	mov	r0, r5
 80103fa:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80103fe:	f7fa fd77 	bl	800aef0 <ucdr_deserialize_bool>
 8010402:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010406:	4004      	ands	r4, r0
 8010408:	b2e4      	uxtb	r4, r4
 801040a:	b95b      	cbnz	r3, 8010424 <read_submessage_info+0x44>
 801040c:	a987      	add	r1, sp, #540	@ 0x21c
 801040e:	4628      	mov	r0, r5
 8010410:	f7fa fd6e 	bl	800aef0 <ucdr_deserialize_bool>
 8010414:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010418:	4606      	mov	r6, r0
 801041a:	b94b      	cbnz	r3, 8010430 <read_submessage_info+0x50>
 801041c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010424:	a903      	add	r1, sp, #12
 8010426:	4628      	mov	r0, r5
 8010428:	f002 fb4a 	bl	8012ac0 <uxr_deserialize_ObjectVariant>
 801042c:	4004      	ands	r4, r0
 801042e:	e7ed      	b.n	801040c <read_submessage_info+0x2c>
 8010430:	a988      	add	r1, sp, #544	@ 0x220
 8010432:	4628      	mov	r0, r5
 8010434:	f7fa fd8a 	bl	800af4c <ucdr_deserialize_uint8_t>
 8010438:	4234      	tst	r4, r6
 801043a:	d0ef      	beq.n	801041c <read_submessage_info+0x3c>
 801043c:	2800      	cmp	r0, #0
 801043e:	d0ed      	beq.n	801041c <read_submessage_info+0x3c>
 8010440:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010444:	2b0d      	cmp	r3, #13
 8010446:	d1e9      	bne.n	801041c <read_submessage_info+0x3c>
 8010448:	a98a      	add	r1, sp, #552	@ 0x228
 801044a:	4628      	mov	r0, r5
 801044c:	f7fb fb1a 	bl	800ba84 <ucdr_deserialize_int16_t>
 8010450:	b140      	cbz	r0, 8010464 <read_submessage_info+0x84>
 8010452:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010456:	2b00      	cmp	r3, #0
 8010458:	dd07      	ble.n	801046a <read_submessage_info+0x8a>
 801045a:	f1b8 0f00 	cmp.w	r8, #0
 801045e:	bf0c      	ite	eq
 8010460:	2002      	moveq	r0, #2
 8010462:	2001      	movne	r0, #1
 8010464:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010468:	e7d8      	b.n	801041c <read_submessage_info+0x3c>
 801046a:	2000      	movs	r0, #0
 801046c:	e7fa      	b.n	8010464 <read_submessage_info+0x84>
 801046e:	bf00      	nop

08010470 <read_submessage_list>:
 8010470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010474:	b097      	sub	sp, #92	@ 0x5c
 8010476:	4604      	mov	r4, r0
 8010478:	460d      	mov	r5, r1
 801047a:	9209      	str	r2, [sp, #36]	@ 0x24
 801047c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010480:	aa0c      	add	r2, sp, #48	@ 0x30
 8010482:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010486:	4628      	mov	r0, r5
 8010488:	f001 fcae 	bl	8011de8 <uxr_read_submessage_header>
 801048c:	2800      	cmp	r0, #0
 801048e:	f000 812c 	beq.w	80106ea <read_submessage_list+0x27a>
 8010492:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8010496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010498:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 801049c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 80104a0:	3902      	subs	r1, #2
 80104a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80104a6:	290d      	cmp	r1, #13
 80104a8:	d8e8      	bhi.n	801047c <read_submessage_list+0xc>
 80104aa:	a201      	add	r2, pc, #4	@ (adr r2, 80104b0 <read_submessage_list+0x40>)
 80104ac:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80104b0:	080106e1 	.word	0x080106e1
 80104b4:	0801047d 	.word	0x0801047d
 80104b8:	080106d1 	.word	0x080106d1
 80104bc:	08010673 	.word	0x08010673
 80104c0:	08010669 	.word	0x08010669
 80104c4:	0801047d 	.word	0x0801047d
 80104c8:	0801047d 	.word	0x0801047d
 80104cc:	080105ed 	.word	0x080105ed
 80104d0:	08010585 	.word	0x08010585
 80104d4:	08010545 	.word	0x08010545
 80104d8:	0801047d 	.word	0x0801047d
 80104dc:	0801047d 	.word	0x0801047d
 80104e0:	0801047d 	.word	0x0801047d
 80104e4:	080104e9 	.word	0x080104e9
 80104e8:	a910      	add	r1, sp, #64	@ 0x40
 80104ea:	4628      	mov	r0, r5
 80104ec:	f002 fe6a 	bl	80131c4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80104f0:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80104f4:	2e00      	cmp	r6, #0
 80104f6:	f000 8100 	beq.w	80106fa <read_submessage_list+0x28a>
 80104fa:	f001 fcbb 	bl	8011e74 <uxr_nanos>
 80104fe:	f04f 0800 	mov.w	r8, #0
 8010502:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801050a:	4990      	ldr	r1, [pc, #576]	@ (801074c <read_submessage_list+0x2dc>)
 801050c:	46c4      	mov	ip, r8
 801050e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8010512:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010516:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010518:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801051a:	46c6      	mov	lr, r8
 801051c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8010520:	46bc      	mov	ip, r7
 8010522:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010526:	fbc0 7801 	smlal	r7, r8, r0, r1
 801052a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 801052e:	e9cd 7800 	strd	r7, r8, [sp]
 8010532:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010536:	9106      	str	r1, [sp, #24]
 8010538:	4620      	mov	r0, r4
 801053a:	47b0      	blx	r6
 801053c:	2301      	movs	r3, #1
 801053e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010542:	e79b      	b.n	801047c <read_submessage_list+0xc>
 8010544:	a910      	add	r1, sp, #64	@ 0x40
 8010546:	4628      	mov	r0, r5
 8010548:	f002 fe1c 	bl	8013184 <uxr_deserialize_HEARTBEAT_Payload>
 801054c:	2100      	movs	r1, #0
 801054e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010552:	f001 fb2f 	bl	8011bb4 <uxr_stream_id_from_raw>
 8010556:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801055a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801055c:	4631      	mov	r1, r6
 801055e:	f104 0008 	add.w	r0, r4, #8
 8010562:	f001 fc07 	bl	8011d74 <uxr_get_input_reliable_stream>
 8010566:	2800      	cmp	r0, #0
 8010568:	d088      	beq.n	801047c <read_submessage_list+0xc>
 801056a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801056e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010572:	f008 fd8d 	bl	8019090 <uxr_process_heartbeat>
 8010576:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801057a:	4632      	mov	r2, r6
 801057c:	4620      	mov	r0, r4
 801057e:	f7ff fe1d 	bl	80101bc <write_submessage_acknack.isra.0>
 8010582:	e77b      	b.n	801047c <read_submessage_list+0xc>
 8010584:	a910      	add	r1, sp, #64	@ 0x40
 8010586:	4628      	mov	r0, r5
 8010588:	f002 fdd4 	bl	8013134 <uxr_deserialize_ACKNACK_Payload>
 801058c:	2100      	movs	r1, #0
 801058e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010592:	f001 fb0f 	bl	8011bb4 <uxr_stream_id_from_raw>
 8010596:	900d      	str	r0, [sp, #52]	@ 0x34
 8010598:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801059c:	f104 0008 	add.w	r0, r4, #8
 80105a0:	f001 fbd4 	bl	8011d4c <uxr_get_output_reliable_stream>
 80105a4:	4606      	mov	r6, r0
 80105a6:	2800      	cmp	r0, #0
 80105a8:	f43f af68 	beq.w	801047c <read_submessage_list+0xc>
 80105ac:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 80105b0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80105b4:	ba49      	rev16	r1, r1
 80105b6:	b289      	uxth	r1, r1
 80105b8:	f009 f8b8 	bl	801972c <uxr_process_acknack>
 80105bc:	4630      	mov	r0, r6
 80105be:	f009 f879 	bl	80196b4 <uxr_begin_output_nack_buffer_it>
 80105c2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80105c6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80105ca:	e005      	b.n	80105d8 <read_submessage_list+0x168>
 80105cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80105ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80105d0:	685f      	ldr	r7, [r3, #4]
 80105d2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80105d4:	6818      	ldr	r0, [r3, #0]
 80105d6:	47b8      	blx	r7
 80105d8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80105dc:	aa0f      	add	r2, sp, #60	@ 0x3c
 80105de:	4641      	mov	r1, r8
 80105e0:	4630      	mov	r0, r6
 80105e2:	f009 f869 	bl	80196b8 <uxr_next_reliable_nack_buffer_to_send>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d1f0      	bne.n	80105cc <read_submessage_list+0x15c>
 80105ea:	e747      	b.n	801047c <read_submessage_list+0xc>
 80105ec:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80105f0:	4641      	mov	r1, r8
 80105f2:	900d      	str	r0, [sp, #52]	@ 0x34
 80105f4:	4628      	mov	r0, r5
 80105f6:	f002 fb03 	bl	8012c00 <uxr_deserialize_BaseObjectRequest>
 80105fa:	3e04      	subs	r6, #4
 80105fc:	4640      	mov	r0, r8
 80105fe:	a90f      	add	r1, sp, #60	@ 0x3c
 8010600:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010604:	f000 fe44 	bl	8011290 <uxr_parse_base_object_request>
 8010608:	fa1f f886 	uxth.w	r8, r6
 801060c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8010610:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010612:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8010616:	9110      	str	r1, [sp, #64]	@ 0x40
 8010618:	f007 070e 	and.w	r7, r7, #14
 801061c:	b136      	cbz	r6, 801062c <read_submessage_list+0x1bc>
 801061e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010622:	9300      	str	r3, [sp, #0]
 8010624:	464a      	mov	r2, r9
 8010626:	2300      	movs	r3, #0
 8010628:	4620      	mov	r0, r4
 801062a:	47b0      	blx	r6
 801062c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 801062e:	b16b      	cbz	r3, 801064c <read_submessage_list+0x1dc>
 8010630:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010632:	2100      	movs	r1, #0
 8010634:	3802      	subs	r0, #2
 8010636:	e002      	b.n	801063e <read_submessage_list+0x1ce>
 8010638:	3101      	adds	r1, #1
 801063a:	428b      	cmp	r3, r1
 801063c:	d006      	beq.n	801064c <read_submessage_list+0x1dc>
 801063e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8010642:	454e      	cmp	r6, r9
 8010644:	d1f8      	bne.n	8010638 <read_submessage_list+0x1c8>
 8010646:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010648:	2200      	movs	r2, #0
 801064a:	545a      	strb	r2, [r3, r1]
 801064c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010650:	9102      	str	r1, [sp, #8]
 8010652:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010654:	9101      	str	r1, [sp, #4]
 8010656:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010658:	9100      	str	r1, [sp, #0]
 801065a:	463b      	mov	r3, r7
 801065c:	4642      	mov	r2, r8
 801065e:	4629      	mov	r1, r5
 8010660:	4620      	mov	r0, r4
 8010662:	f009 f91b 	bl	801989c <read_submessage_format>
 8010666:	e709      	b.n	801047c <read_submessage_list+0xc>
 8010668:	4629      	mov	r1, r5
 801066a:	4620      	mov	r0, r4
 801066c:	f7ff feb8 	bl	80103e0 <read_submessage_info>
 8010670:	e704      	b.n	801047c <read_submessage_list+0xc>
 8010672:	2b00      	cmp	r3, #0
 8010674:	d03c      	beq.n	80106f0 <read_submessage_list+0x280>
 8010676:	a910      	add	r1, sp, #64	@ 0x40
 8010678:	4628      	mov	r0, r5
 801067a:	f002 fcb7 	bl	8012fec <uxr_deserialize_STATUS_Payload>
 801067e:	a90e      	add	r1, sp, #56	@ 0x38
 8010680:	a810      	add	r0, sp, #64	@ 0x40
 8010682:	aa0d      	add	r2, sp, #52	@ 0x34
 8010684:	f000 fe04 	bl	8011290 <uxr_parse_base_object_request>
 8010688:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 801068c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801068e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8010692:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010696:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010698:	b136      	cbz	r6, 80106a8 <read_submessage_list+0x238>
 801069a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	463a      	mov	r2, r7
 80106a2:	4643      	mov	r3, r8
 80106a4:	4620      	mov	r0, r4
 80106a6:	47b0      	blx	r6
 80106a8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	f43f aee6 	beq.w	801047c <read_submessage_list+0xc>
 80106b0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80106b2:	2100      	movs	r1, #0
 80106b4:	3802      	subs	r0, #2
 80106b6:	e003      	b.n	80106c0 <read_submessage_list+0x250>
 80106b8:	3101      	adds	r1, #1
 80106ba:	4291      	cmp	r1, r2
 80106bc:	f43f aede 	beq.w	801047c <read_submessage_list+0xc>
 80106c0:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80106c4:	42be      	cmp	r6, r7
 80106c6:	d1f7      	bne.n	80106b8 <read_submessage_list+0x248>
 80106c8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80106ca:	f803 8001 	strb.w	r8, [r3, r1]
 80106ce:	e6d5      	b.n	801047c <read_submessage_list+0xc>
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f47f aed3 	bne.w	801047c <read_submessage_list+0xc>
 80106d6:	4629      	mov	r1, r5
 80106d8:	4620      	mov	r0, r4
 80106da:	f000 fd21 	bl	8011120 <uxr_read_create_session_status>
 80106de:	e6cd      	b.n	801047c <read_submessage_list+0xc>
 80106e0:	4629      	mov	r1, r5
 80106e2:	4620      	mov	r0, r4
 80106e4:	f7ff fd34 	bl	8010150 <read_submessage_get_info>
 80106e8:	e6c8      	b.n	801047c <read_submessage_list+0xc>
 80106ea:	b017      	add	sp, #92	@ 0x5c
 80106ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106f0:	4629      	mov	r1, r5
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 fd22 	bl	801113c <uxr_read_delete_session_status>
 80106f8:	e6c0      	b.n	801047c <read_submessage_list+0xc>
 80106fa:	f001 fbbb 	bl	8011e74 <uxr_nanos>
 80106fe:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8010702:	f8df c048 	ldr.w	ip, [pc, #72]	@ 801074c <read_submessage_list+0x2dc>
 8010706:	4633      	mov	r3, r6
 8010708:	fbc7 230c 	smlal	r2, r3, r7, ip
 801070c:	1810      	adds	r0, r2, r0
 801070e:	eb43 0301 	adc.w	r3, r3, r1
 8010712:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8010716:	46b6      	mov	lr, r6
 8010718:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 801071c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8010720:	fbc1 760c 	smlal	r7, r6, r1, ip
 8010724:	19d2      	adds	r2, r2, r7
 8010726:	eb4e 0106 	adc.w	r1, lr, r6
 801072a:	1a80      	subs	r0, r0, r2
 801072c:	eb63 0301 	sbc.w	r3, r3, r1
 8010730:	0fda      	lsrs	r2, r3, #31
 8010732:	1812      	adds	r2, r2, r0
 8010734:	f143 0300 	adc.w	r3, r3, #0
 8010738:	0852      	lsrs	r2, r2, #1
 801073a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801073e:	105b      	asrs	r3, r3, #1
 8010740:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010744:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010748:	e6f8      	b.n	801053c <read_submessage_list+0xcc>
 801074a:	bf00      	nop
 801074c:	3b9aca00 	.word	0x3b9aca00

08010750 <listen_message_reliably>:
 8010750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010754:	f1b1 0b00 	subs.w	fp, r1, #0
 8010758:	b09f      	sub	sp, #124	@ 0x7c
 801075a:	4606      	mov	r6, r0
 801075c:	bfb8      	it	lt
 801075e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8010762:	f001 fb6d 	bl	8011e40 <uxr_millis>
 8010766:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801076a:	9003      	str	r0, [sp, #12]
 801076c:	9104      	str	r1, [sp, #16]
 801076e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8010772:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80a4 	beq.w	80108c4 <listen_message_reliably+0x174>
 801077c:	2500      	movs	r5, #0
 801077e:	e9cd b806 	strd	fp, r8, [sp, #24]
 8010782:	f106 0420 	add.w	r4, r6, #32
 8010786:	f04f 37ff 	mov.w	r7, #4294967295
 801078a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 801078e:	4628      	mov	r0, r5
 8010790:	e011      	b.n	80107b6 <listen_message_reliably+0x66>
 8010792:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8010796:	42ba      	cmp	r2, r7
 8010798:	eb73 0109 	sbcs.w	r1, r3, r9
 801079c:	bfb8      	it	lt
 801079e:	4699      	movlt	r9, r3
 80107a0:	f105 0501 	add.w	r5, r5, #1
 80107a4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80107a8:	b2e8      	uxtb	r0, r5
 80107aa:	bfb8      	it	lt
 80107ac:	4617      	movlt	r7, r2
 80107ae:	4283      	cmp	r3, r0
 80107b0:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 80107b4:	d94a      	bls.n	801084c <listen_message_reliably+0xfc>
 80107b6:	2201      	movs	r2, #1
 80107b8:	2102      	movs	r1, #2
 80107ba:	f001 f9df 	bl	8011b7c <uxr_stream_id>
 80107be:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80107c2:	4601      	mov	r1, r0
 80107c4:	4620      	mov	r0, r4
 80107c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80107c8:	f008 ff44 	bl	8019654 <uxr_update_output_stream_heartbeat_timestamp>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d0e0      	beq.n	8010792 <listen_message_reliably+0x42>
 80107d0:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80107d4:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 80107d8:	9305      	str	r3, [sp, #20]
 80107da:	4630      	mov	r0, r6
 80107dc:	f000 fd32 	bl	8011244 <uxr_session_header_offset>
 80107e0:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 80107e4:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 80107e8:	9000      	str	r0, [sp, #0]
 80107ea:	a90e      	add	r1, sp, #56	@ 0x38
 80107ec:	4640      	mov	r0, r8
 80107ee:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 80107f2:	2300      	movs	r3, #0
 80107f4:	2211      	movs	r2, #17
 80107f6:	f7fb ff5f 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 80107fa:	2300      	movs	r3, #0
 80107fc:	2205      	movs	r2, #5
 80107fe:	210b      	movs	r1, #11
 8010800:	4640      	mov	r0, r8
 8010802:	f001 fad7 	bl	8011db4 <uxr_buffer_submessage_header>
 8010806:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 801080a:	2101      	movs	r1, #1
 801080c:	f009 f91a 	bl	8019a44 <uxr_seq_num_add>
 8010810:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8010814:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010818:	4602      	mov	r2, r0
 801081a:	9b05      	ldr	r3, [sp, #20]
 801081c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8010820:	a90c      	add	r1, sp, #48	@ 0x30
 8010822:	4640      	mov	r0, r8
 8010824:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010828:	f002 fc98 	bl	801315c <uxr_serialize_HEARTBEAT_Payload>
 801082c:	2200      	movs	r2, #0
 801082e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010830:	4611      	mov	r1, r2
 8010832:	4630      	mov	r0, r6
 8010834:	f000 fcb2 	bl	801119c <uxr_stamp_session_header>
 8010838:	4640      	mov	r0, r8
 801083a:	f7fb ff7b 	bl	800c734 <ucdr_buffer_length>
 801083e:	4602      	mov	r2, r0
 8010840:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8010842:	a90e      	add	r1, sp, #56	@ 0x38
 8010844:	e9d0 0300 	ldrd	r0, r3, [r0]
 8010848:	4798      	blx	r3
 801084a:	e7a2      	b.n	8010792 <listen_message_reliably+0x42>
 801084c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010850:	4599      	cmp	r9, r3
 8010852:	bf08      	it	eq
 8010854:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 8010858:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 801085c:	d032      	beq.n	80108c4 <listen_message_reliably+0x174>
 801085e:	9b03      	ldr	r3, [sp, #12]
 8010860:	1aff      	subs	r7, r7, r3
 8010862:	2f00      	cmp	r7, #0
 8010864:	bf08      	it	eq
 8010866:	2701      	moveq	r7, #1
 8010868:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801086a:	455f      	cmp	r7, fp
 801086c:	bfa8      	it	ge
 801086e:	465f      	movge	r7, fp
 8010870:	689c      	ldr	r4, [r3, #8]
 8010872:	6818      	ldr	r0, [r3, #0]
 8010874:	4642      	mov	r2, r8
 8010876:	463b      	mov	r3, r7
 8010878:	4651      	mov	r1, sl
 801087a:	47a0      	blx	r4
 801087c:	ebab 0b07 	sub.w	fp, fp, r7
 8010880:	b958      	cbnz	r0, 801089a <listen_message_reliably+0x14a>
 8010882:	f1bb 0f00 	cmp.w	fp, #0
 8010886:	dd44      	ble.n	8010912 <listen_message_reliably+0x1c2>
 8010888:	f001 fada 	bl	8011e40 <uxr_millis>
 801088c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010890:	2b00      	cmp	r3, #0
 8010892:	d03c      	beq.n	801090e <listen_message_reliably+0x1be>
 8010894:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8010898:	e770      	b.n	801077c <listen_message_reliably+0x2c>
 801089a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 801089e:	4604      	mov	r4, r0
 80108a0:	a80e      	add	r0, sp, #56	@ 0x38
 80108a2:	f7fb ff1b 	bl	800c6dc <ucdr_init_buffer>
 80108a6:	2500      	movs	r5, #0
 80108a8:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 80108ac:	aa08      	add	r2, sp, #32
 80108ae:	a90e      	add	r1, sp, #56	@ 0x38
 80108b0:	4630      	mov	r0, r6
 80108b2:	f88d 5020 	strb.w	r5, [sp, #32]
 80108b6:	f000 fc87 	bl	80111c8 <uxr_read_session_header>
 80108ba:	b928      	cbnz	r0, 80108c8 <listen_message_reliably+0x178>
 80108bc:	4620      	mov	r0, r4
 80108be:	b01f      	add	sp, #124	@ 0x7c
 80108c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c4:	465f      	mov	r7, fp
 80108c6:	e7cc      	b.n	8010862 <listen_message_reliably+0x112>
 80108c8:	4629      	mov	r1, r5
 80108ca:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80108ce:	f001 f971 	bl	8011bb4 <uxr_stream_id_from_raw>
 80108d2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80108d6:	2f01      	cmp	r7, #1
 80108d8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 80108dc:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 80108e0:	fa5f f880 	uxtb.w	r8, r0
 80108e4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80108e8:	d050      	beq.n	801098c <listen_message_reliably+0x23c>
 80108ea:	2f02      	cmp	r7, #2
 80108ec:	d016      	beq.n	801091c <listen_message_reliably+0x1cc>
 80108ee:	2f00      	cmp	r7, #0
 80108f0:	d1e4      	bne.n	80108bc <listen_message_reliably+0x16c>
 80108f2:	4639      	mov	r1, r7
 80108f4:	4638      	mov	r0, r7
 80108f6:	f001 f95d 	bl	8011bb4 <uxr_stream_id_from_raw>
 80108fa:	a90e      	add	r1, sp, #56	@ 0x38
 80108fc:	4602      	mov	r2, r0
 80108fe:	4630      	mov	r0, r6
 8010900:	920c      	str	r2, [sp, #48]	@ 0x30
 8010902:	f7ff fdb5 	bl	8010470 <read_submessage_list>
 8010906:	4620      	mov	r0, r4
 8010908:	b01f      	add	sp, #124	@ 0x7c
 801090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090e:	465f      	mov	r7, fp
 8010910:	e7aa      	b.n	8010868 <listen_message_reliably+0x118>
 8010912:	4604      	mov	r4, r0
 8010914:	4620      	mov	r0, r4
 8010916:	b01f      	add	sp, #124	@ 0x7c
 8010918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091c:	4629      	mov	r1, r5
 801091e:	f106 0008 	add.w	r0, r6, #8
 8010922:	f001 fa27 	bl	8011d74 <uxr_get_input_reliable_stream>
 8010926:	4681      	mov	r9, r0
 8010928:	b338      	cbz	r0, 801097a <listen_message_reliably+0x22a>
 801092a:	a80e      	add	r0, sp, #56	@ 0x38
 801092c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8010930:	f7fb ff04 	bl	800c73c <ucdr_buffer_remaining>
 8010934:	4603      	mov	r3, r0
 8010936:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 801093a:	9000      	str	r0, [sp, #0]
 801093c:	465a      	mov	r2, fp
 801093e:	4651      	mov	r1, sl
 8010940:	4648      	mov	r0, r9
 8010942:	f008 fab3 	bl	8018eac <uxr_receive_reliable_message>
 8010946:	b1c0      	cbz	r0, 801097a <listen_message_reliably+0x22a>
 8010948:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 801094c:	b393      	cbz	r3, 80109b4 <listen_message_reliably+0x264>
 801094e:	af16      	add	r7, sp, #88	@ 0x58
 8010950:	f04f 0a02 	mov.w	sl, #2
 8010954:	e00a      	b.n	801096c <listen_message_reliably+0x21c>
 8010956:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 801095a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 801095e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8010962:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010964:	4639      	mov	r1, r7
 8010966:	4630      	mov	r0, r6
 8010968:	f7ff fd82 	bl	8010470 <read_submessage_list>
 801096c:	2204      	movs	r2, #4
 801096e:	4639      	mov	r1, r7
 8010970:	4648      	mov	r0, r9
 8010972:	f008 fb15 	bl	8018fa0 <uxr_next_input_reliable_buffer_available>
 8010976:	2800      	cmp	r0, #0
 8010978:	d1ed      	bne.n	8010956 <listen_message_reliably+0x206>
 801097a:	4630      	mov	r0, r6
 801097c:	462a      	mov	r2, r5
 801097e:	4641      	mov	r1, r8
 8010980:	f7ff fc1c 	bl	80101bc <write_submessage_acknack.isra.0>
 8010984:	4620      	mov	r0, r4
 8010986:	b01f      	add	sp, #124	@ 0x7c
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098c:	4629      	mov	r1, r5
 801098e:	f106 0008 	add.w	r0, r6, #8
 8010992:	f001 f9e5 	bl	8011d60 <uxr_get_input_best_effort_stream>
 8010996:	2800      	cmp	r0, #0
 8010998:	d090      	beq.n	80108bc <listen_message_reliably+0x16c>
 801099a:	4651      	mov	r1, sl
 801099c:	f008 f9f6 	bl	8018d8c <uxr_receive_best_effort_message>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d08b      	beq.n	80108bc <listen_message_reliably+0x16c>
 80109a4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 80109a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80109aa:	a90e      	add	r1, sp, #56	@ 0x38
 80109ac:	4630      	mov	r0, r6
 80109ae:	f7ff fd5f 	bl	8010470 <read_submessage_list>
 80109b2:	e783      	b.n	80108bc <listen_message_reliably+0x16c>
 80109b4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 80109b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80109ba:	a90e      	add	r1, sp, #56	@ 0x38
 80109bc:	4630      	mov	r0, r6
 80109be:	f7ff fd57 	bl	8010470 <read_submessage_list>
 80109c2:	e7c4      	b.n	801094e <listen_message_reliably+0x1fe>

080109c4 <uxr_run_session_timeout>:
 80109c4:	b570      	push	{r4, r5, r6, lr}
 80109c6:	4604      	mov	r4, r0
 80109c8:	460d      	mov	r5, r1
 80109ca:	f001 fa39 	bl	8011e40 <uxr_millis>
 80109ce:	4606      	mov	r6, r0
 80109d0:	4620      	mov	r0, r4
 80109d2:	f7ff fc99 	bl	8010308 <uxr_flash_output_streams>
 80109d6:	4629      	mov	r1, r5
 80109d8:	4620      	mov	r0, r4
 80109da:	f7ff feb9 	bl	8010750 <listen_message_reliably>
 80109de:	f001 fa2f 	bl	8011e40 <uxr_millis>
 80109e2:	1b81      	subs	r1, r0, r6
 80109e4:	1a69      	subs	r1, r5, r1
 80109e6:	2900      	cmp	r1, #0
 80109e8:	dcf6      	bgt.n	80109d8 <uxr_run_session_timeout+0x14>
 80109ea:	f104 0008 	add.w	r0, r4, #8
 80109ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109f2:	f001 b9c9 	b.w	8011d88 <uxr_output_streams_confirmed>
 80109f6:	bf00      	nop

080109f8 <uxr_run_session_until_data>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	4604      	mov	r4, r0
 80109fc:	460d      	mov	r5, r1
 80109fe:	f001 fa1f 	bl	8011e40 <uxr_millis>
 8010a02:	4606      	mov	r6, r0
 8010a04:	4620      	mov	r0, r4
 8010a06:	f7ff fc7f 	bl	8010308 <uxr_flash_output_streams>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010a10:	4629      	mov	r1, r5
 8010a12:	e005      	b.n	8010a20 <uxr_run_session_until_data+0x28>
 8010a14:	f001 fa14 	bl	8011e40 <uxr_millis>
 8010a18:	1b81      	subs	r1, r0, r6
 8010a1a:	1a69      	subs	r1, r5, r1
 8010a1c:	2900      	cmp	r1, #0
 8010a1e:	dd07      	ble.n	8010a30 <uxr_run_session_until_data+0x38>
 8010a20:	4620      	mov	r0, r4
 8010a22:	f7ff fe95 	bl	8010750 <listen_message_reliably>
 8010a26:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d0f2      	beq.n	8010a14 <uxr_run_session_until_data+0x1c>
 8010a2e:	bd70      	pop	{r4, r5, r6, pc}
 8010a30:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010a34:	bd70      	pop	{r4, r5, r6, pc}
 8010a36:	bf00      	nop

08010a38 <uxr_run_session_until_confirm_delivery>:
 8010a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3c:	4606      	mov	r6, r0
 8010a3e:	460d      	mov	r5, r1
 8010a40:	f001 f9fe 	bl	8011e40 <uxr_millis>
 8010a44:	4607      	mov	r7, r0
 8010a46:	4630      	mov	r0, r6
 8010a48:	f7ff fc5e 	bl	8010308 <uxr_flash_output_streams>
 8010a4c:	2d00      	cmp	r5, #0
 8010a4e:	db16      	blt.n	8010a7e <uxr_run_session_until_confirm_delivery+0x46>
 8010a50:	462c      	mov	r4, r5
 8010a52:	f106 0808 	add.w	r8, r6, #8
 8010a56:	e008      	b.n	8010a6a <uxr_run_session_until_confirm_delivery+0x32>
 8010a58:	4621      	mov	r1, r4
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f7ff fe78 	bl	8010750 <listen_message_reliably>
 8010a60:	f001 f9ee 	bl	8011e40 <uxr_millis>
 8010a64:	1bc1      	subs	r1, r0, r7
 8010a66:	1a6c      	subs	r4, r5, r1
 8010a68:	d404      	bmi.n	8010a74 <uxr_run_session_until_confirm_delivery+0x3c>
 8010a6a:	4640      	mov	r0, r8
 8010a6c:	f001 f98c 	bl	8011d88 <uxr_output_streams_confirmed>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d0f1      	beq.n	8010a58 <uxr_run_session_until_confirm_delivery+0x20>
 8010a74:	4640      	mov	r0, r8
 8010a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7a:	f001 b985 	b.w	8011d88 <uxr_output_streams_confirmed>
 8010a7e:	f106 0808 	add.w	r8, r6, #8
 8010a82:	e7f7      	b.n	8010a74 <uxr_run_session_until_confirm_delivery+0x3c>

08010a84 <uxr_run_session_until_all_status>:
 8010a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a88:	9c08      	ldr	r4, [sp, #32]
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	460f      	mov	r7, r1
 8010a8e:	4690      	mov	r8, r2
 8010a90:	461e      	mov	r6, r3
 8010a92:	f7ff fc39 	bl	8010308 <uxr_flash_output_streams>
 8010a96:	b124      	cbz	r4, 8010aa2 <uxr_run_session_until_all_status+0x1e>
 8010a98:	4622      	mov	r2, r4
 8010a9a:	21ff      	movs	r1, #255	@ 0xff
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	f00a fedb 	bl	801b858 <memset>
 8010aa2:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8010aa6:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8010aa8:	f001 f9ca 	bl	8011e40 <uxr_millis>
 8010aac:	4639      	mov	r1, r7
 8010aae:	4681      	mov	r9, r0
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f7ff fe4d 	bl	8010750 <listen_message_reliably>
 8010ab6:	f001 f9c3 	bl	8011e40 <uxr_millis>
 8010aba:	eba0 0109 	sub.w	r1, r0, r9
 8010abe:	1a79      	subs	r1, r7, r1
 8010ac0:	b36c      	cbz	r4, 8010b1e <uxr_run_session_until_all_status+0x9a>
 8010ac2:	1e70      	subs	r0, r6, #1
 8010ac4:	46c6      	mov	lr, r8
 8010ac6:	1902      	adds	r2, r0, r4
 8010ac8:	4684      	mov	ip, r0
 8010aca:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010ace:	2bff      	cmp	r3, #255	@ 0xff
 8010ad0:	d007      	beq.n	8010ae2 <uxr_run_session_until_all_status+0x5e>
 8010ad2:	4594      	cmp	ip, r2
 8010ad4:	d00f      	beq.n	8010af6 <uxr_run_session_until_all_status+0x72>
 8010ad6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010ada:	2bff      	cmp	r3, #255	@ 0xff
 8010adc:	f10e 0e02 	add.w	lr, lr, #2
 8010ae0:	d1f7      	bne.n	8010ad2 <uxr_run_session_until_all_status+0x4e>
 8010ae2:	4594      	cmp	ip, r2
 8010ae4:	f8be 3000 	ldrh.w	r3, [lr]
 8010ae8:	d014      	beq.n	8010b14 <uxr_run_session_until_all_status+0x90>
 8010aea:	f10e 0e02 	add.w	lr, lr, #2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d0eb      	beq.n	8010aca <uxr_run_session_until_all_status+0x46>
 8010af2:	2900      	cmp	r1, #0
 8010af4:	dcdc      	bgt.n	8010ab0 <uxr_run_session_until_all_status+0x2c>
 8010af6:	2300      	movs	r3, #0
 8010af8:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8010afa:	e001      	b.n	8010b00 <uxr_run_session_until_all_status+0x7c>
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d812      	bhi.n	8010b26 <uxr_run_session_until_all_status+0xa2>
 8010b00:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010b04:	4290      	cmp	r0, r2
 8010b06:	d1f9      	bne.n	8010afc <uxr_run_session_until_all_status+0x78>
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	bf8c      	ite	hi
 8010b0c:	2000      	movhi	r0, #0
 8010b0e:	2001      	movls	r0, #1
 8010b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b14:	2900      	cmp	r1, #0
 8010b16:	ddee      	ble.n	8010af6 <uxr_run_session_until_all_status+0x72>
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1c9      	bne.n	8010ab0 <uxr_run_session_until_all_status+0x2c>
 8010b1c:	e7eb      	b.n	8010af6 <uxr_run_session_until_all_status+0x72>
 8010b1e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8010b20:	2001      	movs	r0, #1
 8010b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b26:	2000      	movs	r0, #0
 8010b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b2c:	0000      	movs	r0, r0
	...

08010b30 <uxr_sync_session>:
 8010b30:	b570      	push	{r4, r5, r6, lr}
 8010b32:	b092      	sub	sp, #72	@ 0x48
 8010b34:	4604      	mov	r4, r0
 8010b36:	460d      	mov	r5, r1
 8010b38:	f000 fb84 	bl	8011244 <uxr_session_header_offset>
 8010b3c:	2214      	movs	r2, #20
 8010b3e:	eb0d 0102 	add.w	r1, sp, r2
 8010b42:	9000      	str	r0, [sp, #0]
 8010b44:	2300      	movs	r3, #0
 8010b46:	a80a      	add	r0, sp, #40	@ 0x28
 8010b48:	f7fb fdb6 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	2208      	movs	r2, #8
 8010b50:	210e      	movs	r1, #14
 8010b52:	a80a      	add	r0, sp, #40	@ 0x28
 8010b54:	f001 f92e 	bl	8011db4 <uxr_buffer_submessage_header>
 8010b58:	f001 f98c 	bl	8011e74 <uxr_nanos>
 8010b5c:	a318      	add	r3, pc, #96	@ (adr r3, 8010bc0 <uxr_sync_session+0x90>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	f7f0 f8a1 	bl	8000ca8 <__aeabi_ldivmod>
 8010b66:	a903      	add	r1, sp, #12
 8010b68:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8010b6c:	a80a      	add	r0, sp, #40	@ 0x28
 8010b6e:	f002 fb1b 	bl	80131a8 <uxr_serialize_TIMESTAMP_Payload>
 8010b72:	2200      	movs	r2, #0
 8010b74:	4611      	mov	r1, r2
 8010b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f000 fb0f 	bl	801119c <uxr_stamp_session_header>
 8010b7e:	a80a      	add	r0, sp, #40	@ 0x28
 8010b80:	f7fb fdd8 	bl	800c734 <ucdr_buffer_length>
 8010b84:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b86:	4602      	mov	r2, r0
 8010b88:	a905      	add	r1, sp, #20
 8010b8a:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010b8e:	47b0      	blx	r6
 8010b90:	f001 f956 	bl	8011e40 <uxr_millis>
 8010b94:	2300      	movs	r3, #0
 8010b96:	4606      	mov	r6, r0
 8010b98:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	e000      	b.n	8010ba2 <uxr_sync_session+0x72>
 8010ba0:	b950      	cbnz	r0, 8010bb8 <uxr_sync_session+0x88>
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f7ff fdd4 	bl	8010750 <listen_message_reliably>
 8010ba8:	f001 f94a 	bl	8011e40 <uxr_millis>
 8010bac:	1b81      	subs	r1, r0, r6
 8010bae:	1a69      	subs	r1, r5, r1
 8010bb0:	2900      	cmp	r1, #0
 8010bb2:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010bb6:	dcf3      	bgt.n	8010ba0 <uxr_sync_session+0x70>
 8010bb8:	b012      	add	sp, #72	@ 0x48
 8010bba:	bd70      	pop	{r4, r5, r6, pc}
 8010bbc:	f3af 8000 	nop.w
 8010bc0:	3b9aca00 	.word	0x3b9aca00
 8010bc4:	00000000 	.word	0x00000000

08010bc8 <uxr_run_session_until_pong>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	4604      	mov	r4, r0
 8010bcc:	460d      	mov	r5, r1
 8010bce:	f001 f937 	bl	8011e40 <uxr_millis>
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f7ff fb97 	bl	8010308 <uxr_flash_output_streams>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8010be0:	4629      	mov	r1, r5
 8010be2:	e005      	b.n	8010bf0 <uxr_run_session_until_pong+0x28>
 8010be4:	f001 f92c 	bl	8011e40 <uxr_millis>
 8010be8:	1b81      	subs	r1, r0, r6
 8010bea:	1a69      	subs	r1, r5, r1
 8010bec:	2900      	cmp	r1, #0
 8010bee:	dd0c      	ble.n	8010c0a <uxr_run_session_until_pong+0x42>
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f7ff fdad 	bl	8010750 <listen_message_reliably>
 8010bf6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d0f2      	beq.n	8010be4 <uxr_run_session_until_pong+0x1c>
 8010bfe:	f1a0 0001 	sub.w	r0, r0, #1
 8010c02:	fab0 f080 	clz	r0, r0
 8010c06:	0940      	lsrs	r0, r0, #5
 8010c08:	bd70      	pop	{r4, r5, r6, pc}
 8010c0a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010c0e:	f1a0 0001 	sub.w	r0, r0, #1
 8010c12:	fab0 f080 	clz	r0, r0
 8010c16:	0940      	lsrs	r0, r0, #5
 8010c18:	bd70      	pop	{r4, r5, r6, pc}
 8010c1a:	bf00      	nop

08010c1c <wait_session_status>:
 8010c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c20:	4604      	mov	r4, r0
 8010c22:	20ff      	movs	r0, #255	@ 0xff
 8010c24:	b09f      	sub	sp, #124	@ 0x7c
 8010c26:	7160      	strb	r0, [r4, #5]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 80bb 	beq.w	8010da4 <wait_session_status+0x188>
 8010c2e:	4692      	mov	sl, r2
 8010c30:	469b      	mov	fp, r3
 8010c32:	f04f 0800 	mov.w	r8, #0
 8010c36:	9105      	str	r1, [sp, #20]
 8010c38:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c3a:	9905      	ldr	r1, [sp, #20]
 8010c3c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010c40:	4652      	mov	r2, sl
 8010c42:	47a8      	blx	r5
 8010c44:	f001 f8fc 	bl	8011e40 <uxr_millis>
 8010c48:	2700      	movs	r7, #0
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010c50:	e009      	b.n	8010c66 <wait_session_status+0x4a>
 8010c52:	f001 f8f5 	bl	8011e40 <uxr_millis>
 8010c56:	1b43      	subs	r3, r0, r5
 8010c58:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	7962      	ldrb	r2, [r4, #5]
 8010c60:	dd3d      	ble.n	8010cde <wait_session_status+0xc2>
 8010c62:	2aff      	cmp	r2, #255	@ 0xff
 8010c64:	d13b      	bne.n	8010cde <wait_session_status+0xc2>
 8010c66:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010c68:	a90a      	add	r1, sp, #40	@ 0x28
 8010c6a:	6896      	ldr	r6, [r2, #8]
 8010c6c:	6810      	ldr	r0, [r2, #0]
 8010c6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010c70:	47b0      	blx	r6
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d0ed      	beq.n	8010c52 <wait_session_status+0x36>
 8010c76:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8010c7a:	a80e      	add	r0, sp, #56	@ 0x38
 8010c7c:	f7fb fd2e 	bl	800c6dc <ucdr_init_buffer>
 8010c80:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8010c84:	aa09      	add	r2, sp, #36	@ 0x24
 8010c86:	a90e      	add	r1, sp, #56	@ 0x38
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8010c8e:	f000 fa9b 	bl	80111c8 <uxr_read_session_header>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	d0dd      	beq.n	8010c52 <wait_session_status+0x36>
 8010c96:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	f000 ff8a 	bl	8011bb4 <uxr_stream_id_from_raw>
 8010ca0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8010ca4:	9304      	str	r3, [sp, #16]
 8010ca6:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8010caa:	b2c3      	uxtb	r3, r0
 8010cac:	f1b9 0f01 	cmp.w	r9, #1
 8010cb0:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8010cb4:	9303      	str	r3, [sp, #12]
 8010cb6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010cba:	d05d      	beq.n	8010d78 <wait_session_status+0x15c>
 8010cbc:	f1b9 0f02 	cmp.w	r9, #2
 8010cc0:	d01a      	beq.n	8010cf8 <wait_session_status+0xdc>
 8010cc2:	f1b9 0f00 	cmp.w	r9, #0
 8010cc6:	d1c4      	bne.n	8010c52 <wait_session_status+0x36>
 8010cc8:	4649      	mov	r1, r9
 8010cca:	4648      	mov	r0, r9
 8010ccc:	f000 ff72 	bl	8011bb4 <uxr_stream_id_from_raw>
 8010cd0:	a90e      	add	r1, sp, #56	@ 0x38
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	900d      	str	r0, [sp, #52]	@ 0x34
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7ff fbca 	bl	8010470 <read_submessage_list>
 8010cdc:	e7b9      	b.n	8010c52 <wait_session_status+0x36>
 8010cde:	f108 0801 	add.w	r8, r8, #1
 8010ce2:	45c3      	cmp	fp, r8
 8010ce4:	d001      	beq.n	8010cea <wait_session_status+0xce>
 8010ce6:	2aff      	cmp	r2, #255	@ 0xff
 8010ce8:	d0a6      	beq.n	8010c38 <wait_session_status+0x1c>
 8010cea:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8010cee:	bf18      	it	ne
 8010cf0:	2001      	movne	r0, #1
 8010cf2:	b01f      	add	sp, #124	@ 0x7c
 8010cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf8:	4631      	mov	r1, r6
 8010cfa:	f104 0008 	add.w	r0, r4, #8
 8010cfe:	f001 f839 	bl	8011d74 <uxr_get_input_reliable_stream>
 8010d02:	9006      	str	r0, [sp, #24]
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d031      	beq.n	8010d6c <wait_session_status+0x150>
 8010d08:	aa0e      	add	r2, sp, #56	@ 0x38
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010d0e:	9207      	str	r2, [sp, #28]
 8010d10:	f7fb fd14 	bl	800c73c <ucdr_buffer_remaining>
 8010d14:	4603      	mov	r3, r0
 8010d16:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8010d1a:	9000      	str	r0, [sp, #0]
 8010d1c:	9a07      	ldr	r2, [sp, #28]
 8010d1e:	9904      	ldr	r1, [sp, #16]
 8010d20:	9806      	ldr	r0, [sp, #24]
 8010d22:	f008 f8c3 	bl	8018eac <uxr_receive_reliable_message>
 8010d26:	b308      	cbz	r0, 8010d6c <wait_session_status+0x150>
 8010d28:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d041      	beq.n	8010db4 <wait_session_status+0x198>
 8010d30:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d34:	9507      	str	r5, [sp, #28]
 8010d36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010d3a:	9d06      	ldr	r5, [sp, #24]
 8010d3c:	f04f 0902 	mov.w	r9, #2
 8010d40:	e00a      	b.n	8010d58 <wait_session_status+0x13c>
 8010d42:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8010d46:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8010d4a:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8010d4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d50:	a916      	add	r1, sp, #88	@ 0x58
 8010d52:	4620      	mov	r0, r4
 8010d54:	f7ff fb8c 	bl	8010470 <read_submessage_list>
 8010d58:	2204      	movs	r2, #4
 8010d5a:	a916      	add	r1, sp, #88	@ 0x58
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f008 f91f 	bl	8018fa0 <uxr_next_input_reliable_buffer_available>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d1ed      	bne.n	8010d42 <wait_session_status+0x126>
 8010d66:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010d6a:	9d07      	ldr	r5, [sp, #28]
 8010d6c:	9903      	ldr	r1, [sp, #12]
 8010d6e:	4632      	mov	r2, r6
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7ff fa23 	bl	80101bc <write_submessage_acknack.isra.0>
 8010d76:	e76c      	b.n	8010c52 <wait_session_status+0x36>
 8010d78:	4631      	mov	r1, r6
 8010d7a:	f104 0008 	add.w	r0, r4, #8
 8010d7e:	f000 ffef 	bl	8011d60 <uxr_get_input_best_effort_stream>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	f43f af65 	beq.w	8010c52 <wait_session_status+0x36>
 8010d88:	9904      	ldr	r1, [sp, #16]
 8010d8a:	f007 ffff 	bl	8018d8c <uxr_receive_best_effort_message>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	f43f af5f 	beq.w	8010c52 <wait_session_status+0x36>
 8010d94:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8010d98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d9a:	a90e      	add	r1, sp, #56	@ 0x38
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f7ff fb67 	bl	8010470 <read_submessage_list>
 8010da2:	e756      	b.n	8010c52 <wait_session_status+0x36>
 8010da4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010da6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010daa:	47a0      	blx	r4
 8010dac:	2001      	movs	r0, #1
 8010dae:	b01f      	add	sp, #124	@ 0x7c
 8010db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db4:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8010db8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010dba:	a90e      	add	r1, sp, #56	@ 0x38
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f7ff fb57 	bl	8010470 <read_submessage_list>
 8010dc2:	e7b5      	b.n	8010d30 <wait_session_status+0x114>

08010dc4 <uxr_delete_session_retries>:
 8010dc4:	b530      	push	{r4, r5, lr}
 8010dc6:	b08f      	sub	sp, #60	@ 0x3c
 8010dc8:	4604      	mov	r4, r0
 8010dca:	460d      	mov	r5, r1
 8010dcc:	f000 fa3a 	bl	8011244 <uxr_session_header_offset>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	2210      	movs	r2, #16
 8010dd4:	9000      	str	r0, [sp, #0]
 8010dd6:	a902      	add	r1, sp, #8
 8010dd8:	a806      	add	r0, sp, #24
 8010dda:	f7fb fc6d 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8010dde:	a906      	add	r1, sp, #24
 8010de0:	4620      	mov	r0, r4
 8010de2:	f000 f981 	bl	80110e8 <uxr_buffer_delete_session>
 8010de6:	2200      	movs	r2, #0
 8010de8:	4611      	mov	r1, r2
 8010dea:	9b06      	ldr	r3, [sp, #24]
 8010dec:	4620      	mov	r0, r4
 8010dee:	f000 f9d5 	bl	801119c <uxr_stamp_session_header>
 8010df2:	a806      	add	r0, sp, #24
 8010df4:	f7fb fc9e 	bl	800c734 <ucdr_buffer_length>
 8010df8:	462b      	mov	r3, r5
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	a902      	add	r1, sp, #8
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7ff ff0c 	bl	8010c1c <wait_session_status>
 8010e04:	b118      	cbz	r0, 8010e0e <uxr_delete_session_retries+0x4a>
 8010e06:	7960      	ldrb	r0, [r4, #5]
 8010e08:	fab0 f080 	clz	r0, r0
 8010e0c:	0940      	lsrs	r0, r0, #5
 8010e0e:	b00f      	add	sp, #60	@ 0x3c
 8010e10:	bd30      	pop	{r4, r5, pc}
 8010e12:	bf00      	nop

08010e14 <uxr_create_session>:
 8010e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e18:	f100 0308 	add.w	r3, r0, #8
 8010e1c:	b0ab      	sub	sp, #172	@ 0xac
 8010e1e:	4604      	mov	r4, r0
 8010e20:	4618      	mov	r0, r3
 8010e22:	9303      	str	r3, [sp, #12]
 8010e24:	f000 feec 	bl	8011c00 <uxr_reset_stream_storage>
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f000 fa0b 	bl	8011244 <uxr_session_header_offset>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	9000      	str	r0, [sp, #0]
 8010e32:	221c      	movs	r2, #28
 8010e34:	a90b      	add	r1, sp, #44	@ 0x2c
 8010e36:	a812      	add	r0, sp, #72	@ 0x48
 8010e38:	f7fb fc3e 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8010e3c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e3e:	8a1a      	ldrh	r2, [r3, #16]
 8010e40:	3a04      	subs	r2, #4
 8010e42:	b292      	uxth	r2, r2
 8010e44:	a912      	add	r1, sp, #72	@ 0x48
 8010e46:	4620      	mov	r0, r4
 8010e48:	f000 f924 	bl	8011094 <uxr_buffer_create_session>
 8010e4c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f000 f990 	bl	8011174 <uxr_stamp_create_session_header>
 8010e54:	a812      	add	r0, sp, #72	@ 0x48
 8010e56:	f7fb fc6d 	bl	800c734 <ucdr_buffer_length>
 8010e5a:	23ff      	movs	r3, #255	@ 0xff
 8010e5c:	4683      	mov	fp, r0
 8010e5e:	7163      	strb	r3, [r4, #5]
 8010e60:	f04f 080a 	mov.w	r8, #10
 8010e64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e66:	465a      	mov	r2, fp
 8010e68:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010e6c:	a90b      	add	r1, sp, #44	@ 0x2c
 8010e6e:	47a8      	blx	r5
 8010e70:	f000 ffe6 	bl	8011e40 <uxr_millis>
 8010e74:	2700      	movs	r7, #0
 8010e76:	4605      	mov	r5, r0
 8010e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e7c:	e009      	b.n	8010e92 <uxr_create_session+0x7e>
 8010e7e:	f000 ffdf 	bl	8011e40 <uxr_millis>
 8010e82:	1b43      	subs	r3, r0, r5
 8010e84:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	7962      	ldrb	r2, [r4, #5]
 8010e8c:	dd3d      	ble.n	8010f0a <uxr_create_session+0xf6>
 8010e8e:	2aff      	cmp	r2, #255	@ 0xff
 8010e90:	d13b      	bne.n	8010f0a <uxr_create_session+0xf6>
 8010e92:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010e94:	a907      	add	r1, sp, #28
 8010e96:	6896      	ldr	r6, [r2, #8]
 8010e98:	6810      	ldr	r0, [r2, #0]
 8010e9a:	aa08      	add	r2, sp, #32
 8010e9c:	47b0      	blx	r6
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d0ed      	beq.n	8010e7e <uxr_create_session+0x6a>
 8010ea2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010ea6:	a81a      	add	r0, sp, #104	@ 0x68
 8010ea8:	f7fb fc18 	bl	800c6dc <ucdr_init_buffer>
 8010eac:	f10d 031a 	add.w	r3, sp, #26
 8010eb0:	aa06      	add	r2, sp, #24
 8010eb2:	a91a      	add	r1, sp, #104	@ 0x68
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f88d 7018 	strb.w	r7, [sp, #24]
 8010eba:	f000 f985 	bl	80111c8 <uxr_read_session_header>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d0dd      	beq.n	8010e7e <uxr_create_session+0x6a>
 8010ec2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f000 fe74 	bl	8011bb4 <uxr_stream_id_from_raw>
 8010ecc:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8010ed0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8010ed4:	9302      	str	r3, [sp, #8]
 8010ed6:	f1b9 0f01 	cmp.w	r9, #1
 8010eda:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010ede:	fa5f fa80 	uxtb.w	sl, r0
 8010ee2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010ee6:	d056      	beq.n	8010f96 <uxr_create_session+0x182>
 8010ee8:	f1b9 0f02 	cmp.w	r9, #2
 8010eec:	d018      	beq.n	8010f20 <uxr_create_session+0x10c>
 8010eee:	f1b9 0f00 	cmp.w	r9, #0
 8010ef2:	d1c4      	bne.n	8010e7e <uxr_create_session+0x6a>
 8010ef4:	4649      	mov	r1, r9
 8010ef6:	4648      	mov	r0, r9
 8010ef8:	f000 fe5c 	bl	8011bb4 <uxr_stream_id_from_raw>
 8010efc:	a91a      	add	r1, sp, #104	@ 0x68
 8010efe:	4602      	mov	r2, r0
 8010f00:	900a      	str	r0, [sp, #40]	@ 0x28
 8010f02:	4620      	mov	r0, r4
 8010f04:	f7ff fab4 	bl	8010470 <read_submessage_list>
 8010f08:	e7b9      	b.n	8010e7e <uxr_create_session+0x6a>
 8010f0a:	f1b8 0801 	subs.w	r8, r8, #1
 8010f0e:	d001      	beq.n	8010f14 <uxr_create_session+0x100>
 8010f10:	2aff      	cmp	r2, #255	@ 0xff
 8010f12:	d0a7      	beq.n	8010e64 <uxr_create_session+0x50>
 8010f14:	2a00      	cmp	r2, #0
 8010f16:	d05b      	beq.n	8010fd0 <uxr_create_session+0x1bc>
 8010f18:	2000      	movs	r0, #0
 8010f1a:	b02b      	add	sp, #172	@ 0xac
 8010f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f20:	9803      	ldr	r0, [sp, #12]
 8010f22:	4631      	mov	r1, r6
 8010f24:	f000 ff26 	bl	8011d74 <uxr_get_input_reliable_stream>
 8010f28:	9004      	str	r0, [sp, #16]
 8010f2a:	b370      	cbz	r0, 8010f8a <uxr_create_session+0x176>
 8010f2c:	aa1a      	add	r2, sp, #104	@ 0x68
 8010f2e:	4610      	mov	r0, r2
 8010f30:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010f32:	9205      	str	r2, [sp, #20]
 8010f34:	f7fb fc02 	bl	800c73c <ucdr_buffer_remaining>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	f10d 0019 	add.w	r0, sp, #25
 8010f3e:	9000      	str	r0, [sp, #0]
 8010f40:	9a05      	ldr	r2, [sp, #20]
 8010f42:	9902      	ldr	r1, [sp, #8]
 8010f44:	9804      	ldr	r0, [sp, #16]
 8010f46:	f007 ffb1 	bl	8018eac <uxr_receive_reliable_message>
 8010f4a:	b1f0      	cbz	r0, 8010f8a <uxr_create_session+0x176>
 8010f4c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d035      	beq.n	8010fc0 <uxr_create_session+0x1ac>
 8010f54:	f8cd b008 	str.w	fp, [sp, #8]
 8010f58:	f04f 0902 	mov.w	r9, #2
 8010f5c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8010f60:	e00a      	b.n	8010f78 <uxr_create_session+0x164>
 8010f62:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8010f66:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010f6a:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8010f6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f70:	a922      	add	r1, sp, #136	@ 0x88
 8010f72:	4620      	mov	r0, r4
 8010f74:	f7ff fa7c 	bl	8010470 <read_submessage_list>
 8010f78:	2204      	movs	r2, #4
 8010f7a:	a922      	add	r1, sp, #136	@ 0x88
 8010f7c:	4658      	mov	r0, fp
 8010f7e:	f008 f80f 	bl	8018fa0 <uxr_next_input_reliable_buffer_available>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d1ed      	bne.n	8010f62 <uxr_create_session+0x14e>
 8010f86:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010f8a:	4632      	mov	r2, r6
 8010f8c:	4651      	mov	r1, sl
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f7ff f914 	bl	80101bc <write_submessage_acknack.isra.0>
 8010f94:	e773      	b.n	8010e7e <uxr_create_session+0x6a>
 8010f96:	9803      	ldr	r0, [sp, #12]
 8010f98:	4631      	mov	r1, r6
 8010f9a:	f000 fee1 	bl	8011d60 <uxr_get_input_best_effort_stream>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	f43f af6d 	beq.w	8010e7e <uxr_create_session+0x6a>
 8010fa4:	9902      	ldr	r1, [sp, #8]
 8010fa6:	f007 fef1 	bl	8018d8c <uxr_receive_best_effort_message>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	f43f af67 	beq.w	8010e7e <uxr_create_session+0x6a>
 8010fb0:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8010fb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010fb6:	a91a      	add	r1, sp, #104	@ 0x68
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f7ff fa59 	bl	8010470 <read_submessage_list>
 8010fbe:	e75e      	b.n	8010e7e <uxr_create_session+0x6a>
 8010fc0:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8010fc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010fc6:	a91a      	add	r1, sp, #104	@ 0x68
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ff fa51 	bl	8010470 <read_submessage_list>
 8010fce:	e7c1      	b.n	8010f54 <uxr_create_session+0x140>
 8010fd0:	9803      	ldr	r0, [sp, #12]
 8010fd2:	f000 fe15 	bl	8011c00 <uxr_reset_stream_storage>
 8010fd6:	2001      	movs	r0, #1
 8010fd8:	b02b      	add	sp, #172	@ 0xac
 8010fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fde:	bf00      	nop

08010fe0 <uxr_prepare_stream_to_write_submessage>:
 8010fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe4:	b082      	sub	sp, #8
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	4610      	mov	r0, r2
 8010fea:	4614      	mov	r4, r2
 8010fec:	9101      	str	r1, [sp, #4]
 8010fee:	461f      	mov	r7, r3
 8010ff0:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8010ff4:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8010ff8:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8010ffc:	f000 ff1a 	bl	8011e34 <uxr_submessage_padding>
 8011000:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011004:	1d21      	adds	r1, r4, #4
 8011006:	2b01      	cmp	r3, #1
 8011008:	eb01 0a00 	add.w	sl, r1, r0
 801100c:	d012      	beq.n	8011034 <uxr_prepare_stream_to_write_submessage+0x54>
 801100e:	2b02      	cmp	r3, #2
 8011010:	d003      	beq.n	801101a <uxr_prepare_stream_to_write_submessage+0x3a>
 8011012:	2000      	movs	r0, #0
 8011014:	b002      	add	sp, #8
 8011016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801101a:	4629      	mov	r1, r5
 801101c:	f106 0008 	add.w	r0, r6, #8
 8011020:	f000 fe94 	bl	8011d4c <uxr_get_output_reliable_stream>
 8011024:	2800      	cmp	r0, #0
 8011026:	d0f4      	beq.n	8011012 <uxr_prepare_stream_to_write_submessage+0x32>
 8011028:	4651      	mov	r1, sl
 801102a:	463a      	mov	r2, r7
 801102c:	f008 f96e 	bl	801930c <uxr_prepare_reliable_buffer_to_write>
 8011030:	b968      	cbnz	r0, 801104e <uxr_prepare_stream_to_write_submessage+0x6e>
 8011032:	e7ee      	b.n	8011012 <uxr_prepare_stream_to_write_submessage+0x32>
 8011034:	4629      	mov	r1, r5
 8011036:	f106 0008 	add.w	r0, r6, #8
 801103a:	f000 fe7f 	bl	8011d3c <uxr_get_output_best_effort_stream>
 801103e:	2800      	cmp	r0, #0
 8011040:	d0e7      	beq.n	8011012 <uxr_prepare_stream_to_write_submessage+0x32>
 8011042:	4651      	mov	r1, sl
 8011044:	463a      	mov	r2, r7
 8011046:	f008 f893 	bl	8019170 <uxr_prepare_best_effort_buffer_to_write>
 801104a:	2800      	cmp	r0, #0
 801104c:	d0e1      	beq.n	8011012 <uxr_prepare_stream_to_write_submessage+0x32>
 801104e:	464b      	mov	r3, r9
 8011050:	b2a2      	uxth	r2, r4
 8011052:	4641      	mov	r1, r8
 8011054:	4638      	mov	r0, r7
 8011056:	f000 fead 	bl	8011db4 <uxr_buffer_submessage_header>
 801105a:	2001      	movs	r0, #1
 801105c:	b002      	add	sp, #8
 801105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011062:	bf00      	nop

08011064 <uxr_init_session_info>:
 8011064:	2300      	movs	r3, #0
 8011066:	f361 0307 	bfi	r3, r1, #0, #8
 801106a:	0e11      	lsrs	r1, r2, #24
 801106c:	f361 230f 	bfi	r3, r1, #8, #8
 8011070:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8011074:	f361 4317 	bfi	r3, r1, #16, #8
 8011078:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801107c:	f361 631f 	bfi	r3, r1, #24, #8
 8011080:	f04f 0c09 	mov.w	ip, #9
 8011084:	21ff      	movs	r1, #255	@ 0xff
 8011086:	6003      	str	r3, [r0, #0]
 8011088:	7102      	strb	r2, [r0, #4]
 801108a:	f8a0 c006 	strh.w	ip, [r0, #6]
 801108e:	7141      	strb	r1, [r0, #5]
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop

08011094 <uxr_buffer_create_session>:
 8011094:	b530      	push	{r4, r5, lr}
 8011096:	4d13      	ldr	r5, [pc, #76]	@ (80110e4 <uxr_buffer_create_session+0x50>)
 8011098:	b089      	sub	sp, #36	@ 0x24
 801109a:	2300      	movs	r3, #0
 801109c:	9307      	str	r3, [sp, #28]
 801109e:	f8ad 201c 	strh.w	r2, [sp, #28]
 80110a2:	682a      	ldr	r2, [r5, #0]
 80110a4:	9200      	str	r2, [sp, #0]
 80110a6:	460c      	mov	r4, r1
 80110a8:	2201      	movs	r2, #1
 80110aa:	88a9      	ldrh	r1, [r5, #4]
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	80c2      	strh	r2, [r0, #6]
 80110b0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80110b4:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80110b8:	7800      	ldrb	r0, [r0, #0]
 80110ba:	9303      	str	r3, [sp, #12]
 80110bc:	f88d 2004 	strb.w	r2, [sp, #4]
 80110c0:	9102      	str	r1, [sp, #8]
 80110c2:	2210      	movs	r2, #16
 80110c4:	4619      	mov	r1, r3
 80110c6:	f88d 000c 	strb.w	r0, [sp, #12]
 80110ca:	4620      	mov	r0, r4
 80110cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80110d0:	9306      	str	r3, [sp, #24]
 80110d2:	f000 fe6f 	bl	8011db4 <uxr_buffer_submessage_header>
 80110d6:	4669      	mov	r1, sp
 80110d8:	4620      	mov	r0, r4
 80110da:	f001 fe8f 	bl	8012dfc <uxr_serialize_CREATE_CLIENT_Payload>
 80110de:	b009      	add	sp, #36	@ 0x24
 80110e0:	bd30      	pop	{r4, r5, pc}
 80110e2:	bf00      	nop
 80110e4:	080209a0 	.word	0x080209a0

080110e8 <uxr_buffer_delete_session>:
 80110e8:	b510      	push	{r4, lr}
 80110ea:	4a0c      	ldr	r2, [pc, #48]	@ (801111c <uxr_buffer_delete_session+0x34>)
 80110ec:	b082      	sub	sp, #8
 80110ee:	460c      	mov	r4, r1
 80110f0:	2302      	movs	r3, #2
 80110f2:	8911      	ldrh	r1, [r2, #8]
 80110f4:	80c3      	strh	r3, [r0, #6]
 80110f6:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80110fa:	2300      	movs	r3, #0
 80110fc:	2204      	movs	r2, #4
 80110fe:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011102:	4620      	mov	r0, r4
 8011104:	2103      	movs	r1, #3
 8011106:	f8ad c004 	strh.w	ip, [sp, #4]
 801110a:	f000 fe53 	bl	8011db4 <uxr_buffer_submessage_header>
 801110e:	a901      	add	r1, sp, #4
 8011110:	4620      	mov	r0, r4
 8011112:	f001 ff2b 	bl	8012f6c <uxr_serialize_DELETE_Payload>
 8011116:	b002      	add	sp, #8
 8011118:	bd10      	pop	{r4, pc}
 801111a:	bf00      	nop
 801111c:	080209a0 	.word	0x080209a0

08011120 <uxr_read_create_session_status>:
 8011120:	b510      	push	{r4, lr}
 8011122:	460b      	mov	r3, r1
 8011124:	b088      	sub	sp, #32
 8011126:	4604      	mov	r4, r0
 8011128:	a901      	add	r1, sp, #4
 801112a:	4618      	mov	r0, r3
 801112c:	f001 ff2e 	bl	8012f8c <uxr_deserialize_STATUS_AGENT_Payload>
 8011130:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011134:	7163      	strb	r3, [r4, #5]
 8011136:	b008      	add	sp, #32
 8011138:	bd10      	pop	{r4, pc}
 801113a:	bf00      	nop

0801113c <uxr_read_delete_session_status>:
 801113c:	b510      	push	{r4, lr}
 801113e:	460b      	mov	r3, r1
 8011140:	b082      	sub	sp, #8
 8011142:	4604      	mov	r4, r0
 8011144:	4669      	mov	r1, sp
 8011146:	4618      	mov	r0, r3
 8011148:	f001 ff50 	bl	8012fec <uxr_deserialize_STATUS_Payload>
 801114c:	88e3      	ldrh	r3, [r4, #6]
 801114e:	2b02      	cmp	r3, #2
 8011150:	d001      	beq.n	8011156 <uxr_read_delete_session_status+0x1a>
 8011152:	b002      	add	sp, #8
 8011154:	bd10      	pop	{r4, pc}
 8011156:	f10d 0002 	add.w	r0, sp, #2
 801115a:	f7fe fead 	bl	800feb8 <uxr_object_id_from_raw>
 801115e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011162:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801116a:	bf08      	it	eq
 801116c:	7162      	strbeq	r2, [r4, #5]
 801116e:	b002      	add	sp, #8
 8011170:	bd10      	pop	{r4, pc}
 8011172:	bf00      	nop

08011174 <uxr_stamp_create_session_header>:
 8011174:	b510      	push	{r4, lr}
 8011176:	2208      	movs	r2, #8
 8011178:	b08a      	sub	sp, #40	@ 0x28
 801117a:	4604      	mov	r4, r0
 801117c:	eb0d 0002 	add.w	r0, sp, r2
 8011180:	f7fb faac 	bl	800c6dc <ucdr_init_buffer>
 8011184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011188:	9400      	str	r4, [sp, #0]
 801118a:	2300      	movs	r3, #0
 801118c:	461a      	mov	r2, r3
 801118e:	a802      	add	r0, sp, #8
 8011190:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011194:	f001 f80c 	bl	80121b0 <uxr_serialize_message_header>
 8011198:	b00a      	add	sp, #40	@ 0x28
 801119a:	bd10      	pop	{r4, pc}

0801119c <uxr_stamp_session_header>:
 801119c:	b570      	push	{r4, r5, r6, lr}
 801119e:	4604      	mov	r4, r0
 80111a0:	b08a      	sub	sp, #40	@ 0x28
 80111a2:	4616      	mov	r6, r2
 80111a4:	2208      	movs	r2, #8
 80111a6:	eb0d 0002 	add.w	r0, sp, r2
 80111aa:	460d      	mov	r5, r1
 80111ac:	4619      	mov	r1, r3
 80111ae:	f7fb fa95 	bl	800c6dc <ucdr_init_buffer>
 80111b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111b6:	9400      	str	r4, [sp, #0]
 80111b8:	4633      	mov	r3, r6
 80111ba:	462a      	mov	r2, r5
 80111bc:	a802      	add	r0, sp, #8
 80111be:	f000 fff7 	bl	80121b0 <uxr_serialize_message_header>
 80111c2:	b00a      	add	sp, #40	@ 0x28
 80111c4:	bd70      	pop	{r4, r5, r6, pc}
 80111c6:	bf00      	nop

080111c8 <uxr_read_session_header>:
 80111c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ca:	4607      	mov	r7, r0
 80111cc:	b085      	sub	sp, #20
 80111ce:	4608      	mov	r0, r1
 80111d0:	460c      	mov	r4, r1
 80111d2:	4615      	mov	r5, r2
 80111d4:	461e      	mov	r6, r3
 80111d6:	f7fb fab1 	bl	800c73c <ucdr_buffer_remaining>
 80111da:	2808      	cmp	r0, #8
 80111dc:	d802      	bhi.n	80111e4 <uxr_read_session_header+0x1c>
 80111de:	2000      	movs	r0, #0
 80111e0:	b005      	add	sp, #20
 80111e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111e4:	ab03      	add	r3, sp, #12
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	462a      	mov	r2, r5
 80111ea:	4633      	mov	r3, r6
 80111ec:	f10d 010b 	add.w	r1, sp, #11
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 fffb 	bl	80121ec <uxr_deserialize_message_header>
 80111f6:	783a      	ldrb	r2, [r7, #0]
 80111f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d1ee      	bne.n	80111de <uxr_read_session_header+0x16>
 8011200:	061b      	lsls	r3, r3, #24
 8011202:	d41c      	bmi.n	801123e <uxr_read_session_header+0x76>
 8011204:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011208:	787b      	ldrb	r3, [r7, #1]
 801120a:	429a      	cmp	r2, r3
 801120c:	d003      	beq.n	8011216 <uxr_read_session_header+0x4e>
 801120e:	2001      	movs	r0, #1
 8011210:	f080 0001 	eor.w	r0, r0, #1
 8011214:	e7e4      	b.n	80111e0 <uxr_read_session_header+0x18>
 8011216:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801121a:	78bb      	ldrb	r3, [r7, #2]
 801121c:	429a      	cmp	r2, r3
 801121e:	f107 0102 	add.w	r1, r7, #2
 8011222:	d1f4      	bne.n	801120e <uxr_read_session_header+0x46>
 8011224:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011228:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801122c:	429a      	cmp	r2, r3
 801122e:	d1ee      	bne.n	801120e <uxr_read_session_header+0x46>
 8011230:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011234:	784b      	ldrb	r3, [r1, #1]
 8011236:	429a      	cmp	r2, r3
 8011238:	d1e9      	bne.n	801120e <uxr_read_session_header+0x46>
 801123a:	2000      	movs	r0, #0
 801123c:	e7e8      	b.n	8011210 <uxr_read_session_header+0x48>
 801123e:	2001      	movs	r0, #1
 8011240:	e7ce      	b.n	80111e0 <uxr_read_session_header+0x18>
 8011242:	bf00      	nop

08011244 <uxr_session_header_offset>:
 8011244:	f990 3000 	ldrsb.w	r3, [r0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	bfb4      	ite	lt
 801124c:	2004      	movlt	r0, #4
 801124e:	2008      	movge	r0, #8
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop

08011254 <uxr_init_base_object_request>:
 8011254:	b510      	push	{r4, lr}
 8011256:	88c3      	ldrh	r3, [r0, #6]
 8011258:	b082      	sub	sp, #8
 801125a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801125e:	9101      	str	r1, [sp, #4]
 8011260:	f1a3 010a 	sub.w	r1, r3, #10
 8011264:	b289      	uxth	r1, r1
 8011266:	42a1      	cmp	r1, r4
 8011268:	d80e      	bhi.n	8011288 <uxr_init_base_object_request+0x34>
 801126a:	3301      	adds	r3, #1
 801126c:	b29c      	uxth	r4, r3
 801126e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011272:	b2db      	uxtb	r3, r3
 8011274:	80c4      	strh	r4, [r0, #6]
 8011276:	9801      	ldr	r0, [sp, #4]
 8011278:	7011      	strb	r1, [r2, #0]
 801127a:	7053      	strb	r3, [r2, #1]
 801127c:	1c91      	adds	r1, r2, #2
 801127e:	f7fe fe2f 	bl	800fee0 <uxr_object_id_to_raw>
 8011282:	4620      	mov	r0, r4
 8011284:	b002      	add	sp, #8
 8011286:	bd10      	pop	{r4, pc}
 8011288:	230a      	movs	r3, #10
 801128a:	2100      	movs	r1, #0
 801128c:	461c      	mov	r4, r3
 801128e:	e7f1      	b.n	8011274 <uxr_init_base_object_request+0x20>

08011290 <uxr_parse_base_object_request>:
 8011290:	b570      	push	{r4, r5, r6, lr}
 8011292:	4604      	mov	r4, r0
 8011294:	3002      	adds	r0, #2
 8011296:	460d      	mov	r5, r1
 8011298:	4616      	mov	r6, r2
 801129a:	f7fe fe0d 	bl	800feb8 <uxr_object_id_from_raw>
 801129e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80112a2:	8028      	strh	r0, [r5, #0]
 80112a4:	806b      	strh	r3, [r5, #2]
 80112a6:	8823      	ldrh	r3, [r4, #0]
 80112a8:	ba5b      	rev16	r3, r3
 80112aa:	8033      	strh	r3, [r6, #0]
 80112ac:	bd70      	pop	{r4, r5, r6, pc}
 80112ae:	bf00      	nop

080112b0 <uxr_init_framing_io>:
 80112b0:	2300      	movs	r3, #0
 80112b2:	7041      	strb	r1, [r0, #1]
 80112b4:	7003      	strb	r3, [r0, #0]
 80112b6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop

080112bc <uxr_write_framed_msg>:
 80112bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c0:	f890 c001 	ldrb.w	ip, [r0, #1]
 80112c4:	4617      	mov	r7, r2
 80112c6:	227e      	movs	r2, #126	@ 0x7e
 80112c8:	b085      	sub	sp, #20
 80112ca:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80112ce:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 80112d2:	2a01      	cmp	r2, #1
 80112d4:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80112d8:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80112dc:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80112e0:	4604      	mov	r4, r0
 80112e2:	460e      	mov	r6, r1
 80112e4:	469a      	mov	sl, r3
 80112e6:	f240 812e 	bls.w	8011546 <uxr_write_framed_msg+0x28a>
 80112ea:	2003      	movs	r0, #3
 80112ec:	2102      	movs	r1, #2
 80112ee:	f04f 0905 	mov.w	r9, #5
 80112f2:	2204      	movs	r2, #4
 80112f4:	4686      	mov	lr, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 80112fc:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8011300:	f1bc 0f01 	cmp.w	ip, #1
 8011304:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011308:	4421      	add	r1, r4
 801130a:	f240 8110 	bls.w	801152e <uxr_write_framed_msg+0x272>
 801130e:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011312:	fa5f fc8b 	uxtb.w	ip, fp
 8011316:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801131a:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801131e:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 8011322:	f1be 0f01 	cmp.w	lr, #1
 8011326:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801132a:	b2ed      	uxtb	r5, r5
 801132c:	d94c      	bls.n	80113c8 <uxr_write_framed_msg+0x10c>
 801132e:	4420      	add	r0, r4
 8011330:	2d01      	cmp	r5, #1
 8011332:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011336:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801133a:	d95d      	bls.n	80113f8 <uxr_write_framed_msg+0x13c>
 801133c:	18a0      	adds	r0, r4, r2
 801133e:	3201      	adds	r2, #1
 8011340:	b2d2      	uxtb	r2, r2
 8011342:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011346:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801134a:	f1bb 0f00 	cmp.w	fp, #0
 801134e:	f000 8108 	beq.w	8011562 <uxr_write_framed_msg+0x2a6>
 8011352:	f04f 0c00 	mov.w	ip, #0
 8011356:	4661      	mov	r1, ip
 8011358:	46de      	mov	lr, fp
 801135a:	46e3      	mov	fp, ip
 801135c:	46d4      	mov	ip, sl
 801135e:	468a      	mov	sl, r1
 8011360:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 801156c <uxr_write_framed_msg+0x2b0>
 8011364:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8011368:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801136c:	2901      	cmp	r1, #1
 801136e:	d91b      	bls.n	80113a8 <uxr_write_framed_msg+0xec>
 8011370:	2a29      	cmp	r2, #41	@ 0x29
 8011372:	d84e      	bhi.n	8011412 <uxr_write_framed_msg+0x156>
 8011374:	18a1      	adds	r1, r4, r2
 8011376:	3201      	adds	r2, #1
 8011378:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801137c:	b2d2      	uxtb	r2, r2
 801137e:	ea8b 0303 	eor.w	r3, fp, r3
 8011382:	b2db      	uxtb	r3, r3
 8011384:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011388:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 801138c:	f10a 0a01 	add.w	sl, sl, #1
 8011390:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 8011394:	45d6      	cmp	lr, sl
 8011396:	d95a      	bls.n	801144e <uxr_write_framed_msg+0x192>
 8011398:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801139c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80113a0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80113a4:	2901      	cmp	r1, #1
 80113a6:	d8e3      	bhi.n	8011370 <uxr_write_framed_msg+0xb4>
 80113a8:	1c51      	adds	r1, r2, #1
 80113aa:	b2c9      	uxtb	r1, r1
 80113ac:	2929      	cmp	r1, #41	@ 0x29
 80113ae:	d830      	bhi.n	8011412 <uxr_write_framed_msg+0x156>
 80113b0:	18a1      	adds	r1, r4, r2
 80113b2:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 80113b6:	3202      	adds	r2, #2
 80113b8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80113bc:	f083 0020 	eor.w	r0, r3, #32
 80113c0:	b2d2      	uxtb	r2, r2
 80113c2:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80113c6:	e7da      	b.n	801137e <uxr_write_framed_msg+0xc2>
 80113c8:	eb04 0e00 	add.w	lr, r4, r0
 80113cc:	f08c 0c20 	eor.w	ip, ip, #32
 80113d0:	1c82      	adds	r2, r0, #2
 80113d2:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 80113d6:	b2d2      	uxtb	r2, r2
 80113d8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80113dc:	2d01      	cmp	r5, #1
 80113de:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 80113e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80113e6:	d907      	bls.n	80113f8 <uxr_write_framed_msg+0x13c>
 80113e8:	4422      	add	r2, r4
 80113ea:	3003      	adds	r0, #3
 80113ec:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 80113f0:	b2c2      	uxtb	r2, r0
 80113f2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80113f6:	e7ac      	b.n	8011352 <uxr_write_framed_msg+0x96>
 80113f8:	18a0      	adds	r0, r4, r2
 80113fa:	f081 0120 	eor.w	r1, r1, #32
 80113fe:	3202      	adds	r2, #2
 8011400:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8011404:	b2d2      	uxtb	r2, r2
 8011406:	217d      	movs	r1, #125	@ 0x7d
 8011408:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801140c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011410:	e79f      	b.n	8011352 <uxr_write_framed_msg+0x96>
 8011412:	e9cd ba00 	strd	fp, sl, [sp]
 8011416:	2500      	movs	r5, #0
 8011418:	46e2      	mov	sl, ip
 801141a:	46f3      	mov	fp, lr
 801141c:	e000      	b.n	8011420 <uxr_write_framed_msg+0x164>
 801141e:	b190      	cbz	r0, 8011446 <uxr_write_framed_msg+0x18a>
 8011420:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011424:	1b52      	subs	r2, r2, r5
 8011426:	4643      	mov	r3, r8
 8011428:	4421      	add	r1, r4
 801142a:	4638      	mov	r0, r7
 801142c:	47b0      	blx	r6
 801142e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011432:	4405      	add	r5, r0
 8011434:	4295      	cmp	r5, r2
 8011436:	d3f2      	bcc.n	801141e <uxr_write_framed_msg+0x162>
 8011438:	46d4      	mov	ip, sl
 801143a:	46de      	mov	lr, fp
 801143c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8011440:	f8dd b000 	ldr.w	fp, [sp]
 8011444:	d06f      	beq.n	8011526 <uxr_write_framed_msg+0x26a>
 8011446:	2000      	movs	r0, #0
 8011448:	b005      	add	sp, #20
 801144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801144e:	46dc      	mov	ip, fp
 8011450:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011454:	f8ad c00c 	strh.w	ip, [sp, #12]
 8011458:	46f3      	mov	fp, lr
 801145a:	fa5f fc8c 	uxtb.w	ip, ip
 801145e:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8011462:	2b01      	cmp	r3, #1
 8011464:	f04f 0900 	mov.w	r9, #0
 8011468:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 801146c:	d930      	bls.n	80114d0 <uxr_write_framed_msg+0x214>
 801146e:	2a29      	cmp	r2, #41	@ 0x29
 8011470:	d91c      	bls.n	80114ac <uxr_write_framed_msg+0x1f0>
 8011472:	2500      	movs	r5, #0
 8011474:	e001      	b.n	801147a <uxr_write_framed_msg+0x1be>
 8011476:	2800      	cmp	r0, #0
 8011478:	d0e5      	beq.n	8011446 <uxr_write_framed_msg+0x18a>
 801147a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801147e:	1b52      	subs	r2, r2, r5
 8011480:	4643      	mov	r3, r8
 8011482:	4421      	add	r1, r4
 8011484:	4638      	mov	r0, r7
 8011486:	47b0      	blx	r6
 8011488:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801148c:	4405      	add	r5, r0
 801148e:	4295      	cmp	r5, r2
 8011490:	d3f1      	bcc.n	8011476 <uxr_write_framed_msg+0x1ba>
 8011492:	d1d8      	bne.n	8011446 <uxr_write_framed_msg+0x18a>
 8011494:	f109 0310 	add.w	r3, r9, #16
 8011498:	446b      	add	r3, sp
 801149a:	2200      	movs	r2, #0
 801149c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 80114a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114a4:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d911      	bls.n	80114d0 <uxr_write_framed_msg+0x214>
 80114ac:	18a3      	adds	r3, r4, r2
 80114ae:	3201      	adds	r2, #1
 80114b0:	b2d2      	uxtb	r2, r2
 80114b2:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80114b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114ba:	f1b9 0f00 	cmp.w	r9, #0
 80114be:	d119      	bne.n	80114f4 <uxr_write_framed_msg+0x238>
 80114c0:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80114c4:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80114c8:	2b01      	cmp	r3, #1
 80114ca:	f04f 0901 	mov.w	r9, #1
 80114ce:	d8ce      	bhi.n	801146e <uxr_write_framed_msg+0x1b2>
 80114d0:	1c53      	adds	r3, r2, #1
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	2b29      	cmp	r3, #41	@ 0x29
 80114d6:	d8cc      	bhi.n	8011472 <uxr_write_framed_msg+0x1b6>
 80114d8:	18a3      	adds	r3, r4, r2
 80114da:	3202      	adds	r2, #2
 80114dc:	f08c 0c20 	eor.w	ip, ip, #32
 80114e0:	b2d2      	uxtb	r2, r2
 80114e2:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 80114e6:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 80114ea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114ee:	f1b9 0f00 	cmp.w	r9, #0
 80114f2:	d0e5      	beq.n	80114c0 <uxr_write_framed_msg+0x204>
 80114f4:	2500      	movs	r5, #0
 80114f6:	e001      	b.n	80114fc <uxr_write_framed_msg+0x240>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d0a4      	beq.n	8011446 <uxr_write_framed_msg+0x18a>
 80114fc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011500:	1b52      	subs	r2, r2, r5
 8011502:	4643      	mov	r3, r8
 8011504:	4421      	add	r1, r4
 8011506:	4638      	mov	r0, r7
 8011508:	47b0      	blx	r6
 801150a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801150e:	4405      	add	r5, r0
 8011510:	4295      	cmp	r5, r2
 8011512:	d3f1      	bcc.n	80114f8 <uxr_write_framed_msg+0x23c>
 8011514:	d197      	bne.n	8011446 <uxr_write_framed_msg+0x18a>
 8011516:	2300      	movs	r3, #0
 8011518:	fa1f f08b 	uxth.w	r0, fp
 801151c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011520:	b005      	add	sp, #20
 8011522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011526:	2300      	movs	r3, #0
 8011528:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801152c:	e732      	b.n	8011394 <uxr_write_framed_msg+0xd8>
 801152e:	44a6      	add	lr, r4
 8011530:	f085 0520 	eor.w	r5, r5, #32
 8011534:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011538:	4610      	mov	r0, r2
 801153a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801153e:	464a      	mov	r2, r9
 8011540:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8011544:	e6e5      	b.n	8011312 <uxr_write_framed_msg+0x56>
 8011546:	f08c 0c20 	eor.w	ip, ip, #32
 801154a:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801154e:	2103      	movs	r1, #3
 8011550:	2004      	movs	r0, #4
 8011552:	f04f 0906 	mov.w	r9, #6
 8011556:	2205      	movs	r2, #5
 8011558:	4686      	mov	lr, r0
 801155a:	460b      	mov	r3, r1
 801155c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011560:	e6ca      	b.n	80112f8 <uxr_write_framed_msg+0x3c>
 8011562:	f8ad b00c 	strh.w	fp, [sp, #12]
 8011566:	46dc      	mov	ip, fp
 8011568:	e779      	b.n	801145e <uxr_write_framed_msg+0x1a2>
 801156a:	bf00      	nop
 801156c:	0802186c 	.word	0x0802186c

08011570 <uxr_framing_read_transport>:
 8011570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011574:	4604      	mov	r4, r0
 8011576:	b083      	sub	sp, #12
 8011578:	461f      	mov	r7, r3
 801157a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801157e:	4689      	mov	r9, r1
 8011580:	4692      	mov	sl, r2
 8011582:	f000 fc5d 	bl	8011e40 <uxr_millis>
 8011586:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801158a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801158e:	42b3      	cmp	r3, r6
 8011590:	4680      	mov	r8, r0
 8011592:	d062      	beq.n	801165a <uxr_framing_read_transport+0xea>
 8011594:	d81c      	bhi.n	80115d0 <uxr_framing_read_transport+0x60>
 8011596:	1e75      	subs	r5, r6, #1
 8011598:	1aed      	subs	r5, r5, r3
 801159a:	b2ed      	uxtb	r5, r5
 801159c:	2600      	movs	r6, #0
 801159e:	455d      	cmp	r5, fp
 80115a0:	d81f      	bhi.n	80115e2 <uxr_framing_read_transport+0x72>
 80115a2:	19ab      	adds	r3, r5, r6
 80115a4:	455b      	cmp	r3, fp
 80115a6:	bf84      	itt	hi
 80115a8:	ebab 0b05 	subhi.w	fp, fp, r5
 80115ac:	fa5f f68b 	uxtbhi.w	r6, fp
 80115b0:	b9e5      	cbnz	r5, 80115ec <uxr_framing_read_transport+0x7c>
 80115b2:	f04f 0b00 	mov.w	fp, #0
 80115b6:	f000 fc43 	bl	8011e40 <uxr_millis>
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	eba0 0108 	sub.w	r1, r0, r8
 80115c0:	1a5b      	subs	r3, r3, r1
 80115c2:	4658      	mov	r0, fp
 80115c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80115c8:	603b      	str	r3, [r7, #0]
 80115ca:	b003      	add	sp, #12
 80115cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d0:	2e00      	cmp	r6, #0
 80115d2:	d04a      	beq.n	801166a <uxr_framing_read_transport+0xfa>
 80115d4:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80115d8:	b2dd      	uxtb	r5, r3
 80115da:	3e01      	subs	r6, #1
 80115dc:	455d      	cmp	r5, fp
 80115de:	b2f6      	uxtb	r6, r6
 80115e0:	d9df      	bls.n	80115a2 <uxr_framing_read_transport+0x32>
 80115e2:	fa5f f58b 	uxtb.w	r5, fp
 80115e6:	2600      	movs	r6, #0
 80115e8:	2d00      	cmp	r5, #0
 80115ea:	d0e2      	beq.n	80115b2 <uxr_framing_read_transport+0x42>
 80115ec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80115f0:	3102      	adds	r1, #2
 80115f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115f4:	9300      	str	r3, [sp, #0]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	4421      	add	r1, r4
 80115fa:	462a      	mov	r2, r5
 80115fc:	4650      	mov	r0, sl
 80115fe:	47c8      	blx	r9
 8011600:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011604:	4a1b      	ldr	r2, [pc, #108]	@ (8011674 <uxr_framing_read_transport+0x104>)
 8011606:	4403      	add	r3, r0
 8011608:	0859      	lsrs	r1, r3, #1
 801160a:	4683      	mov	fp, r0
 801160c:	fba2 0101 	umull	r0, r1, r2, r1
 8011610:	0889      	lsrs	r1, r1, #2
 8011612:	222a      	movs	r2, #42	@ 0x2a
 8011614:	fb02 3111 	mls	r1, r2, r1, r3
 8011618:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801161c:	f1bb 0f00 	cmp.w	fp, #0
 8011620:	d0c7      	beq.n	80115b2 <uxr_framing_read_transport+0x42>
 8011622:	45ab      	cmp	fp, r5
 8011624:	d1c7      	bne.n	80115b6 <uxr_framing_read_transport+0x46>
 8011626:	2e00      	cmp	r6, #0
 8011628:	d0c5      	beq.n	80115b6 <uxr_framing_read_transport+0x46>
 801162a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	3102      	adds	r1, #2
 8011630:	4632      	mov	r2, r6
 8011632:	4421      	add	r1, r4
 8011634:	2300      	movs	r3, #0
 8011636:	4650      	mov	r0, sl
 8011638:	47c8      	blx	r9
 801163a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801163e:	4a0d      	ldr	r2, [pc, #52]	@ (8011674 <uxr_framing_read_transport+0x104>)
 8011640:	4403      	add	r3, r0
 8011642:	0859      	lsrs	r1, r3, #1
 8011644:	fba2 2101 	umull	r2, r1, r2, r1
 8011648:	0889      	lsrs	r1, r1, #2
 801164a:	222a      	movs	r2, #42	@ 0x2a
 801164c:	fb02 3311 	mls	r3, r2, r1, r3
 8011650:	eb00 0b05 	add.w	fp, r0, r5
 8011654:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011658:	e7ad      	b.n	80115b6 <uxr_framing_read_transport+0x46>
 801165a:	2600      	movs	r6, #0
 801165c:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011660:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011662:	d9be      	bls.n	80115e2 <uxr_framing_read_transport+0x72>
 8011664:	2529      	movs	r5, #41	@ 0x29
 8011666:	2102      	movs	r1, #2
 8011668:	e7c3      	b.n	80115f2 <uxr_framing_read_transport+0x82>
 801166a:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 801166e:	b2dd      	uxtb	r5, r3
 8011670:	e795      	b.n	801159e <uxr_framing_read_transport+0x2e>
 8011672:	bf00      	nop
 8011674:	30c30c31 	.word	0x30c30c31

08011678 <uxr_read_framed_msg>:
 8011678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	461d      	mov	r5, r3
 801167e:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8011682:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011686:	b085      	sub	sp, #20
 8011688:	459c      	cmp	ip, r3
 801168a:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 801168e:	4604      	mov	r4, r0
 8011690:	460f      	mov	r7, r1
 8011692:	4616      	mov	r6, r2
 8011694:	f000 81ae 	beq.w	80119f4 <uxr_read_framed_msg+0x37c>
 8011698:	2000      	movs	r0, #0
 801169a:	4639      	mov	r1, r7
 801169c:	2800      	cmp	r0, #0
 801169e:	d138      	bne.n	8011712 <uxr_read_framed_msg+0x9a>
 80116a0:	468a      	mov	sl, r1
 80116a2:	7823      	ldrb	r3, [r4, #0]
 80116a4:	2b07      	cmp	r3, #7
 80116a6:	d8fd      	bhi.n	80116a4 <uxr_read_framed_msg+0x2c>
 80116a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80116ac:	0116013b 	.word	0x0116013b
 80116b0:	00cd00f0 	.word	0x00cd00f0
 80116b4:	005a00a0 	.word	0x005a00a0
 80116b8:	00080037 	.word	0x00080037
 80116bc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80116c0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80116c4:	4290      	cmp	r0, r2
 80116c6:	f000 8167 	beq.w	8011998 <uxr_read_framed_msg+0x320>
 80116ca:	18a3      	adds	r3, r4, r2
 80116cc:	1c57      	adds	r7, r2, #1
 80116ce:	49c7      	ldr	r1, [pc, #796]	@ (80119ec <uxr_read_framed_msg+0x374>)
 80116d0:	f893 c002 	ldrb.w	ip, [r3, #2]
 80116d4:	087b      	lsrs	r3, r7, #1
 80116d6:	fba1 8303 	umull	r8, r3, r1, r3
 80116da:	089b      	lsrs	r3, r3, #2
 80116dc:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80116e0:	fb08 7313 	mls	r3, r8, r3, r7
 80116e4:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80116e8:	b2df      	uxtb	r7, r3
 80116ea:	f000 81b2 	beq.w	8011a52 <uxr_read_framed_msg+0x3da>
 80116ee:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80116f2:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 80116f6:	f000 8220 	beq.w	8011b3a <uxr_read_framed_msg+0x4c2>
 80116fa:	4661      	mov	r1, ip
 80116fc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80116fe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011700:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011704:	b29b      	uxth	r3, r3
 8011706:	2100      	movs	r1, #0
 8011708:	429a      	cmp	r2, r3
 801170a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801170c:	7021      	strb	r1, [r4, #0]
 801170e:	f000 8198 	beq.w	8011a42 <uxr_read_framed_msg+0x3ca>
 8011712:	2000      	movs	r0, #0
 8011714:	b005      	add	sp, #20
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801171e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011722:	4297      	cmp	r7, r2
 8011724:	f000 8148 	beq.w	80119b8 <uxr_read_framed_msg+0x340>
 8011728:	18a3      	adds	r3, r4, r2
 801172a:	f102 0c01 	add.w	ip, r2, #1
 801172e:	49af      	ldr	r1, [pc, #700]	@ (80119ec <uxr_read_framed_msg+0x374>)
 8011730:	7898      	ldrb	r0, [r3, #2]
 8011732:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011736:	fba1 8303 	umull	r8, r3, r1, r3
 801173a:	089b      	lsrs	r3, r3, #2
 801173c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011740:	fb08 c313 	mls	r3, r8, r3, ip
 8011744:	287d      	cmp	r0, #125	@ 0x7d
 8011746:	fa5f fc83 	uxtb.w	ip, r3
 801174a:	f000 8194 	beq.w	8011a76 <uxr_read_framed_msg+0x3fe>
 801174e:	287e      	cmp	r0, #126	@ 0x7e
 8011750:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011754:	f000 8200 	beq.w	8011b58 <uxr_read_framed_msg+0x4e0>
 8011758:	2307      	movs	r3, #7
 801175a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801175c:	7023      	strb	r3, [r4, #0]
 801175e:	e7a0      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 8011760:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011762:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8011764:	429f      	cmp	r7, r3
 8011766:	f240 8164 	bls.w	8011a32 <uxr_read_framed_msg+0x3ba>
 801176a:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 80119ec <uxr_read_framed_msg+0x374>
 801176e:	f8cd a00c 	str.w	sl, [sp, #12]
 8011772:	212a      	movs	r1, #42	@ 0x2a
 8011774:	e01f      	b.n	80117b6 <uxr_read_framed_msg+0x13e>
 8011776:	f89a e002 	ldrb.w	lr, [sl, #2]
 801177a:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801177e:	f000 80ea 	beq.w	8011956 <uxr_read_framed_msg+0x2de>
 8011782:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011786:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801178a:	f000 8142 	beq.w	8011a12 <uxr_read_framed_msg+0x39a>
 801178e:	f805 e003 	strb.w	lr, [r5, r3]
 8011792:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8011794:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011796:	4f96      	ldr	r7, [pc, #600]	@ (80119f0 <uxr_read_framed_msg+0x378>)
 8011798:	ea80 020e 	eor.w	r2, r0, lr
 801179c:	b2d2      	uxtb	r2, r2
 801179e:	3301      	adds	r3, #1
 80117a0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80117a4:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80117ac:	42bb      	cmp	r3, r7
 80117ae:	8663      	strh	r3, [r4, #50]	@ 0x32
 80117b0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80117b2:	f080 80e7 	bcs.w	8011984 <uxr_read_framed_msg+0x30c>
 80117b6:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80117ba:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80117be:	f100 0c01 	add.w	ip, r0, #1
 80117c2:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 80117c6:	fba9 e20e 	umull	lr, r2, r9, lr
 80117ca:	0892      	lsrs	r2, r2, #2
 80117cc:	fb01 c212 	mls	r2, r1, r2, ip
 80117d0:	4580      	cmp	r8, r0
 80117d2:	eb04 0a00 	add.w	sl, r4, r0
 80117d6:	fa5f fc82 	uxtb.w	ip, r2
 80117da:	d1cc      	bne.n	8011776 <uxr_read_framed_msg+0xfe>
 80117dc:	42bb      	cmp	r3, r7
 80117de:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80117e2:	f040 8128 	bne.w	8011a36 <uxr_read_framed_msg+0x3be>
 80117e6:	2306      	movs	r3, #6
 80117e8:	7023      	strb	r3, [r4, #0]
 80117ea:	e75a      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 80117ec:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80117f0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80117f4:	4297      	cmp	r7, r2
 80117f6:	f000 80cf 	beq.w	8011998 <uxr_read_framed_msg+0x320>
 80117fa:	18a3      	adds	r3, r4, r2
 80117fc:	f102 0c01 	add.w	ip, r2, #1
 8011800:	497a      	ldr	r1, [pc, #488]	@ (80119ec <uxr_read_framed_msg+0x374>)
 8011802:	7898      	ldrb	r0, [r3, #2]
 8011804:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011808:	fba1 8303 	umull	r8, r3, r1, r3
 801180c:	089b      	lsrs	r3, r3, #2
 801180e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011812:	fb08 c313 	mls	r3, r8, r3, ip
 8011816:	287d      	cmp	r0, #125	@ 0x7d
 8011818:	fa5f fc83 	uxtb.w	ip, r3
 801181c:	f000 813d 	beq.w	8011a9a <uxr_read_framed_msg+0x422>
 8011820:	287e      	cmp	r0, #126	@ 0x7e
 8011822:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011826:	f000 8188 	beq.w	8011b3a <uxr_read_framed_msg+0x4c2>
 801182a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801182c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801182e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8011832:	b29b      	uxth	r3, r3
 8011834:	2200      	movs	r2, #0
 8011836:	428b      	cmp	r3, r1
 8011838:	8623      	strh	r3, [r4, #48]	@ 0x30
 801183a:	8662      	strh	r2, [r4, #50]	@ 0x32
 801183c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801183e:	f240 80f5 	bls.w	8011a2c <uxr_read_framed_msg+0x3b4>
 8011842:	7022      	strb	r2, [r4, #0]
 8011844:	e765      	b.n	8011712 <uxr_read_framed_msg+0x9a>
 8011846:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801184a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801184e:	4297      	cmp	r7, r2
 8011850:	f000 80b2 	beq.w	80119b8 <uxr_read_framed_msg+0x340>
 8011854:	18a3      	adds	r3, r4, r2
 8011856:	f102 0c01 	add.w	ip, r2, #1
 801185a:	4964      	ldr	r1, [pc, #400]	@ (80119ec <uxr_read_framed_msg+0x374>)
 801185c:	7898      	ldrb	r0, [r3, #2]
 801185e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011862:	fba1 8303 	umull	r8, r3, r1, r3
 8011866:	089b      	lsrs	r3, r3, #2
 8011868:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801186c:	fb08 c313 	mls	r3, r8, r3, ip
 8011870:	287d      	cmp	r0, #125	@ 0x7d
 8011872:	fa5f fc83 	uxtb.w	ip, r3
 8011876:	f000 813b 	beq.w	8011af0 <uxr_read_framed_msg+0x478>
 801187a:	287e      	cmp	r0, #126	@ 0x7e
 801187c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011880:	f000 816a 	beq.w	8011b58 <uxr_read_framed_msg+0x4e0>
 8011884:	2304      	movs	r3, #4
 8011886:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011888:	7023      	strb	r3, [r4, #0]
 801188a:	e70a      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 801188c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8011890:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011894:	4297      	cmp	r7, r2
 8011896:	f000 80c4 	beq.w	8011a22 <uxr_read_framed_msg+0x3aa>
 801189a:	18a3      	adds	r3, r4, r2
 801189c:	f102 0c01 	add.w	ip, r2, #1
 80118a0:	4952      	ldr	r1, [pc, #328]	@ (80119ec <uxr_read_framed_msg+0x374>)
 80118a2:	7898      	ldrb	r0, [r3, #2]
 80118a4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80118a8:	fba1 8303 	umull	r8, r3, r1, r3
 80118ac:	089b      	lsrs	r3, r3, #2
 80118ae:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80118b2:	fb08 c313 	mls	r3, r8, r3, ip
 80118b6:	287d      	cmp	r0, #125	@ 0x7d
 80118b8:	fa5f fc83 	uxtb.w	ip, r3
 80118bc:	f000 812b 	beq.w	8011b16 <uxr_read_framed_msg+0x49e>
 80118c0:	287e      	cmp	r0, #126	@ 0x7e
 80118c2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80118c6:	f000 8155 	beq.w	8011b74 <uxr_read_framed_msg+0x4fc>
 80118ca:	7863      	ldrb	r3, [r4, #1]
 80118cc:	4283      	cmp	r3, r0
 80118ce:	bf0c      	ite	eq
 80118d0:	2303      	moveq	r3, #3
 80118d2:	2300      	movne	r3, #0
 80118d4:	7023      	strb	r3, [r4, #0]
 80118d6:	e6e4      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 80118d8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80118dc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80118e0:	2300      	movs	r3, #0
 80118e2:	4290      	cmp	r0, r2
 80118e4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 80118e8:	d06b      	beq.n	80119c2 <uxr_read_framed_msg+0x34a>
 80118ea:	18a3      	adds	r3, r4, r2
 80118ec:	f102 0c01 	add.w	ip, r2, #1
 80118f0:	493e      	ldr	r1, [pc, #248]	@ (80119ec <uxr_read_framed_msg+0x374>)
 80118f2:	789f      	ldrb	r7, [r3, #2]
 80118f4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80118f8:	fba1 8303 	umull	r8, r3, r1, r3
 80118fc:	089b      	lsrs	r3, r3, #2
 80118fe:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011902:	fb08 c313 	mls	r3, r8, r3, ip
 8011906:	2f7d      	cmp	r7, #125	@ 0x7d
 8011908:	fa5f fc83 	uxtb.w	ip, r3
 801190c:	f000 80d8 	beq.w	8011ac0 <uxr_read_framed_msg+0x448>
 8011910:	2f7e      	cmp	r7, #126	@ 0x7e
 8011912:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011916:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 801191a:	d052      	beq.n	80119c2 <uxr_read_framed_msg+0x34a>
 801191c:	2302      	movs	r3, #2
 801191e:	7023      	strb	r3, [r4, #0]
 8011920:	e6bf      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 8011922:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8011926:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801192a:	4930      	ldr	r1, [pc, #192]	@ (80119ec <uxr_read_framed_msg+0x374>)
 801192c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011930:	e004      	b.n	801193c <uxr_read_framed_msg+0x2c4>
 8011932:	78bb      	ldrb	r3, [r7, #2]
 8011934:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011938:	2b7e      	cmp	r3, #126	@ 0x7e
 801193a:	d02a      	beq.n	8011992 <uxr_read_framed_msg+0x31a>
 801193c:	1c50      	adds	r0, r2, #1
 801193e:	0843      	lsrs	r3, r0, #1
 8011940:	fba1 e303 	umull	lr, r3, r1, r3
 8011944:	089b      	lsrs	r3, r3, #2
 8011946:	fb0c 0013 	mls	r0, ip, r3, r0
 801194a:	4590      	cmp	r8, r2
 801194c:	eb04 0702 	add.w	r7, r4, r2
 8011950:	b2c2      	uxtb	r2, r0
 8011952:	d1ee      	bne.n	8011932 <uxr_read_framed_msg+0x2ba>
 8011954:	e6dd      	b.n	8011712 <uxr_read_framed_msg+0x9a>
 8011956:	3002      	adds	r0, #2
 8011958:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801195c:	eb04 0a02 	add.w	sl, r4, r2
 8011960:	fba9 e20e 	umull	lr, r2, r9, lr
 8011964:	0892      	lsrs	r2, r2, #2
 8011966:	45e0      	cmp	r8, ip
 8011968:	fb01 0012 	mls	r0, r1, r2, r0
 801196c:	f43f af36 	beq.w	80117dc <uxr_read_framed_msg+0x164>
 8011970:	f89a e002 	ldrb.w	lr, [sl, #2]
 8011974:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011978:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801197c:	d049      	beq.n	8011a12 <uxr_read_framed_msg+0x39a>
 801197e:	f08e 0e20 	eor.w	lr, lr, #32
 8011982:	e704      	b.n	801178e <uxr_read_framed_msg+0x116>
 8011984:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8011988:	f43f af2d 	beq.w	80117e6 <uxr_read_framed_msg+0x16e>
 801198c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011990:	d151      	bne.n	8011a36 <uxr_read_framed_msg+0x3be>
 8011992:	2301      	movs	r3, #1
 8011994:	7023      	strb	r3, [r4, #0]
 8011996:	e684      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 8011998:	4651      	mov	r1, sl
 801199a:	f8cd b000 	str.w	fp, [sp]
 801199e:	2301      	movs	r3, #1
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80119a4:	9103      	str	r1, [sp, #12]
 80119a6:	4632      	mov	r2, r6
 80119a8:	4620      	mov	r0, r4
 80119aa:	f7ff fde1 	bl	8011570 <uxr_framing_read_transport>
 80119ae:	fab0 f080 	clz	r0, r0
 80119b2:	9903      	ldr	r1, [sp, #12]
 80119b4:	0940      	lsrs	r0, r0, #5
 80119b6:	e671      	b.n	801169c <uxr_read_framed_msg+0x24>
 80119b8:	4651      	mov	r1, sl
 80119ba:	f8cd b000 	str.w	fp, [sp]
 80119be:	2302      	movs	r3, #2
 80119c0:	e7ee      	b.n	80119a0 <uxr_read_framed_msg+0x328>
 80119c2:	2304      	movs	r3, #4
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	f8cd b000 	str.w	fp, [sp]
 80119ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80119cc:	4632      	mov	r2, r6
 80119ce:	4651      	mov	r1, sl
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7ff fdcd 	bl	8011570 <uxr_framing_read_transport>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f47f ae63 	bne.w	80116a2 <uxr_read_framed_msg+0x2a>
 80119dc:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 80119e0:	387e      	subs	r0, #126	@ 0x7e
 80119e2:	4651      	mov	r1, sl
 80119e4:	bf18      	it	ne
 80119e6:	2001      	movne	r0, #1
 80119e8:	e658      	b.n	801169c <uxr_read_framed_msg+0x24>
 80119ea:	bf00      	nop
 80119ec:	30c30c31 	.word	0x30c30c31
 80119f0:	0802186c 	.word	0x0802186c
 80119f4:	2305      	movs	r3, #5
 80119f6:	9301      	str	r3, [sp, #4]
 80119f8:	f8cd b000 	str.w	fp, [sp]
 80119fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80119fe:	f7ff fdb7 	bl	8011570 <uxr_framing_read_transport>
 8011a02:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8011a06:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	f43f ae81 	beq.w	8011712 <uxr_read_framed_msg+0x9a>
 8011a10:	e642      	b.n	8011698 <uxr_read_framed_msg+0x20>
 8011a12:	42bb      	cmp	r3, r7
 8011a14:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8011a18:	f43f aee5 	beq.w	80117e6 <uxr_read_framed_msg+0x16e>
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	7023      	strb	r3, [r4, #0]
 8011a20:	e63f      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 8011a22:	4651      	mov	r1, sl
 8011a24:	f8cd b000 	str.w	fp, [sp]
 8011a28:	2303      	movs	r3, #3
 8011a2a:	e7b9      	b.n	80119a0 <uxr_read_framed_msg+0x328>
 8011a2c:	2305      	movs	r3, #5
 8011a2e:	7023      	strb	r3, [r4, #0]
 8011a30:	e637      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 8011a32:	f43f aed8 	beq.w	80117e6 <uxr_read_framed_msg+0x16e>
 8011a36:	1afb      	subs	r3, r7, r3
 8011a38:	3302      	adds	r3, #2
 8011a3a:	e9cd b300 	strd	fp, r3, [sp]
 8011a3e:	4651      	mov	r1, sl
 8011a40:	e7af      	b.n	80119a2 <uxr_read_framed_msg+0x32a>
 8011a42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011a44:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011a48:	7013      	strb	r3, [r2, #0]
 8011a4a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011a4c:	b005      	add	sp, #20
 8011a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a52:	4287      	cmp	r7, r0
 8011a54:	d0a0      	beq.n	8011998 <uxr_read_framed_msg+0x320>
 8011a56:	4423      	add	r3, r4
 8011a58:	3202      	adds	r2, #2
 8011a5a:	7898      	ldrb	r0, [r3, #2]
 8011a5c:	0853      	lsrs	r3, r2, #1
 8011a5e:	fba1 e303 	umull	lr, r3, r1, r3
 8011a62:	089b      	lsrs	r3, r3, #2
 8011a64:	fb08 2213 	mls	r2, r8, r3, r2
 8011a68:	287e      	cmp	r0, #126	@ 0x7e
 8011a6a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a6e:	d064      	beq.n	8011b3a <uxr_read_framed_msg+0x4c2>
 8011a70:	f080 0120 	eor.w	r1, r0, #32
 8011a74:	e642      	b.n	80116fc <uxr_read_framed_msg+0x84>
 8011a76:	45bc      	cmp	ip, r7
 8011a78:	d09e      	beq.n	80119b8 <uxr_read_framed_msg+0x340>
 8011a7a:	4423      	add	r3, r4
 8011a7c:	3202      	adds	r2, #2
 8011a7e:	7898      	ldrb	r0, [r3, #2]
 8011a80:	0853      	lsrs	r3, r2, #1
 8011a82:	fba1 e303 	umull	lr, r3, r1, r3
 8011a86:	089b      	lsrs	r3, r3, #2
 8011a88:	fb08 2213 	mls	r2, r8, r3, r2
 8011a8c:	287e      	cmp	r0, #126	@ 0x7e
 8011a8e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a92:	d061      	beq.n	8011b58 <uxr_read_framed_msg+0x4e0>
 8011a94:	f080 0020 	eor.w	r0, r0, #32
 8011a98:	e65e      	b.n	8011758 <uxr_read_framed_msg+0xe0>
 8011a9a:	4567      	cmp	r7, ip
 8011a9c:	f43f af7c 	beq.w	8011998 <uxr_read_framed_msg+0x320>
 8011aa0:	4423      	add	r3, r4
 8011aa2:	3202      	adds	r2, #2
 8011aa4:	7898      	ldrb	r0, [r3, #2]
 8011aa6:	0853      	lsrs	r3, r2, #1
 8011aa8:	fba1 e303 	umull	lr, r3, r1, r3
 8011aac:	089b      	lsrs	r3, r3, #2
 8011aae:	fb08 2213 	mls	r2, r8, r3, r2
 8011ab2:	287e      	cmp	r0, #126	@ 0x7e
 8011ab4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011ab8:	d03f      	beq.n	8011b3a <uxr_read_framed_msg+0x4c2>
 8011aba:	f080 0020 	eor.w	r0, r0, #32
 8011abe:	e6b4      	b.n	801182a <uxr_read_framed_msg+0x1b2>
 8011ac0:	4560      	cmp	r0, ip
 8011ac2:	f43f af7e 	beq.w	80119c2 <uxr_read_framed_msg+0x34a>
 8011ac6:	4423      	add	r3, r4
 8011ac8:	3202      	adds	r2, #2
 8011aca:	7898      	ldrb	r0, [r3, #2]
 8011acc:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011ad0:	0853      	lsrs	r3, r2, #1
 8011ad2:	fba1 e303 	umull	lr, r3, r1, r3
 8011ad6:	089b      	lsrs	r3, r3, #2
 8011ad8:	fb08 2213 	mls	r2, r8, r3, r2
 8011adc:	287e      	cmp	r0, #126	@ 0x7e
 8011ade:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011ae2:	f43f af6e 	beq.w	80119c2 <uxr_read_framed_msg+0x34a>
 8011ae6:	f080 0020 	eor.w	r0, r0, #32
 8011aea:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011aee:	e715      	b.n	801191c <uxr_read_framed_msg+0x2a4>
 8011af0:	4567      	cmp	r7, ip
 8011af2:	f43f af61 	beq.w	80119b8 <uxr_read_framed_msg+0x340>
 8011af6:	4423      	add	r3, r4
 8011af8:	3202      	adds	r2, #2
 8011afa:	7898      	ldrb	r0, [r3, #2]
 8011afc:	0853      	lsrs	r3, r2, #1
 8011afe:	fba1 e303 	umull	lr, r3, r1, r3
 8011b02:	089b      	lsrs	r3, r3, #2
 8011b04:	fb08 2213 	mls	r2, r8, r3, r2
 8011b08:	287e      	cmp	r0, #126	@ 0x7e
 8011b0a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011b0e:	d023      	beq.n	8011b58 <uxr_read_framed_msg+0x4e0>
 8011b10:	f080 0020 	eor.w	r0, r0, #32
 8011b14:	e6b6      	b.n	8011884 <uxr_read_framed_msg+0x20c>
 8011b16:	45bc      	cmp	ip, r7
 8011b18:	d083      	beq.n	8011a22 <uxr_read_framed_msg+0x3aa>
 8011b1a:	4423      	add	r3, r4
 8011b1c:	3202      	adds	r2, #2
 8011b1e:	7898      	ldrb	r0, [r3, #2]
 8011b20:	0853      	lsrs	r3, r2, #1
 8011b22:	fba1 e303 	umull	lr, r3, r1, r3
 8011b26:	089b      	lsrs	r3, r3, #2
 8011b28:	fb08 2213 	mls	r2, r8, r3, r2
 8011b2c:	287e      	cmp	r0, #126	@ 0x7e
 8011b2e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011b32:	d01f      	beq.n	8011b74 <uxr_read_framed_msg+0x4fc>
 8011b34:	f080 0020 	eor.w	r0, r0, #32
 8011b38:	e6c7      	b.n	80118ca <uxr_read_framed_msg+0x252>
 8011b3a:	2701      	movs	r7, #1
 8011b3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011b3e:	f8cd b000 	str.w	fp, [sp]
 8011b42:	9701      	str	r7, [sp, #4]
 8011b44:	4632      	mov	r2, r6
 8011b46:	4651      	mov	r1, sl
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f7ff fd11 	bl	8011570 <uxr_framing_read_transport>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	f47f ada7 	bne.w	80116a2 <uxr_read_framed_msg+0x2a>
 8011b54:	7027      	strb	r7, [r4, #0]
 8011b56:	e5a4      	b.n	80116a2 <uxr_read_framed_msg+0x2a>
 8011b58:	f8cd b000 	str.w	fp, [sp]
 8011b5c:	2302      	movs	r3, #2
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	4632      	mov	r2, r6
 8011b62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011b64:	4651      	mov	r1, sl
 8011b66:	4620      	mov	r0, r4
 8011b68:	f7ff fd02 	bl	8011570 <uxr_framing_read_transport>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	f47f ad98 	bne.w	80116a2 <uxr_read_framed_msg+0x2a>
 8011b72:	e70e      	b.n	8011992 <uxr_read_framed_msg+0x31a>
 8011b74:	f8cd b000 	str.w	fp, [sp]
 8011b78:	2303      	movs	r3, #3
 8011b7a:	e7f0      	b.n	8011b5e <uxr_read_framed_msg+0x4e6>

08011b7c <uxr_stream_id>:
 8011b7c:	2901      	cmp	r1, #1
 8011b7e:	b082      	sub	sp, #8
 8011b80:	4603      	mov	r3, r0
 8011b82:	d011      	beq.n	8011ba8 <uxr_stream_id+0x2c>
 8011b84:	2902      	cmp	r1, #2
 8011b86:	f04f 0c00 	mov.w	ip, #0
 8011b8a:	d00a      	beq.n	8011ba2 <uxr_stream_id+0x26>
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	f36c 0007 	bfi	r0, ip, #0, #8
 8011b92:	f363 200f 	bfi	r0, r3, #8, #8
 8011b96:	f361 4017 	bfi	r0, r1, #16, #8
 8011b9a:	f362 601f 	bfi	r0, r2, #24, #8
 8011b9e:	b002      	add	sp, #8
 8011ba0:	4770      	bx	lr
 8011ba2:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011ba6:	e7f1      	b.n	8011b8c <uxr_stream_id+0x10>
 8011ba8:	f100 0c01 	add.w	ip, r0, #1
 8011bac:	fa5f fc8c 	uxtb.w	ip, ip
 8011bb0:	e7ec      	b.n	8011b8c <uxr_stream_id+0x10>
 8011bb2:	bf00      	nop

08011bb4 <uxr_stream_id_from_raw>:
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	b130      	cbz	r0, 8011bc8 <uxr_stream_id_from_raw+0x14>
 8011bba:	0602      	lsls	r2, r0, #24
 8011bbc:	d411      	bmi.n	8011be2 <uxr_stream_id_from_raw+0x2e>
 8011bbe:	1e42      	subs	r2, r0, #1
 8011bc0:	b2d2      	uxtb	r2, r2
 8011bc2:	f04f 0c01 	mov.w	ip, #1
 8011bc6:	e001      	b.n	8011bcc <uxr_stream_id_from_raw+0x18>
 8011bc8:	4684      	mov	ip, r0
 8011bca:	4602      	mov	r2, r0
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f363 0007 	bfi	r0, r3, #0, #8
 8011bd2:	f362 200f 	bfi	r0, r2, #8, #8
 8011bd6:	f36c 4017 	bfi	r0, ip, #16, #8
 8011bda:	f361 601f 	bfi	r0, r1, #24, #8
 8011bde:	b002      	add	sp, #8
 8011be0:	4770      	bx	lr
 8011be2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011be6:	f04f 0c02 	mov.w	ip, #2
 8011bea:	e7ef      	b.n	8011bcc <uxr_stream_id_from_raw+0x18>

08011bec <uxr_init_stream_storage>:
 8011bec:	2300      	movs	r3, #0
 8011bee:	7403      	strb	r3, [r0, #16]
 8011bf0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011bf4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011bf8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011bfc:	4770      	bx	lr
 8011bfe:	bf00      	nop

08011c00 <uxr_reset_stream_storage>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	7c03      	ldrb	r3, [r0, #16]
 8011c04:	4604      	mov	r4, r0
 8011c06:	b153      	cbz	r3, 8011c1e <uxr_reset_stream_storage+0x1e>
 8011c08:	4606      	mov	r6, r0
 8011c0a:	2500      	movs	r5, #0
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f007 faa9 	bl	8019164 <uxr_reset_output_best_effort_stream>
 8011c12:	7c23      	ldrb	r3, [r4, #16]
 8011c14:	3501      	adds	r5, #1
 8011c16:	42ab      	cmp	r3, r5
 8011c18:	f106 0610 	add.w	r6, r6, #16
 8011c1c:	d8f6      	bhi.n	8011c0c <uxr_reset_stream_storage+0xc>
 8011c1e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c22:	b163      	cbz	r3, 8011c3e <uxr_reset_stream_storage+0x3e>
 8011c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c28:	2500      	movs	r5, #0
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f007 f8aa 	bl	8018d84 <uxr_reset_input_best_effort_stream>
 8011c30:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c34:	3501      	adds	r5, #1
 8011c36:	42ab      	cmp	r3, r5
 8011c38:	f106 0602 	add.w	r6, r6, #2
 8011c3c:	d8f5      	bhi.n	8011c2a <uxr_reset_stream_storage+0x2a>
 8011c3e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c42:	b163      	cbz	r3, 8011c5e <uxr_reset_stream_storage+0x5e>
 8011c44:	f104 0618 	add.w	r6, r4, #24
 8011c48:	2500      	movs	r5, #0
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f007 fb34 	bl	80192b8 <uxr_reset_output_reliable_stream>
 8011c50:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011c54:	3501      	adds	r5, #1
 8011c56:	42ab      	cmp	r3, r5
 8011c58:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011c5c:	d8f5      	bhi.n	8011c4a <uxr_reset_stream_storage+0x4a>
 8011c5e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011c62:	b163      	cbz	r3, 8011c7e <uxr_reset_stream_storage+0x7e>
 8011c64:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011c68:	2500      	movs	r5, #0
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f007 f8fa 	bl	8018e64 <uxr_reset_input_reliable_stream>
 8011c70:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011c74:	3501      	adds	r5, #1
 8011c76:	42ab      	cmp	r3, r5
 8011c78:	f106 0618 	add.w	r6, r6, #24
 8011c7c:	d8f5      	bhi.n	8011c6a <uxr_reset_stream_storage+0x6a>
 8011c7e:	bd70      	pop	{r4, r5, r6, pc}

08011c80 <uxr_add_output_best_effort_buffer>:
 8011c80:	b510      	push	{r4, lr}
 8011c82:	7c04      	ldrb	r4, [r0, #16]
 8011c84:	f104 0c01 	add.w	ip, r4, #1
 8011c88:	b082      	sub	sp, #8
 8011c8a:	f880 c010 	strb.w	ip, [r0, #16]
 8011c8e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011c92:	f007 fa5d 	bl	8019150 <uxr_init_output_best_effort_stream>
 8011c96:	2201      	movs	r2, #1
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	b002      	add	sp, #8
 8011c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ca2:	f7ff bf6b 	b.w	8011b7c <uxr_stream_id>
 8011ca6:	bf00      	nop

08011ca8 <uxr_add_output_reliable_buffer>:
 8011ca8:	b510      	push	{r4, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	4684      	mov	ip, r0
 8011cae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011cb2:	9000      	str	r0, [sp, #0]
 8011cb4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011cb8:	2028      	movs	r0, #40	@ 0x28
 8011cba:	fb00 c004 	mla	r0, r0, r4, ip
 8011cbe:	f104 0e01 	add.w	lr, r4, #1
 8011cc2:	3018      	adds	r0, #24
 8011cc4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011cc8:	f007 fabe 	bl	8019248 <uxr_init_output_reliable_stream>
 8011ccc:	2201      	movs	r2, #1
 8011cce:	2102      	movs	r1, #2
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	b004      	add	sp, #16
 8011cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cd8:	f7ff bf50 	b.w	8011b7c <uxr_stream_id>

08011cdc <uxr_add_input_best_effort_buffer>:
 8011cdc:	b510      	push	{r4, lr}
 8011cde:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011ce2:	1c62      	adds	r2, r4, #1
 8011ce4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011ce8:	b082      	sub	sp, #8
 8011cea:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011cee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011cf2:	f007 f843 	bl	8018d7c <uxr_init_input_best_effort_stream>
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	b002      	add	sp, #8
 8011cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d02:	f7ff bf3b 	b.w	8011b7c <uxr_stream_id>
 8011d06:	bf00      	nop

08011d08 <uxr_add_input_reliable_buffer>:
 8011d08:	b510      	push	{r4, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	4684      	mov	ip, r0
 8011d0e:	9806      	ldr	r0, [sp, #24]
 8011d10:	9000      	str	r0, [sp, #0]
 8011d12:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011d16:	2018      	movs	r0, #24
 8011d18:	fb00 c004 	mla	r0, r0, r4, ip
 8011d1c:	f104 0e01 	add.w	lr, r4, #1
 8011d20:	3048      	adds	r0, #72	@ 0x48
 8011d22:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011d26:	f007 f871 	bl	8018e0c <uxr_init_input_reliable_stream>
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	2102      	movs	r1, #2
 8011d2e:	4620      	mov	r0, r4
 8011d30:	b004      	add	sp, #16
 8011d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d36:	f7ff bf21 	b.w	8011b7c <uxr_stream_id>
 8011d3a:	bf00      	nop

08011d3c <uxr_get_output_best_effort_stream>:
 8011d3c:	7c03      	ldrb	r3, [r0, #16]
 8011d3e:	428b      	cmp	r3, r1
 8011d40:	bf8c      	ite	hi
 8011d42:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011d46:	2000      	movls	r0, #0
 8011d48:	4770      	bx	lr
 8011d4a:	bf00      	nop

08011d4c <uxr_get_output_reliable_stream>:
 8011d4c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011d50:	428b      	cmp	r3, r1
 8011d52:	bf83      	ittte	hi
 8011d54:	2328      	movhi	r3, #40	@ 0x28
 8011d56:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011d5a:	3018      	addhi	r0, #24
 8011d5c:	2000      	movls	r0, #0
 8011d5e:	4770      	bx	lr

08011d60 <uxr_get_input_best_effort_stream>:
 8011d60:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011d64:	428b      	cmp	r3, r1
 8011d66:	bf86      	itte	hi
 8011d68:	3121      	addhi	r1, #33	@ 0x21
 8011d6a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011d6e:	2000      	movls	r0, #0
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop

08011d74 <uxr_get_input_reliable_stream>:
 8011d74:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011d78:	428b      	cmp	r3, r1
 8011d7a:	bf83      	ittte	hi
 8011d7c:	2318      	movhi	r3, #24
 8011d7e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011d82:	3048      	addhi	r0, #72	@ 0x48
 8011d84:	2000      	movls	r0, #0
 8011d86:	4770      	bx	lr

08011d88 <uxr_output_streams_confirmed>:
 8011d88:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011d8c:	b183      	cbz	r3, 8011db0 <uxr_output_streams_confirmed+0x28>
 8011d8e:	b570      	push	{r4, r5, r6, lr}
 8011d90:	4606      	mov	r6, r0
 8011d92:	f100 0518 	add.w	r5, r0, #24
 8011d96:	2400      	movs	r4, #0
 8011d98:	e001      	b.n	8011d9e <uxr_output_streams_confirmed+0x16>
 8011d9a:	3528      	adds	r5, #40	@ 0x28
 8011d9c:	b138      	cbz	r0, 8011dae <uxr_output_streams_confirmed+0x26>
 8011d9e:	4628      	mov	r0, r5
 8011da0:	f007 fcf2 	bl	8019788 <uxr_is_output_up_to_date>
 8011da4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011da8:	3401      	adds	r4, #1
 8011daa:	42a3      	cmp	r3, r4
 8011dac:	d8f5      	bhi.n	8011d9a <uxr_output_streams_confirmed+0x12>
 8011dae:	bd70      	pop	{r4, r5, r6, pc}
 8011db0:	2001      	movs	r0, #1
 8011db2:	4770      	bx	lr

08011db4 <uxr_buffer_submessage_header>:
 8011db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011db6:	4604      	mov	r4, r0
 8011db8:	460e      	mov	r6, r1
 8011dba:	2104      	movs	r1, #4
 8011dbc:	4615      	mov	r5, r2
 8011dbe:	461f      	mov	r7, r3
 8011dc0:	f7fa fca6 	bl	800c710 <ucdr_align_to>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	7523      	strb	r3, [r4, #20]
 8011dc8:	f047 0201 	orr.w	r2, r7, #1
 8011dcc:	462b      	mov	r3, r5
 8011dce:	4631      	mov	r1, r6
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f000 fa2b 	bl	801222c <uxr_serialize_submessage_header>
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	f7fa fcb0 	bl	800c73c <ucdr_buffer_remaining>
 8011ddc:	42a8      	cmp	r0, r5
 8011dde:	bf34      	ite	cc
 8011de0:	2000      	movcc	r0, #0
 8011de2:	2001      	movcs	r0, #1
 8011de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de6:	bf00      	nop

08011de8 <uxr_read_submessage_header>:
 8011de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dec:	4604      	mov	r4, r0
 8011dee:	460d      	mov	r5, r1
 8011df0:	2104      	movs	r1, #4
 8011df2:	4616      	mov	r6, r2
 8011df4:	4698      	mov	r8, r3
 8011df6:	f7fa fc8b 	bl	800c710 <ucdr_align_to>
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f7fa fc9e 	bl	800c73c <ucdr_buffer_remaining>
 8011e00:	2803      	cmp	r0, #3
 8011e02:	bf8c      	ite	hi
 8011e04:	2701      	movhi	r7, #1
 8011e06:	2700      	movls	r7, #0
 8011e08:	d802      	bhi.n	8011e10 <uxr_read_submessage_header+0x28>
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e10:	4633      	mov	r3, r6
 8011e12:	4642      	mov	r2, r8
 8011e14:	4620      	mov	r0, r4
 8011e16:	4629      	mov	r1, r5
 8011e18:	f000 fa1a 	bl	8012250 <uxr_deserialize_submessage_header>
 8011e1c:	f898 3000 	ldrb.w	r3, [r8]
 8011e20:	f003 0201 	and.w	r2, r3, #1
 8011e24:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011e28:	f888 3000 	strb.w	r3, [r8]
 8011e2c:	7522      	strb	r2, [r4, #20]
 8011e2e:	4638      	mov	r0, r7
 8011e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e34 <uxr_submessage_padding>:
 8011e34:	f010 0003 	ands.w	r0, r0, #3
 8011e38:	bf18      	it	ne
 8011e3a:	f1c0 0004 	rsbne	r0, r0, #4
 8011e3e:	4770      	bx	lr

08011e40 <uxr_millis>:
 8011e40:	b510      	push	{r4, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	4669      	mov	r1, sp
 8011e46:	2001      	movs	r0, #1
 8011e48:	f7f1 fa4e 	bl	80032e8 <clock_gettime>
 8011e4c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011e50:	4b06      	ldr	r3, [pc, #24]	@ (8011e6c <uxr_millis+0x2c>)
 8011e52:	fba0 0103 	umull	r0, r1, r0, r3
 8011e56:	1900      	adds	r0, r0, r4
 8011e58:	fb03 1102 	mla	r1, r3, r2, r1
 8011e5c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011e60:	4a03      	ldr	r2, [pc, #12]	@ (8011e70 <uxr_millis+0x30>)
 8011e62:	2300      	movs	r3, #0
 8011e64:	f7ee ff20 	bl	8000ca8 <__aeabi_ldivmod>
 8011e68:	b004      	add	sp, #16
 8011e6a:	bd10      	pop	{r4, pc}
 8011e6c:	3b9aca00 	.word	0x3b9aca00
 8011e70:	000f4240 	.word	0x000f4240

08011e74 <uxr_nanos>:
 8011e74:	b510      	push	{r4, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	4669      	mov	r1, sp
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	f7f1 fa34 	bl	80032e8 <clock_gettime>
 8011e80:	4a06      	ldr	r2, [pc, #24]	@ (8011e9c <uxr_nanos+0x28>)
 8011e82:	9800      	ldr	r0, [sp, #0]
 8011e84:	9902      	ldr	r1, [sp, #8]
 8011e86:	9c01      	ldr	r4, [sp, #4]
 8011e88:	fba0 0302 	umull	r0, r3, r0, r2
 8011e8c:	1840      	adds	r0, r0, r1
 8011e8e:	fb02 3304 	mla	r3, r2, r4, r3
 8011e92:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011e96:	b004      	add	sp, #16
 8011e98:	bd10      	pop	{r4, pc}
 8011e9a:	bf00      	nop
 8011e9c:	3b9aca00 	.word	0x3b9aca00

08011ea0 <on_full_output_buffer_fragmented>:
 8011ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea4:	460c      	mov	r4, r1
 8011ea6:	b08a      	sub	sp, #40	@ 0x28
 8011ea8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011eac:	4606      	mov	r6, r0
 8011eae:	f104 0008 	add.w	r0, r4, #8
 8011eb2:	f7ff ff4b 	bl	8011d4c <uxr_get_output_reliable_stream>
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	f007 fc70 	bl	801979c <get_available_free_slots>
 8011ebc:	b968      	cbnz	r0, 8011eda <on_full_output_buffer_fragmented+0x3a>
 8011ebe:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	4798      	blx	r3
 8011ec6:	b918      	cbnz	r0, 8011ed0 <on_full_output_buffer_fragmented+0x30>
 8011ec8:	2001      	movs	r0, #1
 8011eca:	b00a      	add	sp, #40	@ 0x28
 8011ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f007 fc63 	bl	801979c <get_available_free_slots>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d0f6      	beq.n	8011ec8 <on_full_output_buffer_fragmented+0x28>
 8011eda:	892a      	ldrh	r2, [r5, #8]
 8011edc:	686b      	ldr	r3, [r5, #4]
 8011ede:	fbb3 f8f2 	udiv	r8, r3, r2
 8011ee2:	89eb      	ldrh	r3, [r5, #14]
 8011ee4:	7b29      	ldrb	r1, [r5, #12]
 8011ee6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eea:	fb02 3310 	mls	r3, r2, r0, r3
 8011eee:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	fb08 f303 	mul.w	r3, r8, r3
 8011ef8:	31fc      	adds	r1, #252	@ 0xfc
 8011efa:	f1a8 0804 	sub.w	r8, r8, #4
 8011efe:	4441      	add	r1, r8
 8011f00:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011f04:	b28f      	uxth	r7, r1
 8011f06:	6829      	ldr	r1, [r5, #0]
 8011f08:	3304      	adds	r3, #4
 8011f0a:	1bd2      	subs	r2, r2, r7
 8011f0c:	4419      	add	r1, r3
 8011f0e:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8011f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	4642      	mov	r2, r8
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	a802      	add	r0, sp, #8
 8011f1e:	f7fa fbcb 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8011f22:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011f26:	f102 0308 	add.w	r3, r2, #8
 8011f2a:	4543      	cmp	r3, r8
 8011f2c:	d928      	bls.n	8011f80 <on_full_output_buffer_fragmented+0xe0>
 8011f2e:	463a      	mov	r2, r7
 8011f30:	2300      	movs	r3, #0
 8011f32:	210d      	movs	r1, #13
 8011f34:	a802      	add	r0, sp, #8
 8011f36:	f7ff ff3d 	bl	8011db4 <uxr_buffer_submessage_header>
 8011f3a:	8929      	ldrh	r1, [r5, #8]
 8011f3c:	89eb      	ldrh	r3, [r5, #14]
 8011f3e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011f42:	fb01 3312 	mls	r3, r1, r2, r3
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	686a      	ldr	r2, [r5, #4]
 8011f4a:	fbb2 f2f1 	udiv	r2, r2, r1
 8011f4e:	fb02 f303 	mul.w	r3, r2, r3
 8011f52:	682a      	ldr	r2, [r5, #0]
 8011f54:	f842 8003 	str.w	r8, [r2, r3]
 8011f58:	89e8      	ldrh	r0, [r5, #14]
 8011f5a:	2101      	movs	r1, #1
 8011f5c:	f007 fd72 	bl	8019a44 <uxr_seq_num_add>
 8011f60:	9904      	ldr	r1, [sp, #16]
 8011f62:	9a03      	ldr	r2, [sp, #12]
 8011f64:	81e8      	strh	r0, [r5, #14]
 8011f66:	1a52      	subs	r2, r2, r1
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f7fa fbb7 	bl	800c6dc <ucdr_init_buffer>
 8011f6e:	4630      	mov	r0, r6
 8011f70:	4910      	ldr	r1, [pc, #64]	@ (8011fb4 <on_full_output_buffer_fragmented+0x114>)
 8011f72:	4622      	mov	r2, r4
 8011f74:	f7fa fb86 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 8011f78:	2000      	movs	r0, #0
 8011f7a:	b00a      	add	sp, #40	@ 0x28
 8011f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f80:	b292      	uxth	r2, r2
 8011f82:	2302      	movs	r3, #2
 8011f84:	210d      	movs	r1, #13
 8011f86:	a802      	add	r0, sp, #8
 8011f88:	f7ff ff14 	bl	8011db4 <uxr_buffer_submessage_header>
 8011f8c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011f90:	8928      	ldrh	r0, [r5, #8]
 8011f92:	f103 0208 	add.w	r2, r3, #8
 8011f96:	89eb      	ldrh	r3, [r5, #14]
 8011f98:	fbb3 f1f0 	udiv	r1, r3, r0
 8011f9c:	fb00 3311 	mls	r3, r0, r1, r3
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	6869      	ldr	r1, [r5, #4]
 8011fa4:	fbb1 f1f0 	udiv	r1, r1, r0
 8011fa8:	fb01 f303 	mul.w	r3, r1, r3
 8011fac:	6829      	ldr	r1, [r5, #0]
 8011fae:	50ca      	str	r2, [r1, r3]
 8011fb0:	e7d2      	b.n	8011f58 <on_full_output_buffer_fragmented+0xb8>
 8011fb2:	bf00      	nop
 8011fb4:	08011ea1 	.word	0x08011ea1

08011fb8 <uxr_prepare_output_stream>:
 8011fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fba:	b087      	sub	sp, #28
 8011fbc:	2707      	movs	r7, #7
 8011fbe:	9202      	str	r2, [sp, #8]
 8011fc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011fc2:	2500      	movs	r5, #0
 8011fc4:	3204      	adds	r2, #4
 8011fc6:	e9cd 7500 	strd	r7, r5, [sp]
 8011fca:	461c      	mov	r4, r3
 8011fcc:	4606      	mov	r6, r0
 8011fce:	f7ff f807 	bl	8010fe0 <uxr_prepare_stream_to_write_submessage>
 8011fd2:	f080 0201 	eor.w	r2, r0, #1
 8011fd6:	b2d2      	uxtb	r2, r2
 8011fd8:	75a2      	strb	r2, [r4, #22]
 8011fda:	b112      	cbz	r2, 8011fe2 <uxr_prepare_output_stream+0x2a>
 8011fdc:	4628      	mov	r0, r5
 8011fde:	b007      	add	sp, #28
 8011fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe2:	aa05      	add	r2, sp, #20
 8011fe4:	9902      	ldr	r1, [sp, #8]
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7ff f934 	bl	8011254 <uxr_init_base_object_request>
 8011fec:	a905      	add	r1, sp, #20
 8011fee:	4605      	mov	r5, r0
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f001 f879 	bl	80130e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011ff6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011ffa:	69a6      	ldr	r6, [r4, #24]
 8011ffc:	69e7      	ldr	r7, [r4, #28]
 8011ffe:	1a52      	subs	r2, r2, r1
 8012000:	4620      	mov	r0, r4
 8012002:	f7fa fb6b 	bl	800c6dc <ucdr_init_buffer>
 8012006:	4620      	mov	r0, r4
 8012008:	463a      	mov	r2, r7
 801200a:	4631      	mov	r1, r6
 801200c:	f7fa fb3a 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 8012010:	4628      	mov	r0, r5
 8012012:	b007      	add	sp, #28
 8012014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012016:	bf00      	nop

08012018 <uxr_prepare_output_stream_fragmented>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	b093      	sub	sp, #76	@ 0x4c
 801201e:	4605      	mov	r5, r0
 8012020:	9107      	str	r1, [sp, #28]
 8012022:	3008      	adds	r0, #8
 8012024:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012028:	9303      	str	r3, [sp, #12]
 801202a:	9206      	str	r2, [sp, #24]
 801202c:	f7ff fe8e 	bl	8011d4c <uxr_get_output_reliable_stream>
 8012030:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012034:	2b01      	cmp	r3, #1
 8012036:	f000 8095 	beq.w	8012164 <uxr_prepare_output_stream_fragmented+0x14c>
 801203a:	4604      	mov	r4, r0
 801203c:	2800      	cmp	r0, #0
 801203e:	f000 8091 	beq.w	8012164 <uxr_prepare_output_stream_fragmented+0x14c>
 8012042:	f007 fbab 	bl	801979c <get_available_free_slots>
 8012046:	2800      	cmp	r0, #0
 8012048:	f000 8087 	beq.w	801215a <uxr_prepare_output_stream_fragmented+0x142>
 801204c:	8922      	ldrh	r2, [r4, #8]
 801204e:	89e7      	ldrh	r7, [r4, #14]
 8012050:	fbb7 f3f2 	udiv	r3, r7, r2
 8012054:	fb02 7313 	mls	r3, r2, r3, r7
 8012058:	b29b      	uxth	r3, r3
 801205a:	6861      	ldr	r1, [r4, #4]
 801205c:	fbb1 f1f2 	udiv	r1, r1, r2
 8012060:	6822      	ldr	r2, [r4, #0]
 8012062:	9105      	str	r1, [sp, #20]
 8012064:	fb01 f303 	mul.w	r3, r1, r3
 8012068:	3304      	adds	r3, #4
 801206a:	eb02 0903 	add.w	r9, r2, r3
 801206e:	7b23      	ldrb	r3, [r4, #12]
 8012070:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012074:	4543      	cmp	r3, r8
 8012076:	f1a1 0b04 	sub.w	fp, r1, #4
 801207a:	d37f      	bcc.n	801217c <uxr_prepare_output_stream_fragmented+0x164>
 801207c:	f1ab 0a04 	sub.w	sl, fp, #4
 8012080:	ebaa 0a03 	sub.w	sl, sl, r3
 8012084:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012086:	f8cd 8000 	str.w	r8, [sp]
 801208a:	fa1f f38a 	uxth.w	r3, sl
 801208e:	9304      	str	r3, [sp, #16]
 8012090:	465a      	mov	r2, fp
 8012092:	2300      	movs	r3, #0
 8012094:	4649      	mov	r1, r9
 8012096:	a80a      	add	r0, sp, #40	@ 0x28
 8012098:	f7fa fb0e 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 801209c:	f106 0a08 	add.w	sl, r6, #8
 80120a0:	45da      	cmp	sl, fp
 80120a2:	bf2c      	ite	cs
 80120a4:	2300      	movcs	r3, #0
 80120a6:	2301      	movcc	r3, #1
 80120a8:	9a04      	ldr	r2, [sp, #16]
 80120aa:	005b      	lsls	r3, r3, #1
 80120ac:	210d      	movs	r1, #13
 80120ae:	a80a      	add	r0, sp, #40	@ 0x28
 80120b0:	f7ff fe80 	bl	8011db4 <uxr_buffer_submessage_header>
 80120b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80120b8:	fbb7 f2fc 	udiv	r2, r7, ip
 80120bc:	fb0c 7212 	mls	r2, ip, r2, r7
 80120c0:	b292      	uxth	r2, r2
 80120c2:	6863      	ldr	r3, [r4, #4]
 80120c4:	fbb3 f3fc 	udiv	r3, r3, ip
 80120c8:	fb02 f303 	mul.w	r3, r2, r3
 80120cc:	6822      	ldr	r2, [r4, #0]
 80120ce:	2101      	movs	r1, #1
 80120d0:	f842 b003 	str.w	fp, [r2, r3]
 80120d4:	4638      	mov	r0, r7
 80120d6:	f007 fcb5 	bl	8019a44 <uxr_seq_num_add>
 80120da:	9b05      	ldr	r3, [sp, #20]
 80120dc:	9e03      	ldr	r6, [sp, #12]
 80120de:	f1a3 0208 	sub.w	r2, r3, #8
 80120e2:	f108 0104 	add.w	r1, r8, #4
 80120e6:	4607      	mov	r7, r0
 80120e8:	eba2 0208 	sub.w	r2, r2, r8
 80120ec:	4449      	add	r1, r9
 80120ee:	4630      	mov	r0, r6
 80120f0:	f7fa faf4 	bl	800c6dc <ucdr_init_buffer>
 80120f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80120f6:	81e7      	strh	r7, [r4, #14]
 80120f8:	1d1a      	adds	r2, r3, #4
 80120fa:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80120fe:	bf28      	it	cs
 8012100:	2200      	movcs	r2, #0
 8012102:	2300      	movs	r3, #0
 8012104:	b292      	uxth	r2, r2
 8012106:	2107      	movs	r1, #7
 8012108:	4630      	mov	r0, r6
 801210a:	f7ff fe53 	bl	8011db4 <uxr_buffer_submessage_header>
 801210e:	9906      	ldr	r1, [sp, #24]
 8012110:	aa09      	add	r2, sp, #36	@ 0x24
 8012112:	4628      	mov	r0, r5
 8012114:	f7ff f89e 	bl	8011254 <uxr_init_base_object_request>
 8012118:	4604      	mov	r4, r0
 801211a:	b320      	cbz	r0, 8012166 <uxr_prepare_output_stream_fragmented+0x14e>
 801211c:	9e03      	ldr	r6, [sp, #12]
 801211e:	a909      	add	r1, sp, #36	@ 0x24
 8012120:	4630      	mov	r0, r6
 8012122:	f000 ffe1 	bl	80130e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012126:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801212a:	4630      	mov	r0, r6
 801212c:	1a52      	subs	r2, r2, r1
 801212e:	f7fa fad5 	bl	800c6dc <ucdr_init_buffer>
 8012132:	9b07      	ldr	r3, [sp, #28]
 8012134:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012138:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801213a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801213e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012140:	491a      	ldr	r1, [pc, #104]	@ (80121ac <uxr_prepare_output_stream_fragmented+0x194>)
 8012142:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012146:	4630      	mov	r0, r6
 8012148:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801214c:	462a      	mov	r2, r5
 801214e:	f7fa fa99 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 8012152:	4620      	mov	r0, r4
 8012154:	b013      	add	sp, #76	@ 0x4c
 8012156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801215c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801215e:	4628      	mov	r0, r5
 8012160:	4798      	blx	r3
 8012162:	b920      	cbnz	r0, 801216e <uxr_prepare_output_stream_fragmented+0x156>
 8012164:	2400      	movs	r4, #0
 8012166:	4620      	mov	r0, r4
 8012168:	b013      	add	sp, #76	@ 0x4c
 801216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216e:	4620      	mov	r0, r4
 8012170:	f007 fb14 	bl	801979c <get_available_free_slots>
 8012174:	2800      	cmp	r0, #0
 8012176:	f47f af69 	bne.w	801204c <uxr_prepare_output_stream_fragmented+0x34>
 801217a:	e7f3      	b.n	8012164 <uxr_prepare_output_stream_fragmented+0x14c>
 801217c:	4638      	mov	r0, r7
 801217e:	2101      	movs	r1, #1
 8012180:	f007 fc60 	bl	8019a44 <uxr_seq_num_add>
 8012184:	8921      	ldrh	r1, [r4, #8]
 8012186:	fbb0 f2f1 	udiv	r2, r0, r1
 801218a:	fb01 0212 	mls	r2, r1, r2, r0
 801218e:	b292      	uxth	r2, r2
 8012190:	6863      	ldr	r3, [r4, #4]
 8012192:	fbb3 f3f1 	udiv	r3, r3, r1
 8012196:	fb02 f303 	mul.w	r3, r2, r3
 801219a:	6822      	ldr	r2, [r4, #0]
 801219c:	3304      	adds	r3, #4
 801219e:	eb02 0903 	add.w	r9, r2, r3
 80121a2:	4607      	mov	r7, r0
 80121a4:	7b23      	ldrb	r3, [r4, #12]
 80121a6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80121aa:	e767      	b.n	801207c <uxr_prepare_output_stream_fragmented+0x64>
 80121ac:	08011ea1 	.word	0x08011ea1

080121b0 <uxr_serialize_message_header>:
 80121b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b4:	4617      	mov	r7, r2
 80121b6:	4604      	mov	r4, r0
 80121b8:	461e      	mov	r6, r3
 80121ba:	460d      	mov	r5, r1
 80121bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80121c0:	f7f8 feae 	bl	800af20 <ucdr_serialize_uint8_t>
 80121c4:	4639      	mov	r1, r7
 80121c6:	4620      	mov	r0, r4
 80121c8:	f7f8 feaa 	bl	800af20 <ucdr_serialize_uint8_t>
 80121cc:	4632      	mov	r2, r6
 80121ce:	2101      	movs	r1, #1
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7f8 ff5b 	bl	800b08c <ucdr_serialize_endian_uint16_t>
 80121d6:	062b      	lsls	r3, r5, #24
 80121d8:	d501      	bpl.n	80121de <uxr_serialize_message_header+0x2e>
 80121da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121de:	4641      	mov	r1, r8
 80121e0:	4620      	mov	r0, r4
 80121e2:	2204      	movs	r2, #4
 80121e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121e8:	f7fd b918 	b.w	800f41c <ucdr_serialize_array_uint8_t>

080121ec <uxr_deserialize_message_header>:
 80121ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f0:	4617      	mov	r7, r2
 80121f2:	4604      	mov	r4, r0
 80121f4:	461e      	mov	r6, r3
 80121f6:	460d      	mov	r5, r1
 80121f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80121fc:	f7f8 fea6 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012200:	4639      	mov	r1, r7
 8012202:	4620      	mov	r0, r4
 8012204:	f7f8 fea2 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012208:	4632      	mov	r2, r6
 801220a:	2101      	movs	r1, #1
 801220c:	4620      	mov	r0, r4
 801220e:	f7f9 f833 	bl	800b278 <ucdr_deserialize_endian_uint16_t>
 8012212:	f995 3000 	ldrsb.w	r3, [r5]
 8012216:	2b00      	cmp	r3, #0
 8012218:	da01      	bge.n	801221e <uxr_deserialize_message_header+0x32>
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221e:	4641      	mov	r1, r8
 8012220:	4620      	mov	r0, r4
 8012222:	2204      	movs	r2, #4
 8012224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012228:	f7fd b95c 	b.w	800f4e4 <ucdr_deserialize_array_uint8_t>

0801222c <uxr_serialize_submessage_header>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	4616      	mov	r6, r2
 8012230:	4604      	mov	r4, r0
 8012232:	461d      	mov	r5, r3
 8012234:	f7f8 fe74 	bl	800af20 <ucdr_serialize_uint8_t>
 8012238:	4631      	mov	r1, r6
 801223a:	4620      	mov	r0, r4
 801223c:	f7f8 fe70 	bl	800af20 <ucdr_serialize_uint8_t>
 8012240:	462a      	mov	r2, r5
 8012242:	4620      	mov	r0, r4
 8012244:	2101      	movs	r1, #1
 8012246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801224a:	f7f8 bf1f 	b.w	800b08c <ucdr_serialize_endian_uint16_t>
 801224e:	bf00      	nop

08012250 <uxr_deserialize_submessage_header>:
 8012250:	b570      	push	{r4, r5, r6, lr}
 8012252:	4616      	mov	r6, r2
 8012254:	4604      	mov	r4, r0
 8012256:	461d      	mov	r5, r3
 8012258:	f7f8 fe78 	bl	800af4c <ucdr_deserialize_uint8_t>
 801225c:	4631      	mov	r1, r6
 801225e:	4620      	mov	r0, r4
 8012260:	f7f8 fe74 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012264:	462a      	mov	r2, r5
 8012266:	4620      	mov	r0, r4
 8012268:	2101      	movs	r1, #1
 801226a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801226e:	f7f9 b803 	b.w	800b278 <ucdr_deserialize_endian_uint16_t>
 8012272:	bf00      	nop

08012274 <uxr_serialize_CLIENT_Representation>:
 8012274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012278:	2204      	movs	r2, #4
 801227a:	460e      	mov	r6, r1
 801227c:	4605      	mov	r5, r0
 801227e:	f7fd f8cd 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012282:	2202      	movs	r2, #2
 8012284:	1d31      	adds	r1, r6, #4
 8012286:	4604      	mov	r4, r0
 8012288:	4628      	mov	r0, r5
 801228a:	f7fd f8c7 	bl	800f41c <ucdr_serialize_array_uint8_t>
 801228e:	2202      	movs	r2, #2
 8012290:	4004      	ands	r4, r0
 8012292:	1db1      	adds	r1, r6, #6
 8012294:	4628      	mov	r0, r5
 8012296:	f7fd f8c1 	bl	800f41c <ucdr_serialize_array_uint8_t>
 801229a:	b2e4      	uxtb	r4, r4
 801229c:	2204      	movs	r2, #4
 801229e:	4004      	ands	r4, r0
 80122a0:	f106 0108 	add.w	r1, r6, #8
 80122a4:	4628      	mov	r0, r5
 80122a6:	f7fd f8b9 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80122aa:	7b31      	ldrb	r1, [r6, #12]
 80122ac:	ea00 0804 	and.w	r8, r0, r4
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7f8 fe35 	bl	800af20 <ucdr_serialize_uint8_t>
 80122b6:	7b71      	ldrb	r1, [r6, #13]
 80122b8:	ea08 0800 	and.w	r8, r8, r0
 80122bc:	4628      	mov	r0, r5
 80122be:	f7f8 fe01 	bl	800aec4 <ucdr_serialize_bool>
 80122c2:	7b73      	ldrb	r3, [r6, #13]
 80122c4:	ea08 0800 	and.w	r8, r8, r0
 80122c8:	b93b      	cbnz	r3, 80122da <uxr_serialize_CLIENT_Representation+0x66>
 80122ca:	8bb1      	ldrh	r1, [r6, #28]
 80122cc:	4628      	mov	r0, r5
 80122ce:	f7f8 fe53 	bl	800af78 <ucdr_serialize_uint16_t>
 80122d2:	ea08 0000 	and.w	r0, r8, r0
 80122d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122da:	6931      	ldr	r1, [r6, #16]
 80122dc:	4628      	mov	r0, r5
 80122de:	f7f9 f83b 	bl	800b358 <ucdr_serialize_uint32_t>
 80122e2:	6933      	ldr	r3, [r6, #16]
 80122e4:	b1e3      	cbz	r3, 8012320 <uxr_serialize_CLIENT_Representation+0xac>
 80122e6:	b1c0      	cbz	r0, 801231a <uxr_serialize_CLIENT_Representation+0xa6>
 80122e8:	4637      	mov	r7, r6
 80122ea:	f04f 0900 	mov.w	r9, #0
 80122ee:	e001      	b.n	80122f4 <uxr_serialize_CLIENT_Representation+0x80>
 80122f0:	3708      	adds	r7, #8
 80122f2:	b194      	cbz	r4, 801231a <uxr_serialize_CLIENT_Representation+0xa6>
 80122f4:	6979      	ldr	r1, [r7, #20]
 80122f6:	4628      	mov	r0, r5
 80122f8:	f006 fd2a 	bl	8018d50 <ucdr_serialize_string>
 80122fc:	69b9      	ldr	r1, [r7, #24]
 80122fe:	4604      	mov	r4, r0
 8012300:	4628      	mov	r0, r5
 8012302:	f006 fd25 	bl	8018d50 <ucdr_serialize_string>
 8012306:	6933      	ldr	r3, [r6, #16]
 8012308:	f109 0901 	add.w	r9, r9, #1
 801230c:	4004      	ands	r4, r0
 801230e:	4599      	cmp	r9, r3
 8012310:	b2e4      	uxtb	r4, r4
 8012312:	d3ed      	bcc.n	80122f0 <uxr_serialize_CLIENT_Representation+0x7c>
 8012314:	ea08 0804 	and.w	r8, r8, r4
 8012318:	e7d7      	b.n	80122ca <uxr_serialize_CLIENT_Representation+0x56>
 801231a:	f04f 0800 	mov.w	r8, #0
 801231e:	e7d4      	b.n	80122ca <uxr_serialize_CLIENT_Representation+0x56>
 8012320:	ea08 0800 	and.w	r8, r8, r0
 8012324:	e7d1      	b.n	80122ca <uxr_serialize_CLIENT_Representation+0x56>
 8012326:	bf00      	nop

08012328 <uxr_deserialize_CLIENT_Representation>:
 8012328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801232c:	2204      	movs	r2, #4
 801232e:	460c      	mov	r4, r1
 8012330:	4605      	mov	r5, r0
 8012332:	f7fd f8d7 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012336:	2202      	movs	r2, #2
 8012338:	1d21      	adds	r1, r4, #4
 801233a:	4606      	mov	r6, r0
 801233c:	4628      	mov	r0, r5
 801233e:	f7fd f8d1 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012342:	2202      	movs	r2, #2
 8012344:	4006      	ands	r6, r0
 8012346:	1da1      	adds	r1, r4, #6
 8012348:	4628      	mov	r0, r5
 801234a:	f7fd f8cb 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 801234e:	b2f6      	uxtb	r6, r6
 8012350:	2204      	movs	r2, #4
 8012352:	4006      	ands	r6, r0
 8012354:	f104 0108 	add.w	r1, r4, #8
 8012358:	4628      	mov	r0, r5
 801235a:	f7fd f8c3 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 801235e:	f104 010c 	add.w	r1, r4, #12
 8012362:	ea00 0706 	and.w	r7, r0, r6
 8012366:	4628      	mov	r0, r5
 8012368:	f7f8 fdf0 	bl	800af4c <ucdr_deserialize_uint8_t>
 801236c:	f104 010d 	add.w	r1, r4, #13
 8012370:	4007      	ands	r7, r0
 8012372:	4628      	mov	r0, r5
 8012374:	f7f8 fdbc 	bl	800aef0 <ucdr_deserialize_bool>
 8012378:	7b63      	ldrb	r3, [r4, #13]
 801237a:	4007      	ands	r7, r0
 801237c:	b93b      	cbnz	r3, 801238e <uxr_deserialize_CLIENT_Representation+0x66>
 801237e:	f104 011c 	add.w	r1, r4, #28
 8012382:	4628      	mov	r0, r5
 8012384:	f7f8 fefc 	bl	800b180 <ucdr_deserialize_uint16_t>
 8012388:	4038      	ands	r0, r7
 801238a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801238e:	f104 0110 	add.w	r1, r4, #16
 8012392:	4628      	mov	r0, r5
 8012394:	f7f9 f90a 	bl	800b5ac <ucdr_deserialize_uint32_t>
 8012398:	6923      	ldr	r3, [r4, #16]
 801239a:	2b01      	cmp	r3, #1
 801239c:	d903      	bls.n	80123a6 <uxr_deserialize_CLIENT_Representation+0x7e>
 801239e:	2301      	movs	r3, #1
 80123a0:	75ab      	strb	r3, [r5, #22]
 80123a2:	2700      	movs	r7, #0
 80123a4:	e7eb      	b.n	801237e <uxr_deserialize_CLIENT_Representation+0x56>
 80123a6:	b30b      	cbz	r3, 80123ec <uxr_deserialize_CLIENT_Representation+0xc4>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d0fa      	beq.n	80123a2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80123ac:	46a0      	mov	r8, r4
 80123ae:	f04f 0900 	mov.w	r9, #0
 80123b2:	e003      	b.n	80123bc <uxr_deserialize_CLIENT_Representation+0x94>
 80123b4:	f108 0808 	add.w	r8, r8, #8
 80123b8:	2e00      	cmp	r6, #0
 80123ba:	d0f2      	beq.n	80123a2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80123bc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80123c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123c4:	4628      	mov	r0, r5
 80123c6:	f006 fcd1 	bl	8018d6c <ucdr_deserialize_string>
 80123ca:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80123ce:	4606      	mov	r6, r0
 80123d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123d4:	4628      	mov	r0, r5
 80123d6:	f006 fcc9 	bl	8018d6c <ucdr_deserialize_string>
 80123da:	6923      	ldr	r3, [r4, #16]
 80123dc:	f109 0901 	add.w	r9, r9, #1
 80123e0:	4006      	ands	r6, r0
 80123e2:	4599      	cmp	r9, r3
 80123e4:	b2f6      	uxtb	r6, r6
 80123e6:	d3e5      	bcc.n	80123b4 <uxr_deserialize_CLIENT_Representation+0x8c>
 80123e8:	4037      	ands	r7, r6
 80123ea:	e7c8      	b.n	801237e <uxr_deserialize_CLIENT_Representation+0x56>
 80123ec:	4007      	ands	r7, r0
 80123ee:	e7c6      	b.n	801237e <uxr_deserialize_CLIENT_Representation+0x56>

080123f0 <uxr_serialize_AGENT_Representation>:
 80123f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123f4:	2204      	movs	r2, #4
 80123f6:	460f      	mov	r7, r1
 80123f8:	4605      	mov	r5, r0
 80123fa:	f7fd f80f 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80123fe:	2202      	movs	r2, #2
 8012400:	4604      	mov	r4, r0
 8012402:	1d39      	adds	r1, r7, #4
 8012404:	4628      	mov	r0, r5
 8012406:	f7fd f809 	bl	800f41c <ucdr_serialize_array_uint8_t>
 801240a:	4020      	ands	r0, r4
 801240c:	2202      	movs	r2, #2
 801240e:	b2c4      	uxtb	r4, r0
 8012410:	1db9      	adds	r1, r7, #6
 8012412:	4628      	mov	r0, r5
 8012414:	f7fd f802 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012418:	7a39      	ldrb	r1, [r7, #8]
 801241a:	4004      	ands	r4, r0
 801241c:	4628      	mov	r0, r5
 801241e:	f7f8 fd51 	bl	800aec4 <ucdr_serialize_bool>
 8012422:	7a3b      	ldrb	r3, [r7, #8]
 8012424:	ea00 0804 	and.w	r8, r0, r4
 8012428:	b913      	cbnz	r3, 8012430 <uxr_serialize_AGENT_Representation+0x40>
 801242a:	4640      	mov	r0, r8
 801242c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012430:	68f9      	ldr	r1, [r7, #12]
 8012432:	4628      	mov	r0, r5
 8012434:	f7f8 ff90 	bl	800b358 <ucdr_serialize_uint32_t>
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	b303      	cbz	r3, 801247e <uxr_serialize_AGENT_Representation+0x8e>
 801243c:	b1d0      	cbz	r0, 8012474 <uxr_serialize_AGENT_Representation+0x84>
 801243e:	463e      	mov	r6, r7
 8012440:	f04f 0900 	mov.w	r9, #0
 8012444:	e001      	b.n	801244a <uxr_serialize_AGENT_Representation+0x5a>
 8012446:	3608      	adds	r6, #8
 8012448:	b1a4      	cbz	r4, 8012474 <uxr_serialize_AGENT_Representation+0x84>
 801244a:	6931      	ldr	r1, [r6, #16]
 801244c:	4628      	mov	r0, r5
 801244e:	f006 fc7f 	bl	8018d50 <ucdr_serialize_string>
 8012452:	6971      	ldr	r1, [r6, #20]
 8012454:	4604      	mov	r4, r0
 8012456:	4628      	mov	r0, r5
 8012458:	f006 fc7a 	bl	8018d50 <ucdr_serialize_string>
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f109 0901 	add.w	r9, r9, #1
 8012462:	4004      	ands	r4, r0
 8012464:	4599      	cmp	r9, r3
 8012466:	b2e4      	uxtb	r4, r4
 8012468:	d3ed      	bcc.n	8012446 <uxr_serialize_AGENT_Representation+0x56>
 801246a:	ea08 0804 	and.w	r8, r8, r4
 801246e:	4640      	mov	r0, r8
 8012470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012474:	f04f 0800 	mov.w	r8, #0
 8012478:	4640      	mov	r0, r8
 801247a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801247e:	ea08 0800 	and.w	r8, r8, r0
 8012482:	e7d2      	b.n	801242a <uxr_serialize_AGENT_Representation+0x3a>

08012484 <uxr_serialize_DATAWRITER_Representation>:
 8012484:	b570      	push	{r4, r5, r6, lr}
 8012486:	460d      	mov	r5, r1
 8012488:	7809      	ldrb	r1, [r1, #0]
 801248a:	4606      	mov	r6, r0
 801248c:	f7f8 fd48 	bl	800af20 <ucdr_serialize_uint8_t>
 8012490:	4604      	mov	r4, r0
 8012492:	b130      	cbz	r0, 80124a2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012494:	782b      	ldrb	r3, [r5, #0]
 8012496:	2b02      	cmp	r3, #2
 8012498:	d00c      	beq.n	80124b4 <uxr_serialize_DATAWRITER_Representation+0x30>
 801249a:	2b03      	cmp	r3, #3
 801249c:	d010      	beq.n	80124c0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d008      	beq.n	80124b4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80124a2:	2202      	movs	r2, #2
 80124a4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80124a8:	4630      	mov	r0, r6
 80124aa:	f7fc ffb7 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80124ae:	4020      	ands	r0, r4
 80124b0:	b2c0      	uxtb	r0, r0
 80124b2:	bd70      	pop	{r4, r5, r6, pc}
 80124b4:	6869      	ldr	r1, [r5, #4]
 80124b6:	4630      	mov	r0, r6
 80124b8:	f006 fc4a 	bl	8018d50 <ucdr_serialize_string>
 80124bc:	4604      	mov	r4, r0
 80124be:	e7f0      	b.n	80124a2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80124c0:	4629      	mov	r1, r5
 80124c2:	4630      	mov	r0, r6
 80124c4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80124c8:	3104      	adds	r1, #4
 80124ca:	f7fd f9f1 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 80124ce:	4604      	mov	r4, r0
 80124d0:	e7e7      	b.n	80124a2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80124d2:	bf00      	nop

080124d4 <uxr_serialize_ObjectVariant.part.0>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	780b      	ldrb	r3, [r1, #0]
 80124d8:	3b01      	subs	r3, #1
 80124da:	460c      	mov	r4, r1
 80124dc:	4605      	mov	r5, r0
 80124de:	2b0d      	cmp	r3, #13
 80124e0:	d816      	bhi.n	8012510 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80124e2:	e8df f003 	tbb	[pc, r3]
 80124e6:	0733      	.short	0x0733
 80124e8:	07071717 	.word	0x07071717
 80124ec:	0c150707 	.word	0x0c150707
 80124f0:	4c510c0c 	.word	0x4c510c0c
 80124f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124f8:	3104      	adds	r1, #4
 80124fa:	f7ff bfc3 	b.w	8012484 <uxr_serialize_DATAWRITER_Representation>
 80124fe:	7909      	ldrb	r1, [r1, #4]
 8012500:	f7f8 fd0e 	bl	800af20 <ucdr_serialize_uint8_t>
 8012504:	b300      	cbz	r0, 8012548 <uxr_serialize_ObjectVariant.part.0+0x74>
 8012506:	7923      	ldrb	r3, [r4, #4]
 8012508:	2b01      	cmp	r3, #1
 801250a:	d042      	beq.n	8012592 <uxr_serialize_ObjectVariant.part.0+0xbe>
 801250c:	2b02      	cmp	r3, #2
 801250e:	d040      	beq.n	8012592 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8012510:	2001      	movs	r0, #1
 8012512:	bd70      	pop	{r4, r5, r6, pc}
 8012514:	7909      	ldrb	r1, [r1, #4]
 8012516:	f7f8 fd03 	bl	800af20 <ucdr_serialize_uint8_t>
 801251a:	4606      	mov	r6, r0
 801251c:	b158      	cbz	r0, 8012536 <uxr_serialize_ObjectVariant.part.0+0x62>
 801251e:	7923      	ldrb	r3, [r4, #4]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d03c      	beq.n	801259e <uxr_serialize_ObjectVariant.part.0+0xca>
 8012524:	2b03      	cmp	r3, #3
 8012526:	d106      	bne.n	8012536 <uxr_serialize_ObjectVariant.part.0+0x62>
 8012528:	68a2      	ldr	r2, [r4, #8]
 801252a:	f104 010c 	add.w	r1, r4, #12
 801252e:	4628      	mov	r0, r5
 8012530:	f7fd f9be 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 8012534:	4606      	mov	r6, r0
 8012536:	2202      	movs	r2, #2
 8012538:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801253c:	4628      	mov	r0, r5
 801253e:	f7fc ff6d 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012542:	4030      	ands	r0, r6
 8012544:	b2c0      	uxtb	r0, r0
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	2000      	movs	r0, #0
 801254a:	bd70      	pop	{r4, r5, r6, pc}
 801254c:	7909      	ldrb	r1, [r1, #4]
 801254e:	f7f8 fce7 	bl	800af20 <ucdr_serialize_uint8_t>
 8012552:	4606      	mov	r6, r0
 8012554:	b158      	cbz	r0, 801256e <uxr_serialize_ObjectVariant.part.0+0x9a>
 8012556:	7923      	ldrb	r3, [r4, #4]
 8012558:	2b02      	cmp	r3, #2
 801255a:	d003      	beq.n	8012564 <uxr_serialize_ObjectVariant.part.0+0x90>
 801255c:	2b03      	cmp	r3, #3
 801255e:	d024      	beq.n	80125aa <uxr_serialize_ObjectVariant.part.0+0xd6>
 8012560:	2b01      	cmp	r3, #1
 8012562:	d104      	bne.n	801256e <uxr_serialize_ObjectVariant.part.0+0x9a>
 8012564:	68a1      	ldr	r1, [r4, #8]
 8012566:	4628      	mov	r0, r5
 8012568:	f006 fbf2 	bl	8018d50 <ucdr_serialize_string>
 801256c:	4606      	mov	r6, r0
 801256e:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012572:	4628      	mov	r0, r5
 8012574:	f7f9 f9fc 	bl	800b970 <ucdr_serialize_int16_t>
 8012578:	4030      	ands	r0, r6
 801257a:	b2c0      	uxtb	r0, r0
 801257c:	bd70      	pop	{r4, r5, r6, pc}
 801257e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012582:	3104      	adds	r1, #4
 8012584:	f7ff be76 	b.w	8012274 <uxr_serialize_CLIENT_Representation>
 8012588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801258c:	3104      	adds	r1, #4
 801258e:	f7ff bf2f 	b.w	80123f0 <uxr_serialize_AGENT_Representation>
 8012592:	68a1      	ldr	r1, [r4, #8]
 8012594:	4628      	mov	r0, r5
 8012596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801259a:	f006 bbd9 	b.w	8018d50 <ucdr_serialize_string>
 801259e:	68a1      	ldr	r1, [r4, #8]
 80125a0:	4628      	mov	r0, r5
 80125a2:	f006 fbd5 	bl	8018d50 <ucdr_serialize_string>
 80125a6:	4606      	mov	r6, r0
 80125a8:	e7c5      	b.n	8012536 <uxr_serialize_ObjectVariant.part.0+0x62>
 80125aa:	68a2      	ldr	r2, [r4, #8]
 80125ac:	f104 010c 	add.w	r1, r4, #12
 80125b0:	4628      	mov	r0, r5
 80125b2:	f7fd f97d 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 80125b6:	4606      	mov	r6, r0
 80125b8:	e7d9      	b.n	801256e <uxr_serialize_ObjectVariant.part.0+0x9a>
 80125ba:	bf00      	nop

080125bc <uxr_deserialize_DATAWRITER_Representation>:
 80125bc:	b570      	push	{r4, r5, r6, lr}
 80125be:	4606      	mov	r6, r0
 80125c0:	460d      	mov	r5, r1
 80125c2:	f7f8 fcc3 	bl	800af4c <ucdr_deserialize_uint8_t>
 80125c6:	4604      	mov	r4, r0
 80125c8:	b130      	cbz	r0, 80125d8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80125ca:	782b      	ldrb	r3, [r5, #0]
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d00c      	beq.n	80125ea <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80125d0:	2b03      	cmp	r3, #3
 80125d2:	d012      	beq.n	80125fa <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d008      	beq.n	80125ea <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80125d8:	2202      	movs	r2, #2
 80125da:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80125de:	4630      	mov	r0, r6
 80125e0:	f7fc ff80 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 80125e4:	4020      	ands	r0, r4
 80125e6:	b2c0      	uxtb	r0, r0
 80125e8:	bd70      	pop	{r4, r5, r6, pc}
 80125ea:	6869      	ldr	r1, [r5, #4]
 80125ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125f0:	4630      	mov	r0, r6
 80125f2:	f006 fbbb 	bl	8018d6c <ucdr_deserialize_string>
 80125f6:	4604      	mov	r4, r0
 80125f8:	e7ee      	b.n	80125d8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80125fa:	1d2b      	adds	r3, r5, #4
 80125fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012600:	f105 0108 	add.w	r1, r5, #8
 8012604:	4630      	mov	r0, r6
 8012606:	f7fd f965 	bl	800f8d4 <ucdr_deserialize_sequence_uint8_t>
 801260a:	4604      	mov	r4, r0
 801260c:	e7e4      	b.n	80125d8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801260e:	bf00      	nop

08012610 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012610:	b570      	push	{r4, r5, r6, lr}
 8012612:	460d      	mov	r5, r1
 8012614:	7809      	ldrb	r1, [r1, #0]
 8012616:	4606      	mov	r6, r0
 8012618:	f7f8 fc54 	bl	800aec4 <ucdr_serialize_bool>
 801261c:	782b      	ldrb	r3, [r5, #0]
 801261e:	4604      	mov	r4, r0
 8012620:	b94b      	cbnz	r3, 8012636 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012622:	7a29      	ldrb	r1, [r5, #8]
 8012624:	4630      	mov	r0, r6
 8012626:	f7f8 fc4d 	bl	800aec4 <ucdr_serialize_bool>
 801262a:	7a2b      	ldrb	r3, [r5, #8]
 801262c:	4004      	ands	r4, r0
 801262e:	b2e4      	uxtb	r4, r4
 8012630:	b943      	cbnz	r3, 8012644 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012632:	4620      	mov	r0, r4
 8012634:	bd70      	pop	{r4, r5, r6, pc}
 8012636:	6869      	ldr	r1, [r5, #4]
 8012638:	4630      	mov	r0, r6
 801263a:	f006 fb89 	bl	8018d50 <ucdr_serialize_string>
 801263e:	4004      	ands	r4, r0
 8012640:	b2e4      	uxtb	r4, r4
 8012642:	e7ee      	b.n	8012622 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012644:	68e9      	ldr	r1, [r5, #12]
 8012646:	4630      	mov	r0, r6
 8012648:	f006 fb82 	bl	8018d50 <ucdr_serialize_string>
 801264c:	4004      	ands	r4, r0
 801264e:	4620      	mov	r0, r4
 8012650:	bd70      	pop	{r4, r5, r6, pc}
 8012652:	bf00      	nop

08012654 <uxr_serialize_OBJK_Topic_Binary>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	460d      	mov	r5, r1
 8012658:	6809      	ldr	r1, [r1, #0]
 801265a:	4606      	mov	r6, r0
 801265c:	f006 fb78 	bl	8018d50 <ucdr_serialize_string>
 8012660:	7929      	ldrb	r1, [r5, #4]
 8012662:	4604      	mov	r4, r0
 8012664:	4630      	mov	r0, r6
 8012666:	f7f8 fc2d 	bl	800aec4 <ucdr_serialize_bool>
 801266a:	792b      	ldrb	r3, [r5, #4]
 801266c:	4004      	ands	r4, r0
 801266e:	b2e4      	uxtb	r4, r4
 8012670:	b943      	cbnz	r3, 8012684 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012672:	7b29      	ldrb	r1, [r5, #12]
 8012674:	4630      	mov	r0, r6
 8012676:	f7f8 fc25 	bl	800aec4 <ucdr_serialize_bool>
 801267a:	7b2b      	ldrb	r3, [r5, #12]
 801267c:	4004      	ands	r4, r0
 801267e:	b93b      	cbnz	r3, 8012690 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012680:	4620      	mov	r0, r4
 8012682:	bd70      	pop	{r4, r5, r6, pc}
 8012684:	68a9      	ldr	r1, [r5, #8]
 8012686:	4630      	mov	r0, r6
 8012688:	f006 fb62 	bl	8018d50 <ucdr_serialize_string>
 801268c:	4004      	ands	r4, r0
 801268e:	e7f0      	b.n	8012672 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012690:	6929      	ldr	r1, [r5, #16]
 8012692:	4630      	mov	r0, r6
 8012694:	f006 fb5c 	bl	8018d50 <ucdr_serialize_string>
 8012698:	4004      	ands	r4, r0
 801269a:	b2e4      	uxtb	r4, r4
 801269c:	4620      	mov	r0, r4
 801269e:	bd70      	pop	{r4, r5, r6, pc}

080126a0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80126a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a4:	460c      	mov	r4, r1
 80126a6:	7809      	ldrb	r1, [r1, #0]
 80126a8:	4606      	mov	r6, r0
 80126aa:	f7f8 fc0b 	bl	800aec4 <ucdr_serialize_bool>
 80126ae:	7823      	ldrb	r3, [r4, #0]
 80126b0:	4605      	mov	r5, r0
 80126b2:	b96b      	cbnz	r3, 80126d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80126b4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80126b8:	4630      	mov	r0, r6
 80126ba:	f7f8 fc03 	bl	800aec4 <ucdr_serialize_bool>
 80126be:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80126c2:	4005      	ands	r5, r0
 80126c4:	b2ed      	uxtb	r5, r5
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d16a      	bne.n	80127a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80126ca:	4628      	mov	r0, r5
 80126cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d0:	6861      	ldr	r1, [r4, #4]
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7f8 fe40 	bl	800b358 <ucdr_serialize_uint32_t>
 80126d8:	6863      	ldr	r3, [r4, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d06c      	beq.n	80127b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80126de:	2800      	cmp	r0, #0
 80126e0:	d068      	beq.n	80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80126e2:	68a1      	ldr	r1, [r4, #8]
 80126e4:	4630      	mov	r0, r6
 80126e6:	f006 fb33 	bl	8018d50 <ucdr_serialize_string>
 80126ea:	6862      	ldr	r2, [r4, #4]
 80126ec:	2a01      	cmp	r2, #1
 80126ee:	d953      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d05f      	beq.n	80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80126f4:	68e1      	ldr	r1, [r4, #12]
 80126f6:	4630      	mov	r0, r6
 80126f8:	f006 fb2a 	bl	8018d50 <ucdr_serialize_string>
 80126fc:	6862      	ldr	r2, [r4, #4]
 80126fe:	2a02      	cmp	r2, #2
 8012700:	d94a      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012702:	2800      	cmp	r0, #0
 8012704:	d056      	beq.n	80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012706:	6921      	ldr	r1, [r4, #16]
 8012708:	4630      	mov	r0, r6
 801270a:	f006 fb21 	bl	8018d50 <ucdr_serialize_string>
 801270e:	6862      	ldr	r2, [r4, #4]
 8012710:	2a03      	cmp	r2, #3
 8012712:	d941      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012714:	2800      	cmp	r0, #0
 8012716:	d04d      	beq.n	80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012718:	6961      	ldr	r1, [r4, #20]
 801271a:	4630      	mov	r0, r6
 801271c:	f006 fb18 	bl	8018d50 <ucdr_serialize_string>
 8012720:	6862      	ldr	r2, [r4, #4]
 8012722:	2a04      	cmp	r2, #4
 8012724:	d938      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012726:	2800      	cmp	r0, #0
 8012728:	d044      	beq.n	80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801272a:	69a1      	ldr	r1, [r4, #24]
 801272c:	4630      	mov	r0, r6
 801272e:	f006 fb0f 	bl	8018d50 <ucdr_serialize_string>
 8012732:	6862      	ldr	r2, [r4, #4]
 8012734:	2a05      	cmp	r2, #5
 8012736:	d92f      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012738:	2800      	cmp	r0, #0
 801273a:	d03b      	beq.n	80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801273c:	69e1      	ldr	r1, [r4, #28]
 801273e:	4630      	mov	r0, r6
 8012740:	f006 fb06 	bl	8018d50 <ucdr_serialize_string>
 8012744:	6862      	ldr	r2, [r4, #4]
 8012746:	2a06      	cmp	r2, #6
 8012748:	d926      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801274a:	b398      	cbz	r0, 80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801274c:	6a21      	ldr	r1, [r4, #32]
 801274e:	4630      	mov	r0, r6
 8012750:	f006 fafe 	bl	8018d50 <ucdr_serialize_string>
 8012754:	6862      	ldr	r2, [r4, #4]
 8012756:	2a07      	cmp	r2, #7
 8012758:	d91e      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801275a:	b358      	cbz	r0, 80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801275c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801275e:	4630      	mov	r0, r6
 8012760:	f006 faf6 	bl	8018d50 <ucdr_serialize_string>
 8012764:	6862      	ldr	r2, [r4, #4]
 8012766:	2a08      	cmp	r2, #8
 8012768:	d916      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801276a:	b318      	cbz	r0, 80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801276c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801276e:	4630      	mov	r0, r6
 8012770:	f006 faee 	bl	8018d50 <ucdr_serialize_string>
 8012774:	6862      	ldr	r2, [r4, #4]
 8012776:	2a09      	cmp	r2, #9
 8012778:	d90e      	bls.n	8012798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801277a:	b1d8      	cbz	r0, 80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801277c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8012780:	2709      	movs	r7, #9
 8012782:	e000      	b.n	8012786 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012784:	b1b0      	cbz	r0, 80127b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012786:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801278a:	4630      	mov	r0, r6
 801278c:	f006 fae0 	bl	8018d50 <ucdr_serialize_string>
 8012790:	6862      	ldr	r2, [r4, #4]
 8012792:	3701      	adds	r7, #1
 8012794:	4297      	cmp	r7, r2
 8012796:	d3f5      	bcc.n	8012784 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012798:	ea05 0300 	and.w	r3, r5, r0
 801279c:	b2dd      	uxtb	r5, r3
 801279e:	e789      	b.n	80126b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80127a0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80127a2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80127a6:	4630      	mov	r0, r6
 80127a8:	f7fd f882 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 80127ac:	4005      	ands	r5, r0
 80127ae:	4628      	mov	r0, r5
 80127b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b4:	2500      	movs	r5, #0
 80127b6:	e77d      	b.n	80126b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80127b8:	4028      	ands	r0, r5
 80127ba:	b2c5      	uxtb	r5, r0
 80127bc:	e77a      	b.n	80126b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80127be:	bf00      	nop

080127c0 <uxr_serialize_OBJK_Publisher_Binary>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	460d      	mov	r5, r1
 80127c4:	7809      	ldrb	r1, [r1, #0]
 80127c6:	4606      	mov	r6, r0
 80127c8:	f7f8 fb7c 	bl	800aec4 <ucdr_serialize_bool>
 80127cc:	782b      	ldrb	r3, [r5, #0]
 80127ce:	4604      	mov	r4, r0
 80127d0:	b94b      	cbnz	r3, 80127e6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80127d2:	7a29      	ldrb	r1, [r5, #8]
 80127d4:	4630      	mov	r0, r6
 80127d6:	f7f8 fb75 	bl	800aec4 <ucdr_serialize_bool>
 80127da:	7a2b      	ldrb	r3, [r5, #8]
 80127dc:	4004      	ands	r4, r0
 80127de:	b2e4      	uxtb	r4, r4
 80127e0:	b943      	cbnz	r3, 80127f4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80127e2:	4620      	mov	r0, r4
 80127e4:	bd70      	pop	{r4, r5, r6, pc}
 80127e6:	6869      	ldr	r1, [r5, #4]
 80127e8:	4630      	mov	r0, r6
 80127ea:	f006 fab1 	bl	8018d50 <ucdr_serialize_string>
 80127ee:	4004      	ands	r4, r0
 80127f0:	b2e4      	uxtb	r4, r4
 80127f2:	e7ee      	b.n	80127d2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80127f4:	f105 010c 	add.w	r1, r5, #12
 80127f8:	4630      	mov	r0, r6
 80127fa:	f7ff ff51 	bl	80126a0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80127fe:	4004      	ands	r4, r0
 8012800:	4620      	mov	r0, r4
 8012802:	bd70      	pop	{r4, r5, r6, pc}

08012804 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012808:	460c      	mov	r4, r1
 801280a:	7809      	ldrb	r1, [r1, #0]
 801280c:	4606      	mov	r6, r0
 801280e:	f7f8 fb59 	bl	800aec4 <ucdr_serialize_bool>
 8012812:	7823      	ldrb	r3, [r4, #0]
 8012814:	4605      	mov	r5, r0
 8012816:	b96b      	cbnz	r3, 8012834 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012818:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801281c:	4630      	mov	r0, r6
 801281e:	f7f8 fb51 	bl	800aec4 <ucdr_serialize_bool>
 8012822:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012826:	4005      	ands	r5, r0
 8012828:	b2ed      	uxtb	r5, r5
 801282a:	2b00      	cmp	r3, #0
 801282c:	d16a      	bne.n	8012904 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801282e:	4628      	mov	r0, r5
 8012830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012834:	6861      	ldr	r1, [r4, #4]
 8012836:	4630      	mov	r0, r6
 8012838:	f7f8 fd8e 	bl	800b358 <ucdr_serialize_uint32_t>
 801283c:	6863      	ldr	r3, [r4, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d06c      	beq.n	801291c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 8012842:	2800      	cmp	r0, #0
 8012844:	d068      	beq.n	8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012846:	68a1      	ldr	r1, [r4, #8]
 8012848:	4630      	mov	r0, r6
 801284a:	f006 fa81 	bl	8018d50 <ucdr_serialize_string>
 801284e:	6862      	ldr	r2, [r4, #4]
 8012850:	2a01      	cmp	r2, #1
 8012852:	d953      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012854:	2800      	cmp	r0, #0
 8012856:	d05f      	beq.n	8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012858:	68e1      	ldr	r1, [r4, #12]
 801285a:	4630      	mov	r0, r6
 801285c:	f006 fa78 	bl	8018d50 <ucdr_serialize_string>
 8012860:	6862      	ldr	r2, [r4, #4]
 8012862:	2a02      	cmp	r2, #2
 8012864:	d94a      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012866:	2800      	cmp	r0, #0
 8012868:	d056      	beq.n	8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801286a:	6921      	ldr	r1, [r4, #16]
 801286c:	4630      	mov	r0, r6
 801286e:	f006 fa6f 	bl	8018d50 <ucdr_serialize_string>
 8012872:	6862      	ldr	r2, [r4, #4]
 8012874:	2a03      	cmp	r2, #3
 8012876:	d941      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012878:	2800      	cmp	r0, #0
 801287a:	d04d      	beq.n	8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801287c:	6961      	ldr	r1, [r4, #20]
 801287e:	4630      	mov	r0, r6
 8012880:	f006 fa66 	bl	8018d50 <ucdr_serialize_string>
 8012884:	6862      	ldr	r2, [r4, #4]
 8012886:	2a04      	cmp	r2, #4
 8012888:	d938      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801288a:	2800      	cmp	r0, #0
 801288c:	d044      	beq.n	8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801288e:	69a1      	ldr	r1, [r4, #24]
 8012890:	4630      	mov	r0, r6
 8012892:	f006 fa5d 	bl	8018d50 <ucdr_serialize_string>
 8012896:	6862      	ldr	r2, [r4, #4]
 8012898:	2a05      	cmp	r2, #5
 801289a:	d92f      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801289c:	2800      	cmp	r0, #0
 801289e:	d03b      	beq.n	8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80128a0:	69e1      	ldr	r1, [r4, #28]
 80128a2:	4630      	mov	r0, r6
 80128a4:	f006 fa54 	bl	8018d50 <ucdr_serialize_string>
 80128a8:	6862      	ldr	r2, [r4, #4]
 80128aa:	2a06      	cmp	r2, #6
 80128ac:	d926      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80128ae:	b398      	cbz	r0, 8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80128b0:	6a21      	ldr	r1, [r4, #32]
 80128b2:	4630      	mov	r0, r6
 80128b4:	f006 fa4c 	bl	8018d50 <ucdr_serialize_string>
 80128b8:	6862      	ldr	r2, [r4, #4]
 80128ba:	2a07      	cmp	r2, #7
 80128bc:	d91e      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80128be:	b358      	cbz	r0, 8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80128c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80128c2:	4630      	mov	r0, r6
 80128c4:	f006 fa44 	bl	8018d50 <ucdr_serialize_string>
 80128c8:	6862      	ldr	r2, [r4, #4]
 80128ca:	2a08      	cmp	r2, #8
 80128cc:	d916      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80128ce:	b318      	cbz	r0, 8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80128d0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80128d2:	4630      	mov	r0, r6
 80128d4:	f006 fa3c 	bl	8018d50 <ucdr_serialize_string>
 80128d8:	6862      	ldr	r2, [r4, #4]
 80128da:	2a09      	cmp	r2, #9
 80128dc:	d90e      	bls.n	80128fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80128de:	b1d8      	cbz	r0, 8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80128e0:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80128e4:	2709      	movs	r7, #9
 80128e6:	e000      	b.n	80128ea <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80128e8:	b1b0      	cbz	r0, 8012918 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80128ea:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80128ee:	4630      	mov	r0, r6
 80128f0:	f006 fa2e 	bl	8018d50 <ucdr_serialize_string>
 80128f4:	6862      	ldr	r2, [r4, #4]
 80128f6:	3701      	adds	r7, #1
 80128f8:	4297      	cmp	r7, r2
 80128fa:	d3f5      	bcc.n	80128e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80128fc:	ea05 0300 	and.w	r3, r5, r0
 8012900:	b2dd      	uxtb	r5, r3
 8012902:	e789      	b.n	8012818 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012904:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012906:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801290a:	4630      	mov	r0, r6
 801290c:	f7fc ffd0 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 8012910:	4005      	ands	r5, r0
 8012912:	4628      	mov	r0, r5
 8012914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012918:	2500      	movs	r5, #0
 801291a:	e77d      	b.n	8012818 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801291c:	4028      	ands	r0, r5
 801291e:	b2c5      	uxtb	r5, r0
 8012920:	e77a      	b.n	8012818 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012922:	bf00      	nop

08012924 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	460d      	mov	r5, r1
 8012928:	7809      	ldrb	r1, [r1, #0]
 801292a:	4606      	mov	r6, r0
 801292c:	f7f8 faca 	bl	800aec4 <ucdr_serialize_bool>
 8012930:	782b      	ldrb	r3, [r5, #0]
 8012932:	4604      	mov	r4, r0
 8012934:	b94b      	cbnz	r3, 801294a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012936:	7a29      	ldrb	r1, [r5, #8]
 8012938:	4630      	mov	r0, r6
 801293a:	f7f8 fac3 	bl	800aec4 <ucdr_serialize_bool>
 801293e:	7a2b      	ldrb	r3, [r5, #8]
 8012940:	4004      	ands	r4, r0
 8012942:	b2e4      	uxtb	r4, r4
 8012944:	b943      	cbnz	r3, 8012958 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012946:	4620      	mov	r0, r4
 8012948:	bd70      	pop	{r4, r5, r6, pc}
 801294a:	6869      	ldr	r1, [r5, #4]
 801294c:	4630      	mov	r0, r6
 801294e:	f006 f9ff 	bl	8018d50 <ucdr_serialize_string>
 8012952:	4004      	ands	r4, r0
 8012954:	b2e4      	uxtb	r4, r4
 8012956:	e7ee      	b.n	8012936 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012958:	f105 010c 	add.w	r1, r5, #12
 801295c:	4630      	mov	r0, r6
 801295e:	f7ff ff51 	bl	8012804 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012962:	4004      	ands	r4, r0
 8012964:	4620      	mov	r0, r4
 8012966:	bd70      	pop	{r4, r5, r6, pc}

08012968 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	460d      	mov	r5, r1
 801296c:	8809      	ldrh	r1, [r1, #0]
 801296e:	4606      	mov	r6, r0
 8012970:	f7f8 fb02 	bl	800af78 <ucdr_serialize_uint16_t>
 8012974:	78a9      	ldrb	r1, [r5, #2]
 8012976:	4604      	mov	r4, r0
 8012978:	4630      	mov	r0, r6
 801297a:	f7f8 faa3 	bl	800aec4 <ucdr_serialize_bool>
 801297e:	78ab      	ldrb	r3, [r5, #2]
 8012980:	4004      	ands	r4, r0
 8012982:	b2e4      	uxtb	r4, r4
 8012984:	b9b3      	cbnz	r3, 80129b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8012986:	79a9      	ldrb	r1, [r5, #6]
 8012988:	4630      	mov	r0, r6
 801298a:	f7f8 fa9b 	bl	800aec4 <ucdr_serialize_bool>
 801298e:	79ab      	ldrb	r3, [r5, #6]
 8012990:	4004      	ands	r4, r0
 8012992:	bb33      	cbnz	r3, 80129e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8012994:	7b29      	ldrb	r1, [r5, #12]
 8012996:	4630      	mov	r0, r6
 8012998:	f7f8 fa94 	bl	800aec4 <ucdr_serialize_bool>
 801299c:	7b2b      	ldrb	r3, [r5, #12]
 801299e:	4004      	ands	r4, r0
 80129a0:	b9c3      	cbnz	r3, 80129d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 80129a2:	7d29      	ldrb	r1, [r5, #20]
 80129a4:	4630      	mov	r0, r6
 80129a6:	f7f8 fa8d 	bl	800aec4 <ucdr_serialize_bool>
 80129aa:	7d2b      	ldrb	r3, [r5, #20]
 80129ac:	4004      	ands	r4, r0
 80129ae:	b93b      	cbnz	r3, 80129c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 80129b0:	4620      	mov	r0, r4
 80129b2:	bd70      	pop	{r4, r5, r6, pc}
 80129b4:	88a9      	ldrh	r1, [r5, #4]
 80129b6:	4630      	mov	r0, r6
 80129b8:	f7f8 fade 	bl	800af78 <ucdr_serialize_uint16_t>
 80129bc:	4004      	ands	r4, r0
 80129be:	e7e2      	b.n	8012986 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80129c0:	69aa      	ldr	r2, [r5, #24]
 80129c2:	f105 011c 	add.w	r1, r5, #28
 80129c6:	4630      	mov	r0, r6
 80129c8:	f7fc ff72 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 80129cc:	4004      	ands	r4, r0
 80129ce:	b2e4      	uxtb	r4, r4
 80129d0:	4620      	mov	r0, r4
 80129d2:	bd70      	pop	{r4, r5, r6, pc}
 80129d4:	6929      	ldr	r1, [r5, #16]
 80129d6:	4630      	mov	r0, r6
 80129d8:	f7f8 fcbe 	bl	800b358 <ucdr_serialize_uint32_t>
 80129dc:	4004      	ands	r4, r0
 80129de:	b2e4      	uxtb	r4, r4
 80129e0:	e7df      	b.n	80129a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 80129e2:	68a9      	ldr	r1, [r5, #8]
 80129e4:	4630      	mov	r0, r6
 80129e6:	f7f8 fcb7 	bl	800b358 <ucdr_serialize_uint32_t>
 80129ea:	4004      	ands	r4, r0
 80129ec:	b2e4      	uxtb	r4, r4
 80129ee:	e7d1      	b.n	8012994 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

080129f0 <uxr_serialize_OBJK_DataReader_Binary>:
 80129f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f2:	2202      	movs	r2, #2
 80129f4:	460c      	mov	r4, r1
 80129f6:	4606      	mov	r6, r0
 80129f8:	f7fc fd10 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80129fc:	78a1      	ldrb	r1, [r4, #2]
 80129fe:	4605      	mov	r5, r0
 8012a00:	4630      	mov	r0, r6
 8012a02:	f7f8 fa5f 	bl	800aec4 <ucdr_serialize_bool>
 8012a06:	78a3      	ldrb	r3, [r4, #2]
 8012a08:	4005      	ands	r5, r0
 8012a0a:	b2ed      	uxtb	r5, r5
 8012a0c:	b90b      	cbnz	r3, 8012a12 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012a0e:	4628      	mov	r0, r5
 8012a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a12:	f104 0108 	add.w	r1, r4, #8
 8012a16:	4630      	mov	r0, r6
 8012a18:	f7ff ffa6 	bl	8012968 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012a1c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a20:	4607      	mov	r7, r0
 8012a22:	4630      	mov	r0, r6
 8012a24:	f7f8 fa4e 	bl	800aec4 <ucdr_serialize_bool>
 8012a28:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012a2c:	4007      	ands	r7, r0
 8012a2e:	b2ff      	uxtb	r7, r7
 8012a30:	b95b      	cbnz	r3, 8012a4a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012a32:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012a36:	4630      	mov	r0, r6
 8012a38:	f7f8 fa44 	bl	800aec4 <ucdr_serialize_bool>
 8012a3c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012a40:	4007      	ands	r7, r0
 8012a42:	b94b      	cbnz	r3, 8012a58 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012a44:	403d      	ands	r5, r7
 8012a46:	4628      	mov	r0, r5
 8012a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a4a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f7f8 fec6 	bl	800b7e0 <ucdr_serialize_uint64_t>
 8012a54:	4007      	ands	r7, r0
 8012a56:	e7ec      	b.n	8012a32 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012a58:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	f006 f978 	bl	8018d50 <ucdr_serialize_string>
 8012a60:	4007      	ands	r7, r0
 8012a62:	b2ff      	uxtb	r7, r7
 8012a64:	e7ee      	b.n	8012a44 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012a66:	bf00      	nop

08012a68 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	460d      	mov	r5, r1
 8012a6e:	4606      	mov	r6, r0
 8012a70:	f7fc fcd4 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012a74:	78a9      	ldrb	r1, [r5, #2]
 8012a76:	4604      	mov	r4, r0
 8012a78:	4630      	mov	r0, r6
 8012a7a:	f7f8 fa23 	bl	800aec4 <ucdr_serialize_bool>
 8012a7e:	78ab      	ldrb	r3, [r5, #2]
 8012a80:	4004      	ands	r4, r0
 8012a82:	b2e4      	uxtb	r4, r4
 8012a84:	b90b      	cbnz	r3, 8012a8a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012a86:	4620      	mov	r0, r4
 8012a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a8a:	f105 0108 	add.w	r1, r5, #8
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f7ff ff6a 	bl	8012968 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012a94:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012a98:	4607      	mov	r7, r0
 8012a9a:	4630      	mov	r0, r6
 8012a9c:	f7f8 fa12 	bl	800aec4 <ucdr_serialize_bool>
 8012aa0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012aa4:	4007      	ands	r7, r0
 8012aa6:	b2ff      	uxtb	r7, r7
 8012aa8:	b913      	cbnz	r3, 8012ab0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012aaa:	403c      	ands	r4, r7
 8012aac:	4620      	mov	r0, r4
 8012aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ab0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	f7f8 fe93 	bl	800b7e0 <ucdr_serialize_uint64_t>
 8012aba:	4007      	ands	r7, r0
 8012abc:	e7f5      	b.n	8012aaa <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012abe:	bf00      	nop

08012ac0 <uxr_deserialize_ObjectVariant>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	4605      	mov	r5, r0
 8012ac4:	460e      	mov	r6, r1
 8012ac6:	f7f8 fa41 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012aca:	b168      	cbz	r0, 8012ae8 <uxr_deserialize_ObjectVariant+0x28>
 8012acc:	7833      	ldrb	r3, [r6, #0]
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	4604      	mov	r4, r0
 8012ad2:	2b0d      	cmp	r3, #13
 8012ad4:	d809      	bhi.n	8012aea <uxr_deserialize_ObjectVariant+0x2a>
 8012ad6:	e8df f003 	tbb	[pc, r3]
 8012ada:	0a64      	.short	0x0a64
 8012adc:	0a0a2323 	.word	0x0a0a2323
 8012ae0:	10080a0a 	.word	0x10080a0a
 8012ae4:	5e411010 	.word	0x5e411010
 8012ae8:	2400      	movs	r4, #0
 8012aea:	4620      	mov	r0, r4
 8012aec:	bd70      	pop	{r4, r5, r6, pc}
 8012aee:	1d31      	adds	r1, r6, #4
 8012af0:	4628      	mov	r0, r5
 8012af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012af6:	f7ff bd61 	b.w	80125bc <uxr_deserialize_DATAWRITER_Representation>
 8012afa:	1d31      	adds	r1, r6, #4
 8012afc:	4628      	mov	r0, r5
 8012afe:	f7f8 fa25 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d0f0      	beq.n	8012ae8 <uxr_deserialize_ObjectVariant+0x28>
 8012b06:	7933      	ldrb	r3, [r6, #4]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d001      	beq.n	8012b10 <uxr_deserialize_ObjectVariant+0x50>
 8012b0c:	2b02      	cmp	r3, #2
 8012b0e:	d1ec      	bne.n	8012aea <uxr_deserialize_ObjectVariant+0x2a>
 8012b10:	68b1      	ldr	r1, [r6, #8]
 8012b12:	4628      	mov	r0, r5
 8012b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b1c:	f006 b926 	b.w	8018d6c <ucdr_deserialize_string>
 8012b20:	1d31      	adds	r1, r6, #4
 8012b22:	4628      	mov	r0, r5
 8012b24:	f7f8 fa12 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	b170      	cbz	r0, 8012b4a <uxr_deserialize_ObjectVariant+0x8a>
 8012b2c:	7933      	ldrb	r3, [r6, #4]
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	d053      	beq.n	8012bda <uxr_deserialize_ObjectVariant+0x11a>
 8012b32:	2b03      	cmp	r3, #3
 8012b34:	d109      	bne.n	8012b4a <uxr_deserialize_ObjectVariant+0x8a>
 8012b36:	f106 0308 	add.w	r3, r6, #8
 8012b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b3e:	f106 010c 	add.w	r1, r6, #12
 8012b42:	4628      	mov	r0, r5
 8012b44:	f7fc fec6 	bl	800f8d4 <ucdr_deserialize_sequence_uint8_t>
 8012b48:	4604      	mov	r4, r0
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012b50:	4628      	mov	r0, r5
 8012b52:	f7fc fcc7 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012b56:	4004      	ands	r4, r0
 8012b58:	b2e4      	uxtb	r4, r4
 8012b5a:	e7c6      	b.n	8012aea <uxr_deserialize_ObjectVariant+0x2a>
 8012b5c:	2204      	movs	r2, #4
 8012b5e:	18b1      	adds	r1, r6, r2
 8012b60:	4628      	mov	r0, r5
 8012b62:	f7fc fcbf 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012b66:	2202      	movs	r2, #2
 8012b68:	f106 0108 	add.w	r1, r6, #8
 8012b6c:	4604      	mov	r4, r0
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f7fc fcb8 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012b74:	2202      	movs	r2, #2
 8012b76:	4004      	ands	r4, r0
 8012b78:	f106 010a 	add.w	r1, r6, #10
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	f7fc fcb1 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012b82:	b2e4      	uxtb	r4, r4
 8012b84:	4603      	mov	r3, r0
 8012b86:	f106 010c 	add.w	r1, r6, #12
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	401c      	ands	r4, r3
 8012b8e:	f7f8 f9af 	bl	800aef0 <ucdr_deserialize_bool>
 8012b92:	4004      	ands	r4, r0
 8012b94:	e7a9      	b.n	8012aea <uxr_deserialize_ObjectVariant+0x2a>
 8012b96:	1d31      	adds	r1, r6, #4
 8012b98:	4628      	mov	r0, r5
 8012b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b9e:	f7ff bbc3 	b.w	8012328 <uxr_deserialize_CLIENT_Representation>
 8012ba2:	1d31      	adds	r1, r6, #4
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f7f8 f9d1 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012baa:	4604      	mov	r4, r0
 8012bac:	b168      	cbz	r0, 8012bca <uxr_deserialize_ObjectVariant+0x10a>
 8012bae:	7933      	ldrb	r3, [r6, #4]
 8012bb0:	2b02      	cmp	r3, #2
 8012bb2:	d003      	beq.n	8012bbc <uxr_deserialize_ObjectVariant+0xfc>
 8012bb4:	2b03      	cmp	r3, #3
 8012bb6:	d018      	beq.n	8012bea <uxr_deserialize_ObjectVariant+0x12a>
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d106      	bne.n	8012bca <uxr_deserialize_ObjectVariant+0x10a>
 8012bbc:	68b1      	ldr	r1, [r6, #8]
 8012bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f006 f8d2 	bl	8018d6c <ucdr_deserialize_string>
 8012bc8:	4604      	mov	r4, r0
 8012bca:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f7f8 ff58 	bl	800ba84 <ucdr_deserialize_int16_t>
 8012bd4:	4004      	ands	r4, r0
 8012bd6:	b2e4      	uxtb	r4, r4
 8012bd8:	e787      	b.n	8012aea <uxr_deserialize_ObjectVariant+0x2a>
 8012bda:	68b1      	ldr	r1, [r6, #8]
 8012bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012be0:	4628      	mov	r0, r5
 8012be2:	f006 f8c3 	bl	8018d6c <ucdr_deserialize_string>
 8012be6:	4604      	mov	r4, r0
 8012be8:	e7af      	b.n	8012b4a <uxr_deserialize_ObjectVariant+0x8a>
 8012bea:	f106 0308 	add.w	r3, r6, #8
 8012bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bf2:	f106 010c 	add.w	r1, r6, #12
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	f7fc fe6c 	bl	800f8d4 <ucdr_deserialize_sequence_uint8_t>
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	e7e4      	b.n	8012bca <uxr_deserialize_ObjectVariant+0x10a>

08012c00 <uxr_deserialize_BaseObjectRequest>:
 8012c00:	b570      	push	{r4, r5, r6, lr}
 8012c02:	2202      	movs	r2, #2
 8012c04:	4605      	mov	r5, r0
 8012c06:	460e      	mov	r6, r1
 8012c08:	f7fc fc6c 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	4604      	mov	r4, r0
 8012c10:	18b1      	adds	r1, r6, r2
 8012c12:	4628      	mov	r0, r5
 8012c14:	f7fc fc66 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012c18:	4020      	ands	r0, r4
 8012c1a:	b2c0      	uxtb	r0, r0
 8012c1c:	bd70      	pop	{r4, r5, r6, pc}
 8012c1e:	bf00      	nop

08012c20 <uxr_serialize_ActivityInfoVariant>:
 8012c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c24:	460d      	mov	r5, r1
 8012c26:	7809      	ldrb	r1, [r1, #0]
 8012c28:	4606      	mov	r6, r0
 8012c2a:	f7f8 f979 	bl	800af20 <ucdr_serialize_uint8_t>
 8012c2e:	b130      	cbz	r0, 8012c3e <uxr_serialize_ActivityInfoVariant+0x1e>
 8012c30:	782b      	ldrb	r3, [r5, #0]
 8012c32:	2b06      	cmp	r3, #6
 8012c34:	d014      	beq.n	8012c60 <uxr_serialize_ActivityInfoVariant+0x40>
 8012c36:	2b0d      	cmp	r3, #13
 8012c38:	d019      	beq.n	8012c6e <uxr_serialize_ActivityInfoVariant+0x4e>
 8012c3a:	2b05      	cmp	r3, #5
 8012c3c:	d001      	beq.n	8012c42 <uxr_serialize_ActivityInfoVariant+0x22>
 8012c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c42:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012c46:	4630      	mov	r0, r6
 8012c48:	f7f8 fe92 	bl	800b970 <ucdr_serialize_int16_t>
 8012c4c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012c50:	4604      	mov	r4, r0
 8012c52:	4630      	mov	r0, r6
 8012c54:	f7f8 fdc4 	bl	800b7e0 <ucdr_serialize_uint64_t>
 8012c58:	4020      	ands	r0, r4
 8012c5a:	b2c0      	uxtb	r0, r0
 8012c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c60:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012c64:	4630      	mov	r0, r6
 8012c66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c6a:	f7f8 be81 	b.w	800b970 <ucdr_serialize_int16_t>
 8012c6e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012c72:	4630      	mov	r0, r6
 8012c74:	f7f8 fe7c 	bl	800b970 <ucdr_serialize_int16_t>
 8012c78:	68e9      	ldr	r1, [r5, #12]
 8012c7a:	4681      	mov	r9, r0
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	f7f8 fb6b 	bl	800b358 <ucdr_serialize_uint32_t>
 8012c82:	68eb      	ldr	r3, [r5, #12]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d051      	beq.n	8012d2c <uxr_serialize_ActivityInfoVariant+0x10c>
 8012c88:	b1e8      	cbz	r0, 8012cc6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012c8a:	f105 0714 	add.w	r7, r5, #20
 8012c8e:	f04f 0800 	mov.w	r8, #0
 8012c92:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8012c96:	4630      	mov	r0, r6
 8012c98:	f7f8 f942 	bl	800af20 <ucdr_serialize_uint8_t>
 8012c9c:	b198      	cbz	r0, 8012cc6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012c9e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d839      	bhi.n	8012d1a <uxr_serialize_ActivityInfoVariant+0xfa>
 8012ca6:	e8df f003 	tbb	[pc, r3]
 8012caa:	1e2b      	.short	0x1e2b
 8012cac:	0211      	.short	0x0211
 8012cae:	6839      	ldr	r1, [r7, #0]
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f006 f84d 	bl	8018d50 <ucdr_serialize_string>
 8012cb6:	68eb      	ldr	r3, [r5, #12]
 8012cb8:	f108 0801 	add.w	r8, r8, #1
 8012cbc:	4598      	cmp	r8, r3
 8012cbe:	d231      	bcs.n	8012d24 <uxr_serialize_ActivityInfoVariant+0x104>
 8012cc0:	3718      	adds	r7, #24
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d1e5      	bne.n	8012c92 <uxr_serialize_ActivityInfoVariant+0x72>
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ccc:	2210      	movs	r2, #16
 8012cce:	4639      	mov	r1, r7
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f7fc fba3 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012cd6:	6939      	ldr	r1, [r7, #16]
 8012cd8:	4604      	mov	r4, r0
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f7f8 fb3c 	bl	800b358 <ucdr_serialize_uint32_t>
 8012ce0:	4020      	ands	r0, r4
 8012ce2:	b2c0      	uxtb	r0, r0
 8012ce4:	e7e7      	b.n	8012cb6 <uxr_serialize_ActivityInfoVariant+0x96>
 8012ce6:	2204      	movs	r2, #4
 8012ce8:	4639      	mov	r1, r7
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7fc fb96 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012cf0:	88b9      	ldrh	r1, [r7, #4]
 8012cf2:	4604      	mov	r4, r0
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f7f8 f93f 	bl	800af78 <ucdr_serialize_uint16_t>
 8012cfa:	4020      	ands	r0, r4
 8012cfc:	b2c0      	uxtb	r0, r0
 8012cfe:	e7da      	b.n	8012cb6 <uxr_serialize_ActivityInfoVariant+0x96>
 8012d00:	2202      	movs	r2, #2
 8012d02:	4639      	mov	r1, r7
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7fc fb89 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012d0a:	78b9      	ldrb	r1, [r7, #2]
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	4630      	mov	r0, r6
 8012d10:	f7f8 f906 	bl	800af20 <ucdr_serialize_uint8_t>
 8012d14:	4020      	ands	r0, r4
 8012d16:	b2c0      	uxtb	r0, r0
 8012d18:	e7cd      	b.n	8012cb6 <uxr_serialize_ActivityInfoVariant+0x96>
 8012d1a:	68eb      	ldr	r3, [r5, #12]
 8012d1c:	f108 0801 	add.w	r8, r8, #1
 8012d20:	4598      	cmp	r8, r3
 8012d22:	d308      	bcc.n	8012d36 <uxr_serialize_ActivityInfoVariant+0x116>
 8012d24:	ea09 0000 	and.w	r0, r9, r0
 8012d28:	b2c0      	uxtb	r0, r0
 8012d2a:	e788      	b.n	8012c3e <uxr_serialize_ActivityInfoVariant+0x1e>
 8012d2c:	ea09 0900 	and.w	r9, r9, r0
 8012d30:	fa5f f089 	uxtb.w	r0, r9
 8012d34:	e783      	b.n	8012c3e <uxr_serialize_ActivityInfoVariant+0x1e>
 8012d36:	3718      	adds	r7, #24
 8012d38:	e7ab      	b.n	8012c92 <uxr_serialize_ActivityInfoVariant+0x72>
 8012d3a:	bf00      	nop

08012d3c <uxr_deserialize_BaseObjectReply>:
 8012d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d40:	2202      	movs	r2, #2
 8012d42:	4606      	mov	r6, r0
 8012d44:	460f      	mov	r7, r1
 8012d46:	f7fc fbcd 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	18b9      	adds	r1, r7, r2
 8012d4e:	4605      	mov	r5, r0
 8012d50:	4630      	mov	r0, r6
 8012d52:	f7fc fbc7 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012d56:	1d39      	adds	r1, r7, #4
 8012d58:	4680      	mov	r8, r0
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f7f8 f8f6 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012d60:	1d79      	adds	r1, r7, #5
 8012d62:	4604      	mov	r4, r0
 8012d64:	4630      	mov	r0, r6
 8012d66:	f7f8 f8f1 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012d6a:	ea05 0508 	and.w	r5, r5, r8
 8012d6e:	402c      	ands	r4, r5
 8012d70:	4020      	ands	r0, r4
 8012d72:	b2c0      	uxtb	r0, r0
 8012d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d78 <uxr_serialize_ReadSpecification>:
 8012d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7c:	460d      	mov	r5, r1
 8012d7e:	7809      	ldrb	r1, [r1, #0]
 8012d80:	4606      	mov	r6, r0
 8012d82:	f7f8 f8cd 	bl	800af20 <ucdr_serialize_uint8_t>
 8012d86:	7869      	ldrb	r1, [r5, #1]
 8012d88:	4604      	mov	r4, r0
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7f8 f8c8 	bl	800af20 <ucdr_serialize_uint8_t>
 8012d90:	78a9      	ldrb	r1, [r5, #2]
 8012d92:	4004      	ands	r4, r0
 8012d94:	4630      	mov	r0, r6
 8012d96:	f7f8 f895 	bl	800aec4 <ucdr_serialize_bool>
 8012d9a:	78ab      	ldrb	r3, [r5, #2]
 8012d9c:	b2e4      	uxtb	r4, r4
 8012d9e:	4004      	ands	r4, r0
 8012da0:	b94b      	cbnz	r3, 8012db6 <uxr_serialize_ReadSpecification+0x3e>
 8012da2:	7a29      	ldrb	r1, [r5, #8]
 8012da4:	4630      	mov	r0, r6
 8012da6:	f7f8 f88d 	bl	800aec4 <ucdr_serialize_bool>
 8012daa:	7a2b      	ldrb	r3, [r5, #8]
 8012dac:	4004      	ands	r4, r0
 8012dae:	b943      	cbnz	r3, 8012dc2 <uxr_serialize_ReadSpecification+0x4a>
 8012db0:	4620      	mov	r0, r4
 8012db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db6:	6869      	ldr	r1, [r5, #4]
 8012db8:	4630      	mov	r0, r6
 8012dba:	f005 ffc9 	bl	8018d50 <ucdr_serialize_string>
 8012dbe:	4004      	ands	r4, r0
 8012dc0:	e7ef      	b.n	8012da2 <uxr_serialize_ReadSpecification+0x2a>
 8012dc2:	8969      	ldrh	r1, [r5, #10]
 8012dc4:	4630      	mov	r0, r6
 8012dc6:	f7f8 f8d7 	bl	800af78 <ucdr_serialize_uint16_t>
 8012dca:	89a9      	ldrh	r1, [r5, #12]
 8012dcc:	4607      	mov	r7, r0
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f7f8 f8d2 	bl	800af78 <ucdr_serialize_uint16_t>
 8012dd4:	89e9      	ldrh	r1, [r5, #14]
 8012dd6:	4007      	ands	r7, r0
 8012dd8:	4630      	mov	r0, r6
 8012dda:	f7f8 f8cd 	bl	800af78 <ucdr_serialize_uint16_t>
 8012dde:	8a29      	ldrh	r1, [r5, #16]
 8012de0:	4680      	mov	r8, r0
 8012de2:	4630      	mov	r0, r6
 8012de4:	f7f8 f8c8 	bl	800af78 <ucdr_serialize_uint16_t>
 8012de8:	b2ff      	uxtb	r7, r7
 8012dea:	ea04 0507 	and.w	r5, r4, r7
 8012dee:	ea05 0508 	and.w	r5, r5, r8
 8012df2:	ea00 0405 	and.w	r4, r0, r5
 8012df6:	4620      	mov	r0, r4
 8012df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dfc <uxr_serialize_CREATE_CLIENT_Payload>:
 8012dfc:	f7ff ba3a 	b.w	8012274 <uxr_serialize_CLIENT_Representation>

08012e00 <uxr_serialize_CREATE_Payload>:
 8012e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e02:	2202      	movs	r2, #2
 8012e04:	4606      	mov	r6, r0
 8012e06:	460d      	mov	r5, r1
 8012e08:	f7fc fb08 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012e0c:	2202      	movs	r2, #2
 8012e0e:	18a9      	adds	r1, r5, r2
 8012e10:	4604      	mov	r4, r0
 8012e12:	4630      	mov	r0, r6
 8012e14:	f7fc fb02 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012e18:	7929      	ldrb	r1, [r5, #4]
 8012e1a:	4607      	mov	r7, r0
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7f8 f87f 	bl	800af20 <ucdr_serialize_uint8_t>
 8012e22:	b170      	cbz	r0, 8012e42 <uxr_serialize_CREATE_Payload+0x42>
 8012e24:	792b      	ldrb	r3, [r5, #4]
 8012e26:	403c      	ands	r4, r7
 8012e28:	3b01      	subs	r3, #1
 8012e2a:	b2e4      	uxtb	r4, r4
 8012e2c:	2b0d      	cmp	r3, #13
 8012e2e:	d809      	bhi.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012e30:	e8df f003 	tbb	[pc, r3]
 8012e34:	23230a3e 	.word	0x23230a3e
 8012e38:	0a0a0a0a 	.word	0x0a0a0a0a
 8012e3c:	12121208 	.word	0x12121208
 8012e40:	5f58      	.short	0x5f58
 8012e42:	2400      	movs	r4, #0
 8012e44:	4620      	mov	r0, r4
 8012e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e48:	f105 0108 	add.w	r1, r5, #8
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f7ff fb19 	bl	8012484 <uxr_serialize_DATAWRITER_Representation>
 8012e52:	4004      	ands	r4, r0
 8012e54:	4620      	mov	r0, r4
 8012e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e58:	7a29      	ldrb	r1, [r5, #8]
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f7f8 f860 	bl	800af20 <ucdr_serialize_uint8_t>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d0ee      	beq.n	8012e42 <uxr_serialize_CREATE_Payload+0x42>
 8012e64:	7a2b      	ldrb	r3, [r5, #8]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d001      	beq.n	8012e6e <uxr_serialize_CREATE_Payload+0x6e>
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	d1ea      	bne.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012e6e:	68e9      	ldr	r1, [r5, #12]
 8012e70:	4630      	mov	r0, r6
 8012e72:	f005 ff6d 	bl	8018d50 <ucdr_serialize_string>
 8012e76:	4004      	ands	r4, r0
 8012e78:	e7e4      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012e7a:	7a29      	ldrb	r1, [r5, #8]
 8012e7c:	4630      	mov	r0, r6
 8012e7e:	f7f8 f84f 	bl	800af20 <ucdr_serialize_uint8_t>
 8012e82:	4607      	mov	r7, r0
 8012e84:	b158      	cbz	r0, 8012e9e <uxr_serialize_CREATE_Payload+0x9e>
 8012e86:	7a2b      	ldrb	r3, [r5, #8]
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d039      	beq.n	8012f00 <uxr_serialize_CREATE_Payload+0x100>
 8012e8c:	2b03      	cmp	r3, #3
 8012e8e:	d106      	bne.n	8012e9e <uxr_serialize_CREATE_Payload+0x9e>
 8012e90:	68ea      	ldr	r2, [r5, #12]
 8012e92:	f105 0110 	add.w	r1, r5, #16
 8012e96:	4630      	mov	r0, r6
 8012e98:	f7fc fd0a 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 8012e9c:	4607      	mov	r7, r0
 8012e9e:	2202      	movs	r2, #2
 8012ea0:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f7fc fab9 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012eaa:	4038      	ands	r0, r7
 8012eac:	4004      	ands	r4, r0
 8012eae:	e7c9      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012eb0:	7a29      	ldrb	r1, [r5, #8]
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	f7f8 f834 	bl	800af20 <ucdr_serialize_uint8_t>
 8012eb8:	4607      	mov	r7, r0
 8012eba:	b158      	cbz	r0, 8012ed4 <uxr_serialize_CREATE_Payload+0xd4>
 8012ebc:	7a2b      	ldrb	r3, [r5, #8]
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	d003      	beq.n	8012eca <uxr_serialize_CREATE_Payload+0xca>
 8012ec2:	2b03      	cmp	r3, #3
 8012ec4:	d022      	beq.n	8012f0c <uxr_serialize_CREATE_Payload+0x10c>
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d104      	bne.n	8012ed4 <uxr_serialize_CREATE_Payload+0xd4>
 8012eca:	68e9      	ldr	r1, [r5, #12]
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f005 ff3f 	bl	8018d50 <ucdr_serialize_string>
 8012ed2:	4607      	mov	r7, r0
 8012ed4:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f7f8 fd49 	bl	800b970 <ucdr_serialize_int16_t>
 8012ede:	4038      	ands	r0, r7
 8012ee0:	4004      	ands	r4, r0
 8012ee2:	e7af      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012ee4:	f105 0108 	add.w	r1, r5, #8
 8012ee8:	4630      	mov	r0, r6
 8012eea:	f7ff fa81 	bl	80123f0 <uxr_serialize_AGENT_Representation>
 8012eee:	4004      	ands	r4, r0
 8012ef0:	e7a8      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012ef2:	f105 0108 	add.w	r1, r5, #8
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f7ff f9bc 	bl	8012274 <uxr_serialize_CLIENT_Representation>
 8012efc:	4004      	ands	r4, r0
 8012efe:	e7a1      	b.n	8012e44 <uxr_serialize_CREATE_Payload+0x44>
 8012f00:	68e9      	ldr	r1, [r5, #12]
 8012f02:	4630      	mov	r0, r6
 8012f04:	f005 ff24 	bl	8018d50 <ucdr_serialize_string>
 8012f08:	4607      	mov	r7, r0
 8012f0a:	e7c8      	b.n	8012e9e <uxr_serialize_CREATE_Payload+0x9e>
 8012f0c:	68ea      	ldr	r2, [r5, #12]
 8012f0e:	f105 0110 	add.w	r1, r5, #16
 8012f12:	4630      	mov	r0, r6
 8012f14:	f7fc fccc 	bl	800f8b0 <ucdr_serialize_sequence_uint8_t>
 8012f18:	4607      	mov	r7, r0
 8012f1a:	e7db      	b.n	8012ed4 <uxr_serialize_CREATE_Payload+0xd4>

08012f1c <uxr_serialize_GET_INFO_Payload>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	2202      	movs	r2, #2
 8012f20:	4605      	mov	r5, r0
 8012f22:	460e      	mov	r6, r1
 8012f24:	f7fc fa7a 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012f28:	2202      	movs	r2, #2
 8012f2a:	18b1      	adds	r1, r6, r2
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f7fc fa74 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012f34:	6871      	ldr	r1, [r6, #4]
 8012f36:	4004      	ands	r4, r0
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f7f8 fa0d 	bl	800b358 <ucdr_serialize_uint32_t>
 8012f3e:	b2e4      	uxtb	r4, r4
 8012f40:	4020      	ands	r0, r4
 8012f42:	bd70      	pop	{r4, r5, r6, pc}

08012f44 <uxr_deserialize_GET_INFO_Payload>:
 8012f44:	b570      	push	{r4, r5, r6, lr}
 8012f46:	2202      	movs	r2, #2
 8012f48:	4605      	mov	r5, r0
 8012f4a:	460e      	mov	r6, r1
 8012f4c:	f7fc faca 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012f50:	2202      	movs	r2, #2
 8012f52:	18b1      	adds	r1, r6, r2
 8012f54:	4604      	mov	r4, r0
 8012f56:	4628      	mov	r0, r5
 8012f58:	f7fc fac4 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012f5c:	1d31      	adds	r1, r6, #4
 8012f5e:	4004      	ands	r4, r0
 8012f60:	4628      	mov	r0, r5
 8012f62:	f7f8 fb23 	bl	800b5ac <ucdr_deserialize_uint32_t>
 8012f66:	b2e4      	uxtb	r4, r4
 8012f68:	4020      	ands	r0, r4
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}

08012f6c <uxr_serialize_DELETE_Payload>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	2202      	movs	r2, #2
 8012f70:	4605      	mov	r5, r0
 8012f72:	460e      	mov	r6, r1
 8012f74:	f7fc fa52 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012f78:	2202      	movs	r2, #2
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	18b1      	adds	r1, r6, r2
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f7fc fa4c 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8012f84:	4020      	ands	r0, r4
 8012f86:	b2c0      	uxtb	r0, r0
 8012f88:	bd70      	pop	{r4, r5, r6, pc}
 8012f8a:	bf00      	nop

08012f8c <uxr_deserialize_STATUS_AGENT_Payload>:
 8012f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f90:	4605      	mov	r5, r0
 8012f92:	460e      	mov	r6, r1
 8012f94:	f7f7 ffda 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012f98:	1c71      	adds	r1, r6, #1
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f7f7 ffd5 	bl	800af4c <ucdr_deserialize_uint8_t>
 8012fa2:	2204      	movs	r2, #4
 8012fa4:	18b1      	adds	r1, r6, r2
 8012fa6:	4681      	mov	r9, r0
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f7fc fa9b 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012fae:	f106 0108 	add.w	r1, r6, #8
 8012fb2:	4680      	mov	r8, r0
 8012fb4:	2202      	movs	r2, #2
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	f7fc fa94 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012fbc:	2202      	movs	r2, #2
 8012fbe:	f106 010a 	add.w	r1, r6, #10
 8012fc2:	4607      	mov	r7, r0
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	f7fc fa8d 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012fca:	ea04 0409 	and.w	r4, r4, r9
 8012fce:	4603      	mov	r3, r0
 8012fd0:	f106 010c 	add.w	r1, r6, #12
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	b2e4      	uxtb	r4, r4
 8012fd8:	461d      	mov	r5, r3
 8012fda:	ea04 0408 	and.w	r4, r4, r8
 8012fde:	f7f7 ff87 	bl	800aef0 <ucdr_deserialize_bool>
 8012fe2:	4027      	ands	r7, r4
 8012fe4:	403d      	ands	r5, r7
 8012fe6:	4028      	ands	r0, r5
 8012fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012fec <uxr_deserialize_STATUS_Payload>:
 8012fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff0:	2202      	movs	r2, #2
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	460f      	mov	r7, r1
 8012ff6:	f7fc fa75 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8012ffa:	2202      	movs	r2, #2
 8012ffc:	18b9      	adds	r1, r7, r2
 8012ffe:	4605      	mov	r5, r0
 8013000:	4630      	mov	r0, r6
 8013002:	f7fc fa6f 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8013006:	1d39      	adds	r1, r7, #4
 8013008:	4680      	mov	r8, r0
 801300a:	4630      	mov	r0, r6
 801300c:	f7f7 ff9e 	bl	800af4c <ucdr_deserialize_uint8_t>
 8013010:	1d79      	adds	r1, r7, #5
 8013012:	4604      	mov	r4, r0
 8013014:	4630      	mov	r0, r6
 8013016:	f7f7 ff99 	bl	800af4c <ucdr_deserialize_uint8_t>
 801301a:	ea05 0508 	and.w	r5, r5, r8
 801301e:	402c      	ands	r4, r5
 8013020:	4020      	ands	r0, r4
 8013022:	b2c0      	uxtb	r0, r0
 8013024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013028 <uxr_serialize_INFO_Payload>:
 8013028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302c:	2202      	movs	r2, #2
 801302e:	460c      	mov	r4, r1
 8013030:	4605      	mov	r5, r0
 8013032:	f7fc f9f3 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8013036:	2202      	movs	r2, #2
 8013038:	18a1      	adds	r1, r4, r2
 801303a:	4680      	mov	r8, r0
 801303c:	4628      	mov	r0, r5
 801303e:	f7fc f9ed 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8013042:	7921      	ldrb	r1, [r4, #4]
 8013044:	4607      	mov	r7, r0
 8013046:	4628      	mov	r0, r5
 8013048:	f7f7 ff6a 	bl	800af20 <ucdr_serialize_uint8_t>
 801304c:	7961      	ldrb	r1, [r4, #5]
 801304e:	4606      	mov	r6, r0
 8013050:	4628      	mov	r0, r5
 8013052:	f7f7 ff65 	bl	800af20 <ucdr_serialize_uint8_t>
 8013056:	ea08 0807 	and.w	r8, r8, r7
 801305a:	ea06 0608 	and.w	r6, r6, r8
 801305e:	ea00 0706 	and.w	r7, r0, r6
 8013062:	7a21      	ldrb	r1, [r4, #8]
 8013064:	4628      	mov	r0, r5
 8013066:	f7f7 ff2d 	bl	800aec4 <ucdr_serialize_bool>
 801306a:	7a23      	ldrb	r3, [r4, #8]
 801306c:	b2ff      	uxtb	r7, r7
 801306e:	4606      	mov	r6, r0
 8013070:	b96b      	cbnz	r3, 801308e <uxr_serialize_INFO_Payload+0x66>
 8013072:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013076:	4628      	mov	r0, r5
 8013078:	f7f7 ff24 	bl	800aec4 <ucdr_serialize_bool>
 801307c:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013080:	4030      	ands	r0, r6
 8013082:	b2c6      	uxtb	r6, r0
 8013084:	b983      	cbnz	r3, 80130a8 <uxr_serialize_INFO_Payload+0x80>
 8013086:	ea06 0007 	and.w	r0, r6, r7
 801308a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801308e:	7b21      	ldrb	r1, [r4, #12]
 8013090:	4628      	mov	r0, r5
 8013092:	f7f7 ff45 	bl	800af20 <ucdr_serialize_uint8_t>
 8013096:	b188      	cbz	r0, 80130bc <uxr_serialize_INFO_Payload+0x94>
 8013098:	f104 010c 	add.w	r1, r4, #12
 801309c:	4628      	mov	r0, r5
 801309e:	f7ff fa19 	bl	80124d4 <uxr_serialize_ObjectVariant.part.0>
 80130a2:	4030      	ands	r0, r6
 80130a4:	b2c6      	uxtb	r6, r0
 80130a6:	e7e4      	b.n	8013072 <uxr_serialize_INFO_Payload+0x4a>
 80130a8:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80130ac:	4628      	mov	r0, r5
 80130ae:	f7ff fdb7 	bl	8012c20 <uxr_serialize_ActivityInfoVariant>
 80130b2:	4006      	ands	r6, r0
 80130b4:	ea06 0007 	and.w	r0, r6, r7
 80130b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130bc:	4606      	mov	r6, r0
 80130be:	e7d8      	b.n	8013072 <uxr_serialize_INFO_Payload+0x4a>

080130c0 <uxr_serialize_READ_DATA_Payload>:
 80130c0:	b570      	push	{r4, r5, r6, lr}
 80130c2:	2202      	movs	r2, #2
 80130c4:	4605      	mov	r5, r0
 80130c6:	460e      	mov	r6, r1
 80130c8:	f7fc f9a8 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80130cc:	2202      	movs	r2, #2
 80130ce:	18b1      	adds	r1, r6, r2
 80130d0:	4604      	mov	r4, r0
 80130d2:	4628      	mov	r0, r5
 80130d4:	f7fc f9a2 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80130d8:	1d31      	adds	r1, r6, #4
 80130da:	4004      	ands	r4, r0
 80130dc:	4628      	mov	r0, r5
 80130de:	f7ff fe4b 	bl	8012d78 <uxr_serialize_ReadSpecification>
 80130e2:	b2e4      	uxtb	r4, r4
 80130e4:	4020      	ands	r0, r4
 80130e6:	bd70      	pop	{r4, r5, r6, pc}

080130e8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80130e8:	b570      	push	{r4, r5, r6, lr}
 80130ea:	2202      	movs	r2, #2
 80130ec:	4605      	mov	r5, r0
 80130ee:	460e      	mov	r6, r1
 80130f0:	f7fc f994 	bl	800f41c <ucdr_serialize_array_uint8_t>
 80130f4:	2202      	movs	r2, #2
 80130f6:	4604      	mov	r4, r0
 80130f8:	18b1      	adds	r1, r6, r2
 80130fa:	4628      	mov	r0, r5
 80130fc:	f7fc f98e 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8013100:	4020      	ands	r0, r4
 8013102:	b2c0      	uxtb	r0, r0
 8013104:	bd70      	pop	{r4, r5, r6, pc}
 8013106:	bf00      	nop

08013108 <uxr_serialize_ACKNACK_Payload>:
 8013108:	b570      	push	{r4, r5, r6, lr}
 801310a:	460c      	mov	r4, r1
 801310c:	460e      	mov	r6, r1
 801310e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013112:	4605      	mov	r5, r0
 8013114:	f7f7 ff30 	bl	800af78 <ucdr_serialize_uint16_t>
 8013118:	2202      	movs	r2, #2
 801311a:	4621      	mov	r1, r4
 801311c:	4604      	mov	r4, r0
 801311e:	4628      	mov	r0, r5
 8013120:	f7fc f97c 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8013124:	7931      	ldrb	r1, [r6, #4]
 8013126:	4004      	ands	r4, r0
 8013128:	4628      	mov	r0, r5
 801312a:	f7f7 fef9 	bl	800af20 <ucdr_serialize_uint8_t>
 801312e:	b2e4      	uxtb	r4, r4
 8013130:	4020      	ands	r0, r4
 8013132:	bd70      	pop	{r4, r5, r6, pc}

08013134 <uxr_deserialize_ACKNACK_Payload>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	4605      	mov	r5, r0
 8013138:	460e      	mov	r6, r1
 801313a:	f7f8 f821 	bl	800b180 <ucdr_deserialize_uint16_t>
 801313e:	2202      	movs	r2, #2
 8013140:	18b1      	adds	r1, r6, r2
 8013142:	4604      	mov	r4, r0
 8013144:	4628      	mov	r0, r5
 8013146:	f7fc f9cd 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 801314a:	1d31      	adds	r1, r6, #4
 801314c:	4004      	ands	r4, r0
 801314e:	4628      	mov	r0, r5
 8013150:	f7f7 fefc 	bl	800af4c <ucdr_deserialize_uint8_t>
 8013154:	b2e4      	uxtb	r4, r4
 8013156:	4020      	ands	r0, r4
 8013158:	bd70      	pop	{r4, r5, r6, pc}
 801315a:	bf00      	nop

0801315c <uxr_serialize_HEARTBEAT_Payload>:
 801315c:	b570      	push	{r4, r5, r6, lr}
 801315e:	460d      	mov	r5, r1
 8013160:	8809      	ldrh	r1, [r1, #0]
 8013162:	4606      	mov	r6, r0
 8013164:	f7f7 ff08 	bl	800af78 <ucdr_serialize_uint16_t>
 8013168:	8869      	ldrh	r1, [r5, #2]
 801316a:	4604      	mov	r4, r0
 801316c:	4630      	mov	r0, r6
 801316e:	f7f7 ff03 	bl	800af78 <ucdr_serialize_uint16_t>
 8013172:	7929      	ldrb	r1, [r5, #4]
 8013174:	4004      	ands	r4, r0
 8013176:	4630      	mov	r0, r6
 8013178:	f7f7 fed2 	bl	800af20 <ucdr_serialize_uint8_t>
 801317c:	b2e4      	uxtb	r4, r4
 801317e:	4020      	ands	r0, r4
 8013180:	bd70      	pop	{r4, r5, r6, pc}
 8013182:	bf00      	nop

08013184 <uxr_deserialize_HEARTBEAT_Payload>:
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	4605      	mov	r5, r0
 8013188:	460e      	mov	r6, r1
 801318a:	f7f7 fff9 	bl	800b180 <ucdr_deserialize_uint16_t>
 801318e:	1cb1      	adds	r1, r6, #2
 8013190:	4604      	mov	r4, r0
 8013192:	4628      	mov	r0, r5
 8013194:	f7f7 fff4 	bl	800b180 <ucdr_deserialize_uint16_t>
 8013198:	1d31      	adds	r1, r6, #4
 801319a:	4004      	ands	r4, r0
 801319c:	4628      	mov	r0, r5
 801319e:	f7f7 fed5 	bl	800af4c <ucdr_deserialize_uint8_t>
 80131a2:	b2e4      	uxtb	r4, r4
 80131a4:	4020      	ands	r0, r4
 80131a6:	bd70      	pop	{r4, r5, r6, pc}

080131a8 <uxr_serialize_TIMESTAMP_Payload>:
 80131a8:	b570      	push	{r4, r5, r6, lr}
 80131aa:	460d      	mov	r5, r1
 80131ac:	6809      	ldr	r1, [r1, #0]
 80131ae:	4606      	mov	r6, r0
 80131b0:	f7f8 fce4 	bl	800bb7c <ucdr_serialize_int32_t>
 80131b4:	6869      	ldr	r1, [r5, #4]
 80131b6:	4604      	mov	r4, r0
 80131b8:	4630      	mov	r0, r6
 80131ba:	f7f8 f8cd 	bl	800b358 <ucdr_serialize_uint32_t>
 80131be:	4020      	ands	r0, r4
 80131c0:	b2c0      	uxtb	r0, r0
 80131c2:	bd70      	pop	{r4, r5, r6, pc}

080131c4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80131c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	4605      	mov	r5, r0
 80131ca:	460e      	mov	r6, r1
 80131cc:	f7f8 fd70 	bl	800bcb0 <ucdr_deserialize_int32_t>
 80131d0:	1d31      	adds	r1, r6, #4
 80131d2:	4607      	mov	r7, r0
 80131d4:	4628      	mov	r0, r5
 80131d6:	f7f8 f9e9 	bl	800b5ac <ucdr_deserialize_uint32_t>
 80131da:	f106 0108 	add.w	r1, r6, #8
 80131de:	4680      	mov	r8, r0
 80131e0:	4628      	mov	r0, r5
 80131e2:	f7f8 fd65 	bl	800bcb0 <ucdr_deserialize_int32_t>
 80131e6:	f106 010c 	add.w	r1, r6, #12
 80131ea:	4604      	mov	r4, r0
 80131ec:	4628      	mov	r0, r5
 80131ee:	f7f8 f9dd 	bl	800b5ac <ucdr_deserialize_uint32_t>
 80131f2:	ea07 0708 	and.w	r7, r7, r8
 80131f6:	403c      	ands	r4, r7
 80131f8:	f106 0110 	add.w	r1, r6, #16
 80131fc:	4004      	ands	r4, r0
 80131fe:	4628      	mov	r0, r5
 8013200:	f7f8 fd56 	bl	800bcb0 <ucdr_deserialize_int32_t>
 8013204:	f106 0114 	add.w	r1, r6, #20
 8013208:	4607      	mov	r7, r0
 801320a:	4628      	mov	r0, r5
 801320c:	f7f8 f9ce 	bl	800b5ac <ucdr_deserialize_uint32_t>
 8013210:	b2e4      	uxtb	r4, r4
 8013212:	403c      	ands	r4, r7
 8013214:	4020      	ands	r0, r4
 8013216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321a:	bf00      	nop

0801321c <uxr_serialize_SampleIdentity>:
 801321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013220:	220c      	movs	r2, #12
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	f7fc f8f9 	bl	800f41c <ucdr_serialize_array_uint8_t>
 801322a:	2203      	movs	r2, #3
 801322c:	f105 010c 	add.w	r1, r5, #12
 8013230:	4680      	mov	r8, r0
 8013232:	4620      	mov	r0, r4
 8013234:	f7fc f8f2 	bl	800f41c <ucdr_serialize_array_uint8_t>
 8013238:	7be9      	ldrb	r1, [r5, #15]
 801323a:	4681      	mov	r9, r0
 801323c:	4620      	mov	r0, r4
 801323e:	f7f7 fe6f 	bl	800af20 <ucdr_serialize_uint8_t>
 8013242:	6929      	ldr	r1, [r5, #16]
 8013244:	4607      	mov	r7, r0
 8013246:	4620      	mov	r0, r4
 8013248:	f7f8 fc98 	bl	800bb7c <ucdr_serialize_int32_t>
 801324c:	6969      	ldr	r1, [r5, #20]
 801324e:	4606      	mov	r6, r0
 8013250:	4620      	mov	r0, r4
 8013252:	f7f8 f881 	bl	800b358 <ucdr_serialize_uint32_t>
 8013256:	ea08 0809 	and.w	r8, r8, r9
 801325a:	ea07 0708 	and.w	r7, r7, r8
 801325e:	403e      	ands	r6, r7
 8013260:	4030      	ands	r0, r6
 8013262:	b2c0      	uxtb	r0, r0
 8013264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013268 <uxr_deserialize_SampleIdentity>:
 8013268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801326c:	220c      	movs	r2, #12
 801326e:	4604      	mov	r4, r0
 8013270:	460d      	mov	r5, r1
 8013272:	f7fc f937 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8013276:	2203      	movs	r2, #3
 8013278:	f105 010c 	add.w	r1, r5, #12
 801327c:	4680      	mov	r8, r0
 801327e:	4620      	mov	r0, r4
 8013280:	f7fc f930 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 8013284:	f105 010f 	add.w	r1, r5, #15
 8013288:	4681      	mov	r9, r0
 801328a:	4620      	mov	r0, r4
 801328c:	f7f7 fe5e 	bl	800af4c <ucdr_deserialize_uint8_t>
 8013290:	f105 0110 	add.w	r1, r5, #16
 8013294:	4607      	mov	r7, r0
 8013296:	4620      	mov	r0, r4
 8013298:	f7f8 fd0a 	bl	800bcb0 <ucdr_deserialize_int32_t>
 801329c:	f105 0114 	add.w	r1, r5, #20
 80132a0:	4606      	mov	r6, r0
 80132a2:	4620      	mov	r0, r4
 80132a4:	f7f8 f982 	bl	800b5ac <ucdr_deserialize_uint32_t>
 80132a8:	ea08 0809 	and.w	r8, r8, r9
 80132ac:	ea07 0708 	and.w	r7, r7, r8
 80132b0:	403e      	ands	r6, r7
 80132b2:	4030      	ands	r0, r6
 80132b4:	b2c0      	uxtb	r0, r0
 80132b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132ba:	bf00      	nop

080132bc <nav_msgs__msg__Odometry__get_type_hash>:
 80132bc:	4800      	ldr	r0, [pc, #0]	@ (80132c0 <nav_msgs__msg__Odometry__get_type_hash+0x4>)
 80132be:	4770      	bx	lr
 80132c0:	20000c10 	.word	0x20000c10

080132c4 <nav_msgs__msg__Odometry__get_type_description>:
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	4e2c      	ldr	r6, [pc, #176]	@ (8013378 <nav_msgs__msg__Odometry__get_type_description+0xb4>)
 80132c8:	7835      	ldrb	r5, [r6, #0]
 80132ca:	b10d      	cbz	r5, 80132d0 <nav_msgs__msg__Odometry__get_type_description+0xc>
 80132cc:	482b      	ldr	r0, [pc, #172]	@ (801337c <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 80132ce:	bd70      	pop	{r4, r5, r6, pc}
 80132d0:	4628      	mov	r0, r5
 80132d2:	f005 f9f9 	bl	80186c8 <builtin_interfaces__msg__Time__get_type_description>
 80132d6:	300c      	adds	r0, #12
 80132d8:	c807      	ldmia	r0, {r0, r1, r2}
 80132da:	4c29      	ldr	r4, [pc, #164]	@ (8013380 <nav_msgs__msg__Odometry__get_type_description+0xbc>)
 80132dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80132e0:	4628      	mov	r0, r5
 80132e2:	f005 fa27 	bl	8018734 <geometry_msgs__msg__Point__get_type_description>
 80132e6:	300c      	adds	r0, #12
 80132e8:	c807      	ldmia	r0, {r0, r1, r2}
 80132ea:	f104 0318 	add.w	r3, r4, #24
 80132ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80132f2:	4628      	mov	r0, r5
 80132f4:	f005 fa4e 	bl	8018794 <geometry_msgs__msg__Pose__get_type_description>
 80132f8:	300c      	adds	r0, #12
 80132fa:	c807      	ldmia	r0, {r0, r1, r2}
 80132fc:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8013300:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013304:	4628      	mov	r0, r5
 8013306:	f005 faa5 	bl	8018854 <geometry_msgs__msg__PoseWithCovariance__get_type_description>
 801330a:	300c      	adds	r0, #12
 801330c:	c807      	ldmia	r0, {r0, r1, r2}
 801330e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8013312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013316:	4628      	mov	r0, r5
 8013318:	f005 fb26 	bl	8018968 <geometry_msgs__msg__Quaternion__get_type_description>
 801331c:	300c      	adds	r0, #12
 801331e:	c807      	ldmia	r0, {r0, r1, r2}
 8013320:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8013324:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013328:	4628      	mov	r0, r5
 801332a:	f7fb fe25 	bl	800ef78 <geometry_msgs__msg__Twist__get_type_description>
 801332e:	300c      	adds	r0, #12
 8013330:	c807      	ldmia	r0, {r0, r1, r2}
 8013332:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 8013336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801333a:	4628      	mov	r0, r5
 801333c:	f005 fb44 	bl	80189c8 <geometry_msgs__msg__TwistWithCovariance__get_type_description>
 8013340:	300c      	adds	r0, #12
 8013342:	c807      	ldmia	r0, {r0, r1, r2}
 8013344:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 8013348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801334c:	4628      	mov	r0, r5
 801334e:	f7fb fe87 	bl	800f060 <geometry_msgs__msg__Vector3__get_type_description>
 8013352:	300c      	adds	r0, #12
 8013354:	c807      	ldmia	r0, {r0, r1, r2}
 8013356:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 801335a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801335e:	4628      	mov	r0, r5
 8013360:	f004 ffa2 	bl	80182a8 <std_msgs__msg__Header__get_type_description>
 8013364:	300c      	adds	r0, #12
 8013366:	c807      	ldmia	r0, {r0, r1, r2}
 8013368:	34c0      	adds	r4, #192	@ 0xc0
 801336a:	2301      	movs	r3, #1
 801336c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013370:	7033      	strb	r3, [r6, #0]
 8013372:	4802      	ldr	r0, [pc, #8]	@ (801337c <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 8013374:	bd70      	pop	{r4, r5, r6, pc}
 8013376:	bf00      	nop
 8013378:	2001194d 	.word	0x2001194d
 801337c:	08021a9c 	.word	0x08021a9c
 8013380:	20000ecc 	.word	0x20000ecc

08013384 <nav_msgs__msg__Odometry__get_type_description_sources>:
 8013384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013386:	4d4c      	ldr	r5, [pc, #304]	@ (80134b8 <nav_msgs__msg__Odometry__get_type_description_sources+0x134>)
 8013388:	782e      	ldrb	r6, [r5, #0]
 801338a:	b10e      	cbz	r6, 8013390 <nav_msgs__msg__Odometry__get_type_description_sources+0xc>
 801338c:	484b      	ldr	r0, [pc, #300]	@ (80134bc <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 801338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013390:	4f4b      	ldr	r7, [pc, #300]	@ (80134c0 <nav_msgs__msg__Odometry__get_type_description_sources+0x13c>)
 8013392:	4c4c      	ldr	r4, [pc, #304]	@ (80134c4 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 8013394:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013398:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801339a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	4627      	mov	r7, r4
 80133a0:	4630      	mov	r0, r6
 80133a2:	f847 3b04 	str.w	r3, [r7], #4
 80133a6:	f005 f99b 	bl	80186e0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80133aa:	4684      	mov	ip, r0
 80133ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133b8:	4630      	mov	r0, r6
 80133ba:	f8dc 3000 	ldr.w	r3, [ip]
 80133be:	603b      	str	r3, [r7, #0]
 80133c0:	f005 f9c4 	bl	801874c <geometry_msgs__msg__Point__get_individual_type_description_source>
 80133c4:	4684      	mov	ip, r0
 80133c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133ca:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 80133ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133d6:	4630      	mov	r0, r6
 80133d8:	f8dc 3000 	ldr.w	r3, [ip]
 80133dc:	603b      	str	r3, [r7, #0]
 80133de:	f005 f9f9 	bl	80187d4 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80133e2:	4684      	mov	ip, r0
 80133e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133e8:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 80133ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133f4:	4630      	mov	r0, r6
 80133f6:	f8dc 3000 	ldr.w	r3, [ip]
 80133fa:	603b      	str	r3, [r7, #0]
 80133fc:	f005 fa54 	bl	80188a8 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 8013400:	4684      	mov	ip, r0
 8013402:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013406:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 801340a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801340c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013410:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013412:	4630      	mov	r0, r6
 8013414:	f8dc 3000 	ldr.w	r3, [ip]
 8013418:	603b      	str	r3, [r7, #0]
 801341a:	f005 fab1 	bl	8018980 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801341e:	4684      	mov	ip, r0
 8013420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013424:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 8013428:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801342a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801342e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013430:	4630      	mov	r0, r6
 8013432:	f8dc 3000 	ldr.w	r3, [ip]
 8013436:	603b      	str	r3, [r7, #0]
 8013438:	f7fb fdb6 	bl	800efa8 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 801343c:	4684      	mov	ip, r0
 801343e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013442:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 8013446:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013448:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801344c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801344e:	4630      	mov	r0, r6
 8013450:	f8dc 3000 	ldr.w	r3, [ip]
 8013454:	603b      	str	r3, [r7, #0]
 8013456:	f005 fad7 	bl	8018a08 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 801345a:	4684      	mov	ip, r0
 801345c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013460:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 8013464:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013466:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801346a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801346c:	4630      	mov	r0, r6
 801346e:	f8dc 3000 	ldr.w	r3, [ip]
 8013472:	603b      	str	r3, [r7, #0]
 8013474:	f7fb fe00 	bl	800f078 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8013478:	4684      	mov	ip, r0
 801347a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801347e:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8013482:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013484:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013488:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801348a:	4630      	mov	r0, r6
 801348c:	f8dc 3000 	ldr.w	r3, [ip]
 8013490:	603b      	str	r3, [r7, #0]
 8013492:	f004 ff21 	bl	80182d8 <std_msgs__msg__Header__get_individual_type_description_source>
 8013496:	2301      	movs	r3, #1
 8013498:	4684      	mov	ip, r0
 801349a:	702b      	strb	r3, [r5, #0]
 801349c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134a0:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 80134a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134ac:	f8dc 3000 	ldr.w	r3, [ip]
 80134b0:	4802      	ldr	r0, [pc, #8]	@ (80134bc <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 80134b2:	6023      	str	r3, [r4, #0]
 80134b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134b6:	bf00      	nop
 80134b8:	2001194c 	.word	0x2001194c
 80134bc:	08021a6c 	.word	0x08021a6c
 80134c0:	08021a78 	.word	0x08021a78
 80134c4:	200117e4 	.word	0x200117e4

080134c8 <nav_msgs__msg__Odometry__init>:
 80134c8:	b3d8      	cbz	r0, 8013542 <nav_msgs__msg__Odometry__init+0x7a>
 80134ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134cc:	4604      	mov	r4, r0
 80134ce:	f004 ff2f 	bl	8018330 <std_msgs__msg__Header__init>
 80134d2:	b190      	cbz	r0, 80134fa <nav_msgs__msg__Odometry__init+0x32>
 80134d4:	f104 0514 	add.w	r5, r4, #20
 80134d8:	4628      	mov	r0, r5
 80134da:	f7fb f941 	bl	800e760 <rosidl_runtime_c__String__init>
 80134de:	b358      	cbz	r0, 8013538 <nav_msgs__msg__Odometry__init+0x70>
 80134e0:	f104 0620 	add.w	r6, r4, #32
 80134e4:	4630      	mov	r0, r6
 80134e6:	f005 fa29 	bl	801893c <geometry_msgs__msg__PoseWithCovariance__init>
 80134ea:	b1b8      	cbz	r0, 801351c <nav_msgs__msg__Odometry__init+0x54>
 80134ec:	f504 77bc 	add.w	r7, r4, #376	@ 0x178
 80134f0:	4638      	mov	r0, r7
 80134f2:	f005 fac5 	bl	8018a80 <geometry_msgs__msg__TwistWithCovariance__init>
 80134f6:	b330      	cbz	r0, 8013546 <nav_msgs__msg__Odometry__init+0x7e>
 80134f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134fa:	4620      	mov	r0, r4
 80134fc:	f004 ff38 	bl	8018370 <std_msgs__msg__Header__fini>
 8013500:	f104 0014 	add.w	r0, r4, #20
 8013504:	f7fb f946 	bl	800e794 <rosidl_runtime_c__String__fini>
 8013508:	f104 0020 	add.w	r0, r4, #32
 801350c:	f005 fa24 	bl	8018958 <geometry_msgs__msg__PoseWithCovariance__fini>
 8013510:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8013514:	f005 fac2 	bl	8018a9c <geometry_msgs__msg__TwistWithCovariance__fini>
 8013518:	2000      	movs	r0, #0
 801351a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801351c:	4620      	mov	r0, r4
 801351e:	f004 ff27 	bl	8018370 <std_msgs__msg__Header__fini>
 8013522:	4628      	mov	r0, r5
 8013524:	f7fb f936 	bl	800e794 <rosidl_runtime_c__String__fini>
 8013528:	4630      	mov	r0, r6
 801352a:	f005 fa15 	bl	8018958 <geometry_msgs__msg__PoseWithCovariance__fini>
 801352e:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8013532:	f005 fab3 	bl	8018a9c <geometry_msgs__msg__TwistWithCovariance__fini>
 8013536:	e7ef      	b.n	8013518 <nav_msgs__msg__Odometry__init+0x50>
 8013538:	4620      	mov	r0, r4
 801353a:	f004 ff19 	bl	8018370 <std_msgs__msg__Header__fini>
 801353e:	4628      	mov	r0, r5
 8013540:	e7e0      	b.n	8013504 <nav_msgs__msg__Odometry__init+0x3c>
 8013542:	2000      	movs	r0, #0
 8013544:	4770      	bx	lr
 8013546:	4620      	mov	r0, r4
 8013548:	f004 ff12 	bl	8018370 <std_msgs__msg__Header__fini>
 801354c:	4628      	mov	r0, r5
 801354e:	f7fb f921 	bl	800e794 <rosidl_runtime_c__String__fini>
 8013552:	4630      	mov	r0, r6
 8013554:	f005 fa00 	bl	8018958 <geometry_msgs__msg__PoseWithCovariance__fini>
 8013558:	4638      	mov	r0, r7
 801355a:	f005 fa9f 	bl	8018a9c <geometry_msgs__msg__TwistWithCovariance__fini>
 801355e:	e7db      	b.n	8013518 <nav_msgs__msg__Odometry__init+0x50>

08013560 <nav_msgs__msg__Odometry__fini>:
 8013560:	b188      	cbz	r0, 8013586 <nav_msgs__msg__Odometry__fini+0x26>
 8013562:	b510      	push	{r4, lr}
 8013564:	4604      	mov	r4, r0
 8013566:	f004 ff03 	bl	8018370 <std_msgs__msg__Header__fini>
 801356a:	f104 0014 	add.w	r0, r4, #20
 801356e:	f7fb f911 	bl	800e794 <rosidl_runtime_c__String__fini>
 8013572:	f104 0020 	add.w	r0, r4, #32
 8013576:	f005 f9ef 	bl	8018958 <geometry_msgs__msg__PoseWithCovariance__fini>
 801357a:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 801357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013582:	f005 ba8b 	b.w	8018a9c <geometry_msgs__msg__TwistWithCovariance__fini>
 8013586:	4770      	bx	lr

08013588 <rcl_client_get_rmw_handle>:
 8013588:	b118      	cbz	r0, 8013592 <rcl_client_get_rmw_handle+0xa>
 801358a:	6800      	ldr	r0, [r0, #0]
 801358c:	b108      	cbz	r0, 8013592 <rcl_client_get_rmw_handle+0xa>
 801358e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013592:	4770      	bx	lr

08013594 <rcl_send_request>:
 8013594:	2800      	cmp	r0, #0
 8013596:	d048      	beq.n	801362a <rcl_send_request+0x96>
 8013598:	b570      	push	{r4, r5, r6, lr}
 801359a:	4604      	mov	r4, r0
 801359c:	6800      	ldr	r0, [r0, #0]
 801359e:	b08a      	sub	sp, #40	@ 0x28
 80135a0:	b1c0      	cbz	r0, 80135d4 <rcl_send_request+0x40>
 80135a2:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80135a6:	b1ab      	cbz	r3, 80135d4 <rcl_send_request+0x40>
 80135a8:	460e      	mov	r6, r1
 80135aa:	b1b9      	cbz	r1, 80135dc <rcl_send_request+0x48>
 80135ac:	4615      	mov	r5, r2
 80135ae:	b1aa      	cbz	r2, 80135dc <rcl_send_request+0x48>
 80135b0:	2105      	movs	r1, #5
 80135b2:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80135b6:	f002 ff87 	bl	80164c8 <__atomic_load_8>
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	e9c5 0100 	strd	r0, r1, [r5]
 80135c0:	462a      	mov	r2, r5
 80135c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80135c6:	4631      	mov	r1, r6
 80135c8:	f004 f940 	bl	801784c <rmw_send_request>
 80135cc:	b148      	cbz	r0, 80135e2 <rcl_send_request+0x4e>
 80135ce:	2001      	movs	r0, #1
 80135d0:	b00a      	add	sp, #40	@ 0x28
 80135d2:	bd70      	pop	{r4, r5, r6, pc}
 80135d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80135d8:	b00a      	add	sp, #40	@ 0x28
 80135da:	bd70      	pop	{r4, r5, r6, pc}
 80135dc:	200b      	movs	r0, #11
 80135de:	b00a      	add	sp, #40	@ 0x28
 80135e0:	bd70      	pop	{r4, r5, r6, pc}
 80135e2:	6820      	ldr	r0, [r4, #0]
 80135e4:	2305      	movs	r3, #5
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135ec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80135f0:	f002 ffd6 	bl	80165a0 <__atomic_exchange_8>
 80135f4:	6823      	ldr	r3, [r4, #0]
 80135f6:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80135fa:	b1a2      	cbz	r2, 8013626 <rcl_send_request+0x92>
 80135fc:	a905      	add	r1, sp, #20
 80135fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013602:	f003 fd1f 	bl	8017044 <rmw_get_gid_for_client>
 8013606:	4601      	mov	r1, r0
 8013608:	b990      	cbnz	r0, 8013630 <rcl_send_request+0x9c>
 801360a:	6822      	ldr	r2, [r4, #0]
 801360c:	ab06      	add	r3, sp, #24
 801360e:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8013612:	9302      	str	r3, [sp, #8]
 8013614:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013618:	4632      	mov	r2, r6
 801361a:	e9cd 4500 	strd	r4, r5, [sp]
 801361e:	f000 fe13 	bl	8014248 <rcl_send_service_event_message>
 8013622:	2800      	cmp	r0, #0
 8013624:	d1d4      	bne.n	80135d0 <rcl_send_request+0x3c>
 8013626:	2000      	movs	r0, #0
 8013628:	e7d2      	b.n	80135d0 <rcl_send_request+0x3c>
 801362a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801362e:	4770      	bx	lr
 8013630:	f000 f878 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8013634:	e7cc      	b.n	80135d0 <rcl_send_request+0x3c>
 8013636:	bf00      	nop

08013638 <rcl_take_response>:
 8013638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801363a:	468e      	mov	lr, r1
 801363c:	460c      	mov	r4, r1
 801363e:	4617      	mov	r7, r2
 8013640:	4605      	mov	r5, r0
 8013642:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013646:	b095      	sub	sp, #84	@ 0x54
 8013648:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801364c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013650:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013654:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013658:	2d00      	cmp	r5, #0
 801365a:	d044      	beq.n	80136e6 <rcl_take_response+0xae>
 801365c:	682b      	ldr	r3, [r5, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d041      	beq.n	80136e6 <rcl_take_response+0xae>
 8013662:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013666:	2800      	cmp	r0, #0
 8013668:	d03d      	beq.n	80136e6 <rcl_take_response+0xae>
 801366a:	2f00      	cmp	r7, #0
 801366c:	d03e      	beq.n	80136ec <rcl_take_response+0xb4>
 801366e:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8013708 <rcl_take_response+0xd0>
 8013672:	2300      	movs	r3, #0
 8013674:	f88d 3013 	strb.w	r3, [sp, #19]
 8013678:	463a      	mov	r2, r7
 801367a:	f10d 0313 	add.w	r3, sp, #19
 801367e:	a90a      	add	r1, sp, #40	@ 0x28
 8013680:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013684:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013688:	f004 f9e0 	bl	8017a4c <rmw_take_response>
 801368c:	4606      	mov	r6, r0
 801368e:	bb78      	cbnz	r0, 80136f0 <rcl_take_response+0xb8>
 8013690:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8013694:	b373      	cbz	r3, 80136f4 <rcl_take_response+0xbc>
 8013696:	682b      	ldr	r3, [r5, #0]
 8013698:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801369c:	b1aa      	cbz	r2, 80136ca <rcl_take_response+0x92>
 801369e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80136a2:	a905      	add	r1, sp, #20
 80136a4:	f003 fcce 	bl	8017044 <rmw_get_gid_for_client>
 80136a8:	bb38      	cbnz	r0, 80136fa <rcl_take_response+0xc2>
 80136aa:	682b      	ldr	r3, [r5, #0]
 80136ac:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80136b0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80136b4:	ab06      	add	r3, sp, #24
 80136b6:	ed8d 7b00 	vstr	d7, [sp]
 80136ba:	463a      	mov	r2, r7
 80136bc:	9302      	str	r3, [sp, #8]
 80136be:	2103      	movs	r1, #3
 80136c0:	f000 fdc2 	bl	8014248 <rcl_send_service_event_message>
 80136c4:	2800      	cmp	r0, #0
 80136c6:	bf18      	it	ne
 80136c8:	4606      	movne	r6, r0
 80136ca:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 80136ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136d2:	46a4      	mov	ip, r4
 80136d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80136dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80136e0:	4630      	mov	r0, r6
 80136e2:	b015      	add	sp, #84	@ 0x54
 80136e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136e6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80136ea:	e7ee      	b.n	80136ca <rcl_take_response+0x92>
 80136ec:	260b      	movs	r6, #11
 80136ee:	e7ec      	b.n	80136ca <rcl_take_response+0x92>
 80136f0:	2601      	movs	r6, #1
 80136f2:	e7ea      	b.n	80136ca <rcl_take_response+0x92>
 80136f4:	f240 16f5 	movw	r6, #501	@ 0x1f5
 80136f8:	e7e7      	b.n	80136ca <rcl_take_response+0x92>
 80136fa:	f000 f813 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 80136fe:	4606      	mov	r6, r0
 8013700:	e7e3      	b.n	80136ca <rcl_take_response+0x92>
 8013702:	bf00      	nop
 8013704:	f3af 8000 	nop.w
	...

08013710 <rcl_client_is_valid>:
 8013710:	b130      	cbz	r0, 8013720 <rcl_client_is_valid+0x10>
 8013712:	6800      	ldr	r0, [r0, #0]
 8013714:	b120      	cbz	r0, 8013720 <rcl_client_is_valid+0x10>
 8013716:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801371a:	3800      	subs	r0, #0
 801371c:	bf18      	it	ne
 801371e:	2001      	movne	r0, #1
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop

08013724 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013724:	280b      	cmp	r0, #11
 8013726:	dc0d      	bgt.n	8013744 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013728:	2800      	cmp	r0, #0
 801372a:	db09      	blt.n	8013740 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801372c:	280b      	cmp	r0, #11
 801372e:	d807      	bhi.n	8013740 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013730:	e8df f000 	tbb	[pc, r0]
 8013734:	07060607 	.word	0x07060607
 8013738:	06060606 	.word	0x06060606
 801373c:	07070606 	.word	0x07070606
 8013740:	2001      	movs	r0, #1
 8013742:	4770      	bx	lr
 8013744:	28cb      	cmp	r0, #203	@ 0xcb
 8013746:	bf14      	ite	ne
 8013748:	2001      	movne	r0, #1
 801374a:	20cb      	moveq	r0, #203	@ 0xcb
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop

08013750 <rcl_get_zero_initialized_context>:
 8013750:	2200      	movs	r2, #0
 8013752:	e9c0 2200 	strd	r2, r2, [r0]
 8013756:	4770      	bx	lr

08013758 <rcl_context_is_valid>:
 8013758:	b118      	cbz	r0, 8013762 <rcl_context_is_valid+0xa>
 801375a:	6840      	ldr	r0, [r0, #4]
 801375c:	3800      	subs	r0, #0
 801375e:	bf18      	it	ne
 8013760:	2001      	movne	r0, #1
 8013762:	4770      	bx	lr

08013764 <__cleanup_context>:
 8013764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013768:	4606      	mov	r6, r0
 801376a:	6800      	ldr	r0, [r0, #0]
 801376c:	2300      	movs	r3, #0
 801376e:	6073      	str	r3, [r6, #4]
 8013770:	2800      	cmp	r0, #0
 8013772:	d042      	beq.n	80137fa <__cleanup_context+0x96>
 8013774:	6943      	ldr	r3, [r0, #20]
 8013776:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801377a:	6907      	ldr	r7, [r0, #16]
 801377c:	b39b      	cbz	r3, 80137e6 <__cleanup_context+0x82>
 801377e:	3014      	adds	r0, #20
 8013780:	f000 f9b2 	bl	8013ae8 <rcl_init_options_fini>
 8013784:	4680      	mov	r8, r0
 8013786:	2800      	cmp	r0, #0
 8013788:	d144      	bne.n	8013814 <__cleanup_context+0xb0>
 801378a:	6830      	ldr	r0, [r6, #0]
 801378c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801378e:	b123      	cbz	r3, 801379a <__cleanup_context+0x36>
 8013790:	3028      	adds	r0, #40	@ 0x28
 8013792:	f003 fe9f 	bl	80174d4 <rmw_context_fini>
 8013796:	bbb8      	cbnz	r0, 8013808 <__cleanup_context+0xa4>
 8013798:	6830      	ldr	r0, [r6, #0]
 801379a:	6a03      	ldr	r3, [r0, #32]
 801379c:	b1db      	cbz	r3, 80137d6 <__cleanup_context+0x72>
 801379e:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80137a2:	2a01      	cmp	r2, #1
 80137a4:	f17c 0100 	sbcs.w	r1, ip, #0
 80137a8:	db11      	blt.n	80137ce <__cleanup_context+0x6a>
 80137aa:	2400      	movs	r4, #0
 80137ac:	4625      	mov	r5, r4
 80137ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137b2:	4639      	mov	r1, r7
 80137b4:	b1c8      	cbz	r0, 80137ea <__cleanup_context+0x86>
 80137b6:	47c8      	blx	r9
 80137b8:	6833      	ldr	r3, [r6, #0]
 80137ba:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80137be:	3401      	adds	r4, #1
 80137c0:	f145 0500 	adc.w	r5, r5, #0
 80137c4:	4294      	cmp	r4, r2
 80137c6:	eb75 010c 	sbcs.w	r1, r5, ip
 80137ca:	6a1b      	ldr	r3, [r3, #32]
 80137cc:	dbef      	blt.n	80137ae <__cleanup_context+0x4a>
 80137ce:	4618      	mov	r0, r3
 80137d0:	4639      	mov	r1, r7
 80137d2:	47c8      	blx	r9
 80137d4:	6830      	ldr	r0, [r6, #0]
 80137d6:	4639      	mov	r1, r7
 80137d8:	47c8      	blx	r9
 80137da:	2300      	movs	r3, #0
 80137dc:	e9c6 3300 	strd	r3, r3, [r6]
 80137e0:	4640      	mov	r0, r8
 80137e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137e6:	4698      	mov	r8, r3
 80137e8:	e7d0      	b.n	801378c <__cleanup_context+0x28>
 80137ea:	3401      	adds	r4, #1
 80137ec:	f145 0500 	adc.w	r5, r5, #0
 80137f0:	4294      	cmp	r4, r2
 80137f2:	eb75 010c 	sbcs.w	r1, r5, ip
 80137f6:	dbda      	blt.n	80137ae <__cleanup_context+0x4a>
 80137f8:	e7e9      	b.n	80137ce <__cleanup_context+0x6a>
 80137fa:	4680      	mov	r8, r0
 80137fc:	2300      	movs	r3, #0
 80137fe:	e9c6 3300 	strd	r3, r3, [r6]
 8013802:	4640      	mov	r0, r8
 8013804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013808:	f1b8 0f00 	cmp.w	r8, #0
 801380c:	d005      	beq.n	801381a <__cleanup_context+0xb6>
 801380e:	f7fa f94f 	bl	800dab0 <rcutils_reset_error>
 8013812:	e7c1      	b.n	8013798 <__cleanup_context+0x34>
 8013814:	f7fa f94c 	bl	800dab0 <rcutils_reset_error>
 8013818:	e7b7      	b.n	801378a <__cleanup_context+0x26>
 801381a:	f7ff ff83 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 801381e:	4680      	mov	r8, r0
 8013820:	e7f5      	b.n	801380e <__cleanup_context+0xaa>
 8013822:	bf00      	nop

08013824 <rcl_init>:
 8013824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013828:	1e04      	subs	r4, r0, #0
 801382a:	b0a5      	sub	sp, #148	@ 0x94
 801382c:	460d      	mov	r5, r1
 801382e:	4617      	mov	r7, r2
 8013830:	461e      	mov	r6, r3
 8013832:	dd13      	ble.n	801385c <rcl_init+0x38>
 8013834:	b161      	cbz	r1, 8013850 <rcl_init+0x2c>
 8013836:	f1a1 0e04 	sub.w	lr, r1, #4
 801383a:	f04f 0c00 	mov.w	ip, #0
 801383e:	e001      	b.n	8013844 <rcl_init+0x20>
 8013840:	4564      	cmp	r4, ip
 8013842:	d00d      	beq.n	8013860 <rcl_init+0x3c>
 8013844:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8013848:	f10c 0c01 	add.w	ip, ip, #1
 801384c:	2800      	cmp	r0, #0
 801384e:	d1f7      	bne.n	8013840 <rcl_init+0x1c>
 8013850:	f04f 080b 	mov.w	r8, #11
 8013854:	4640      	mov	r0, r8
 8013856:	b025      	add	sp, #148	@ 0x94
 8013858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801385c:	2900      	cmp	r1, #0
 801385e:	d1f7      	bne.n	8013850 <rcl_init+0x2c>
 8013860:	2f00      	cmp	r7, #0
 8013862:	d0f5      	beq.n	8013850 <rcl_init+0x2c>
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d0f2      	beq.n	8013850 <rcl_init+0x2c>
 801386a:	469c      	mov	ip, r3
 801386c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013870:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8013874:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013878:	f8dc 3000 	ldr.w	r3, [ip]
 801387c:	f8ce 3000 	str.w	r3, [lr]
 8013880:	a81f      	add	r0, sp, #124	@ 0x7c
 8013882:	f7fa f8e9 	bl	800da58 <rcutils_allocator_is_valid>
 8013886:	2800      	cmp	r0, #0
 8013888:	d0e2      	beq.n	8013850 <rcl_init+0x2c>
 801388a:	2e00      	cmp	r6, #0
 801388c:	d0e0      	beq.n	8013850 <rcl_init+0x2c>
 801388e:	6833      	ldr	r3, [r6, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d173      	bne.n	801397c <rcl_init+0x158>
 8013894:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8013898:	2198      	movs	r1, #152	@ 0x98
 801389a:	2001      	movs	r0, #1
 801389c:	4798      	blx	r3
 801389e:	4680      	mov	r8, r0
 80138a0:	6030      	str	r0, [r6, #0]
 80138a2:	2800      	cmp	r0, #0
 80138a4:	f000 80ac 	beq.w	8013a00 <rcl_init+0x1dc>
 80138a8:	a802      	add	r0, sp, #8
 80138aa:	f003 f965 	bl	8016b78 <rmw_get_zero_initialized_context>
 80138ae:	a902      	add	r1, sp, #8
 80138b0:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80138b4:	2270      	movs	r2, #112	@ 0x70
 80138b6:	f008 f8b7 	bl	801ba28 <memcpy>
 80138ba:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80138be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138c2:	f8d6 8000 	ldr.w	r8, [r6]
 80138c6:	46c4      	mov	ip, r8
 80138c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138cc:	f8de 3000 	ldr.w	r3, [lr]
 80138d0:	f8cc 3000 	str.w	r3, [ip]
 80138d4:	f108 0114 	add.w	r1, r8, #20
 80138d8:	4638      	mov	r0, r7
 80138da:	f000 f92f 	bl	8013b3c <rcl_init_options_copy>
 80138de:	4680      	mov	r8, r0
 80138e0:	2800      	cmp	r0, #0
 80138e2:	d147      	bne.n	8013974 <rcl_init+0x150>
 80138e4:	f8d6 9000 	ldr.w	r9, [r6]
 80138e8:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 80138ec:	f8c9 0020 	str.w	r0, [r9, #32]
 80138f0:	f8c9 4018 	str.w	r4, [r9, #24]
 80138f4:	f8c9 a01c 	str.w	sl, [r9, #28]
 80138f8:	2c00      	cmp	r4, #0
 80138fa:	d047      	beq.n	801398c <rcl_init+0x168>
 80138fc:	2d00      	cmp	r5, #0
 80138fe:	d045      	beq.n	801398c <rcl_init+0x168>
 8013900:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8013904:	2104      	movs	r1, #4
 8013906:	4620      	mov	r0, r4
 8013908:	4798      	blx	r3
 801390a:	f8c9 0020 	str.w	r0, [r9, #32]
 801390e:	f8d6 9000 	ldr.w	r9, [r6]
 8013912:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8013916:	f1bb 0f00 	cmp.w	fp, #0
 801391a:	d029      	beq.n	8013970 <rcl_init+0x14c>
 801391c:	2c01      	cmp	r4, #1
 801391e:	f17a 0300 	sbcs.w	r3, sl, #0
 8013922:	db33      	blt.n	801398c <rcl_init+0x168>
 8013924:	f04f 0800 	mov.w	r8, #0
 8013928:	3d04      	subs	r5, #4
 801392a:	46c1      	mov	r9, r8
 801392c:	e00d      	b.n	801394a <rcl_init+0x126>
 801392e:	6829      	ldr	r1, [r5, #0]
 8013930:	f008 f87a 	bl	801ba28 <memcpy>
 8013934:	f118 0801 	adds.w	r8, r8, #1
 8013938:	f149 0900 	adc.w	r9, r9, #0
 801393c:	45ca      	cmp	sl, r9
 801393e:	bf08      	it	eq
 8013940:	4544      	cmpeq	r4, r8
 8013942:	d021      	beq.n	8013988 <rcl_init+0x164>
 8013944:	6833      	ldr	r3, [r6, #0]
 8013946:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801394a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801394e:	f7ec fcbf 	bl	80002d0 <strlen>
 8013952:	1c42      	adds	r2, r0, #1
 8013954:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8013956:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8013958:	9201      	str	r2, [sp, #4]
 801395a:	4610      	mov	r0, r2
 801395c:	4798      	blx	r3
 801395e:	6833      	ldr	r3, [r6, #0]
 8013960:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8013964:	6a1b      	ldr	r3, [r3, #32]
 8013966:	9a01      	ldr	r2, [sp, #4]
 8013968:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801396c:	2800      	cmp	r0, #0
 801396e:	d1de      	bne.n	801392e <rcl_init+0x10a>
 8013970:	f04f 080a 	mov.w	r8, #10
 8013974:	4630      	mov	r0, r6
 8013976:	f7ff fef5 	bl	8013764 <__cleanup_context>
 801397a:	e76b      	b.n	8013854 <rcl_init+0x30>
 801397c:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8013980:	4640      	mov	r0, r8
 8013982:	b025      	add	sp, #148	@ 0x94
 8013984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013988:	f8d6 9000 	ldr.w	r9, [r6]
 801398c:	4a26      	ldr	r2, [pc, #152]	@ (8013a28 <rcl_init+0x204>)
 801398e:	6813      	ldr	r3, [r2, #0]
 8013990:	3301      	adds	r3, #1
 8013992:	d030      	beq.n	80139f6 <rcl_init+0x1d2>
 8013994:	461d      	mov	r5, r3
 8013996:	2000      	movs	r0, #0
 8013998:	4619      	mov	r1, r3
 801399a:	f8d9 4014 	ldr.w	r4, [r9, #20]
 801399e:	6073      	str	r3, [r6, #4]
 80139a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80139a2:	6011      	str	r1, [r2, #0]
 80139a4:	3301      	adds	r3, #1
 80139a6:	e9c4 5006 	strd	r5, r0, [r4, #24]
 80139aa:	d033      	beq.n	8013a14 <rcl_init+0x1f0>
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80139b2:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 80139b6:	b333      	cbz	r3, 8013a06 <rcl_init+0x1e2>
 80139b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80139ba:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80139be:	b953      	cbnz	r3, 80139d6 <rcl_init+0x1b2>
 80139c0:	2801      	cmp	r0, #1
 80139c2:	d008      	beq.n	80139d6 <rcl_init+0x1b2>
 80139c4:	a91f      	add	r1, sp, #124	@ 0x7c
 80139c6:	4628      	mov	r0, r5
 80139c8:	f006 f8a6 	bl	8019b18 <rcl_get_discovery_static_peers>
 80139cc:	4680      	mov	r8, r0
 80139ce:	2800      	cmp	r0, #0
 80139d0:	d1d0      	bne.n	8013974 <rcl_init+0x150>
 80139d2:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80139d6:	f006 f895 	bl	8019b04 <rcl_automatic_discovery_range_to_string>
 80139da:	6831      	ldr	r1, [r6, #0]
 80139dc:	6948      	ldr	r0, [r1, #20]
 80139de:	3128      	adds	r1, #40	@ 0x28
 80139e0:	3018      	adds	r0, #24
 80139e2:	f003 fc43 	bl	801726c <rmw_init>
 80139e6:	4680      	mov	r8, r0
 80139e8:	2800      	cmp	r0, #0
 80139ea:	f43f af33 	beq.w	8013854 <rcl_init+0x30>
 80139ee:	f7ff fe99 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 80139f2:	4680      	mov	r8, r0
 80139f4:	e7be      	b.n	8013974 <rcl_init+0x150>
 80139f6:	2101      	movs	r1, #1
 80139f8:	4618      	mov	r0, r3
 80139fa:	460d      	mov	r5, r1
 80139fc:	460b      	mov	r3, r1
 80139fe:	e7cc      	b.n	801399a <rcl_init+0x176>
 8013a00:	f04f 080a 	mov.w	r8, #10
 8013a04:	e726      	b.n	8013854 <rcl_init+0x30>
 8013a06:	4628      	mov	r0, r5
 8013a08:	f006 f83a 	bl	8019a80 <rcl_get_automatic_discovery_range>
 8013a0c:	4680      	mov	r8, r0
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d0d2      	beq.n	80139b8 <rcl_init+0x194>
 8013a12:	e7af      	b.n	8013974 <rcl_init+0x150>
 8013a14:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8013a18:	f006 f8e8 	bl	8019bec <rcl_get_default_domain_id>
 8013a1c:	4680      	mov	r8, r0
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d1a8      	bne.n	8013974 <rcl_init+0x150>
 8013a22:	6833      	ldr	r3, [r6, #0]
 8013a24:	695c      	ldr	r4, [r3, #20]
 8013a26:	e7c1      	b.n	80139ac <rcl_init+0x188>
 8013a28:	20011950 	.word	0x20011950

08013a2c <rcl_get_zero_initialized_init_options>:
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	4770      	bx	lr

08013a30 <rcl_init_options_init>:
 8013a30:	b084      	sub	sp, #16
 8013a32:	b570      	push	{r4, r5, r6, lr}
 8013a34:	b09e      	sub	sp, #120	@ 0x78
 8013a36:	ad23      	add	r5, sp, #140	@ 0x8c
 8013a38:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	d046      	beq.n	8013ace <rcl_init_options_init+0x9e>
 8013a40:	6803      	ldr	r3, [r0, #0]
 8013a42:	4604      	mov	r4, r0
 8013a44:	b133      	cbz	r3, 8013a54 <rcl_init_options_init+0x24>
 8013a46:	2564      	movs	r5, #100	@ 0x64
 8013a48:	4628      	mov	r0, r5
 8013a4a:	b01e      	add	sp, #120	@ 0x78
 8013a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a50:	b004      	add	sp, #16
 8013a52:	4770      	bx	lr
 8013a54:	4628      	mov	r0, r5
 8013a56:	f7f9 ffff 	bl	800da58 <rcutils_allocator_is_valid>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d037      	beq.n	8013ace <rcl_init_options_init+0x9e>
 8013a5e:	46ae      	mov	lr, r5
 8013a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a64:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013a68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a6c:	f8de 3000 	ldr.w	r3, [lr]
 8013a70:	f8cc 3000 	str.w	r3, [ip]
 8013a74:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8013a76:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013a78:	2070      	movs	r0, #112	@ 0x70
 8013a7a:	4798      	blx	r3
 8013a7c:	4606      	mov	r6, r0
 8013a7e:	6020      	str	r0, [r4, #0]
 8013a80:	b338      	cbz	r0, 8013ad2 <rcl_init_options_init+0xa2>
 8013a82:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013a86:	4686      	mov	lr, r0
 8013a88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a90:	f8dc 3000 	ldr.w	r3, [ip]
 8013a94:	f8ce 3000 	str.w	r3, [lr]
 8013a98:	a802      	add	r0, sp, #8
 8013a9a:	f003 f877 	bl	8016b8c <rmw_get_zero_initialized_init_options>
 8013a9e:	2258      	movs	r2, #88	@ 0x58
 8013aa0:	a902      	add	r1, sp, #8
 8013aa2:	f106 0018 	add.w	r0, r6, #24
 8013aa6:	f007 ffbf 	bl	801ba28 <memcpy>
 8013aaa:	ab26      	add	r3, sp, #152	@ 0x98
 8013aac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ab0:	6826      	ldr	r6, [r4, #0]
 8013ab2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ab6:	f106 0018 	add.w	r0, r6, #24
 8013aba:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8013abe:	f003 fae5 	bl	801708c <rmw_init_options_init>
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	b938      	cbnz	r0, 8013ad6 <rcl_init_options_init+0xa6>
 8013ac6:	6823      	ldr	r3, [r4, #0]
 8013ac8:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 8013acc:	e7bc      	b.n	8013a48 <rcl_init_options_init+0x18>
 8013ace:	250b      	movs	r5, #11
 8013ad0:	e7ba      	b.n	8013a48 <rcl_init_options_init+0x18>
 8013ad2:	250a      	movs	r5, #10
 8013ad4:	e7b8      	b.n	8013a48 <rcl_init_options_init+0x18>
 8013ad6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013ad8:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8013ada:	6820      	ldr	r0, [r4, #0]
 8013adc:	4798      	blx	r3
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f7ff fe20 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	e7af      	b.n	8013a48 <rcl_init_options_init+0x18>

08013ae8 <rcl_init_options_fini>:
 8013ae8:	b530      	push	{r4, r5, lr}
 8013aea:	b087      	sub	sp, #28
 8013aec:	b1f0      	cbz	r0, 8013b2c <rcl_init_options_fini+0x44>
 8013aee:	6803      	ldr	r3, [r0, #0]
 8013af0:	4604      	mov	r4, r0
 8013af2:	b1db      	cbz	r3, 8013b2c <rcl_init_options_fini+0x44>
 8013af4:	469c      	mov	ip, r3
 8013af6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013afa:	f10d 0e04 	add.w	lr, sp, #4
 8013afe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b02:	f8dc 3000 	ldr.w	r3, [ip]
 8013b06:	f8ce 3000 	str.w	r3, [lr]
 8013b0a:	a801      	add	r0, sp, #4
 8013b0c:	f7f9 ffa4 	bl	800da58 <rcutils_allocator_is_valid>
 8013b10:	b160      	cbz	r0, 8013b2c <rcl_init_options_fini+0x44>
 8013b12:	6820      	ldr	r0, [r4, #0]
 8013b14:	3018      	adds	r0, #24
 8013b16:	f003 fb6b 	bl	80171f0 <rmw_init_options_fini>
 8013b1a:	4605      	mov	r5, r0
 8013b1c:	b950      	cbnz	r0, 8013b34 <rcl_init_options_fini+0x4c>
 8013b1e:	6820      	ldr	r0, [r4, #0]
 8013b20:	9b02      	ldr	r3, [sp, #8]
 8013b22:	9905      	ldr	r1, [sp, #20]
 8013b24:	4798      	blx	r3
 8013b26:	4628      	mov	r0, r5
 8013b28:	b007      	add	sp, #28
 8013b2a:	bd30      	pop	{r4, r5, pc}
 8013b2c:	250b      	movs	r5, #11
 8013b2e:	4628      	mov	r0, r5
 8013b30:	b007      	add	sp, #28
 8013b32:	bd30      	pop	{r4, r5, pc}
 8013b34:	f7ff fdf6 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b38:	4605      	mov	r5, r0
 8013b3a:	e7f8      	b.n	8013b2e <rcl_init_options_fini+0x46>

08013b3c <rcl_init_options_copy>:
 8013b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b3e:	b09d      	sub	sp, #116	@ 0x74
 8013b40:	2800      	cmp	r0, #0
 8013b42:	d04a      	beq.n	8013bda <rcl_init_options_copy+0x9e>
 8013b44:	4604      	mov	r4, r0
 8013b46:	6800      	ldr	r0, [r0, #0]
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d046      	beq.n	8013bda <rcl_init_options_copy+0x9e>
 8013b4c:	460d      	mov	r5, r1
 8013b4e:	f7f9 ff83 	bl	800da58 <rcutils_allocator_is_valid>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d041      	beq.n	8013bda <rcl_init_options_copy+0x9e>
 8013b56:	2d00      	cmp	r5, #0
 8013b58:	d03f      	beq.n	8013bda <rcl_init_options_copy+0x9e>
 8013b5a:	682b      	ldr	r3, [r5, #0]
 8013b5c:	b11b      	cbz	r3, 8013b66 <rcl_init_options_copy+0x2a>
 8013b5e:	2464      	movs	r4, #100	@ 0x64
 8013b60:	4620      	mov	r0, r4
 8013b62:	b01d      	add	sp, #116	@ 0x74
 8013b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b66:	6826      	ldr	r6, [r4, #0]
 8013b68:	46b6      	mov	lr, r6
 8013b6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b6e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8013b72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b76:	f8de 3000 	ldr.w	r3, [lr]
 8013b7a:	6837      	ldr	r7, [r6, #0]
 8013b7c:	f8cc 3000 	str.w	r3, [ip]
 8013b80:	4619      	mov	r1, r3
 8013b82:	2070      	movs	r0, #112	@ 0x70
 8013b84:	47b8      	blx	r7
 8013b86:	4606      	mov	r6, r0
 8013b88:	6028      	str	r0, [r5, #0]
 8013b8a:	b350      	cbz	r0, 8013be2 <rcl_init_options_copy+0xa6>
 8013b8c:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8013b90:	4686      	mov	lr, r0
 8013b92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b9a:	f8dc 3000 	ldr.w	r3, [ip]
 8013b9e:	f8ce 3000 	str.w	r3, [lr]
 8013ba2:	4668      	mov	r0, sp
 8013ba4:	f002 fff2 	bl	8016b8c <rmw_get_zero_initialized_init_options>
 8013ba8:	2258      	movs	r2, #88	@ 0x58
 8013baa:	4669      	mov	r1, sp
 8013bac:	f106 0018 	add.w	r0, r6, #24
 8013bb0:	f007 ff3a 	bl	801ba28 <memcpy>
 8013bb4:	6820      	ldr	r0, [r4, #0]
 8013bb6:	6829      	ldr	r1, [r5, #0]
 8013bb8:	3018      	adds	r0, #24
 8013bba:	3118      	adds	r1, #24
 8013bbc:	f003 fac8 	bl	8017150 <rmw_init_options_copy>
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d0cc      	beq.n	8013b60 <rcl_init_options_copy+0x24>
 8013bc6:	f7f9 ff5b 	bl	800da80 <rcutils_get_error_string>
 8013bca:	f7f9 ff71 	bl	800dab0 <rcutils_reset_error>
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f7ff ff8a 	bl	8013ae8 <rcl_init_options_fini>
 8013bd4:	b138      	cbz	r0, 8013be6 <rcl_init_options_copy+0xaa>
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	e7c2      	b.n	8013b60 <rcl_init_options_copy+0x24>
 8013bda:	240b      	movs	r4, #11
 8013bdc:	4620      	mov	r0, r4
 8013bde:	b01d      	add	sp, #116	@ 0x74
 8013be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013be2:	240a      	movs	r4, #10
 8013be4:	e7bc      	b.n	8013b60 <rcl_init_options_copy+0x24>
 8013be6:	4620      	mov	r0, r4
 8013be8:	b01d      	add	sp, #116	@ 0x74
 8013bea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013bee:	f7ff bd99 	b.w	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8013bf2:	bf00      	nop

08013bf4 <rcl_get_zero_initialized_node>:
 8013bf4:	4a03      	ldr	r2, [pc, #12]	@ (8013c04 <rcl_get_zero_initialized_node+0x10>)
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c00:	4618      	mov	r0, r3
 8013c02:	4770      	bx	lr
 8013c04:	08021ac0 	.word	0x08021ac0

08013c08 <rcl_node_init>:
 8013c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c0c:	b0ab      	sub	sp, #172	@ 0xac
 8013c0e:	4604      	mov	r4, r0
 8013c10:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8013c12:	a825      	add	r0, sp, #148	@ 0x94
 8013c14:	4689      	mov	r9, r1
 8013c16:	4690      	mov	r8, r2
 8013c18:	461f      	mov	r7, r3
 8013c1a:	f006 fa59 	bl	801a0d0 <rcl_guard_condition_get_default_options>
 8013c1e:	2d00      	cmp	r5, #0
 8013c20:	f000 80d8 	beq.w	8013dd4 <rcl_node_init+0x1cc>
 8013c24:	4628      	mov	r0, r5
 8013c26:	f7f9 ff17 	bl	800da58 <rcutils_allocator_is_valid>
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	f000 80d2 	beq.w	8013dd4 <rcl_node_init+0x1cc>
 8013c30:	f1b9 0f00 	cmp.w	r9, #0
 8013c34:	f000 80ce 	beq.w	8013dd4 <rcl_node_init+0x1cc>
 8013c38:	f1b8 0f00 	cmp.w	r8, #0
 8013c3c:	f000 80ca 	beq.w	8013dd4 <rcl_node_init+0x1cc>
 8013c40:	2c00      	cmp	r4, #0
 8013c42:	f000 80c7 	beq.w	8013dd4 <rcl_node_init+0x1cc>
 8013c46:	6866      	ldr	r6, [r4, #4]
 8013c48:	2e00      	cmp	r6, #0
 8013c4a:	f040 80ca 	bne.w	8013de2 <rcl_node_init+0x1da>
 8013c4e:	2f00      	cmp	r7, #0
 8013c50:	f000 80c0 	beq.w	8013dd4 <rcl_node_init+0x1cc>
 8013c54:	4638      	mov	r0, r7
 8013c56:	f7ff fd7f 	bl	8013758 <rcl_context_is_valid>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	f000 80bf 	beq.w	8013dde <rcl_node_init+0x1d6>
 8013c60:	4632      	mov	r2, r6
 8013c62:	a924      	add	r1, sp, #144	@ 0x90
 8013c64:	4648      	mov	r0, r9
 8013c66:	9624      	str	r6, [sp, #144]	@ 0x90
 8013c68:	f003 f92c 	bl	8016ec4 <rmw_validate_node_name>
 8013c6c:	4606      	mov	r6, r0
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	f040 80b1 	bne.w	8013dd6 <rcl_node_init+0x1ce>
 8013c74:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8013c76:	2800      	cmp	r0, #0
 8013c78:	f040 8104 	bne.w	8013e84 <rcl_node_init+0x27c>
 8013c7c:	f898 3000 	ldrb.w	r3, [r8]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f000 80f0 	beq.w	8013e66 <rcl_node_init+0x25e>
 8013c86:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c88:	f000 80b0 	beq.w	8013dec <rcl_node_init+0x1e4>
 8013c8c:	4b85      	ldr	r3, [pc, #532]	@ (8013ea4 <rcl_node_init+0x29c>)
 8013c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c92:	9302      	str	r3, [sp, #8]
 8013c94:	692b      	ldr	r3, [r5, #16]
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013c9c:	9301      	str	r3, [sp, #4]
 8013c9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013ca2:	f002 fccf 	bl	8016644 <rcutils_format_string_limit>
 8013ca6:	4680      	mov	r8, r0
 8013ca8:	f1b8 0f00 	cmp.w	r8, #0
 8013cac:	f000 80e8 	beq.w	8013e80 <rcl_node_init+0x278>
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	a924      	add	r1, sp, #144	@ 0x90
 8013cb4:	4640      	mov	r0, r8
 8013cb6:	9224      	str	r2, [sp, #144]	@ 0x90
 8013cb8:	f003 f8e6 	bl	8016e88 <rmw_validate_namespace>
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	f040 80a4 	bne.w	8013e0c <rcl_node_init+0x204>
 8013cc4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	f040 809d 	bne.w	8013e06 <rcl_node_init+0x1fe>
 8013ccc:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8013cd0:	2178      	movs	r1, #120	@ 0x78
 8013cd2:	2001      	movs	r0, #1
 8013cd4:	4798      	blx	r3
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	6060      	str	r0, [r4, #4]
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	f000 80d6 	beq.w	8013e8c <rcl_node_init+0x284>
 8013ce0:	a80a      	add	r0, sp, #40	@ 0x28
 8013ce2:	f000 f92f 	bl	8013f44 <rcl_node_get_default_options>
 8013ce6:	a90a      	add	r1, sp, #40	@ 0x28
 8013ce8:	4630      	mov	r0, r6
 8013cea:	2268      	movs	r2, #104	@ 0x68
 8013cec:	f007 fe9c 	bl	801ba28 <memcpy>
 8013cf0:	6861      	ldr	r1, [r4, #4]
 8013cf2:	6027      	str	r7, [r4, #0]
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	f000 f933 	bl	8013f60 <rcl_node_options_copy>
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	f040 8085 	bne.w	8013e0c <rcl_node_init+0x204>
 8013d02:	4640      	mov	r0, r8
 8013d04:	f7ec fae4 	bl	80002d0 <strlen>
 8013d08:	eb08 0300 	add.w	r3, r8, r0
 8013d0c:	6866      	ldr	r6, [r4, #4]
 8013d0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013d12:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8013d16:	2b2f      	cmp	r3, #47	@ 0x2f
 8013d18:	bf0c      	ite	eq
 8013d1a:	4b63      	ldreq	r3, [pc, #396]	@ (8013ea8 <rcl_node_init+0x2a0>)
 8013d1c:	4b63      	ldrne	r3, [pc, #396]	@ (8013eac <rcl_node_init+0x2a4>)
 8013d1e:	9302      	str	r3, [sp, #8]
 8013d20:	692b      	ldr	r3, [r5, #16]
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013d28:	9301      	str	r3, [sp, #4]
 8013d2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013d2e:	f002 fc89 	bl	8016644 <rcutils_format_string_limit>
 8013d32:	6863      	ldr	r3, [r4, #4]
 8013d34:	6770      	str	r0, [r6, #116]	@ 0x74
 8013d36:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8013d38:	2a00      	cmp	r2, #0
 8013d3a:	f000 80a9 	beq.w	8013e90 <rcl_node_init+0x288>
 8013d3e:	6822      	ldr	r2, [r4, #0]
 8013d40:	9307      	str	r3, [sp, #28]
 8013d42:	6810      	ldr	r0, [r2, #0]
 8013d44:	4649      	mov	r1, r9
 8013d46:	3028      	adds	r0, #40	@ 0x28
 8013d48:	4642      	mov	r2, r8
 8013d4a:	f003 fce7 	bl	801771c <rmw_create_node>
 8013d4e:	9b07      	ldr	r3, [sp, #28]
 8013d50:	6698      	str	r0, [r3, #104]	@ 0x68
 8013d52:	6863      	ldr	r3, [r4, #4]
 8013d54:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f000 809d 	beq.w	8013e96 <rcl_node_init+0x28e>
 8013d5c:	f003 fd70 	bl	8017840 <rmw_node_get_graph_guard_condition>
 8013d60:	4681      	mov	r9, r0
 8013d62:	2800      	cmp	r0, #0
 8013d64:	f000 809c 	beq.w	8013ea0 <rcl_node_init+0x298>
 8013d68:	682b      	ldr	r3, [r5, #0]
 8013d6a:	6929      	ldr	r1, [r5, #16]
 8013d6c:	6866      	ldr	r6, [r4, #4]
 8013d6e:	2008      	movs	r0, #8
 8013d70:	4798      	blx	r3
 8013d72:	6863      	ldr	r3, [r4, #4]
 8013d74:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013d76:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8013d7a:	f1ba 0f00 	cmp.w	sl, #0
 8013d7e:	f000 808d 	beq.w	8013e9c <rcl_node_init+0x294>
 8013d82:	f10d 0b20 	add.w	fp, sp, #32
 8013d86:	4658      	mov	r0, fp
 8013d88:	f006 f8ca 	bl	8019f20 <rcl_get_zero_initialized_guard_condition>
 8013d8c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8013d90:	6863      	ldr	r3, [r4, #4]
 8013d92:	46ac      	mov	ip, r5
 8013d94:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013d98:	e88a 0003 	stmia.w	sl, {r0, r1}
 8013d9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013da0:	ae25      	add	r6, sp, #148	@ 0x94
 8013da2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013da4:	f8dc 3000 	ldr.w	r3, [ip]
 8013da8:	6033      	str	r3, [r6, #0]
 8013daa:	ab2a      	add	r3, sp, #168	@ 0xa8
 8013dac:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013db0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013db4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8013db6:	463a      	mov	r2, r7
 8013db8:	4649      	mov	r1, r9
 8013dba:	4670      	mov	r0, lr
 8013dbc:	f006 f906 	bl	8019fcc <rcl_guard_condition_init_from_rmw>
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	bb18      	cbnz	r0, 8013e0c <rcl_node_init+0x204>
 8013dc4:	686b      	ldr	r3, [r5, #4]
 8013dc6:	6929      	ldr	r1, [r5, #16]
 8013dc8:	4798      	blx	r3
 8013dca:	686b      	ldr	r3, [r5, #4]
 8013dcc:	6929      	ldr	r1, [r5, #16]
 8013dce:	4640      	mov	r0, r8
 8013dd0:	4798      	blx	r3
 8013dd2:	e000      	b.n	8013dd6 <rcl_node_init+0x1ce>
 8013dd4:	260b      	movs	r6, #11
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	b02b      	add	sp, #172	@ 0xac
 8013dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dde:	2665      	movs	r6, #101	@ 0x65
 8013de0:	e7f9      	b.n	8013dd6 <rcl_node_init+0x1ce>
 8013de2:	2664      	movs	r6, #100	@ 0x64
 8013de4:	4630      	mov	r0, r6
 8013de6:	b02b      	add	sp, #172	@ 0xac
 8013de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dec:	f105 030c 	add.w	r3, r5, #12
 8013df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013df4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013df8:	4640      	mov	r0, r8
 8013dfa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8013dfe:	f002 fd3f 	bl	8016880 <rcutils_strdup>
 8013e02:	4680      	mov	r8, r0
 8013e04:	e750      	b.n	8013ca8 <rcl_node_init+0xa0>
 8013e06:	f003 f851 	bl	8016eac <rmw_namespace_validation_result_string>
 8013e0a:	26ca      	movs	r6, #202	@ 0xca
 8013e0c:	6863      	ldr	r3, [r4, #4]
 8013e0e:	b1f3      	cbz	r3, 8013e4e <rcl_node_init+0x246>
 8013e10:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013e12:	b138      	cbz	r0, 8013e24 <rcl_node_init+0x21c>
 8013e14:	f006 f93a 	bl	801a08c <rcl_guard_condition_fini>
 8013e18:	6863      	ldr	r3, [r4, #4]
 8013e1a:	6929      	ldr	r1, [r5, #16]
 8013e1c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013e1e:	686b      	ldr	r3, [r5, #4]
 8013e20:	4798      	blx	r3
 8013e22:	6863      	ldr	r3, [r4, #4]
 8013e24:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013e26:	b110      	cbz	r0, 8013e2e <rcl_node_init+0x226>
 8013e28:	f003 fc8e 	bl	8017748 <rmw_destroy_node>
 8013e2c:	6863      	ldr	r3, [r4, #4]
 8013e2e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8013e30:	6929      	ldr	r1, [r5, #16]
 8013e32:	686b      	ldr	r3, [r5, #4]
 8013e34:	4798      	blx	r3
 8013e36:	6863      	ldr	r3, [r4, #4]
 8013e38:	6929      	ldr	r1, [r5, #16]
 8013e3a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013e3c:	686b      	ldr	r3, [r5, #4]
 8013e3e:	4798      	blx	r3
 8013e40:	6860      	ldr	r0, [r4, #4]
 8013e42:	f000 f8ab 	bl	8013f9c <rcl_node_options_fini>
 8013e46:	686b      	ldr	r3, [r5, #4]
 8013e48:	6929      	ldr	r1, [r5, #16]
 8013e4a:	6860      	ldr	r0, [r4, #4]
 8013e4c:	4798      	blx	r3
 8013e4e:	686b      	ldr	r3, [r5, #4]
 8013e50:	6929      	ldr	r1, [r5, #16]
 8013e52:	2000      	movs	r0, #0
 8013e54:	4798      	blx	r3
 8013e56:	686b      	ldr	r3, [r5, #4]
 8013e58:	6929      	ldr	r1, [r5, #16]
 8013e5a:	4640      	mov	r0, r8
 8013e5c:	4798      	blx	r3
 8013e5e:	2300      	movs	r3, #0
 8013e60:	e9c4 3300 	strd	r3, r3, [r4]
 8013e64:	e7b7      	b.n	8013dd6 <rcl_node_init+0x1ce>
 8013e66:	f105 030c 	add.w	r3, r5, #12
 8013e6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013e6e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013e72:	480f      	ldr	r0, [pc, #60]	@ (8013eb0 <rcl_node_init+0x2a8>)
 8013e74:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8013e78:	f002 fd02 	bl	8016880 <rcutils_strdup>
 8013e7c:	4680      	mov	r8, r0
 8013e7e:	e713      	b.n	8013ca8 <rcl_node_init+0xa0>
 8013e80:	260a      	movs	r6, #10
 8013e82:	e7a8      	b.n	8013dd6 <rcl_node_init+0x1ce>
 8013e84:	f003 f86a 	bl	8016f5c <rmw_node_name_validation_result_string>
 8013e88:	26c9      	movs	r6, #201	@ 0xc9
 8013e8a:	e7a4      	b.n	8013dd6 <rcl_node_init+0x1ce>
 8013e8c:	260a      	movs	r6, #10
 8013e8e:	e7de      	b.n	8013e4e <rcl_node_init+0x246>
 8013e90:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013e92:	260a      	movs	r6, #10
 8013e94:	e7bd      	b.n	8013e12 <rcl_node_init+0x20a>
 8013e96:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013e98:	2601      	movs	r6, #1
 8013e9a:	e7ba      	b.n	8013e12 <rcl_node_init+0x20a>
 8013e9c:	260a      	movs	r6, #10
 8013e9e:	e7c1      	b.n	8013e24 <rcl_node_init+0x21c>
 8013ea0:	2601      	movs	r6, #1
 8013ea2:	e7b3      	b.n	8013e0c <rcl_node_init+0x204>
 8013ea4:	08020f80 	.word	0x08020f80
 8013ea8:	08020ca4 	.word	0x08020ca4
 8013eac:	08020f84 	.word	0x08020f84
 8013eb0:	08020f7c 	.word	0x08020f7c

08013eb4 <rcl_node_is_valid>:
 8013eb4:	b130      	cbz	r0, 8013ec4 <rcl_node_is_valid+0x10>
 8013eb6:	6843      	ldr	r3, [r0, #4]
 8013eb8:	b123      	cbz	r3, 8013ec4 <rcl_node_is_valid+0x10>
 8013eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013ebc:	b113      	cbz	r3, 8013ec4 <rcl_node_is_valid+0x10>
 8013ebe:	6800      	ldr	r0, [r0, #0]
 8013ec0:	f7ff bc4a 	b.w	8013758 <rcl_context_is_valid>
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	4770      	bx	lr

08013ec8 <rcl_node_get_name>:
 8013ec8:	b120      	cbz	r0, 8013ed4 <rcl_node_get_name+0xc>
 8013eca:	6840      	ldr	r0, [r0, #4]
 8013ecc:	b110      	cbz	r0, 8013ed4 <rcl_node_get_name+0xc>
 8013ece:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013ed0:	b100      	cbz	r0, 8013ed4 <rcl_node_get_name+0xc>
 8013ed2:	6880      	ldr	r0, [r0, #8]
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop

08013ed8 <rcl_node_get_namespace>:
 8013ed8:	b120      	cbz	r0, 8013ee4 <rcl_node_get_namespace+0xc>
 8013eda:	6840      	ldr	r0, [r0, #4]
 8013edc:	b110      	cbz	r0, 8013ee4 <rcl_node_get_namespace+0xc>
 8013ede:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013ee0:	b100      	cbz	r0, 8013ee4 <rcl_node_get_namespace+0xc>
 8013ee2:	68c0      	ldr	r0, [r0, #12]
 8013ee4:	4770      	bx	lr
 8013ee6:	bf00      	nop

08013ee8 <rcl_node_get_options>:
 8013ee8:	b128      	cbz	r0, 8013ef6 <rcl_node_get_options+0xe>
 8013eea:	6840      	ldr	r0, [r0, #4]
 8013eec:	b118      	cbz	r0, 8013ef6 <rcl_node_get_options+0xe>
 8013eee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	bf08      	it	eq
 8013ef4:	2000      	moveq	r0, #0
 8013ef6:	4770      	bx	lr

08013ef8 <rcl_node_get_rmw_handle>:
 8013ef8:	b110      	cbz	r0, 8013f00 <rcl_node_get_rmw_handle+0x8>
 8013efa:	6840      	ldr	r0, [r0, #4]
 8013efc:	b100      	cbz	r0, 8013f00 <rcl_node_get_rmw_handle+0x8>
 8013efe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop

08013f04 <rcl_get_disable_loaned_message>:
 8013f04:	b510      	push	{r4, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	2300      	movs	r3, #0
 8013f0a:	9301      	str	r3, [sp, #4]
 8013f0c:	b1a0      	cbz	r0, 8013f38 <rcl_get_disable_loaned_message+0x34>
 8013f0e:	4604      	mov	r4, r0
 8013f10:	a901      	add	r1, sp, #4
 8013f12:	480b      	ldr	r0, [pc, #44]	@ (8013f40 <rcl_get_disable_loaned_message+0x3c>)
 8013f14:	f002 fb7e 	bl	8016614 <rcutils_get_env>
 8013f18:	b110      	cbz	r0, 8013f20 <rcl_get_disable_loaned_message+0x1c>
 8013f1a:	2001      	movs	r0, #1
 8013f1c:	b002      	add	sp, #8
 8013f1e:	bd10      	pop	{r4, pc}
 8013f20:	9a01      	ldr	r2, [sp, #4]
 8013f22:	7813      	ldrb	r3, [r2, #0]
 8013f24:	3b31      	subs	r3, #49	@ 0x31
 8013f26:	bf08      	it	eq
 8013f28:	7853      	ldrbeq	r3, [r2, #1]
 8013f2a:	fab3 f383 	clz	r3, r3
 8013f2e:	095b      	lsrs	r3, r3, #5
 8013f30:	2000      	movs	r0, #0
 8013f32:	7023      	strb	r3, [r4, #0]
 8013f34:	b002      	add	sp, #8
 8013f36:	bd10      	pop	{r4, pc}
 8013f38:	200b      	movs	r0, #11
 8013f3a:	b002      	add	sp, #8
 8013f3c:	bd10      	pop	{r4, pc}
 8013f3e:	bf00      	nop
 8013f40:	08020f8c 	.word	0x08020f8c

08013f44 <rcl_node_get_default_options>:
 8013f44:	b510      	push	{r4, lr}
 8013f46:	2253      	movs	r2, #83	@ 0x53
 8013f48:	4604      	mov	r4, r0
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	3015      	adds	r0, #21
 8013f4e:	f007 fc83 	bl	801b858 <memset>
 8013f52:	4620      	mov	r0, r4
 8013f54:	f7f9 fd54 	bl	800da00 <rcutils_get_default_allocator>
 8013f58:	2301      	movs	r3, #1
 8013f5a:	7523      	strb	r3, [r4, #20]
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	bd10      	pop	{r4, pc}

08013f60 <rcl_node_options_copy>:
 8013f60:	b1d0      	cbz	r0, 8013f98 <rcl_node_options_copy+0x38>
 8013f62:	b570      	push	{r4, r5, r6, lr}
 8013f64:	460c      	mov	r4, r1
 8013f66:	b1a9      	cbz	r1, 8013f94 <rcl_node_options_copy+0x34>
 8013f68:	4288      	cmp	r0, r1
 8013f6a:	4684      	mov	ip, r0
 8013f6c:	d012      	beq.n	8013f94 <rcl_node_options_copy+0x34>
 8013f6e:	4605      	mov	r5, r0
 8013f70:	8a86      	ldrh	r6, [r0, #20]
 8013f72:	468e      	mov	lr, r1
 8013f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f7a:	682b      	ldr	r3, [r5, #0]
 8013f7c:	f8ce 3000 	str.w	r3, [lr]
 8013f80:	f10c 0118 	add.w	r1, ip, #24
 8013f84:	2250      	movs	r2, #80	@ 0x50
 8013f86:	82a6      	strh	r6, [r4, #20]
 8013f88:	f104 0018 	add.w	r0, r4, #24
 8013f8c:	f007 fd4c 	bl	801ba28 <memcpy>
 8013f90:	2000      	movs	r0, #0
 8013f92:	bd70      	pop	{r4, r5, r6, pc}
 8013f94:	200b      	movs	r0, #11
 8013f96:	bd70      	pop	{r4, r5, r6, pc}
 8013f98:	200b      	movs	r0, #11
 8013f9a:	4770      	bx	lr

08013f9c <rcl_node_options_fini>:
 8013f9c:	b1c0      	cbz	r0, 8013fd0 <rcl_node_options_fini+0x34>
 8013f9e:	b500      	push	{lr}
 8013fa0:	4684      	mov	ip, r0
 8013fa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fa6:	b087      	sub	sp, #28
 8013fa8:	f10d 0e04 	add.w	lr, sp, #4
 8013fac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013fb0:	f8dc 3000 	ldr.w	r3, [ip]
 8013fb4:	f8ce 3000 	str.w	r3, [lr]
 8013fb8:	a801      	add	r0, sp, #4
 8013fba:	f7f9 fd4d 	bl	800da58 <rcutils_allocator_is_valid>
 8013fbe:	b118      	cbz	r0, 8013fc8 <rcl_node_options_fini+0x2c>
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	b007      	add	sp, #28
 8013fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fc8:	200b      	movs	r0, #11
 8013fca:	b007      	add	sp, #28
 8013fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fd0:	200b      	movs	r0, #11
 8013fd2:	4770      	bx	lr

08013fd4 <rcl_node_resolve_name>:
 8013fd4:	b082      	sub	sp, #8
 8013fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fda:	b091      	sub	sp, #68	@ 0x44
 8013fdc:	ac1a      	add	r4, sp, #104	@ 0x68
 8013fde:	e884 000c 	stmia.w	r4, {r2, r3}
 8013fe2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	d03a      	beq.n	8014060 <rcl_node_resolve_name+0x8c>
 8013fea:	460c      	mov	r4, r1
 8013fec:	4605      	mov	r5, r0
 8013fee:	f7ff ff7b 	bl	8013ee8 <rcl_node_get_options>
 8013ff2:	b370      	cbz	r0, 8014052 <rcl_node_resolve_name+0x7e>
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	f7ff ff67 	bl	8013ec8 <rcl_node_get_name>
 8013ffa:	4681      	mov	r9, r0
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	f7ff ff6b 	bl	8013ed8 <rcl_node_get_namespace>
 8014002:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014006:	4607      	mov	r7, r0
 8014008:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801400c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801400e:	46ac      	mov	ip, r5
 8014010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014014:	f8de 3000 	ldr.w	r3, [lr]
 8014018:	f8cc 3000 	str.w	r3, [ip]
 801401c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801401e:	b1fb      	cbz	r3, 8014060 <rcl_node_resolve_name+0x8c>
 8014020:	468a      	mov	sl, r1
 8014022:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014026:	f002 fc8b 	bl	8016940 <rcutils_get_zero_initialized_string_map>
 801402a:	ab10      	add	r3, sp, #64	@ 0x40
 801402c:	9008      	str	r0, [sp, #32]
 801402e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014032:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014036:	2100      	movs	r1, #0
 8014038:	e895 000c 	ldmia.w	r5, {r2, r3}
 801403c:	a808      	add	r0, sp, #32
 801403e:	f002 fcd9 	bl	80169f4 <rcutils_string_map_init>
 8014042:	4606      	mov	r6, r0
 8014044:	b170      	cbz	r0, 8014064 <rcl_node_resolve_name+0x90>
 8014046:	f7f9 fd1b 	bl	800da80 <rcutils_get_error_string>
 801404a:	f7f9 fd31 	bl	800dab0 <rcutils_reset_error>
 801404e:	2e0a      	cmp	r6, #10
 8014050:	d000      	beq.n	8014054 <rcl_node_resolve_name+0x80>
 8014052:	2601      	movs	r6, #1
 8014054:	4630      	mov	r0, r6
 8014056:	b011      	add	sp, #68	@ 0x44
 8014058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	b002      	add	sp, #8
 801405e:	4770      	bx	lr
 8014060:	260b      	movs	r6, #11
 8014062:	e7f7      	b.n	8014054 <rcl_node_resolve_name+0x80>
 8014064:	9009      	str	r0, [sp, #36]	@ 0x24
 8014066:	9007      	str	r0, [sp, #28]
 8014068:	a808      	add	r0, sp, #32
 801406a:	f005 ff53 	bl	8019f14 <rcl_get_default_topic_name_substitutions>
 801406e:	4606      	mov	r6, r0
 8014070:	b1b0      	cbz	r0, 80140a0 <rcl_node_resolve_name+0xcc>
 8014072:	280a      	cmp	r0, #10
 8014074:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8014078:	d000      	beq.n	801407c <rcl_node_resolve_name+0xa8>
 801407a:	2601      	movs	r6, #1
 801407c:	a808      	add	r0, sp, #32
 801407e:	f002 fcf7 	bl	8016a70 <rcutils_string_map_fini>
 8014082:	2800      	cmp	r0, #0
 8014084:	d132      	bne.n	80140ec <rcl_node_resolve_name+0x118>
 8014086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014088:	4659      	mov	r1, fp
 801408a:	47d0      	blx	sl
 801408c:	4659      	mov	r1, fp
 801408e:	4648      	mov	r0, r9
 8014090:	47d0      	blx	sl
 8014092:	f1b8 0f00 	cmp.w	r8, #0
 8014096:	d0dd      	beq.n	8014054 <rcl_node_resolve_name+0x80>
 8014098:	2e67      	cmp	r6, #103	@ 0x67
 801409a:	bf08      	it	eq
 801409c:	2668      	moveq	r6, #104	@ 0x68
 801409e:	e7d9      	b.n	8014054 <rcl_node_resolve_name+0x80>
 80140a0:	ab09      	add	r3, sp, #36	@ 0x24
 80140a2:	9305      	str	r3, [sp, #20]
 80140a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140a6:	46ec      	mov	ip, sp
 80140a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140ac:	682b      	ldr	r3, [r5, #0]
 80140ae:	f8cc 3000 	str.w	r3, [ip]
 80140b2:	463a      	mov	r2, r7
 80140b4:	4649      	mov	r1, r9
 80140b6:	4620      	mov	r0, r4
 80140b8:	ab08      	add	r3, sp, #32
 80140ba:	f005 fdc5 	bl	8019c48 <rcl_expand_topic_name>
 80140be:	4606      	mov	r6, r0
 80140c0:	b9c8      	cbnz	r0, 80140f6 <rcl_node_resolve_name+0x122>
 80140c2:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80140c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80140c8:	4602      	mov	r2, r0
 80140ca:	a90a      	add	r1, sp, #40	@ 0x28
 80140cc:	4648      	mov	r0, r9
 80140ce:	f002 fe23 	bl	8016d18 <rmw_validate_full_topic_name>
 80140d2:	b998      	cbnz	r0, 80140fc <rcl_node_resolve_name+0x128>
 80140d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80140d6:	bb14      	cbnz	r4, 801411e <rcl_node_resolve_name+0x14a>
 80140d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80140da:	a808      	add	r0, sp, #32
 80140dc:	f8c3 9000 	str.w	r9, [r3]
 80140e0:	f002 fcc6 	bl	8016a70 <rcutils_string_map_fini>
 80140e4:	4606      	mov	r6, r0
 80140e6:	b978      	cbnz	r0, 8014108 <rcl_node_resolve_name+0x134>
 80140e8:	4681      	mov	r9, r0
 80140ea:	e7cc      	b.n	8014086 <rcl_node_resolve_name+0xb2>
 80140ec:	f7f9 fcc8 	bl	800da80 <rcutils_get_error_string>
 80140f0:	f7f9 fcde 	bl	800dab0 <rcutils_reset_error>
 80140f4:	e7c7      	b.n	8014086 <rcl_node_resolve_name+0xb2>
 80140f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80140fa:	e7bf      	b.n	801407c <rcl_node_resolve_name+0xa8>
 80140fc:	f7f9 fcc0 	bl	800da80 <rcutils_get_error_string>
 8014100:	2601      	movs	r6, #1
 8014102:	f7f9 fcd5 	bl	800dab0 <rcutils_reset_error>
 8014106:	e7b9      	b.n	801407c <rcl_node_resolve_name+0xa8>
 8014108:	f7f9 fcba 	bl	800da80 <rcutils_get_error_string>
 801410c:	f7f9 fcd0 	bl	800dab0 <rcutils_reset_error>
 8014110:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014112:	4659      	mov	r1, fp
 8014114:	47d0      	blx	sl
 8014116:	4659      	mov	r1, fp
 8014118:	4620      	mov	r0, r4
 801411a:	47d0      	blx	sl
 801411c:	e799      	b.n	8014052 <rcl_node_resolve_name+0x7e>
 801411e:	2667      	movs	r6, #103	@ 0x67
 8014120:	e7ac      	b.n	801407c <rcl_node_resolve_name+0xa8>
 8014122:	bf00      	nop

08014124 <rcl_service_get_rmw_handle>:
 8014124:	b118      	cbz	r0, 801412e <rcl_service_get_rmw_handle+0xa>
 8014126:	6800      	ldr	r0, [r0, #0]
 8014128:	b108      	cbz	r0, 801412e <rcl_service_get_rmw_handle+0xa>
 801412a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801412e:	4770      	bx	lr

08014130 <rcl_take_request>:
 8014130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014132:	468e      	mov	lr, r1
 8014134:	460c      	mov	r4, r1
 8014136:	4617      	mov	r7, r2
 8014138:	4605      	mov	r5, r0
 801413a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801413e:	b091      	sub	sp, #68	@ 0x44
 8014140:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8014144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014148:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801414c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014150:	b30d      	cbz	r5, 8014196 <rcl_take_request+0x66>
 8014152:	682b      	ldr	r3, [r5, #0]
 8014154:	b1fb      	cbz	r3, 8014196 <rcl_take_request+0x66>
 8014156:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801415a:	b1e0      	cbz	r0, 8014196 <rcl_take_request+0x66>
 801415c:	b397      	cbz	r7, 80141c4 <rcl_take_request+0x94>
 801415e:	2300      	movs	r3, #0
 8014160:	f88d 3017 	strb.w	r3, [sp, #23]
 8014164:	463a      	mov	r2, r7
 8014166:	f10d 0317 	add.w	r3, sp, #23
 801416a:	a906      	add	r1, sp, #24
 801416c:	f003 fbb6 	bl	80178dc <rmw_take_request>
 8014170:	4606      	mov	r6, r0
 8014172:	b198      	cbz	r0, 801419c <rcl_take_request+0x6c>
 8014174:	280a      	cmp	r0, #10
 8014176:	bf18      	it	ne
 8014178:	2601      	movne	r6, #1
 801417a:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801417e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014182:	46a6      	mov	lr, r4
 8014184:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014188:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801418c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014190:	4630      	mov	r0, r6
 8014192:	b011      	add	sp, #68	@ 0x44
 8014194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014196:	f44f 7616 	mov.w	r6, #600	@ 0x258
 801419a:	e7ee      	b.n	801417a <rcl_take_request+0x4a>
 801419c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80141a0:	b193      	cbz	r3, 80141c8 <rcl_take_request+0x98>
 80141a2:	682b      	ldr	r3, [r5, #0]
 80141a4:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d0e6      	beq.n	801417a <rcl_take_request+0x4a>
 80141ac:	463a      	mov	r2, r7
 80141ae:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 80141b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80141b4:	e9cd 6700 	strd	r6, r7, [sp]
 80141b8:	9302      	str	r3, [sp, #8]
 80141ba:	2101      	movs	r1, #1
 80141bc:	f000 f844 	bl	8014248 <rcl_send_service_event_message>
 80141c0:	4606      	mov	r6, r0
 80141c2:	e7da      	b.n	801417a <rcl_take_request+0x4a>
 80141c4:	260b      	movs	r6, #11
 80141c6:	e7d8      	b.n	801417a <rcl_take_request+0x4a>
 80141c8:	f240 2659 	movw	r6, #601	@ 0x259
 80141cc:	e7d5      	b.n	801417a <rcl_take_request+0x4a>
 80141ce:	bf00      	nop

080141d0 <rcl_send_response>:
 80141d0:	b350      	cbz	r0, 8014228 <rcl_send_response+0x58>
 80141d2:	b570      	push	{r4, r5, r6, lr}
 80141d4:	6803      	ldr	r3, [r0, #0]
 80141d6:	b084      	sub	sp, #16
 80141d8:	4604      	mov	r4, r0
 80141da:	b1cb      	cbz	r3, 8014210 <rcl_send_response+0x40>
 80141dc:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80141e0:	b1b0      	cbz	r0, 8014210 <rcl_send_response+0x40>
 80141e2:	460e      	mov	r6, r1
 80141e4:	b1e9      	cbz	r1, 8014222 <rcl_send_response+0x52>
 80141e6:	4615      	mov	r5, r2
 80141e8:	b1da      	cbz	r2, 8014222 <rcl_send_response+0x52>
 80141ea:	f003 fbd5 	bl	8017998 <rmw_send_response>
 80141ee:	b998      	cbnz	r0, 8014218 <rcl_send_response+0x48>
 80141f0:	6823      	ldr	r3, [r4, #0]
 80141f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80141f6:	b16b      	cbz	r3, 8014214 <rcl_send_response+0x44>
 80141f8:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80141fc:	462a      	mov	r2, r5
 80141fe:	e9cd 0100 	strd	r0, r1, [sp]
 8014202:	9602      	str	r6, [sp, #8]
 8014204:	2102      	movs	r1, #2
 8014206:	4618      	mov	r0, r3
 8014208:	f000 f81e 	bl	8014248 <rcl_send_service_event_message>
 801420c:	b004      	add	sp, #16
 801420e:	bd70      	pop	{r4, r5, r6, pc}
 8014210:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014214:	b004      	add	sp, #16
 8014216:	bd70      	pop	{r4, r5, r6, pc}
 8014218:	2802      	cmp	r0, #2
 801421a:	bf18      	it	ne
 801421c:	2001      	movne	r0, #1
 801421e:	b004      	add	sp, #16
 8014220:	bd70      	pop	{r4, r5, r6, pc}
 8014222:	200b      	movs	r0, #11
 8014224:	b004      	add	sp, #16
 8014226:	bd70      	pop	{r4, r5, r6, pc}
 8014228:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop

08014230 <rcl_service_is_valid>:
 8014230:	b130      	cbz	r0, 8014240 <rcl_service_is_valid+0x10>
 8014232:	6800      	ldr	r0, [r0, #0]
 8014234:	b120      	cbz	r0, 8014240 <rcl_service_is_valid+0x10>
 8014236:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801423a:	3800      	subs	r0, #0
 801423c:	bf18      	it	ne
 801423e:	2001      	movne	r0, #1
 8014240:	4770      	bx	lr
 8014242:	bf00      	nop
 8014244:	0000      	movs	r0, r0
	...

08014248 <rcl_send_service_event_message>:
 8014248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801424a:	b093      	sub	sp, #76	@ 0x4c
 801424c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801424e:	b17a      	cbz	r2, 8014270 <rcl_send_service_event_message+0x28>
 8014250:	b176      	cbz	r6, 8014270 <rcl_send_service_event_message+0x28>
 8014252:	4604      	mov	r4, r0
 8014254:	b150      	cbz	r0, 801426c <rcl_send_service_event_message+0x24>
 8014256:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 801425a:	b13b      	cbz	r3, 801426c <rcl_send_service_event_message+0x24>
 801425c:	68c0      	ldr	r0, [r0, #12]
 801425e:	460f      	mov	r7, r1
 8014260:	4615      	mov	r5, r2
 8014262:	f000 f9bb 	bl	80145dc <rcl_clock_valid>
 8014266:	b108      	cbz	r0, 801426c <rcl_send_service_event_message+0x24>
 8014268:	7a23      	ldrb	r3, [r4, #8]
 801426a:	b92b      	cbnz	r3, 8014278 <rcl_send_service_event_message+0x30>
 801426c:	2501      	movs	r5, #1
 801426e:	e000      	b.n	8014272 <rcl_send_service_event_message+0x2a>
 8014270:	250b      	movs	r5, #11
 8014272:	4628      	mov	r0, r5
 8014274:	b013      	add	sp, #76	@ 0x4c
 8014276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014278:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 801427c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014280:	f10d 0c0c 	add.w	ip, sp, #12
 8014284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014288:	f8de 3000 	ldr.w	r3, [lr]
 801428c:	f8cc 3000 	str.w	r3, [ip]
 8014290:	a803      	add	r0, sp, #12
 8014292:	f7f9 fbe1 	bl	800da58 <rcutils_allocator_is_valid>
 8014296:	2800      	cmp	r0, #0
 8014298:	d0ea      	beq.n	8014270 <rcl_send_service_event_message+0x28>
 801429a:	6820      	ldr	r0, [r4, #0]
 801429c:	f7f8 fc78 	bl	800cb90 <rcl_publisher_is_valid>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	d045      	beq.n	8014330 <rcl_send_service_event_message+0xe8>
 80142a4:	4669      	mov	r1, sp
 80142a6:	68e0      	ldr	r0, [r4, #12]
 80142a8:	f000 fa10 	bl	80146cc <rcl_clock_get_now>
 80142ac:	4601      	mov	r1, r0
 80142ae:	2800      	cmp	r0, #0
 80142b0:	d13b      	bne.n	801432a <rcl_send_service_event_message+0xe2>
 80142b2:	2220      	movs	r2, #32
 80142b4:	eb0d 0002 	add.w	r0, sp, r2
 80142b8:	f007 face 	bl	801b858 <memset>
 80142bc:	a324      	add	r3, pc, #144	@ (adr r3, 8014350 <rcl_send_service_event_message+0x108>)
 80142be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142c6:	f88d 7020 	strb.w	r7, [sp, #32]
 80142ca:	f7ec fced 	bl	8000ca8 <__aeabi_ldivmod>
 80142ce:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 80142d2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80142d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80142da:	7a23      	ldrb	r3, [r4, #8]
 80142dc:	6830      	ldr	r0, [r6, #0]
 80142de:	6871      	ldr	r1, [r6, #4]
 80142e0:	68b2      	ldr	r2, [r6, #8]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	68f3      	ldr	r3, [r6, #12]
 80142e6:	bf08      	it	eq
 80142e8:	2500      	moveq	r5, #0
 80142ea:	ae0b      	add	r6, sp, #44	@ 0x2c
 80142ec:	2f01      	cmp	r7, #1
 80142ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80142f0:	d821      	bhi.n	8014336 <rcl_send_service_event_message+0xee>
 80142f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80142f6:	462a      	mov	r2, r5
 80142f8:	a808      	add	r0, sp, #32
 80142fa:	699d      	ldr	r5, [r3, #24]
 80142fc:	a903      	add	r1, sp, #12
 80142fe:	2300      	movs	r3, #0
 8014300:	47a8      	blx	r5
 8014302:	4606      	mov	r6, r0
 8014304:	2e00      	cmp	r6, #0
 8014306:	d0b1      	beq.n	801426c <rcl_send_service_event_message+0x24>
 8014308:	4631      	mov	r1, r6
 801430a:	6820      	ldr	r0, [r4, #0]
 801430c:	2200      	movs	r2, #0
 801430e:	f7f8 fc19 	bl	800cb44 <rcl_publish>
 8014312:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8014316:	4605      	mov	r5, r0
 8014318:	69db      	ldr	r3, [r3, #28]
 801431a:	a903      	add	r1, sp, #12
 801431c:	4630      	mov	r0, r6
 801431e:	4798      	blx	r3
 8014320:	2d00      	cmp	r5, #0
 8014322:	d0a6      	beq.n	8014272 <rcl_send_service_event_message+0x2a>
 8014324:	f7f9 fbc4 	bl	800dab0 <rcutils_reset_error>
 8014328:	e7a3      	b.n	8014272 <rcl_send_service_event_message+0x2a>
 801432a:	f7f9 fbc1 	bl	800dab0 <rcutils_reset_error>
 801432e:	e79d      	b.n	801426c <rcl_send_service_event_message+0x24>
 8014330:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8014334:	e79d      	b.n	8014272 <rcl_send_service_event_message+0x2a>
 8014336:	1eb9      	subs	r1, r7, #2
 8014338:	2901      	cmp	r1, #1
 801433a:	d8f6      	bhi.n	801432a <rcl_send_service_event_message+0xe2>
 801433c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8014340:	462b      	mov	r3, r5
 8014342:	a808      	add	r0, sp, #32
 8014344:	6995      	ldr	r5, [r2, #24]
 8014346:	a903      	add	r1, sp, #12
 8014348:	2200      	movs	r2, #0
 801434a:	47a8      	blx	r5
 801434c:	4606      	mov	r6, r0
 801434e:	e7d9      	b.n	8014304 <rcl_send_service_event_message+0xbc>
 8014350:	3b9aca00 	.word	0x3b9aca00
 8014354:	00000000 	.word	0x00000000

08014358 <rcl_get_zero_initialized_subscription>:
 8014358:	4b01      	ldr	r3, [pc, #4]	@ (8014360 <rcl_get_zero_initialized_subscription+0x8>)
 801435a:	6818      	ldr	r0, [r3, #0]
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop
 8014360:	08021ac8 	.word	0x08021ac8

08014364 <rcl_subscription_init>:
 8014364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014368:	b089      	sub	sp, #36	@ 0x24
 801436a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801436c:	b1d6      	cbz	r6, 80143a4 <rcl_subscription_init+0x40>
 801436e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8014372:	4604      	mov	r4, r0
 8014374:	4648      	mov	r0, r9
 8014376:	460d      	mov	r5, r1
 8014378:	4690      	mov	r8, r2
 801437a:	461f      	mov	r7, r3
 801437c:	f7f9 fb6c 	bl	800da58 <rcutils_allocator_is_valid>
 8014380:	b180      	cbz	r0, 80143a4 <rcl_subscription_init+0x40>
 8014382:	b17c      	cbz	r4, 80143a4 <rcl_subscription_init+0x40>
 8014384:	4628      	mov	r0, r5
 8014386:	f7ff fd95 	bl	8013eb4 <rcl_node_is_valid>
 801438a:	2800      	cmp	r0, #0
 801438c:	d054      	beq.n	8014438 <rcl_subscription_init+0xd4>
 801438e:	f1b8 0f00 	cmp.w	r8, #0
 8014392:	d007      	beq.n	80143a4 <rcl_subscription_init+0x40>
 8014394:	b137      	cbz	r7, 80143a4 <rcl_subscription_init+0x40>
 8014396:	6823      	ldr	r3, [r4, #0]
 8014398:	b14b      	cbz	r3, 80143ae <rcl_subscription_init+0x4a>
 801439a:	2764      	movs	r7, #100	@ 0x64
 801439c:	4638      	mov	r0, r7
 801439e:	b009      	add	sp, #36	@ 0x24
 80143a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143a4:	270b      	movs	r7, #11
 80143a6:	4638      	mov	r0, r7
 80143a8:	b009      	add	sp, #36	@ 0x24
 80143aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80143b2:	aa07      	add	r2, sp, #28
 80143b4:	9205      	str	r2, [sp, #20]
 80143b6:	9307      	str	r3, [sp, #28]
 80143b8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80143bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80143c4:	4639      	mov	r1, r7
 80143c6:	e899 000c 	ldmia.w	r9, {r2, r3}
 80143ca:	4628      	mov	r0, r5
 80143cc:	f7ff fe02 	bl	8013fd4 <rcl_node_resolve_name>
 80143d0:	4607      	mov	r7, r0
 80143d2:	2800      	cmp	r0, #0
 80143d4:	d15f      	bne.n	8014496 <rcl_subscription_init+0x132>
 80143d6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80143da:	21d0      	movs	r1, #208	@ 0xd0
 80143dc:	2001      	movs	r0, #1
 80143de:	4798      	blx	r3
 80143e0:	6020      	str	r0, [r4, #0]
 80143e2:	2800      	cmp	r0, #0
 80143e4:	d05d      	beq.n	80144a2 <rcl_subscription_init+0x13e>
 80143e6:	2278      	movs	r2, #120	@ 0x78
 80143e8:	4631      	mov	r1, r6
 80143ea:	f007 fb1d 	bl	801ba28 <memcpy>
 80143ee:	4628      	mov	r0, r5
 80143f0:	f7ff fd82 	bl	8013ef8 <rcl_node_get_rmw_handle>
 80143f4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	9a07      	ldr	r2, [sp, #28]
 80143fc:	6827      	ldr	r7, [r4, #0]
 80143fe:	4641      	mov	r1, r8
 8014400:	4633      	mov	r3, r6
 8014402:	f003 fbb1 	bl	8017b68 <rmw_create_subscription>
 8014406:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 801440a:	6827      	ldr	r7, [r4, #0]
 801440c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8014410:	b338      	cbz	r0, 8014462 <rcl_subscription_init+0xfe>
 8014412:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8014416:	f003 fc87 	bl	8017d28 <rmw_subscription_get_actual_qos>
 801441a:	4607      	mov	r7, r0
 801441c:	b988      	cbnz	r0, 8014442 <rcl_subscription_init+0xde>
 801441e:	6823      	ldr	r3, [r4, #0]
 8014420:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8014424:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8014428:	9807      	ldr	r0, [sp, #28]
 801442a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801442c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801442e:	4798      	blx	r3
 8014430:	4638      	mov	r0, r7
 8014432:	b009      	add	sp, #36	@ 0x24
 8014434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014438:	27c8      	movs	r7, #200	@ 0xc8
 801443a:	4638      	mov	r0, r7
 801443c:	b009      	add	sp, #36	@ 0x24
 801443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014442:	6827      	ldr	r7, [r4, #0]
 8014444:	b32f      	cbz	r7, 8014492 <rcl_subscription_init+0x12e>
 8014446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801444a:	b153      	cbz	r3, 8014462 <rcl_subscription_init+0xfe>
 801444c:	4628      	mov	r0, r5
 801444e:	f7ff fd53 	bl	8013ef8 <rcl_node_get_rmw_handle>
 8014452:	6823      	ldr	r3, [r4, #0]
 8014454:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8014458:	f003 fc74 	bl	8017d44 <rmw_destroy_subscription>
 801445c:	6827      	ldr	r7, [r4, #0]
 801445e:	4638      	mov	r0, r7
 8014460:	b197      	cbz	r7, 8014488 <rcl_subscription_init+0x124>
 8014462:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8014466:	4628      	mov	r0, r5
 8014468:	f7f9 faf6 	bl	800da58 <rcutils_allocator_is_valid>
 801446c:	b1e8      	cbz	r0, 80144aa <rcl_subscription_init+0x146>
 801446e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014470:	b1d8      	cbz	r0, 80144aa <rcl_subscription_init+0x146>
 8014472:	4629      	mov	r1, r5
 8014474:	f002 fb94 	bl	8016ba0 <rmw_subscription_content_filter_options_fini>
 8014478:	4605      	mov	r5, r0
 801447a:	b9a0      	cbnz	r0, 80144a6 <rcl_subscription_init+0x142>
 801447c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014480:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014482:	4798      	blx	r3
 8014484:	6820      	ldr	r0, [r4, #0]
 8014486:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8014488:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801448a:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801448c:	4798      	blx	r3
 801448e:	2300      	movs	r3, #0
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	2701      	movs	r7, #1
 8014494:	e7c8      	b.n	8014428 <rcl_subscription_init+0xc4>
 8014496:	2867      	cmp	r0, #103	@ 0x67
 8014498:	d0c6      	beq.n	8014428 <rcl_subscription_init+0xc4>
 801449a:	2869      	cmp	r0, #105	@ 0x69
 801449c:	d007      	beq.n	80144ae <rcl_subscription_init+0x14a>
 801449e:	280a      	cmp	r0, #10
 80144a0:	d1f7      	bne.n	8014492 <rcl_subscription_init+0x12e>
 80144a2:	270a      	movs	r7, #10
 80144a4:	e7c0      	b.n	8014428 <rcl_subscription_init+0xc4>
 80144a6:	f7ff f93d 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 80144aa:	6820      	ldr	r0, [r4, #0]
 80144ac:	e7ec      	b.n	8014488 <rcl_subscription_init+0x124>
 80144ae:	2767      	movs	r7, #103	@ 0x67
 80144b0:	e7ba      	b.n	8014428 <rcl_subscription_init+0xc4>
 80144b2:	bf00      	nop

080144b4 <rcl_subscription_get_default_options>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	4907      	ldr	r1, [pc, #28]	@ (80144d4 <rcl_subscription_get_default_options+0x20>)
 80144b8:	4604      	mov	r4, r0
 80144ba:	2250      	movs	r2, #80	@ 0x50
 80144bc:	f007 fab4 	bl	801ba28 <memcpy>
 80144c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80144c4:	f7f9 fa9c 	bl	800da00 <rcutils_get_default_allocator>
 80144c8:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80144cc:	f002 fb82 	bl	8016bd4 <rmw_get_default_subscription_options>
 80144d0:	4620      	mov	r0, r4
 80144d2:	bd10      	pop	{r4, pc}
 80144d4:	08021ad0 	.word	0x08021ad0

080144d8 <rcl_take>:
 80144d8:	2800      	cmp	r0, #0
 80144da:	d04b      	beq.n	8014574 <rcl_take+0x9c>
 80144dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144e0:	4615      	mov	r5, r2
 80144e2:	6802      	ldr	r2, [r0, #0]
 80144e4:	b0a0      	sub	sp, #128	@ 0x80
 80144e6:	4604      	mov	r4, r0
 80144e8:	2a00      	cmp	r2, #0
 80144ea:	d03b      	beq.n	8014564 <rcl_take+0x8c>
 80144ec:	461f      	mov	r7, r3
 80144ee:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d036      	beq.n	8014564 <rcl_take+0x8c>
 80144f6:	460e      	mov	r6, r1
 80144f8:	2900      	cmp	r1, #0
 80144fa:	d039      	beq.n	8014570 <rcl_take+0x98>
 80144fc:	2d00      	cmp	r5, #0
 80144fe:	d03d      	beq.n	801457c <rcl_take+0xa4>
 8014500:	a802      	add	r0, sp, #8
 8014502:	f002 fbf3 	bl	8016cec <rmw_get_zero_initialized_message_info>
 8014506:	6823      	ldr	r3, [r4, #0]
 8014508:	f10d 0c08 	add.w	ip, sp, #8
 801450c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8014510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014514:	46ae      	mov	lr, r5
 8014516:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801451a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801451e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014522:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014526:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801452a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801452e:	462b      	mov	r3, r5
 8014530:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014534:	f04f 0800 	mov.w	r8, #0
 8014538:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801453c:	4631      	mov	r1, r6
 801453e:	4620      	mov	r0, r4
 8014540:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8014544:	9700      	str	r7, [sp, #0]
 8014546:	f003 fc5d 	bl	8017e04 <rmw_take_with_info>
 801454a:	4603      	mov	r3, r0
 801454c:	b9c0      	cbnz	r0, 8014580 <rcl_take+0xa8>
 801454e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8014552:	f240 1291 	movw	r2, #401	@ 0x191
 8014556:	2900      	cmp	r1, #0
 8014558:	bf08      	it	eq
 801455a:	4613      	moveq	r3, r2
 801455c:	4618      	mov	r0, r3
 801455e:	b020      	add	sp, #128	@ 0x80
 8014560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014564:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014568:	4618      	mov	r0, r3
 801456a:	b020      	add	sp, #128	@ 0x80
 801456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014570:	230b      	movs	r3, #11
 8014572:	e7f3      	b.n	801455c <rcl_take+0x84>
 8014574:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014578:	4618      	mov	r0, r3
 801457a:	4770      	bx	lr
 801457c:	ad12      	add	r5, sp, #72	@ 0x48
 801457e:	e7bf      	b.n	8014500 <rcl_take+0x28>
 8014580:	f7ff f8d0 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8014584:	4603      	mov	r3, r0
 8014586:	e7e9      	b.n	801455c <rcl_take+0x84>

08014588 <rcl_subscription_get_rmw_handle>:
 8014588:	b118      	cbz	r0, 8014592 <rcl_subscription_get_rmw_handle+0xa>
 801458a:	6800      	ldr	r0, [r0, #0]
 801458c:	b108      	cbz	r0, 8014592 <rcl_subscription_get_rmw_handle+0xa>
 801458e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8014592:	4770      	bx	lr

08014594 <rcl_subscription_is_valid>:
 8014594:	b130      	cbz	r0, 80145a4 <rcl_subscription_is_valid+0x10>
 8014596:	6800      	ldr	r0, [r0, #0]
 8014598:	b120      	cbz	r0, 80145a4 <rcl_subscription_is_valid+0x10>
 801459a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801459e:	3800      	subs	r0, #0
 80145a0:	bf18      	it	ne
 80145a2:	2001      	movne	r0, #1
 80145a4:	4770      	bx	lr
 80145a6:	bf00      	nop

080145a8 <rcl_get_system_time>:
 80145a8:	4608      	mov	r0, r1
 80145aa:	f7f9 ba9d 	b.w	800dae8 <rcutils_system_time_now>
 80145ae:	bf00      	nop

080145b0 <rcl_get_steady_time>:
 80145b0:	4608      	mov	r0, r1
 80145b2:	f7f9 bac3 	b.w	800db3c <rcutils_steady_time_now>
 80145b6:	bf00      	nop

080145b8 <rcl_get_ros_time>:
 80145b8:	7a03      	ldrb	r3, [r0, #8]
 80145ba:	b510      	push	{r4, lr}
 80145bc:	460c      	mov	r4, r1
 80145be:	b143      	cbz	r3, 80145d2 <rcl_get_ros_time+0x1a>
 80145c0:	2105      	movs	r1, #5
 80145c2:	f001 ff81 	bl	80164c8 <__atomic_load_8>
 80145c6:	4602      	mov	r2, r0
 80145c8:	460b      	mov	r3, r1
 80145ca:	e9c4 2300 	strd	r2, r3, [r4]
 80145ce:	2000      	movs	r0, #0
 80145d0:	bd10      	pop	{r4, pc}
 80145d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145d6:	4608      	mov	r0, r1
 80145d8:	f7f9 ba86 	b.w	800dae8 <rcutils_system_time_now>

080145dc <rcl_clock_valid>:
 80145dc:	b138      	cbz	r0, 80145ee <rcl_clock_valid+0x12>
 80145de:	7803      	ldrb	r3, [r0, #0]
 80145e0:	b123      	cbz	r3, 80145ec <rcl_clock_valid+0x10>
 80145e2:	68c0      	ldr	r0, [r0, #12]
 80145e4:	3800      	subs	r0, #0
 80145e6:	bf18      	it	ne
 80145e8:	2001      	movne	r0, #1
 80145ea:	4770      	bx	lr
 80145ec:	4618      	mov	r0, r3
 80145ee:	4770      	bx	lr

080145f0 <rcl_clock_init>:
 80145f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f2:	4605      	mov	r5, r0
 80145f4:	4610      	mov	r0, r2
 80145f6:	4614      	mov	r4, r2
 80145f8:	460e      	mov	r6, r1
 80145fa:	f7f9 fa2d 	bl	800da58 <rcutils_allocator_is_valid>
 80145fe:	b128      	cbz	r0, 801460c <rcl_clock_init+0x1c>
 8014600:	2d03      	cmp	r5, #3
 8014602:	d803      	bhi.n	801460c <rcl_clock_init+0x1c>
 8014604:	e8df f005 	tbb	[pc, r5]
 8014608:	044c291a 	.word	0x044c291a
 801460c:	200b      	movs	r0, #11
 801460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014610:	2e00      	cmp	r6, #0
 8014612:	d0fb      	beq.n	801460c <rcl_clock_init+0x1c>
 8014614:	2c00      	cmp	r4, #0
 8014616:	d0f9      	beq.n	801460c <rcl_clock_init+0x1c>
 8014618:	2300      	movs	r3, #0
 801461a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801461e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80146c4 <rcl_clock_init+0xd4>
 8014622:	6133      	str	r3, [r6, #16]
 8014624:	f106 0514 	add.w	r5, r6, #20
 8014628:	2703      	movs	r7, #3
 801462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801462e:	6823      	ldr	r3, [r4, #0]
 8014630:	602b      	str	r3, [r5, #0]
 8014632:	f8c6 c00c 	str.w	ip, [r6, #12]
 8014636:	7037      	strb	r7, [r6, #0]
 8014638:	2000      	movs	r0, #0
 801463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801463c:	2e00      	cmp	r6, #0
 801463e:	d0e5      	beq.n	801460c <rcl_clock_init+0x1c>
 8014640:	2300      	movs	r3, #0
 8014642:	7033      	strb	r3, [r6, #0]
 8014644:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014648:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801464e:	f106 0514 	add.w	r5, r6, #20
 8014652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014654:	6823      	ldr	r3, [r4, #0]
 8014656:	602b      	str	r3, [r5, #0]
 8014658:	e7ee      	b.n	8014638 <rcl_clock_init+0x48>
 801465a:	2e00      	cmp	r6, #0
 801465c:	d0d6      	beq.n	801460c <rcl_clock_init+0x1c>
 801465e:	2c00      	cmp	r4, #0
 8014660:	d0d4      	beq.n	801460c <rcl_clock_init+0x1c>
 8014662:	2700      	movs	r7, #0
 8014664:	7037      	strb	r7, [r6, #0]
 8014666:	46a4      	mov	ip, r4
 8014668:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801466c:	f106 0514 	add.w	r5, r6, #20
 8014670:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014674:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801467a:	f8dc 3000 	ldr.w	r3, [ip]
 801467e:	602b      	str	r3, [r5, #0]
 8014680:	6921      	ldr	r1, [r4, #16]
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	2010      	movs	r0, #16
 8014686:	4798      	blx	r3
 8014688:	6130      	str	r0, [r6, #16]
 801468a:	b1b8      	cbz	r0, 80146bc <rcl_clock_init+0xcc>
 801468c:	2200      	movs	r2, #0
 801468e:	2300      	movs	r3, #0
 8014690:	e9c0 2300 	strd	r2, r3, [r0]
 8014694:	4a0a      	ldr	r2, [pc, #40]	@ (80146c0 <rcl_clock_init+0xd0>)
 8014696:	7207      	strb	r7, [r0, #8]
 8014698:	2301      	movs	r3, #1
 801469a:	60f2      	str	r2, [r6, #12]
 801469c:	7033      	strb	r3, [r6, #0]
 801469e:	e7cb      	b.n	8014638 <rcl_clock_init+0x48>
 80146a0:	2e00      	cmp	r6, #0
 80146a2:	d0b3      	beq.n	801460c <rcl_clock_init+0x1c>
 80146a4:	2c00      	cmp	r4, #0
 80146a6:	d0b1      	beq.n	801460c <rcl_clock_init+0x1c>
 80146a8:	2300      	movs	r3, #0
 80146aa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80146ae:	f8df c018 	ldr.w	ip, [pc, #24]	@ 80146c8 <rcl_clock_init+0xd8>
 80146b2:	6133      	str	r3, [r6, #16]
 80146b4:	f106 0514 	add.w	r5, r6, #20
 80146b8:	2702      	movs	r7, #2
 80146ba:	e7b6      	b.n	801462a <rcl_clock_init+0x3a>
 80146bc:	200a      	movs	r0, #10
 80146be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146c0:	080145b9 	.word	0x080145b9
 80146c4:	080145b1 	.word	0x080145b1
 80146c8:	080145a9 	.word	0x080145a9

080146cc <rcl_clock_get_now>:
 80146cc:	b140      	cbz	r0, 80146e0 <rcl_clock_get_now+0x14>
 80146ce:	b139      	cbz	r1, 80146e0 <rcl_clock_get_now+0x14>
 80146d0:	7803      	ldrb	r3, [r0, #0]
 80146d2:	b11b      	cbz	r3, 80146dc <rcl_clock_get_now+0x10>
 80146d4:	68c3      	ldr	r3, [r0, #12]
 80146d6:	b10b      	cbz	r3, 80146dc <rcl_clock_get_now+0x10>
 80146d8:	6900      	ldr	r0, [r0, #16]
 80146da:	4718      	bx	r3
 80146dc:	2001      	movs	r0, #1
 80146de:	4770      	bx	lr
 80146e0:	200b      	movs	r0, #11
 80146e2:	4770      	bx	lr

080146e4 <rcl_is_enabled_ros_time_override>:
 80146e4:	b158      	cbz	r0, 80146fe <rcl_is_enabled_ros_time_override+0x1a>
 80146e6:	b151      	cbz	r1, 80146fe <rcl_is_enabled_ros_time_override+0x1a>
 80146e8:	7803      	ldrb	r3, [r0, #0]
 80146ea:	2b01      	cmp	r3, #1
 80146ec:	d105      	bne.n	80146fa <rcl_is_enabled_ros_time_override+0x16>
 80146ee:	6902      	ldr	r2, [r0, #16]
 80146f0:	b11a      	cbz	r2, 80146fa <rcl_is_enabled_ros_time_override+0x16>
 80146f2:	7a13      	ldrb	r3, [r2, #8]
 80146f4:	700b      	strb	r3, [r1, #0]
 80146f6:	2000      	movs	r0, #0
 80146f8:	4770      	bx	lr
 80146fa:	2001      	movs	r0, #1
 80146fc:	4770      	bx	lr
 80146fe:	200b      	movs	r0, #11
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop

08014704 <rcl_clock_add_jump_callback>:
 8014704:	b082      	sub	sp, #8
 8014706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801470a:	a906      	add	r1, sp, #24
 801470c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014710:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8014714:	b320      	cbz	r0, 8014760 <rcl_clock_add_jump_callback+0x5c>
 8014716:	4605      	mov	r5, r0
 8014718:	3014      	adds	r0, #20
 801471a:	f7f9 f99d 	bl	800da58 <rcutils_allocator_is_valid>
 801471e:	b1f8      	cbz	r0, 8014760 <rcl_clock_add_jump_callback+0x5c>
 8014720:	b1f7      	cbz	r7, 8014760 <rcl_clock_add_jump_callback+0x5c>
 8014722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014724:	2b00      	cmp	r3, #0
 8014726:	db1b      	blt.n	8014760 <rcl_clock_add_jump_callback+0x5c>
 8014728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801472c:	2a01      	cmp	r2, #1
 801472e:	f173 0300 	sbcs.w	r3, r3, #0
 8014732:	da15      	bge.n	8014760 <rcl_clock_add_jump_callback+0x5c>
 8014734:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8014738:	2c00      	cmp	r4, #0
 801473a:	d042      	beq.n	80147c2 <rcl_clock_add_jump_callback+0xbe>
 801473c:	4603      	mov	r3, r0
 801473e:	2200      	movs	r2, #0
 8014740:	e003      	b.n	801474a <rcl_clock_add_jump_callback+0x46>
 8014742:	4294      	cmp	r4, r2
 8014744:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8014748:	d011      	beq.n	801476e <rcl_clock_add_jump_callback+0x6a>
 801474a:	6819      	ldr	r1, [r3, #0]
 801474c:	42b9      	cmp	r1, r7
 801474e:	f102 0201 	add.w	r2, r2, #1
 8014752:	d1f6      	bne.n	8014742 <rcl_clock_add_jump_callback+0x3e>
 8014754:	6a19      	ldr	r1, [r3, #32]
 8014756:	42b1      	cmp	r1, r6
 8014758:	d1f3      	bne.n	8014742 <rcl_clock_add_jump_callback+0x3e>
 801475a:	f04f 0e01 	mov.w	lr, #1
 801475e:	e001      	b.n	8014764 <rcl_clock_add_jump_callback+0x60>
 8014760:	f04f 0e0b 	mov.w	lr, #11
 8014764:	4670      	mov	r0, lr
 8014766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801476a:	b002      	add	sp, #8
 801476c:	4770      	bx	lr
 801476e:	3401      	adds	r4, #1
 8014770:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014774:	00e1      	lsls	r1, r4, #3
 8014776:	69eb      	ldr	r3, [r5, #28]
 8014778:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801477a:	4798      	blx	r3
 801477c:	b1f0      	cbz	r0, 80147bc <rcl_clock_add_jump_callback+0xb8>
 801477e:	68ab      	ldr	r3, [r5, #8]
 8014780:	6068      	str	r0, [r5, #4]
 8014782:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014786:	f10d 0c18 	add.w	ip, sp, #24
 801478a:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 801478e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8014792:	f103 0801 	add.w	r8, r3, #1
 8014796:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801479a:	f104 0708 	add.w	r7, r4, #8
 801479e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80147a0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80147a4:	f04f 0e00 	mov.w	lr, #0
 80147a8:	e887 0003 	stmia.w	r7, {r0, r1}
 80147ac:	6226      	str	r6, [r4, #32]
 80147ae:	4670      	mov	r0, lr
 80147b0:	f8c5 8008 	str.w	r8, [r5, #8]
 80147b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147b8:	b002      	add	sp, #8
 80147ba:	4770      	bx	lr
 80147bc:	f04f 0e0a 	mov.w	lr, #10
 80147c0:	e7d0      	b.n	8014764 <rcl_clock_add_jump_callback+0x60>
 80147c2:	2128      	movs	r1, #40	@ 0x28
 80147c4:	e7d7      	b.n	8014776 <rcl_clock_add_jump_callback+0x72>
 80147c6:	bf00      	nop

080147c8 <rcl_clock_remove_jump_callback>:
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d05a      	beq.n	8014882 <rcl_clock_remove_jump_callback+0xba>
 80147cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147d0:	4605      	mov	r5, r0
 80147d2:	3014      	adds	r0, #20
 80147d4:	460f      	mov	r7, r1
 80147d6:	4692      	mov	sl, r2
 80147d8:	f7f9 f93e 	bl	800da58 <rcutils_allocator_is_valid>
 80147dc:	2800      	cmp	r0, #0
 80147de:	d03f      	beq.n	8014860 <rcl_clock_remove_jump_callback+0x98>
 80147e0:	2f00      	cmp	r7, #0
 80147e2:	d03d      	beq.n	8014860 <rcl_clock_remove_jump_callback+0x98>
 80147e4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80147e8:	f1b8 0f00 	cmp.w	r8, #0
 80147ec:	d00c      	beq.n	8014808 <rcl_clock_remove_jump_callback+0x40>
 80147ee:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80147f2:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 80147f6:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80147fa:	464c      	mov	r4, r9
 80147fc:	6823      	ldr	r3, [r4, #0]
 80147fe:	42bb      	cmp	r3, r7
 8014800:	d005      	beq.n	801480e <rcl_clock_remove_jump_callback+0x46>
 8014802:	3428      	adds	r4, #40	@ 0x28
 8014804:	42b4      	cmp	r4, r6
 8014806:	d1f9      	bne.n	80147fc <rcl_clock_remove_jump_callback+0x34>
 8014808:	2001      	movs	r0, #1
 801480a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801480e:	6a23      	ldr	r3, [r4, #32]
 8014810:	3428      	adds	r4, #40	@ 0x28
 8014812:	42b4      	cmp	r4, r6
 8014814:	d02c      	beq.n	8014870 <rcl_clock_remove_jump_callback+0xa8>
 8014816:	4553      	cmp	r3, sl
 8014818:	d1f0      	bne.n	80147fc <rcl_clock_remove_jump_callback+0x34>
 801481a:	46a6      	mov	lr, r4
 801481c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014820:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014828:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801482c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014830:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014834:	3428      	adds	r4, #40	@ 0x28
 8014836:	42a6      	cmp	r6, r4
 8014838:	e88c 0003 	stmia.w	ip, {r0, r1}
 801483c:	d1ed      	bne.n	801481a <rcl_clock_remove_jump_callback+0x52>
 801483e:	f108 34ff 	add.w	r4, r8, #4294967295
 8014842:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014844:	60ac      	str	r4, [r5, #8]
 8014846:	b174      	cbz	r4, 8014866 <rcl_clock_remove_jump_callback+0x9e>
 8014848:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801484c:	00e1      	lsls	r1, r4, #3
 801484e:	69eb      	ldr	r3, [r5, #28]
 8014850:	4648      	mov	r0, r9
 8014852:	4798      	blx	r3
 8014854:	4604      	mov	r4, r0
 8014856:	b1b0      	cbz	r0, 8014886 <rcl_clock_remove_jump_callback+0xbe>
 8014858:	606c      	str	r4, [r5, #4]
 801485a:	2000      	movs	r0, #0
 801485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014860:	200b      	movs	r0, #11
 8014862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014866:	69ab      	ldr	r3, [r5, #24]
 8014868:	4611      	mov	r1, r2
 801486a:	4648      	mov	r0, r9
 801486c:	4798      	blx	r3
 801486e:	e7f3      	b.n	8014858 <rcl_clock_remove_jump_callback+0x90>
 8014870:	4553      	cmp	r3, sl
 8014872:	d1c9      	bne.n	8014808 <rcl_clock_remove_jump_callback+0x40>
 8014874:	f108 34ff 	add.w	r4, r8, #4294967295
 8014878:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801487a:	60ac      	str	r4, [r5, #8]
 801487c:	2c00      	cmp	r4, #0
 801487e:	d1e3      	bne.n	8014848 <rcl_clock_remove_jump_callback+0x80>
 8014880:	e7f1      	b.n	8014866 <rcl_clock_remove_jump_callback+0x9e>
 8014882:	200b      	movs	r0, #11
 8014884:	4770      	bx	lr
 8014886:	200a      	movs	r0, #10
 8014888:	e7eb      	b.n	8014862 <rcl_clock_remove_jump_callback+0x9a>
 801488a:	bf00      	nop

0801488c <_rcl_timer_time_jump>:
 801488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014890:	4681      	mov	r9, r0
 8014892:	b087      	sub	sp, #28
 8014894:	4614      	mov	r4, r2
 8014896:	b131      	cbz	r1, 80148a6 <_rcl_timer_time_jump+0x1a>
 8014898:	7803      	ldrb	r3, [r0, #0]
 801489a:	3b02      	subs	r3, #2
 801489c:	2b01      	cmp	r3, #1
 801489e:	d93e      	bls.n	801491e <_rcl_timer_time_jump+0x92>
 80148a0:	b007      	add	sp, #28
 80148a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a6:	6810      	ldr	r0, [r2, #0]
 80148a8:	a904      	add	r1, sp, #16
 80148aa:	f7ff ff0f 	bl	80146cc <rcl_clock_get_now>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d1f6      	bne.n	80148a0 <_rcl_timer_time_jump+0x14>
 80148b2:	f104 0a20 	add.w	sl, r4, #32
 80148b6:	2105      	movs	r1, #5
 80148b8:	4650      	mov	r0, sl
 80148ba:	f001 fe05 	bl	80164c8 <__atomic_load_8>
 80148be:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 80148c2:	4680      	mov	r8, r0
 80148c4:	460e      	mov	r6, r1
 80148c6:	4658      	mov	r0, fp
 80148c8:	2105      	movs	r1, #5
 80148ca:	f001 fdfd 	bl	80164c8 <__atomic_load_8>
 80148ce:	4607      	mov	r7, r0
 80148d0:	460d      	mov	r5, r1
 80148d2:	f104 0018 	add.w	r0, r4, #24
 80148d6:	2105      	movs	r1, #5
 80148d8:	f001 fdf6 	bl	80164c8 <__atomic_load_8>
 80148dc:	f899 3000 	ldrb.w	r3, [r9]
 80148e0:	9003      	str	r0, [sp, #12]
 80148e2:	3b02      	subs	r3, #2
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	4689      	mov	r9, r1
 80148e8:	d935      	bls.n	8014956 <_rcl_timer_time_jump+0xca>
 80148ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148ee:	42ba      	cmp	r2, r7
 80148f0:	eb73 0505 	sbcs.w	r5, r3, r5
 80148f4:	da57      	bge.n	80149a6 <_rcl_timer_time_jump+0x11a>
 80148f6:	4542      	cmp	r2, r8
 80148f8:	eb73 0606 	sbcs.w	r6, r3, r6
 80148fc:	dad0      	bge.n	80148a0 <_rcl_timer_time_jump+0x14>
 80148fe:	1882      	adds	r2, r0, r2
 8014900:	f04f 0405 	mov.w	r4, #5
 8014904:	eb43 0309 	adc.w	r3, r3, r9
 8014908:	4658      	mov	r0, fp
 801490a:	9400      	str	r4, [sp, #0]
 801490c:	f001 fe12 	bl	8016534 <__atomic_store_8>
 8014910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014914:	9400      	str	r4, [sp, #0]
 8014916:	4650      	mov	r0, sl
 8014918:	f001 fe0c 	bl	8016534 <__atomic_store_8>
 801491c:	e7c0      	b.n	80148a0 <_rcl_timer_time_jump+0x14>
 801491e:	6810      	ldr	r0, [r2, #0]
 8014920:	a904      	add	r1, sp, #16
 8014922:	f7ff fed3 	bl	80146cc <rcl_clock_get_now>
 8014926:	2800      	cmp	r0, #0
 8014928:	d1ba      	bne.n	80148a0 <_rcl_timer_time_jump+0x14>
 801492a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801492e:	4313      	orrs	r3, r2
 8014930:	d0b6      	beq.n	80148a0 <_rcl_timer_time_jump+0x14>
 8014932:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014936:	2105      	movs	r1, #5
 8014938:	f001 fdc6 	bl	80164c8 <__atomic_load_8>
 801493c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014940:	1a82      	subs	r2, r0, r2
 8014942:	f04f 0005 	mov.w	r0, #5
 8014946:	9000      	str	r0, [sp, #0]
 8014948:	eb61 0303 	sbc.w	r3, r1, r3
 801494c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8014950:	f001 fdf0 	bl	8016534 <__atomic_store_8>
 8014954:	e7a4      	b.n	80148a0 <_rcl_timer_time_jump+0x14>
 8014956:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801495a:	4313      	orrs	r3, r2
 801495c:	d0a0      	beq.n	80148a0 <_rcl_timer_time_jump+0x14>
 801495e:	2605      	movs	r6, #5
 8014960:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8014964:	2300      	movs	r3, #0
 8014966:	9600      	str	r6, [sp, #0]
 8014968:	2200      	movs	r2, #0
 801496a:	f001 fe19 	bl	80165a0 <__atomic_exchange_8>
 801496e:	ea51 0300 	orrs.w	r3, r1, r0
 8014972:	4604      	mov	r4, r0
 8014974:	460d      	mov	r5, r1
 8014976:	d093      	beq.n	80148a0 <_rcl_timer_time_jump+0x14>
 8014978:	9a04      	ldr	r2, [sp, #16]
 801497a:	9b05      	ldr	r3, [sp, #20]
 801497c:	9600      	str	r6, [sp, #0]
 801497e:	1b12      	subs	r2, r2, r4
 8014980:	eb63 0301 	sbc.w	r3, r3, r1
 8014984:	9903      	ldr	r1, [sp, #12]
 8014986:	1852      	adds	r2, r2, r1
 8014988:	eb43 0309 	adc.w	r3, r3, r9
 801498c:	4658      	mov	r0, fp
 801498e:	f001 fdd1 	bl	8016534 <__atomic_store_8>
 8014992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014996:	1b12      	subs	r2, r2, r4
 8014998:	9600      	str	r6, [sp, #0]
 801499a:	eb63 0305 	sbc.w	r3, r3, r5
 801499e:	4650      	mov	r0, sl
 80149a0:	f001 fdc8 	bl	8016534 <__atomic_store_8>
 80149a4:	e77c      	b.n	80148a0 <_rcl_timer_time_jump+0x14>
 80149a6:	f104 0008 	add.w	r0, r4, #8
 80149aa:	f005 fb97 	bl	801a0dc <rcl_trigger_guard_condition>
 80149ae:	e777      	b.n	80148a0 <_rcl_timer_time_jump+0x14>

080149b0 <rcl_get_zero_initialized_timer>:
 80149b0:	4b01      	ldr	r3, [pc, #4]	@ (80149b8 <rcl_get_zero_initialized_timer+0x8>)
 80149b2:	6818      	ldr	r0, [r3, #0]
 80149b4:	4770      	bx	lr
 80149b6:	bf00      	nop
 80149b8:	08021b20 	.word	0x08021b20
 80149bc:	00000000 	.word	0x00000000

080149c0 <rcl_timer_init2>:
 80149c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149c4:	b0ae      	sub	sp, #184	@ 0xb8
 80149c6:	4604      	mov	r4, r0
 80149c8:	a839      	add	r0, sp, #228	@ 0xe4
 80149ca:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 80149ce:	460d      	mov	r5, r1
 80149d0:	4691      	mov	r9, r2
 80149d2:	f7f9 f841 	bl	800da58 <rcutils_allocator_is_valid>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	f000 8097 	beq.w	8014b0a <rcl_timer_init2+0x14a>
 80149dc:	2c00      	cmp	r4, #0
 80149de:	f000 8094 	beq.w	8014b0a <rcl_timer_init2+0x14a>
 80149e2:	2d00      	cmp	r5, #0
 80149e4:	f000 8091 	beq.w	8014b0a <rcl_timer_init2+0x14a>
 80149e8:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	f2c0 808d 	blt.w	8014b0a <rcl_timer_init2+0x14a>
 80149f0:	6823      	ldr	r3, [r4, #0]
 80149f2:	b123      	cbz	r3, 80149fe <rcl_timer_init2+0x3e>
 80149f4:	2664      	movs	r6, #100	@ 0x64
 80149f6:	4630      	mov	r0, r6
 80149f8:	b02e      	add	sp, #184	@ 0xb8
 80149fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149fe:	a908      	add	r1, sp, #32
 8014a00:	4628      	mov	r0, r5
 8014a02:	f7ff fe63 	bl	80146cc <rcl_clock_get_now>
 8014a06:	4606      	mov	r6, r0
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d1f4      	bne.n	80149f6 <rcl_timer_init2+0x36>
 8014a0c:	ae06      	add	r6, sp, #24
 8014a0e:	4630      	mov	r0, r6
 8014a10:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8014a14:	f005 fa84 	bl	8019f20 <rcl_get_zero_initialized_guard_condition>
 8014a18:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014a1c:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8014a20:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014a22:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014a26:	4630      	mov	r0, r6
 8014a28:	f005 fb52 	bl	801a0d0 <rcl_guard_condition_get_default_options>
 8014a2c:	ab0d      	add	r3, sp, #52	@ 0x34
 8014a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014a36:	4649      	mov	r1, r9
 8014a38:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a3c:	4650      	mov	r0, sl
 8014a3e:	f005 fa79 	bl	8019f34 <rcl_guard_condition_init>
 8014a42:	4606      	mov	r6, r0
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d1d6      	bne.n	80149f6 <rcl_timer_init2+0x36>
 8014a48:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8014a4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a4c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8014a50:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014a54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014a58:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8014a5a:	902a      	str	r0, [sp, #168]	@ 0xa8
 8014a5c:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 8014a60:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8014b38 <rcl_timer_init2+0x178>
 8014a64:	19d0      	adds	r0, r2, r7
 8014a66:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8014a68:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8014a6c:	eb43 0107 	adc.w	r1, r3, r7
 8014a70:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014a74:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014a78:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014a7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a80:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8014a84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a88:	f8dc 3000 	ldr.w	r3, [ip]
 8014a8c:	f8ce 3000 	str.w	r3, [lr]
 8014a90:	f088 0801 	eor.w	r8, r8, #1
 8014a94:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8014a98:	4619      	mov	r1, r3
 8014a9a:	2060      	movs	r0, #96	@ 0x60
 8014a9c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014a9e:	4798      	blx	r3
 8014aa0:	4680      	mov	r8, r0
 8014aa2:	6020      	str	r0, [r4, #0]
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	d035      	beq.n	8014b14 <rcl_timer_init2+0x154>
 8014aa8:	a916      	add	r1, sp, #88	@ 0x58
 8014aaa:	2260      	movs	r2, #96	@ 0x60
 8014aac:	f006 ffbc 	bl	801ba28 <memcpy>
 8014ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d19e      	bne.n	80149f6 <rcl_timer_init2+0x36>
 8014ab8:	2001      	movs	r0, #1
 8014aba:	2100      	movs	r1, #0
 8014abc:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8014ac8:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014acc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8014b40 <rcl_timer_init2+0x180>)
 8014ad2:	9304      	str	r3, [sp, #16]
 8014ad4:	f8cd 8014 	str.w	r8, [sp, #20]
 8014ad8:	ab12      	add	r3, sp, #72	@ 0x48
 8014ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014adc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014ae0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014aea:	f7ff fe0b 	bl	8014704 <rcl_clock_add_jump_callback>
 8014aee:	4605      	mov	r5, r0
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d080      	beq.n	80149f6 <rcl_timer_init2+0x36>
 8014af4:	4650      	mov	r0, sl
 8014af6:	f005 fac9 	bl	801a08c <rcl_guard_condition_fini>
 8014afa:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8014afc:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8014afe:	6820      	ldr	r0, [r4, #0]
 8014b00:	4798      	blx	r3
 8014b02:	2300      	movs	r3, #0
 8014b04:	6023      	str	r3, [r4, #0]
 8014b06:	462e      	mov	r6, r5
 8014b08:	e775      	b.n	80149f6 <rcl_timer_init2+0x36>
 8014b0a:	260b      	movs	r6, #11
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	b02e      	add	sp, #184	@ 0xb8
 8014b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b14:	4650      	mov	r0, sl
 8014b16:	f005 fab9 	bl	801a08c <rcl_guard_condition_fini>
 8014b1a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	2b01      	cmp	r3, #1
 8014b20:	d001      	beq.n	8014b26 <rcl_timer_init2+0x166>
 8014b22:	260a      	movs	r6, #10
 8014b24:	e767      	b.n	80149f6 <rcl_timer_init2+0x36>
 8014b26:	4906      	ldr	r1, [pc, #24]	@ (8014b40 <rcl_timer_init2+0x180>)
 8014b28:	4622      	mov	r2, r4
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	f7ff fe4c 	bl	80147c8 <rcl_clock_remove_jump_callback>
 8014b30:	e7f7      	b.n	8014b22 <rcl_timer_init2+0x162>
 8014b32:	bf00      	nop
 8014b34:	f3af 8000 	nop.w
	...
 8014b40:	0801488d 	.word	0x0801488d

08014b44 <rcl_timer_clock>:
 8014b44:	b130      	cbz	r0, 8014b54 <rcl_timer_clock+0x10>
 8014b46:	b129      	cbz	r1, 8014b54 <rcl_timer_clock+0x10>
 8014b48:	6803      	ldr	r3, [r0, #0]
 8014b4a:	b12b      	cbz	r3, 8014b58 <rcl_timer_clock+0x14>
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	600b      	str	r3, [r1, #0]
 8014b50:	2000      	movs	r0, #0
 8014b52:	4770      	bx	lr
 8014b54:	200b      	movs	r0, #11
 8014b56:	4770      	bx	lr
 8014b58:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8014b5c:	4770      	bx	lr
 8014b5e:	bf00      	nop

08014b60 <rcl_timer_call>:
 8014b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b64:	b087      	sub	sp, #28
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d067      	beq.n	8014c3a <rcl_timer_call+0xda>
 8014b6a:	6803      	ldr	r3, [r0, #0]
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d068      	beq.n	8014c44 <rcl_timer_call+0xe4>
 8014b72:	f3bf 8f5b 	dmb	ish
 8014b76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014b7a:	f3bf 8f5b 	dmb	ish
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d150      	bne.n	8014c24 <rcl_timer_call+0xc4>
 8014b82:	6803      	ldr	r3, [r0, #0]
 8014b84:	a904      	add	r1, sp, #16
 8014b86:	6818      	ldr	r0, [r3, #0]
 8014b88:	f7ff fda0 	bl	80146cc <rcl_clock_get_now>
 8014b8c:	4605      	mov	r5, r0
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d144      	bne.n	8014c1c <rcl_timer_call+0xbc>
 8014b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	db4a      	blt.n	8014c30 <rcl_timer_call+0xd0>
 8014b9a:	6820      	ldr	r0, [r4, #0]
 8014b9c:	f04f 0a05 	mov.w	sl, #5
 8014ba0:	f8cd a000 	str.w	sl, [sp]
 8014ba4:	3020      	adds	r0, #32
 8014ba6:	f001 fcfb 	bl	80165a0 <__atomic_exchange_8>
 8014baa:	6823      	ldr	r3, [r4, #0]
 8014bac:	f3bf 8f5b 	dmb	ish
 8014bb0:	4680      	mov	r8, r0
 8014bb2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014bb6:	f3bf 8f5b 	dmb	ish
 8014bba:	6820      	ldr	r0, [r4, #0]
 8014bbc:	4689      	mov	r9, r1
 8014bbe:	3028      	adds	r0, #40	@ 0x28
 8014bc0:	4651      	mov	r1, sl
 8014bc2:	f001 fc81 	bl	80164c8 <__atomic_load_8>
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	6820      	ldr	r0, [r4, #0]
 8014bca:	460f      	mov	r7, r1
 8014bcc:	3018      	adds	r0, #24
 8014bce:	4651      	mov	r1, sl
 8014bd0:	f001 fc7a 	bl	80164c8 <__atomic_load_8>
 8014bd4:	1836      	adds	r6, r6, r0
 8014bd6:	eb41 0707 	adc.w	r7, r1, r7
 8014bda:	4602      	mov	r2, r0
 8014bdc:	460b      	mov	r3, r1
 8014bde:	4682      	mov	sl, r0
 8014be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014be4:	42b0      	cmp	r0, r6
 8014be6:	eb71 0c07 	sbcs.w	ip, r1, r7
 8014bea:	db04      	blt.n	8014bf6 <rcl_timer_call+0x96>
 8014bec:	ea53 0c02 	orrs.w	ip, r3, r2
 8014bf0:	d12b      	bne.n	8014c4a <rcl_timer_call+0xea>
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	460f      	mov	r7, r1
 8014bf6:	6820      	ldr	r0, [r4, #0]
 8014bf8:	2105      	movs	r1, #5
 8014bfa:	4632      	mov	r2, r6
 8014bfc:	463b      	mov	r3, r7
 8014bfe:	3028      	adds	r0, #40	@ 0x28
 8014c00:	9100      	str	r1, [sp, #0]
 8014c02:	f001 fc97 	bl	8016534 <__atomic_store_8>
 8014c06:	f1bb 0f00 	cmp.w	fp, #0
 8014c0a:	d007      	beq.n	8014c1c <rcl_timer_call+0xbc>
 8014c0c:	9a04      	ldr	r2, [sp, #16]
 8014c0e:	9b05      	ldr	r3, [sp, #20]
 8014c10:	ebb2 0208 	subs.w	r2, r2, r8
 8014c14:	4620      	mov	r0, r4
 8014c16:	eb63 0309 	sbc.w	r3, r3, r9
 8014c1a:	47d8      	blx	fp
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	b007      	add	sp, #28
 8014c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c24:	f240 3521 	movw	r5, #801	@ 0x321
 8014c28:	4628      	mov	r0, r5
 8014c2a:	b007      	add	sp, #28
 8014c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c30:	2501      	movs	r5, #1
 8014c32:	4628      	mov	r0, r5
 8014c34:	b007      	add	sp, #28
 8014c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c3a:	250b      	movs	r5, #11
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	b007      	add	sp, #28
 8014c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c44:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014c48:	e7e8      	b.n	8014c1c <rcl_timer_call+0xbc>
 8014c4a:	1b80      	subs	r0, r0, r6
 8014c4c:	eb61 0107 	sbc.w	r1, r1, r7
 8014c50:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014c54:	f7ec f828 	bl	8000ca8 <__aeabi_ldivmod>
 8014c58:	9b02      	ldr	r3, [sp, #8]
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	f141 0100 	adc.w	r1, r1, #0
 8014c60:	fb00 f303 	mul.w	r3, r0, r3
 8014c64:	fb01 330a 	mla	r3, r1, sl, r3
 8014c68:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014c6c:	1830      	adds	r0, r6, r0
 8014c6e:	4453      	add	r3, sl
 8014c70:	eb43 0707 	adc.w	r7, r3, r7
 8014c74:	4606      	mov	r6, r0
 8014c76:	e7be      	b.n	8014bf6 <rcl_timer_call+0x96>

08014c78 <rcl_timer_is_ready>:
 8014c78:	b398      	cbz	r0, 8014ce2 <rcl_timer_is_ready+0x6a>
 8014c7a:	b530      	push	{r4, r5, lr}
 8014c7c:	6803      	ldr	r3, [r0, #0]
 8014c7e:	b083      	sub	sp, #12
 8014c80:	4604      	mov	r4, r0
 8014c82:	b383      	cbz	r3, 8014ce6 <rcl_timer_is_ready+0x6e>
 8014c84:	460d      	mov	r5, r1
 8014c86:	b349      	cbz	r1, 8014cdc <rcl_timer_is_ready+0x64>
 8014c88:	f3bf 8f5b 	dmb	ish
 8014c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c90:	f3bf 8f5b 	dmb	ish
 8014c94:	b9fb      	cbnz	r3, 8014cd6 <rcl_timer_is_ready+0x5e>
 8014c96:	6803      	ldr	r3, [r0, #0]
 8014c98:	4669      	mov	r1, sp
 8014c9a:	6818      	ldr	r0, [r3, #0]
 8014c9c:	f7ff fd16 	bl	80146cc <rcl_clock_get_now>
 8014ca0:	b128      	cbz	r0, 8014cae <rcl_timer_is_ready+0x36>
 8014ca2:	f240 3321 	movw	r3, #801	@ 0x321
 8014ca6:	4298      	cmp	r0, r3
 8014ca8:	d015      	beq.n	8014cd6 <rcl_timer_is_ready+0x5e>
 8014caa:	b003      	add	sp, #12
 8014cac:	bd30      	pop	{r4, r5, pc}
 8014cae:	6820      	ldr	r0, [r4, #0]
 8014cb0:	2105      	movs	r1, #5
 8014cb2:	3028      	adds	r0, #40	@ 0x28
 8014cb4:	f001 fc08 	bl	80164c8 <__atomic_load_8>
 8014cb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014cbc:	1ac0      	subs	r0, r0, r3
 8014cbe:	eb61 0102 	sbc.w	r1, r1, r2
 8014cc2:	2801      	cmp	r0, #1
 8014cc4:	f171 0100 	sbcs.w	r1, r1, #0
 8014cc8:	bfb4      	ite	lt
 8014cca:	2301      	movlt	r3, #1
 8014ccc:	2300      	movge	r3, #0
 8014cce:	702b      	strb	r3, [r5, #0]
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	b003      	add	sp, #12
 8014cd4:	bd30      	pop	{r4, r5, pc}
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	702b      	strb	r3, [r5, #0]
 8014cda:	e7f9      	b.n	8014cd0 <rcl_timer_is_ready+0x58>
 8014cdc:	200b      	movs	r0, #11
 8014cde:	b003      	add	sp, #12
 8014ce0:	bd30      	pop	{r4, r5, pc}
 8014ce2:	200b      	movs	r0, #11
 8014ce4:	4770      	bx	lr
 8014ce6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8014cea:	e7de      	b.n	8014caa <rcl_timer_is_ready+0x32>

08014cec <rcl_timer_get_next_call_time>:
 8014cec:	b1d8      	cbz	r0, 8014d26 <rcl_timer_get_next_call_time+0x3a>
 8014cee:	b538      	push	{r3, r4, r5, lr}
 8014cf0:	6803      	ldr	r3, [r0, #0]
 8014cf2:	b1d3      	cbz	r3, 8014d2a <rcl_timer_get_next_call_time+0x3e>
 8014cf4:	460c      	mov	r4, r1
 8014cf6:	b1a1      	cbz	r1, 8014d22 <rcl_timer_get_next_call_time+0x36>
 8014cf8:	f3bf 8f5b 	dmb	ish
 8014cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014d00:	f3bf 8f5b 	dmb	ish
 8014d04:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8014d08:	b943      	cbnz	r3, 8014d1c <rcl_timer_get_next_call_time+0x30>
 8014d0a:	6800      	ldr	r0, [r0, #0]
 8014d0c:	2105      	movs	r1, #5
 8014d0e:	3028      	adds	r0, #40	@ 0x28
 8014d10:	f001 fbda 	bl	80164c8 <__atomic_load_8>
 8014d14:	e9c4 0100 	strd	r0, r1, [r4]
 8014d18:	4628      	mov	r0, r5
 8014d1a:	bd38      	pop	{r3, r4, r5, pc}
 8014d1c:	f240 3021 	movw	r0, #801	@ 0x321
 8014d20:	bd38      	pop	{r3, r4, r5, pc}
 8014d22:	200b      	movs	r0, #11
 8014d24:	bd38      	pop	{r3, r4, r5, pc}
 8014d26:	200b      	movs	r0, #11
 8014d28:	4770      	bx	lr
 8014d2a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8014d2e:	bd38      	pop	{r3, r4, r5, pc}

08014d30 <rcl_timer_get_guard_condition>:
 8014d30:	b130      	cbz	r0, 8014d40 <rcl_timer_get_guard_condition+0x10>
 8014d32:	6800      	ldr	r0, [r0, #0]
 8014d34:	b120      	cbz	r0, 8014d40 <rcl_timer_get_guard_condition+0x10>
 8014d36:	68c3      	ldr	r3, [r0, #12]
 8014d38:	b10b      	cbz	r3, 8014d3e <rcl_timer_get_guard_condition+0xe>
 8014d3a:	3008      	adds	r0, #8
 8014d3c:	4770      	bx	lr
 8014d3e:	4618      	mov	r0, r3
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop

08014d44 <rcl_get_zero_initialized_wait_set>:
 8014d44:	b510      	push	{r4, lr}
 8014d46:	4c08      	ldr	r4, [pc, #32]	@ (8014d68 <rcl_get_zero_initialized_wait_set+0x24>)
 8014d48:	4686      	mov	lr, r0
 8014d4a:	4684      	mov	ip, r0
 8014d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d5e:	6823      	ldr	r3, [r4, #0]
 8014d60:	f8cc 3000 	str.w	r3, [ip]
 8014d64:	4670      	mov	r0, lr
 8014d66:	bd10      	pop	{r4, pc}
 8014d68:	08021b24 	.word	0x08021b24

08014d6c <rcl_wait_set_is_valid>:
 8014d6c:	b118      	cbz	r0, 8014d76 <rcl_wait_set_is_valid+0xa>
 8014d6e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014d70:	3800      	subs	r0, #0
 8014d72:	bf18      	it	ne
 8014d74:	2001      	movne	r0, #1
 8014d76:	4770      	bx	lr

08014d78 <rcl_wait_set_fini>:
 8014d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	f000 80ab 	beq.w	8014ed8 <rcl_wait_set_fini+0x160>
 8014d82:	4605      	mov	r5, r0
 8014d84:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014d86:	2800      	cmp	r0, #0
 8014d88:	f000 809c 	beq.w	8014ec4 <rcl_wait_set_fini+0x14c>
 8014d8c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8014d8e:	f003 fa17 	bl	80181c0 <rmw_destroy_wait_set>
 8014d92:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d94:	4680      	mov	r8, r0
 8014d96:	2800      	cmp	r0, #0
 8014d98:	f040 808e 	bne.w	8014eb8 <rcl_wait_set_fini+0x140>
 8014d9c:	2c00      	cmp	r4, #0
 8014d9e:	f000 80a0 	beq.w	8014ee2 <rcl_wait_set_fini+0x16a>
 8014da2:	6828      	ldr	r0, [r5, #0]
 8014da4:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8014da6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014daa:	2600      	movs	r6, #0
 8014dac:	606e      	str	r6, [r5, #4]
 8014dae:	6026      	str	r6, [r4, #0]
 8014db0:	b118      	cbz	r0, 8014dba <rcl_wait_set_fini+0x42>
 8014db2:	4649      	mov	r1, r9
 8014db4:	47b8      	blx	r7
 8014db6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014db8:	602e      	str	r6, [r5, #0]
 8014dba:	68a0      	ldr	r0, [r4, #8]
 8014dbc:	b128      	cbz	r0, 8014dca <rcl_wait_set_fini+0x52>
 8014dbe:	4649      	mov	r1, r9
 8014dc0:	47b8      	blx	r7
 8014dc2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014dca:	68a8      	ldr	r0, [r5, #8]
 8014dcc:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8014dce:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014dd0:	f04f 0900 	mov.w	r9, #0
 8014dd4:	f8c5 900c 	str.w	r9, [r5, #12]
 8014dd8:	f8c4 900c 	str.w	r9, [r4, #12]
 8014ddc:	b130      	cbz	r0, 8014dec <rcl_wait_set_fini+0x74>
 8014dde:	4639      	mov	r1, r7
 8014de0:	47b0      	blx	r6
 8014de2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014de4:	f8c5 9008 	str.w	r9, [r5, #8]
 8014de8:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8014dea:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014dec:	6960      	ldr	r0, [r4, #20]
 8014dee:	f04f 0900 	mov.w	r9, #0
 8014df2:	f8c4 9010 	str.w	r9, [r4, #16]
 8014df6:	b130      	cbz	r0, 8014e06 <rcl_wait_set_fini+0x8e>
 8014df8:	4639      	mov	r1, r7
 8014dfa:	47b0      	blx	r6
 8014dfc:	f8c4 9014 	str.w	r9, [r4, #20]
 8014e00:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e02:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8014e04:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014e06:	6928      	ldr	r0, [r5, #16]
 8014e08:	f04f 0900 	mov.w	r9, #0
 8014e0c:	f8c5 9014 	str.w	r9, [r5, #20]
 8014e10:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8014e14:	b130      	cbz	r0, 8014e24 <rcl_wait_set_fini+0xac>
 8014e16:	4639      	mov	r1, r7
 8014e18:	47b0      	blx	r6
 8014e1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e1c:	f8c5 9010 	str.w	r9, [r5, #16]
 8014e20:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8014e22:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014e24:	69a8      	ldr	r0, [r5, #24]
 8014e26:	f04f 0900 	mov.w	r9, #0
 8014e2a:	f8c5 901c 	str.w	r9, [r5, #28]
 8014e2e:	f8c4 9018 	str.w	r9, [r4, #24]
 8014e32:	b120      	cbz	r0, 8014e3e <rcl_wait_set_fini+0xc6>
 8014e34:	4639      	mov	r1, r7
 8014e36:	47b0      	blx	r6
 8014e38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e3a:	f8c5 9018 	str.w	r9, [r5, #24]
 8014e3e:	6a20      	ldr	r0, [r4, #32]
 8014e40:	b128      	cbz	r0, 8014e4e <rcl_wait_set_fini+0xd6>
 8014e42:	4639      	mov	r1, r7
 8014e44:	47b0      	blx	r6
 8014e46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e48:	2300      	movs	r3, #0
 8014e4a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014e4e:	6a28      	ldr	r0, [r5, #32]
 8014e50:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8014e52:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e56:	2600      	movs	r6, #0
 8014e58:	626e      	str	r6, [r5, #36]	@ 0x24
 8014e5a:	6266      	str	r6, [r4, #36]	@ 0x24
 8014e5c:	b118      	cbz	r0, 8014e66 <rcl_wait_set_fini+0xee>
 8014e5e:	4649      	mov	r1, r9
 8014e60:	47b8      	blx	r7
 8014e62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e64:	622e      	str	r6, [r5, #32]
 8014e66:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014e68:	b128      	cbz	r0, 8014e76 <rcl_wait_set_fini+0xfe>
 8014e6a:	4649      	mov	r1, r9
 8014e6c:	47b8      	blx	r7
 8014e6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e70:	2300      	movs	r3, #0
 8014e72:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014e76:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014e78:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8014e7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e7e:	2600      	movs	r6, #0
 8014e80:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014e82:	6326      	str	r6, [r4, #48]	@ 0x30
 8014e84:	b118      	cbz	r0, 8014e8e <rcl_wait_set_fini+0x116>
 8014e86:	4649      	mov	r1, r9
 8014e88:	47b8      	blx	r7
 8014e8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e8c:	62ae      	str	r6, [r5, #40]	@ 0x28
 8014e8e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014e90:	b1e0      	cbz	r0, 8014ecc <rcl_wait_set_fini+0x154>
 8014e92:	4649      	mov	r1, r9
 8014e94:	47b8      	blx	r7
 8014e96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e98:	2300      	movs	r3, #0
 8014e9a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8014e9e:	4598      	cmp	r8, r3
 8014ea0:	bf18      	it	ne
 8014ea2:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8014ea6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014ea8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8014eaa:	4620      	mov	r0, r4
 8014eac:	4798      	blx	r3
 8014eae:	2300      	movs	r3, #0
 8014eb0:	632b      	str	r3, [r5, #48]	@ 0x30
 8014eb2:	4640      	mov	r0, r8
 8014eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eb8:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8014ebc:	2c00      	cmp	r4, #0
 8014ebe:	f47f af70 	bne.w	8014da2 <rcl_wait_set_fini+0x2a>
 8014ec2:	e7f6      	b.n	8014eb2 <rcl_wait_set_fini+0x13a>
 8014ec4:	4680      	mov	r8, r0
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ecc:	f1b8 0f00 	cmp.w	r8, #0
 8014ed0:	bf18      	it	ne
 8014ed2:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8014ed6:	e7e6      	b.n	8014ea6 <rcl_wait_set_fini+0x12e>
 8014ed8:	f04f 080b 	mov.w	r8, #11
 8014edc:	4640      	mov	r0, r8
 8014ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ee2:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8014ee6:	e7e4      	b.n	8014eb2 <rcl_wait_set_fini+0x13a>

08014ee8 <rcl_wait_set_add_subscription>:
 8014ee8:	b318      	cbz	r0, 8014f32 <rcl_wait_set_add_subscription+0x4a>
 8014eea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014eec:	b570      	push	{r4, r5, r6, lr}
 8014eee:	4604      	mov	r4, r0
 8014ef0:	b30b      	cbz	r3, 8014f36 <rcl_wait_set_add_subscription+0x4e>
 8014ef2:	b319      	cbz	r1, 8014f3c <rcl_wait_set_add_subscription+0x54>
 8014ef4:	681d      	ldr	r5, [r3, #0]
 8014ef6:	6840      	ldr	r0, [r0, #4]
 8014ef8:	4285      	cmp	r5, r0
 8014efa:	d217      	bcs.n	8014f2c <rcl_wait_set_add_subscription+0x44>
 8014efc:	6820      	ldr	r0, [r4, #0]
 8014efe:	1c6e      	adds	r6, r5, #1
 8014f00:	601e      	str	r6, [r3, #0]
 8014f02:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f06:	b102      	cbz	r2, 8014f0a <rcl_wait_set_add_subscription+0x22>
 8014f08:	6015      	str	r5, [r2, #0]
 8014f0a:	4608      	mov	r0, r1
 8014f0c:	f7ff fb3c 	bl	8014588 <rcl_subscription_get_rmw_handle>
 8014f10:	b150      	cbz	r0, 8014f28 <rcl_wait_set_add_subscription+0x40>
 8014f12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f14:	6842      	ldr	r2, [r0, #4]
 8014f16:	689b      	ldr	r3, [r3, #8]
 8014f18:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f1c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f1e:	6853      	ldr	r3, [r2, #4]
 8014f20:	3301      	adds	r3, #1
 8014f22:	2000      	movs	r0, #0
 8014f24:	6053      	str	r3, [r2, #4]
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	2001      	movs	r0, #1
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	f240 3086 	movw	r0, #902	@ 0x386
 8014f30:	bd70      	pop	{r4, r5, r6, pc}
 8014f32:	200b      	movs	r0, #11
 8014f34:	4770      	bx	lr
 8014f36:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}
 8014f3c:	200b      	movs	r0, #11
 8014f3e:	bd70      	pop	{r4, r5, r6, pc}

08014f40 <rcl_wait_set_clear>:
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d074      	beq.n	801502e <rcl_wait_set_clear+0xee>
 8014f44:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f46:	b510      	push	{r4, lr}
 8014f48:	4604      	mov	r4, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d071      	beq.n	8015032 <rcl_wait_set_clear+0xf2>
 8014f4e:	6800      	ldr	r0, [r0, #0]
 8014f50:	b138      	cbz	r0, 8014f62 <rcl_wait_set_clear+0x22>
 8014f52:	6862      	ldr	r2, [r4, #4]
 8014f54:	2100      	movs	r1, #0
 8014f56:	0092      	lsls	r2, r2, #2
 8014f58:	f006 fc7e 	bl	801b858 <memset>
 8014f5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f5e:	2200      	movs	r2, #0
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	68a0      	ldr	r0, [r4, #8]
 8014f64:	b138      	cbz	r0, 8014f76 <rcl_wait_set_clear+0x36>
 8014f66:	68e2      	ldr	r2, [r4, #12]
 8014f68:	2100      	movs	r1, #0
 8014f6a:	0092      	lsls	r2, r2, #2
 8014f6c:	f006 fc74 	bl	801b858 <memset>
 8014f70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f72:	2200      	movs	r2, #0
 8014f74:	60da      	str	r2, [r3, #12]
 8014f76:	69a0      	ldr	r0, [r4, #24]
 8014f78:	b138      	cbz	r0, 8014f8a <rcl_wait_set_clear+0x4a>
 8014f7a:	69e2      	ldr	r2, [r4, #28]
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	0092      	lsls	r2, r2, #2
 8014f80:	f006 fc6a 	bl	801b858 <memset>
 8014f84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f86:	2200      	movs	r2, #0
 8014f88:	619a      	str	r2, [r3, #24]
 8014f8a:	6a20      	ldr	r0, [r4, #32]
 8014f8c:	b138      	cbz	r0, 8014f9e <rcl_wait_set_clear+0x5e>
 8014f8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014f90:	2100      	movs	r1, #0
 8014f92:	0092      	lsls	r2, r2, #2
 8014f94:	f006 fc60 	bl	801b858 <memset>
 8014f98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014f9e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014fa0:	b138      	cbz	r0, 8014fb2 <rcl_wait_set_clear+0x72>
 8014fa2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	0092      	lsls	r2, r2, #2
 8014fa8:	f006 fc56 	bl	801b858 <memset>
 8014fac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fae:	2200      	movs	r2, #0
 8014fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8014fb2:	6920      	ldr	r0, [r4, #16]
 8014fb4:	b138      	cbz	r0, 8014fc6 <rcl_wait_set_clear+0x86>
 8014fb6:	6962      	ldr	r2, [r4, #20]
 8014fb8:	2100      	movs	r1, #0
 8014fba:	0092      	lsls	r2, r2, #2
 8014fbc:	f006 fc4c 	bl	801b858 <memset>
 8014fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8014fc6:	6898      	ldr	r0, [r3, #8]
 8014fc8:	b138      	cbz	r0, 8014fda <rcl_wait_set_clear+0x9a>
 8014fca:	685a      	ldr	r2, [r3, #4]
 8014fcc:	2100      	movs	r1, #0
 8014fce:	0092      	lsls	r2, r2, #2
 8014fd0:	f006 fc42 	bl	801b858 <memset>
 8014fd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	605a      	str	r2, [r3, #4]
 8014fda:	6958      	ldr	r0, [r3, #20]
 8014fdc:	b138      	cbz	r0, 8014fee <rcl_wait_set_clear+0xae>
 8014fde:	691a      	ldr	r2, [r3, #16]
 8014fe0:	2100      	movs	r1, #0
 8014fe2:	0092      	lsls	r2, r2, #2
 8014fe4:	f006 fc38 	bl	801b858 <memset>
 8014fe8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fea:	2200      	movs	r2, #0
 8014fec:	611a      	str	r2, [r3, #16]
 8014fee:	6a18      	ldr	r0, [r3, #32]
 8014ff0:	b138      	cbz	r0, 8015002 <rcl_wait_set_clear+0xc2>
 8014ff2:	69da      	ldr	r2, [r3, #28]
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	0092      	lsls	r2, r2, #2
 8014ff8:	f006 fc2e 	bl	801b858 <memset>
 8014ffc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ffe:	2200      	movs	r2, #0
 8015000:	61da      	str	r2, [r3, #28]
 8015002:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015004:	b138      	cbz	r0, 8015016 <rcl_wait_set_clear+0xd6>
 8015006:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015008:	2100      	movs	r1, #0
 801500a:	0092      	lsls	r2, r2, #2
 801500c:	f006 fc24 	bl	801b858 <memset>
 8015010:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015012:	2200      	movs	r2, #0
 8015014:	629a      	str	r2, [r3, #40]	@ 0x28
 8015016:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015018:	b138      	cbz	r0, 801502a <rcl_wait_set_clear+0xea>
 801501a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801501c:	2100      	movs	r1, #0
 801501e:	0092      	lsls	r2, r2, #2
 8015020:	f006 fc1a 	bl	801b858 <memset>
 8015024:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015026:	2200      	movs	r2, #0
 8015028:	635a      	str	r2, [r3, #52]	@ 0x34
 801502a:	2000      	movs	r0, #0
 801502c:	bd10      	pop	{r4, pc}
 801502e:	200b      	movs	r0, #11
 8015030:	4770      	bx	lr
 8015032:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015036:	bd10      	pop	{r4, pc}

08015038 <rcl_wait_set_resize>:
 8015038:	2800      	cmp	r0, #0
 801503a:	f000 81a1 	beq.w	8015380 <rcl_wait_set_resize+0x348>
 801503e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015042:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8015046:	b083      	sub	sp, #12
 8015048:	4604      	mov	r4, r0
 801504a:	f1ba 0f00 	cmp.w	sl, #0
 801504e:	f000 8199 	beq.w	8015384 <rcl_wait_set_resize+0x34c>
 8015052:	f04f 0800 	mov.w	r8, #0
 8015056:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 801505a:	461e      	mov	r6, r3
 801505c:	460f      	mov	r7, r1
 801505e:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015062:	4615      	mov	r5, r2
 8015064:	f8c0 8004 	str.w	r8, [r0, #4]
 8015068:	6800      	ldr	r0, [r0, #0]
 801506a:	f8ca 8000 	str.w	r8, [sl]
 801506e:	2900      	cmp	r1, #0
 8015070:	f000 80cf 	beq.w	8015212 <rcl_wait_set_resize+0x1da>
 8015074:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015078:	464a      	mov	r2, r9
 801507a:	4651      	mov	r1, sl
 801507c:	9301      	str	r3, [sp, #4]
 801507e:	4798      	blx	r3
 8015080:	9b01      	ldr	r3, [sp, #4]
 8015082:	6020      	str	r0, [r4, #0]
 8015084:	2800      	cmp	r0, #0
 8015086:	f000 8109 	beq.w	801529c <rcl_wait_set_resize+0x264>
 801508a:	4652      	mov	r2, sl
 801508c:	4641      	mov	r1, r8
 801508e:	9301      	str	r3, [sp, #4]
 8015090:	f006 fbe2 	bl	801b858 <memset>
 8015094:	6067      	str	r7, [r4, #4]
 8015096:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8015098:	9b01      	ldr	r3, [sp, #4]
 801509a:	68b8      	ldr	r0, [r7, #8]
 801509c:	f8c7 8004 	str.w	r8, [r7, #4]
 80150a0:	464a      	mov	r2, r9
 80150a2:	4651      	mov	r1, sl
 80150a4:	4798      	blx	r3
 80150a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150a8:	60b8      	str	r0, [r7, #8]
 80150aa:	689f      	ldr	r7, [r3, #8]
 80150ac:	2f00      	cmp	r7, #0
 80150ae:	f000 80f0 	beq.w	8015292 <rcl_wait_set_resize+0x25a>
 80150b2:	4652      	mov	r2, sl
 80150b4:	4641      	mov	r1, r8
 80150b6:	4638      	mov	r0, r7
 80150b8:	f006 fbce 	bl	801b858 <memset>
 80150bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80150c0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80150c4:	68a0      	ldr	r0, [r4, #8]
 80150c6:	2700      	movs	r7, #0
 80150c8:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 80150cc:	60e7      	str	r7, [r4, #12]
 80150ce:	f8ca 700c 	str.w	r7, [sl, #12]
 80150d2:	2d00      	cmp	r5, #0
 80150d4:	f040 80b0 	bne.w	8015238 <rcl_wait_set_resize+0x200>
 80150d8:	b130      	cbz	r0, 80150e8 <rcl_wait_set_resize+0xb0>
 80150da:	4641      	mov	r1, r8
 80150dc:	4790      	blx	r2
 80150de:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80150e2:	60a5      	str	r5, [r4, #8]
 80150e4:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80150e8:	f8da 0014 	ldr.w	r0, [sl, #20]
 80150ec:	2700      	movs	r7, #0
 80150ee:	19ad      	adds	r5, r5, r6
 80150f0:	f8ca 7010 	str.w	r7, [sl, #16]
 80150f4:	f040 80b8 	bne.w	8015268 <rcl_wait_set_resize+0x230>
 80150f8:	b148      	cbz	r0, 801510e <rcl_wait_set_resize+0xd6>
 80150fa:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80150fe:	4641      	mov	r1, r8
 8015100:	4798      	blx	r3
 8015102:	f8ca 5014 	str.w	r5, [sl, #20]
 8015106:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801510a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801510e:	6920      	ldr	r0, [r4, #16]
 8015110:	2500      	movs	r5, #0
 8015112:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015116:	6165      	str	r5, [r4, #20]
 8015118:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 801511c:	2e00      	cmp	r6, #0
 801511e:	f040 80c1 	bne.w	80152a4 <rcl_wait_set_resize+0x26c>
 8015122:	b140      	cbz	r0, 8015136 <rcl_wait_set_resize+0xfe>
 8015124:	4641      	mov	r1, r8
 8015126:	47c8      	blx	r9
 8015128:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801512c:	6126      	str	r6, [r4, #16]
 801512e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015132:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015136:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015138:	69a0      	ldr	r0, [r4, #24]
 801513a:	2500      	movs	r5, #0
 801513c:	61e5      	str	r5, [r4, #28]
 801513e:	f8ca 5018 	str.w	r5, [sl, #24]
 8015142:	2b00      	cmp	r3, #0
 8015144:	f040 80c2 	bne.w	80152cc <rcl_wait_set_resize+0x294>
 8015148:	b128      	cbz	r0, 8015156 <rcl_wait_set_resize+0x11e>
 801514a:	4641      	mov	r1, r8
 801514c:	47c8      	blx	r9
 801514e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015150:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015154:	61a3      	str	r3, [r4, #24]
 8015156:	f8da 0020 	ldr.w	r0, [sl, #32]
 801515a:	b130      	cbz	r0, 801516a <rcl_wait_set_resize+0x132>
 801515c:	4641      	mov	r1, r8
 801515e:	47c8      	blx	r9
 8015160:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015164:	2300      	movs	r3, #0
 8015166:	e9ca 3307 	strd	r3, r3, [sl, #28]
 801516a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801516c:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015170:	6a20      	ldr	r0, [r4, #32]
 8015172:	2500      	movs	r5, #0
 8015174:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8015178:	6265      	str	r5, [r4, #36]	@ 0x24
 801517a:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 801517e:	2b00      	cmp	r3, #0
 8015180:	f000 80c8 	beq.w	8015314 <rcl_wait_set_resize+0x2dc>
 8015184:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8015188:	4632      	mov	r2, r6
 801518a:	4649      	mov	r1, r9
 801518c:	47c0      	blx	r8
 801518e:	6220      	str	r0, [r4, #32]
 8015190:	2800      	cmp	r0, #0
 8015192:	f000 8083 	beq.w	801529c <rcl_wait_set_resize+0x264>
 8015196:	464a      	mov	r2, r9
 8015198:	4629      	mov	r1, r5
 801519a:	f006 fb5d 	bl	801b858 <memset>
 801519e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80151a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80151a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80151a6:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80151aa:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 80151ae:	4632      	mov	r2, r6
 80151b0:	4649      	mov	r1, r9
 80151b2:	47c0      	blx	r8
 80151b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151b6:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 80151ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151bc:	2b00      	cmp	r3, #0
 80151be:	f000 80fb 	beq.w	80153b8 <rcl_wait_set_resize+0x380>
 80151c2:	464a      	mov	r2, r9
 80151c4:	4629      	mov	r1, r5
 80151c6:	4618      	mov	r0, r3
 80151c8:	f006 fb46 	bl	801b858 <memset>
 80151cc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80151d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151d2:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80151d6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80151d8:	2500      	movs	r5, #0
 80151da:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80151de:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80151e0:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f040 80a9 	bne.w	801533c <rcl_wait_set_resize+0x304>
 80151ea:	b128      	cbz	r0, 80151f8 <rcl_wait_set_resize+0x1c0>
 80151ec:	4631      	mov	r1, r6
 80151ee:	47b8      	blx	r7
 80151f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151f2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80151f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80151f8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80151fc:	b128      	cbz	r0, 801520a <rcl_wait_set_resize+0x1d2>
 80151fe:	4631      	mov	r1, r6
 8015200:	47b8      	blx	r7
 8015202:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015204:	2200      	movs	r2, #0
 8015206:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 801520a:	2000      	movs	r0, #0
 801520c:	b003      	add	sp, #12
 801520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015212:	b120      	cbz	r0, 801521e <rcl_wait_set_resize+0x1e6>
 8015214:	4649      	mov	r1, r9
 8015216:	47d8      	blx	fp
 8015218:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801521c:	6027      	str	r7, [r4, #0]
 801521e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015222:	2800      	cmp	r0, #0
 8015224:	f43f af4c 	beq.w	80150c0 <rcl_wait_set_resize+0x88>
 8015228:	4649      	mov	r1, r9
 801522a:	47d8      	blx	fp
 801522c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015230:	2300      	movs	r3, #0
 8015232:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8015236:	e743      	b.n	80150c0 <rcl_wait_set_resize+0x88>
 8015238:	4642      	mov	r2, r8
 801523a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 801523e:	4641      	mov	r1, r8
 8015240:	4798      	blx	r3
 8015242:	60a0      	str	r0, [r4, #8]
 8015244:	b350      	cbz	r0, 801529c <rcl_wait_set_resize+0x264>
 8015246:	4642      	mov	r2, r8
 8015248:	4639      	mov	r1, r7
 801524a:	f006 fb05 	bl	801b858 <memset>
 801524e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015252:	60e5      	str	r5, [r4, #12]
 8015254:	2700      	movs	r7, #0
 8015256:	19ad      	adds	r5, r5, r6
 8015258:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801525c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015260:	f8ca 7010 	str.w	r7, [sl, #16]
 8015264:	f43f af48 	beq.w	80150f8 <rcl_wait_set_resize+0xc0>
 8015268:	00ad      	lsls	r5, r5, #2
 801526a:	4642      	mov	r2, r8
 801526c:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8015270:	4629      	mov	r1, r5
 8015272:	4798      	blx	r3
 8015274:	4680      	mov	r8, r0
 8015276:	f8ca 0014 	str.w	r0, [sl, #20]
 801527a:	2800      	cmp	r0, #0
 801527c:	f000 8085 	beq.w	801538a <rcl_wait_set_resize+0x352>
 8015280:	462a      	mov	r2, r5
 8015282:	4639      	mov	r1, r7
 8015284:	f006 fae8 	bl	801b858 <memset>
 8015288:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801528c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015290:	e73d      	b.n	801510e <rcl_wait_set_resize+0xd6>
 8015292:	6820      	ldr	r0, [r4, #0]
 8015294:	4649      	mov	r1, r9
 8015296:	47d8      	blx	fp
 8015298:	e9c4 7700 	strd	r7, r7, [r4]
 801529c:	200a      	movs	r0, #10
 801529e:	b003      	add	sp, #12
 80152a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a4:	4642      	mov	r2, r8
 80152a6:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80152aa:	4641      	mov	r1, r8
 80152ac:	47b8      	blx	r7
 80152ae:	6120      	str	r0, [r4, #16]
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d0f3      	beq.n	801529c <rcl_wait_set_resize+0x264>
 80152b4:	4642      	mov	r2, r8
 80152b6:	4629      	mov	r1, r5
 80152b8:	f006 face 	bl	801b858 <memset>
 80152bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152c0:	6166      	str	r6, [r4, #20]
 80152c2:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80152c6:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80152ca:	e734      	b.n	8015136 <rcl_wait_set_resize+0xfe>
 80152cc:	009e      	lsls	r6, r3, #2
 80152ce:	4642      	mov	r2, r8
 80152d0:	4631      	mov	r1, r6
 80152d2:	47b8      	blx	r7
 80152d4:	61a0      	str	r0, [r4, #24]
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d0e0      	beq.n	801529c <rcl_wait_set_resize+0x264>
 80152da:	4632      	mov	r2, r6
 80152dc:	4629      	mov	r1, r5
 80152de:	f006 fabb 	bl	801b858 <memset>
 80152e2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80152e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152e8:	61e3      	str	r3, [r4, #28]
 80152ea:	f8da 0020 	ldr.w	r0, [sl, #32]
 80152ee:	f8ca 501c 	str.w	r5, [sl, #28]
 80152f2:	4642      	mov	r2, r8
 80152f4:	4631      	mov	r1, r6
 80152f6:	47b8      	blx	r7
 80152f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80152fa:	f8ca 0020 	str.w	r0, [sl, #32]
 80152fe:	6a1f      	ldr	r7, [r3, #32]
 8015300:	2f00      	cmp	r7, #0
 8015302:	d053      	beq.n	80153ac <rcl_wait_set_resize+0x374>
 8015304:	4632      	mov	r2, r6
 8015306:	4629      	mov	r1, r5
 8015308:	4638      	mov	r0, r7
 801530a:	f006 faa5 	bl	801b858 <memset>
 801530e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015312:	e72a      	b.n	801516a <rcl_wait_set_resize+0x132>
 8015314:	b128      	cbz	r0, 8015322 <rcl_wait_set_resize+0x2ea>
 8015316:	4631      	mov	r1, r6
 8015318:	47b8      	blx	r7
 801531a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801531c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015320:	6223      	str	r3, [r4, #32]
 8015322:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8015326:	2800      	cmp	r0, #0
 8015328:	f43f af52 	beq.w	80151d0 <rcl_wait_set_resize+0x198>
 801532c:	4631      	mov	r1, r6
 801532e:	47b8      	blx	r7
 8015330:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015334:	2300      	movs	r3, #0
 8015336:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 801533a:	e749      	b.n	80151d0 <rcl_wait_set_resize+0x198>
 801533c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8015340:	4632      	mov	r2, r6
 8015342:	4649      	mov	r1, r9
 8015344:	47c0      	blx	r8
 8015346:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015348:	2800      	cmp	r0, #0
 801534a:	d0a7      	beq.n	801529c <rcl_wait_set_resize+0x264>
 801534c:	464a      	mov	r2, r9
 801534e:	4629      	mov	r1, r5
 8015350:	f006 fa82 	bl	801b858 <memset>
 8015354:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801535a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801535c:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015360:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8015364:	4632      	mov	r2, r6
 8015366:	4649      	mov	r1, r9
 8015368:	47c0      	blx	r8
 801536a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801536c:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015372:	b34b      	cbz	r3, 80153c8 <rcl_wait_set_resize+0x390>
 8015374:	464a      	mov	r2, r9
 8015376:	4629      	mov	r1, r5
 8015378:	4618      	mov	r0, r3
 801537a:	f006 fa6d 	bl	801b858 <memset>
 801537e:	e744      	b.n	801520a <rcl_wait_set_resize+0x1d2>
 8015380:	200b      	movs	r0, #11
 8015382:	4770      	bx	lr
 8015384:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015388:	e789      	b.n	801529e <rcl_wait_set_resize+0x266>
 801538a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801538c:	68a0      	ldr	r0, [r4, #8]
 801538e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015390:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015392:	4790      	blx	r2
 8015394:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015396:	6920      	ldr	r0, [r4, #16]
 8015398:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801539a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801539c:	f8c4 800c 	str.w	r8, [r4, #12]
 80153a0:	f8c4 8008 	str.w	r8, [r4, #8]
 80153a4:	4790      	blx	r2
 80153a6:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80153aa:	e777      	b.n	801529c <rcl_wait_set_resize+0x264>
 80153ac:	69a0      	ldr	r0, [r4, #24]
 80153ae:	4641      	mov	r1, r8
 80153b0:	47c8      	blx	r9
 80153b2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80153b6:	e771      	b.n	801529c <rcl_wait_set_resize+0x264>
 80153b8:	6a20      	ldr	r0, [r4, #32]
 80153ba:	9301      	str	r3, [sp, #4]
 80153bc:	4631      	mov	r1, r6
 80153be:	47b8      	blx	r7
 80153c0:	9b01      	ldr	r3, [sp, #4]
 80153c2:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80153c6:	e769      	b.n	801529c <rcl_wait_set_resize+0x264>
 80153c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80153ca:	9301      	str	r3, [sp, #4]
 80153cc:	4631      	mov	r1, r6
 80153ce:	47b8      	blx	r7
 80153d0:	9b01      	ldr	r3, [sp, #4]
 80153d2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80153d6:	e761      	b.n	801529c <rcl_wait_set_resize+0x264>

080153d8 <rcl_wait_set_init>:
 80153d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153dc:	b084      	sub	sp, #16
 80153de:	4604      	mov	r4, r0
 80153e0:	a810      	add	r0, sp, #64	@ 0x40
 80153e2:	460d      	mov	r5, r1
 80153e4:	4690      	mov	r8, r2
 80153e6:	461f      	mov	r7, r3
 80153e8:	f7f8 fb36 	bl	800da58 <rcutils_allocator_is_valid>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d068      	beq.n	80154c2 <rcl_wait_set_init+0xea>
 80153f0:	2c00      	cmp	r4, #0
 80153f2:	d066      	beq.n	80154c2 <rcl_wait_set_init+0xea>
 80153f4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80153f6:	b126      	cbz	r6, 8015402 <rcl_wait_set_init+0x2a>
 80153f8:	2564      	movs	r5, #100	@ 0x64
 80153fa:	4628      	mov	r0, r5
 80153fc:	b004      	add	sp, #16
 80153fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015402:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015404:	2b00      	cmp	r3, #0
 8015406:	d05c      	beq.n	80154c2 <rcl_wait_set_init+0xea>
 8015408:	4618      	mov	r0, r3
 801540a:	f7fe f9a5 	bl	8013758 <rcl_context_is_valid>
 801540e:	2800      	cmp	r0, #0
 8015410:	d05c      	beq.n	80154cc <rcl_wait_set_init+0xf4>
 8015412:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015414:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015416:	205c      	movs	r0, #92	@ 0x5c
 8015418:	4798      	blx	r3
 801541a:	6320      	str	r0, [r4, #48]	@ 0x30
 801541c:	2800      	cmp	r0, #0
 801541e:	d059      	beq.n	80154d4 <rcl_wait_set_init+0xfc>
 8015420:	4631      	mov	r1, r6
 8015422:	225c      	movs	r2, #92	@ 0x5c
 8015424:	f006 fa18 	bl	801b858 <memset>
 8015428:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 801542c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801542e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8015432:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015436:	eb03 0e02 	add.w	lr, r3, r2
 801543a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801543c:	449e      	add	lr, r3
 801543e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015440:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015444:	f8d3 a000 	ldr.w	sl, [r3]
 8015448:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801544c:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8015450:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8015454:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8015458:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 801545c:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8015460:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8015464:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015466:	44c6      	add	lr, r8
 8015468:	f8dc 3000 	ldr.w	r3, [ip]
 801546c:	6033      	str	r3, [r6, #0]
 801546e:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8015472:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015476:	f002 fe99 	bl	80181ac <rmw_create_wait_set>
 801547a:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 801547e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015480:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8015482:	b32b      	cbz	r3, 80154d0 <rcl_wait_set_init+0xf8>
 8015484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015486:	9302      	str	r3, [sp, #8]
 8015488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801548a:	9301      	str	r3, [sp, #4]
 801548c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801548e:	9300      	str	r3, [sp, #0]
 8015490:	4629      	mov	r1, r5
 8015492:	463b      	mov	r3, r7
 8015494:	4642      	mov	r2, r8
 8015496:	4620      	mov	r0, r4
 8015498:	f7ff fdce 	bl	8015038 <rcl_wait_set_resize>
 801549c:	4605      	mov	r5, r0
 801549e:	2800      	cmp	r0, #0
 80154a0:	d0ab      	beq.n	80153fa <rcl_wait_set_init+0x22>
 80154a2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80154a4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80154a6:	b133      	cbz	r3, 80154b6 <rcl_wait_set_init+0xde>
 80154a8:	4618      	mov	r0, r3
 80154aa:	f002 fe89 	bl	80181c0 <rmw_destroy_wait_set>
 80154ae:	b198      	cbz	r0, 80154d8 <rcl_wait_set_init+0x100>
 80154b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80154b2:	f44f 7561 	mov.w	r5, #900	@ 0x384
 80154b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80154b8:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80154ba:	4798      	blx	r3
 80154bc:	2300      	movs	r3, #0
 80154be:	6323      	str	r3, [r4, #48]	@ 0x30
 80154c0:	e79b      	b.n	80153fa <rcl_wait_set_init+0x22>
 80154c2:	250b      	movs	r5, #11
 80154c4:	4628      	mov	r0, r5
 80154c6:	b004      	add	sp, #16
 80154c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154cc:	2565      	movs	r5, #101	@ 0x65
 80154ce:	e794      	b.n	80153fa <rcl_wait_set_init+0x22>
 80154d0:	250a      	movs	r5, #10
 80154d2:	e7f0      	b.n	80154b6 <rcl_wait_set_init+0xde>
 80154d4:	250a      	movs	r5, #10
 80154d6:	e790      	b.n	80153fa <rcl_wait_set_init+0x22>
 80154d8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80154da:	e7ec      	b.n	80154b6 <rcl_wait_set_init+0xde>

080154dc <rcl_wait_set_add_guard_condition>:
 80154dc:	b318      	cbz	r0, 8015526 <rcl_wait_set_add_guard_condition+0x4a>
 80154de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80154e0:	b570      	push	{r4, r5, r6, lr}
 80154e2:	4604      	mov	r4, r0
 80154e4:	b30b      	cbz	r3, 801552a <rcl_wait_set_add_guard_condition+0x4e>
 80154e6:	b319      	cbz	r1, 8015530 <rcl_wait_set_add_guard_condition+0x54>
 80154e8:	68dd      	ldr	r5, [r3, #12]
 80154ea:	68c0      	ldr	r0, [r0, #12]
 80154ec:	4285      	cmp	r5, r0
 80154ee:	d217      	bcs.n	8015520 <rcl_wait_set_add_guard_condition+0x44>
 80154f0:	68a0      	ldr	r0, [r4, #8]
 80154f2:	1c6e      	adds	r6, r5, #1
 80154f4:	60de      	str	r6, [r3, #12]
 80154f6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80154fa:	b102      	cbz	r2, 80154fe <rcl_wait_set_add_guard_condition+0x22>
 80154fc:	6015      	str	r5, [r2, #0]
 80154fe:	4608      	mov	r0, r1
 8015500:	f004 fdfc 	bl	801a0fc <rcl_guard_condition_get_rmw_handle>
 8015504:	b150      	cbz	r0, 801551c <rcl_wait_set_add_guard_condition+0x40>
 8015506:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015508:	6842      	ldr	r2, [r0, #4]
 801550a:	695b      	ldr	r3, [r3, #20]
 801550c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015510:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015512:	6913      	ldr	r3, [r2, #16]
 8015514:	3301      	adds	r3, #1
 8015516:	2000      	movs	r0, #0
 8015518:	6113      	str	r3, [r2, #16]
 801551a:	bd70      	pop	{r4, r5, r6, pc}
 801551c:	2001      	movs	r0, #1
 801551e:	bd70      	pop	{r4, r5, r6, pc}
 8015520:	f240 3086 	movw	r0, #902	@ 0x386
 8015524:	bd70      	pop	{r4, r5, r6, pc}
 8015526:	200b      	movs	r0, #11
 8015528:	4770      	bx	lr
 801552a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801552e:	bd70      	pop	{r4, r5, r6, pc}
 8015530:	200b      	movs	r0, #11
 8015532:	bd70      	pop	{r4, r5, r6, pc}

08015534 <rcl_wait_set_add_timer>:
 8015534:	b328      	cbz	r0, 8015582 <rcl_wait_set_add_timer+0x4e>
 8015536:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015538:	b570      	push	{r4, r5, r6, lr}
 801553a:	4604      	mov	r4, r0
 801553c:	b31b      	cbz	r3, 8015586 <rcl_wait_set_add_timer+0x52>
 801553e:	b329      	cbz	r1, 801558c <rcl_wait_set_add_timer+0x58>
 8015540:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015542:	6965      	ldr	r5, [r4, #20]
 8015544:	42a8      	cmp	r0, r5
 8015546:	d219      	bcs.n	801557c <rcl_wait_set_add_timer+0x48>
 8015548:	6925      	ldr	r5, [r4, #16]
 801554a:	1c46      	adds	r6, r0, #1
 801554c:	641e      	str	r6, [r3, #64]	@ 0x40
 801554e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015552:	b102      	cbz	r2, 8015556 <rcl_wait_set_add_timer+0x22>
 8015554:	6010      	str	r0, [r2, #0]
 8015556:	4608      	mov	r0, r1
 8015558:	f7ff fbea 	bl	8014d30 <rcl_timer_get_guard_condition>
 801555c:	b160      	cbz	r0, 8015578 <rcl_wait_set_add_timer+0x44>
 801555e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015560:	68e3      	ldr	r3, [r4, #12]
 8015562:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015564:	3b01      	subs	r3, #1
 8015566:	441d      	add	r5, r3
 8015568:	f004 fdc8 	bl	801a0fc <rcl_guard_condition_get_rmw_handle>
 801556c:	b180      	cbz	r0, 8015590 <rcl_wait_set_add_timer+0x5c>
 801556e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015570:	6842      	ldr	r2, [r0, #4]
 8015572:	695b      	ldr	r3, [r3, #20]
 8015574:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015578:	2000      	movs	r0, #0
 801557a:	bd70      	pop	{r4, r5, r6, pc}
 801557c:	f240 3086 	movw	r0, #902	@ 0x386
 8015580:	bd70      	pop	{r4, r5, r6, pc}
 8015582:	200b      	movs	r0, #11
 8015584:	4770      	bx	lr
 8015586:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801558a:	bd70      	pop	{r4, r5, r6, pc}
 801558c:	200b      	movs	r0, #11
 801558e:	bd70      	pop	{r4, r5, r6, pc}
 8015590:	2001      	movs	r0, #1
 8015592:	bd70      	pop	{r4, r5, r6, pc}

08015594 <rcl_wait_set_add_client>:
 8015594:	b318      	cbz	r0, 80155de <rcl_wait_set_add_client+0x4a>
 8015596:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015598:	b570      	push	{r4, r5, r6, lr}
 801559a:	4604      	mov	r4, r0
 801559c:	b30b      	cbz	r3, 80155e2 <rcl_wait_set_add_client+0x4e>
 801559e:	b319      	cbz	r1, 80155e8 <rcl_wait_set_add_client+0x54>
 80155a0:	699d      	ldr	r5, [r3, #24]
 80155a2:	69c0      	ldr	r0, [r0, #28]
 80155a4:	4285      	cmp	r5, r0
 80155a6:	d217      	bcs.n	80155d8 <rcl_wait_set_add_client+0x44>
 80155a8:	69a0      	ldr	r0, [r4, #24]
 80155aa:	1c6e      	adds	r6, r5, #1
 80155ac:	619e      	str	r6, [r3, #24]
 80155ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80155b2:	b102      	cbz	r2, 80155b6 <rcl_wait_set_add_client+0x22>
 80155b4:	6015      	str	r5, [r2, #0]
 80155b6:	4608      	mov	r0, r1
 80155b8:	f7fd ffe6 	bl	8013588 <rcl_client_get_rmw_handle>
 80155bc:	b150      	cbz	r0, 80155d4 <rcl_wait_set_add_client+0x40>
 80155be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155c0:	6842      	ldr	r2, [r0, #4]
 80155c2:	6a1b      	ldr	r3, [r3, #32]
 80155c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80155ca:	69d3      	ldr	r3, [r2, #28]
 80155cc:	3301      	adds	r3, #1
 80155ce:	2000      	movs	r0, #0
 80155d0:	61d3      	str	r3, [r2, #28]
 80155d2:	bd70      	pop	{r4, r5, r6, pc}
 80155d4:	2001      	movs	r0, #1
 80155d6:	bd70      	pop	{r4, r5, r6, pc}
 80155d8:	f240 3086 	movw	r0, #902	@ 0x386
 80155dc:	bd70      	pop	{r4, r5, r6, pc}
 80155de:	200b      	movs	r0, #11
 80155e0:	4770      	bx	lr
 80155e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80155e6:	bd70      	pop	{r4, r5, r6, pc}
 80155e8:	200b      	movs	r0, #11
 80155ea:	bd70      	pop	{r4, r5, r6, pc}

080155ec <rcl_wait_set_add_service>:
 80155ec:	b318      	cbz	r0, 8015636 <rcl_wait_set_add_service+0x4a>
 80155ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80155f0:	b570      	push	{r4, r5, r6, lr}
 80155f2:	4604      	mov	r4, r0
 80155f4:	b30b      	cbz	r3, 801563a <rcl_wait_set_add_service+0x4e>
 80155f6:	b319      	cbz	r1, 8015640 <rcl_wait_set_add_service+0x54>
 80155f8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80155fa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80155fc:	4285      	cmp	r5, r0
 80155fe:	d217      	bcs.n	8015630 <rcl_wait_set_add_service+0x44>
 8015600:	6a20      	ldr	r0, [r4, #32]
 8015602:	1c6e      	adds	r6, r5, #1
 8015604:	625e      	str	r6, [r3, #36]	@ 0x24
 8015606:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801560a:	b102      	cbz	r2, 801560e <rcl_wait_set_add_service+0x22>
 801560c:	6015      	str	r5, [r2, #0]
 801560e:	4608      	mov	r0, r1
 8015610:	f7fe fd88 	bl	8014124 <rcl_service_get_rmw_handle>
 8015614:	b150      	cbz	r0, 801562c <rcl_wait_set_add_service+0x40>
 8015616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015618:	6842      	ldr	r2, [r0, #4]
 801561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801561c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015620:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015622:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015624:	3301      	adds	r3, #1
 8015626:	2000      	movs	r0, #0
 8015628:	6293      	str	r3, [r2, #40]	@ 0x28
 801562a:	bd70      	pop	{r4, r5, r6, pc}
 801562c:	2001      	movs	r0, #1
 801562e:	bd70      	pop	{r4, r5, r6, pc}
 8015630:	f240 3086 	movw	r0, #902	@ 0x386
 8015634:	bd70      	pop	{r4, r5, r6, pc}
 8015636:	200b      	movs	r0, #11
 8015638:	4770      	bx	lr
 801563a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801563e:	bd70      	pop	{r4, r5, r6, pc}
 8015640:	200b      	movs	r0, #11
 8015642:	bd70      	pop	{r4, r5, r6, pc}
 8015644:	0000      	movs	r0, r0
	...

08015648 <rcl_wait>:
 8015648:	2800      	cmp	r0, #0
 801564a:	f000 81d4 	beq.w	80159f6 <rcl_wait+0x3ae>
 801564e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015652:	ed2d 8b02 	vpush	{d8}
 8015656:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8015658:	b099      	sub	sp, #100	@ 0x64
 801565a:	4604      	mov	r4, r0
 801565c:	2d00      	cmp	r5, #0
 801565e:	f000 8178 	beq.w	8015952 <rcl_wait+0x30a>
 8015662:	461f      	mov	r7, r3
 8015664:	6843      	ldr	r3, [r0, #4]
 8015666:	4690      	mov	r8, r2
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 809b 	beq.w	80157a4 <rcl_wait+0x15c>
 801566e:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8015670:	2e00      	cmp	r6, #0
 8015672:	f000 80b2 	beq.w	80157da <rcl_wait+0x192>
 8015676:	2100      	movs	r1, #0
 8015678:	468c      	mov	ip, r1
 801567a:	460a      	mov	r2, r1
 801567c:	46a6      	mov	lr, r4
 801567e:	f8de 3010 	ldr.w	r3, [lr, #16]
 8015682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015686:	b173      	cbz	r3, 80156a6 <rcl_wait+0x5e>
 8015688:	f8de 300c 	ldr.w	r3, [lr, #12]
 801568c:	6968      	ldr	r0, [r5, #20]
 801568e:	440b      	add	r3, r1
 8015690:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8015694:	b13c      	cbz	r4, 80156a6 <rcl_wait+0x5e>
 8015696:	692b      	ldr	r3, [r5, #16]
 8015698:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 801569c:	3301      	adds	r3, #1
 801569e:	612b      	str	r3, [r5, #16]
 80156a0:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 80156a4:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80156a6:	3101      	adds	r1, #1
 80156a8:	f14c 0c00 	adc.w	ip, ip, #0
 80156ac:	42b1      	cmp	r1, r6
 80156ae:	f17c 0300 	sbcs.w	r3, ip, #0
 80156b2:	d3e4      	bcc.n	801567e <rcl_wait+0x36>
 80156b4:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8015960 <rcl_wait+0x318>
 80156b8:	ea58 0307 	orrs.w	r3, r8, r7
 80156bc:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 80156c0:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 80156c4:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 80156c8:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 80156cc:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 80156d0:	4674      	mov	r4, lr
 80156d2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80156d6:	f000 8094 	beq.w	8015802 <rcl_wait+0x1ba>
 80156da:	2e00      	cmp	r6, #0
 80156dc:	f000 8145 	beq.w	801596a <rcl_wait+0x322>
 80156e0:	2500      	movs	r5, #0
 80156e2:	46bb      	mov	fp, r7
 80156e4:	e02c      	b.n	8015740 <rcl_wait+0xf8>
 80156e6:	6923      	ldr	r3, [r4, #16]
 80156e8:	f853 0009 	ldr.w	r0, [r3, r9]
 80156ec:	a908      	add	r1, sp, #32
 80156ee:	ed8d 8b08 	vstr	d8, [sp, #32]
 80156f2:	f7ff fafb 	bl	8014cec <rcl_timer_get_next_call_time>
 80156f6:	f240 3321 	movw	r3, #801	@ 0x321
 80156fa:	4298      	cmp	r0, r3
 80156fc:	f000 80bb 	beq.w	8015876 <rcl_wait+0x22e>
 8015700:	2800      	cmp	r0, #0
 8015702:	d165      	bne.n	80157d0 <rcl_wait+0x188>
 8015704:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8015708:	7830      	ldrb	r0, [r6, #0]
 801570a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801570c:	ab18      	add	r3, sp, #96	@ 0x60
 801570e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8015712:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8015716:	9205      	str	r2, [sp, #20]
 8015718:	f853 2c20 	ldr.w	r2, [r3, #-32]
 801571c:	4297      	cmp	r7, r2
 801571e:	9a05      	ldr	r2, [sp, #20]
 8015720:	eb71 0202 	sbcs.w	r2, r1, r2
 8015724:	da06      	bge.n	8015734 <rcl_wait+0xec>
 8015726:	e943 7108 	strd	r7, r1, [r3, #-32]
 801572a:	ab18      	add	r3, sp, #96	@ 0x60
 801572c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015730:	f840 6c30 	str.w	r6, [r0, #-48]
 8015734:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015736:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8015738:	3501      	adds	r5, #1
 801573a:	42b5      	cmp	r5, r6
 801573c:	f080 8114 	bcs.w	8015968 <rcl_wait+0x320>
 8015740:	6923      	ldr	r3, [r4, #16]
 8015742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015746:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801574a:	2800      	cmp	r0, #0
 801574c:	d0f4      	beq.n	8015738 <rcl_wait+0xf0>
 801574e:	a907      	add	r1, sp, #28
 8015750:	f7ff f9f8 	bl	8014b44 <rcl_timer_clock>
 8015754:	4603      	mov	r3, r0
 8015756:	2800      	cmp	r0, #0
 8015758:	f040 8141 	bne.w	80159de <rcl_wait+0x396>
 801575c:	9807      	ldr	r0, [sp, #28]
 801575e:	7802      	ldrb	r2, [r0, #0]
 8015760:	2a01      	cmp	r2, #1
 8015762:	d1c0      	bne.n	80156e6 <rcl_wait+0x9e>
 8015764:	f10d 011b 	add.w	r1, sp, #27
 8015768:	f88d 301b 	strb.w	r3, [sp, #27]
 801576c:	f7fe ffba 	bl	80146e4 <rcl_is_enabled_ros_time_override>
 8015770:	4602      	mov	r2, r0
 8015772:	2800      	cmp	r0, #0
 8015774:	f040 8133 	bne.w	80159de <rcl_wait+0x396>
 8015778:	6923      	ldr	r3, [r4, #16]
 801577a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 801577e:	f853 0009 	ldr.w	r0, [r3, r9]
 8015782:	2900      	cmp	r1, #0
 8015784:	d0b0      	beq.n	80156e8 <rcl_wait+0xa0>
 8015786:	ae08      	add	r6, sp, #32
 8015788:	4631      	mov	r1, r6
 801578a:	f88d 2020 	strb.w	r2, [sp, #32]
 801578e:	f7ff fa73 	bl	8014c78 <rcl_timer_is_ready>
 8015792:	2800      	cmp	r0, #0
 8015794:	f040 8123 	bne.w	80159de <rcl_wait+0x396>
 8015798:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d0c9      	beq.n	8015734 <rcl_wait+0xec>
 80157a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157a2:	e02f      	b.n	8015804 <rcl_wait+0x1bc>
 80157a4:	68c3      	ldr	r3, [r0, #12]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f47f af61 	bne.w	801566e <rcl_wait+0x26>
 80157ac:	6943      	ldr	r3, [r0, #20]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f47f af5d 	bne.w	801566e <rcl_wait+0x26>
 80157b4:	69c3      	ldr	r3, [r0, #28]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f47f af59 	bne.w	801566e <rcl_wait+0x26>
 80157bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80157be:	2b00      	cmp	r3, #0
 80157c0:	f47f af55 	bne.w	801566e <rcl_wait+0x26>
 80157c4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	f47f af51 	bne.w	801566e <rcl_wait+0x26>
 80157cc:	f240 3085 	movw	r0, #901	@ 0x385
 80157d0:	b019      	add	sp, #100	@ 0x64
 80157d2:	ecbd 8b02 	vpop	{d8}
 80157d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157da:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80157de:	f04f 32ff 	mov.w	r2, #4294967295
 80157e2:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 80157e6:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80157ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 80157ee:	ea58 0307 	orrs.w	r3, r8, r7
 80157f2:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 80157f6:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 80157fa:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80157fe:	f040 80b4 	bne.w	801596a <rcl_wait+0x322>
 8015802:	ae08      	add	r6, sp, #32
 8015804:	2200      	movs	r2, #0
 8015806:	2300      	movs	r3, #0
 8015808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801580c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015810:	9602      	str	r6, [sp, #8]
 8015812:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8015814:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8015818:	e9cd 3200 	strd	r3, r2, [sp]
 801581c:	f105 0110 	add.w	r1, r5, #16
 8015820:	f105 031c 	add.w	r3, r5, #28
 8015824:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8015828:	1d28      	adds	r0, r5, #4
 801582a:	f002 fb3d 	bl	8017ea8 <rmw_wait>
 801582e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015832:	4680      	mov	r8, r0
 8015834:	b332      	cbz	r2, 8015884 <rcl_wait+0x23c>
 8015836:	2500      	movs	r5, #0
 8015838:	462f      	mov	r7, r5
 801583a:	462e      	mov	r6, r5
 801583c:	e007      	b.n	801584e <rcl_wait+0x206>
 801583e:	6922      	ldr	r2, [r4, #16]
 8015840:	f842 3009 	str.w	r3, [r2, r9]
 8015844:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015848:	3501      	adds	r5, #1
 801584a:	4295      	cmp	r5, r2
 801584c:	d21b      	bcs.n	8015886 <rcl_wait+0x23e>
 801584e:	6920      	ldr	r0, [r4, #16]
 8015850:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015854:	a907      	add	r1, sp, #28
 8015856:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801585a:	2800      	cmp	r0, #0
 801585c:	d0f4      	beq.n	8015848 <rcl_wait+0x200>
 801585e:	f88d 601c 	strb.w	r6, [sp, #28]
 8015862:	f7ff fa09 	bl	8014c78 <rcl_timer_is_ready>
 8015866:	2800      	cmp	r0, #0
 8015868:	d1b2      	bne.n	80157d0 <rcl_wait+0x188>
 801586a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d0e5      	beq.n	801583e <rcl_wait+0x1f6>
 8015872:	461f      	mov	r7, r3
 8015874:	e7e6      	b.n	8015844 <rcl_wait+0x1fc>
 8015876:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015878:	6923      	ldr	r3, [r4, #16]
 801587a:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 801587c:	2200      	movs	r2, #0
 801587e:	f843 2009 	str.w	r2, [r3, r9]
 8015882:	e759      	b.n	8015738 <rcl_wait+0xf0>
 8015884:	4617      	mov	r7, r2
 8015886:	f038 0002 	bics.w	r0, r8, #2
 801588a:	f040 80a8 	bne.w	80159de <rcl_wait+0x396>
 801588e:	6866      	ldr	r6, [r4, #4]
 8015890:	4602      	mov	r2, r0
 8015892:	b91e      	cbnz	r6, 801589c <rcl_wait+0x254>
 8015894:	e00d      	b.n	80158b2 <rcl_wait+0x26a>
 8015896:	3201      	adds	r2, #1
 8015898:	4296      	cmp	r6, r2
 801589a:	d00a      	beq.n	80158b2 <rcl_wait+0x26a>
 801589c:	6899      	ldr	r1, [r3, #8]
 801589e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80158a2:	2900      	cmp	r1, #0
 80158a4:	d1f7      	bne.n	8015896 <rcl_wait+0x24e>
 80158a6:	6825      	ldr	r5, [r4, #0]
 80158a8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80158ac:	3201      	adds	r2, #1
 80158ae:	4296      	cmp	r6, r2
 80158b0:	d1f4      	bne.n	801589c <rcl_wait+0x254>
 80158b2:	68e6      	ldr	r6, [r4, #12]
 80158b4:	2200      	movs	r2, #0
 80158b6:	b91e      	cbnz	r6, 80158c0 <rcl_wait+0x278>
 80158b8:	e00d      	b.n	80158d6 <rcl_wait+0x28e>
 80158ba:	3201      	adds	r2, #1
 80158bc:	42b2      	cmp	r2, r6
 80158be:	d00a      	beq.n	80158d6 <rcl_wait+0x28e>
 80158c0:	6959      	ldr	r1, [r3, #20]
 80158c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80158c6:	2900      	cmp	r1, #0
 80158c8:	d1f7      	bne.n	80158ba <rcl_wait+0x272>
 80158ca:	68a5      	ldr	r5, [r4, #8]
 80158cc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80158d0:	3201      	adds	r2, #1
 80158d2:	42b2      	cmp	r2, r6
 80158d4:	d1f4      	bne.n	80158c0 <rcl_wait+0x278>
 80158d6:	69e6      	ldr	r6, [r4, #28]
 80158d8:	2200      	movs	r2, #0
 80158da:	b91e      	cbnz	r6, 80158e4 <rcl_wait+0x29c>
 80158dc:	e00d      	b.n	80158fa <rcl_wait+0x2b2>
 80158de:	3201      	adds	r2, #1
 80158e0:	4296      	cmp	r6, r2
 80158e2:	d00a      	beq.n	80158fa <rcl_wait+0x2b2>
 80158e4:	6a19      	ldr	r1, [r3, #32]
 80158e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80158ea:	2900      	cmp	r1, #0
 80158ec:	d1f7      	bne.n	80158de <rcl_wait+0x296>
 80158ee:	69a5      	ldr	r5, [r4, #24]
 80158f0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80158f4:	3201      	adds	r2, #1
 80158f6:	4296      	cmp	r6, r2
 80158f8:	d1f4      	bne.n	80158e4 <rcl_wait+0x29c>
 80158fa:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80158fc:	2200      	movs	r2, #0
 80158fe:	b91e      	cbnz	r6, 8015908 <rcl_wait+0x2c0>
 8015900:	e00d      	b.n	801591e <rcl_wait+0x2d6>
 8015902:	3201      	adds	r2, #1
 8015904:	42b2      	cmp	r2, r6
 8015906:	d00a      	beq.n	801591e <rcl_wait+0x2d6>
 8015908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801590a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801590e:	2900      	cmp	r1, #0
 8015910:	d1f7      	bne.n	8015902 <rcl_wait+0x2ba>
 8015912:	6a25      	ldr	r5, [r4, #32]
 8015914:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015918:	3201      	adds	r2, #1
 801591a:	42b2      	cmp	r2, r6
 801591c:	d1f4      	bne.n	8015908 <rcl_wait+0x2c0>
 801591e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015920:	2200      	movs	r2, #0
 8015922:	b91e      	cbnz	r6, 801592c <rcl_wait+0x2e4>
 8015924:	e00d      	b.n	8015942 <rcl_wait+0x2fa>
 8015926:	3201      	adds	r2, #1
 8015928:	42b2      	cmp	r2, r6
 801592a:	d00a      	beq.n	8015942 <rcl_wait+0x2fa>
 801592c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801592e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015932:	2900      	cmp	r1, #0
 8015934:	d1f7      	bne.n	8015926 <rcl_wait+0x2de>
 8015936:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8015938:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801593c:	3201      	adds	r2, #1
 801593e:	42b2      	cmp	r2, r6
 8015940:	d1f4      	bne.n	801592c <rcl_wait+0x2e4>
 8015942:	f1b8 0f02 	cmp.w	r8, #2
 8015946:	f47f af43 	bne.w	80157d0 <rcl_wait+0x188>
 801594a:	f087 0701 	eor.w	r7, r7, #1
 801594e:	0078      	lsls	r0, r7, #1
 8015950:	e73e      	b.n	80157d0 <rcl_wait+0x188>
 8015952:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015956:	b019      	add	sp, #100	@ 0x64
 8015958:	ecbd 8b02 	vpop	{d8}
 801595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015960:	ffffffff 	.word	0xffffffff
 8015964:	7fffffff 	.word	0x7fffffff
 8015968:	465f      	mov	r7, fp
 801596a:	f1b8 0f01 	cmp.w	r8, #1
 801596e:	f177 0300 	sbcs.w	r3, r7, #0
 8015972:	db3a      	blt.n	80159ea <rcl_wait+0x3a2>
 8015974:	2601      	movs	r6, #1
 8015976:	ad10      	add	r5, sp, #64	@ 0x40
 8015978:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 801597c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8015980:	a908      	add	r1, sp, #32
 8015982:	b1a0      	cbz	r0, 80159ae <rcl_wait+0x366>
 8015984:	f7fe fea2 	bl	80146cc <rcl_clock_get_now>
 8015988:	2800      	cmp	r0, #0
 801598a:	f47f af21 	bne.w	80157d0 <rcl_wait+0x188>
 801598e:	9a08      	ldr	r2, [sp, #32]
 8015990:	68ab      	ldr	r3, [r5, #8]
 8015992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015994:	1a9b      	subs	r3, r3, r2
 8015996:	68ea      	ldr	r2, [r5, #12]
 8015998:	eb62 0201 	sbc.w	r2, r2, r1
 801599c:	4598      	cmp	r8, r3
 801599e:	eb77 0102 	sbcs.w	r1, r7, r2
 80159a2:	bfba      	itte	lt
 80159a4:	4643      	movlt	r3, r8
 80159a6:	463a      	movlt	r2, r7
 80159a8:	2601      	movge	r6, #1
 80159aa:	4698      	mov	r8, r3
 80159ac:	4617      	mov	r7, r2
 80159ae:	3508      	adds	r5, #8
 80159b0:	45a9      	cmp	r9, r5
 80159b2:	d1e3      	bne.n	801597c <rcl_wait+0x334>
 80159b4:	2f00      	cmp	r7, #0
 80159b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80159b8:	bfab      	itete	ge
 80159ba:	4640      	movge	r0, r8
 80159bc:	2000      	movlt	r0, #0
 80159be:	4639      	movge	r1, r7
 80159c0:	2100      	movlt	r1, #0
 80159c2:	2e00      	cmp	r6, #0
 80159c4:	f43f af24 	beq.w	8015810 <rcl_wait+0x1c8>
 80159c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8015a00 <rcl_wait+0x3b8>)
 80159ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ce:	f7eb f96b 	bl	8000ca8 <__aeabi_ldivmod>
 80159d2:	ae08      	add	r6, sp, #32
 80159d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80159d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80159dc:	e718      	b.n	8015810 <rcl_wait+0x1c8>
 80159de:	2001      	movs	r0, #1
 80159e0:	b019      	add	sp, #100	@ 0x64
 80159e2:	ecbd 8b02 	vpop	{d8}
 80159e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ea:	2600      	movs	r6, #0
 80159ec:	f04f 38ff 	mov.w	r8, #4294967295
 80159f0:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80159f4:	e7bf      	b.n	8015976 <rcl_wait+0x32e>
 80159f6:	200b      	movs	r0, #11
 80159f8:	4770      	bx	lr
 80159fa:	bf00      	nop
 80159fc:	f3af 8000 	nop.w
 8015a00:	3b9aca00 	.word	0x3b9aca00
 8015a04:	00000000 	.word	0x00000000

08015a08 <rcl_action_take_goal_response>:
 8015a08:	b3b0      	cbz	r0, 8015a78 <rcl_action_take_goal_response+0x70>
 8015a0a:	b570      	push	{r4, r5, r6, lr}
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	6800      	ldr	r0, [r0, #0]
 8015a10:	b368      	cbz	r0, 8015a6e <rcl_action_take_goal_response+0x66>
 8015a12:	460d      	mov	r5, r1
 8015a14:	4616      	mov	r6, r2
 8015a16:	f7fd fe7b 	bl	8013710 <rcl_client_is_valid>
 8015a1a:	b330      	cbz	r0, 8015a6a <rcl_action_take_goal_response+0x62>
 8015a1c:	6820      	ldr	r0, [r4, #0]
 8015a1e:	3004      	adds	r0, #4
 8015a20:	f7fd fe76 	bl	8013710 <rcl_client_is_valid>
 8015a24:	b308      	cbz	r0, 8015a6a <rcl_action_take_goal_response+0x62>
 8015a26:	6820      	ldr	r0, [r4, #0]
 8015a28:	3008      	adds	r0, #8
 8015a2a:	f7fd fe71 	bl	8013710 <rcl_client_is_valid>
 8015a2e:	b1e0      	cbz	r0, 8015a6a <rcl_action_take_goal_response+0x62>
 8015a30:	6820      	ldr	r0, [r4, #0]
 8015a32:	300c      	adds	r0, #12
 8015a34:	f7fe fdae 	bl	8014594 <rcl_subscription_is_valid>
 8015a38:	b1b8      	cbz	r0, 8015a6a <rcl_action_take_goal_response+0x62>
 8015a3a:	6820      	ldr	r0, [r4, #0]
 8015a3c:	3010      	adds	r0, #16
 8015a3e:	f7fe fda9 	bl	8014594 <rcl_subscription_is_valid>
 8015a42:	b190      	cbz	r0, 8015a6a <rcl_action_take_goal_response+0x62>
 8015a44:	b1b5      	cbz	r5, 8015a74 <rcl_action_take_goal_response+0x6c>
 8015a46:	b1ae      	cbz	r6, 8015a74 <rcl_action_take_goal_response+0x6c>
 8015a48:	6820      	ldr	r0, [r4, #0]
 8015a4a:	4632      	mov	r2, r6
 8015a4c:	4629      	mov	r1, r5
 8015a4e:	f7fd fdf3 	bl	8013638 <rcl_take_response>
 8015a52:	b148      	cbz	r0, 8015a68 <rcl_action_take_goal_response+0x60>
 8015a54:	280a      	cmp	r0, #10
 8015a56:	d007      	beq.n	8015a68 <rcl_action_take_goal_response+0x60>
 8015a58:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015a5c:	f241 0307 	movw	r3, #4103	@ 0x1007
 8015a60:	4290      	cmp	r0, r2
 8015a62:	bf0c      	ite	eq
 8015a64:	4618      	moveq	r0, r3
 8015a66:	2001      	movne	r0, #1
 8015a68:	bd70      	pop	{r4, r5, r6, pc}
 8015a6a:	f7f8 f821 	bl	800dab0 <rcutils_reset_error>
 8015a6e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015a72:	bd70      	pop	{r4, r5, r6, pc}
 8015a74:	200b      	movs	r0, #11
 8015a76:	bd70      	pop	{r4, r5, r6, pc}
 8015a78:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop

08015a80 <rcl_action_send_result_request>:
 8015a80:	b378      	cbz	r0, 8015ae2 <rcl_action_send_result_request+0x62>
 8015a82:	b570      	push	{r4, r5, r6, lr}
 8015a84:	4604      	mov	r4, r0
 8015a86:	6800      	ldr	r0, [r0, #0]
 8015a88:	b330      	cbz	r0, 8015ad8 <rcl_action_send_result_request+0x58>
 8015a8a:	460d      	mov	r5, r1
 8015a8c:	4616      	mov	r6, r2
 8015a8e:	f7fd fe3f 	bl	8013710 <rcl_client_is_valid>
 8015a92:	b1f8      	cbz	r0, 8015ad4 <rcl_action_send_result_request+0x54>
 8015a94:	6820      	ldr	r0, [r4, #0]
 8015a96:	3004      	adds	r0, #4
 8015a98:	f7fd fe3a 	bl	8013710 <rcl_client_is_valid>
 8015a9c:	b1d0      	cbz	r0, 8015ad4 <rcl_action_send_result_request+0x54>
 8015a9e:	6820      	ldr	r0, [r4, #0]
 8015aa0:	3008      	adds	r0, #8
 8015aa2:	f7fd fe35 	bl	8013710 <rcl_client_is_valid>
 8015aa6:	b1a8      	cbz	r0, 8015ad4 <rcl_action_send_result_request+0x54>
 8015aa8:	6820      	ldr	r0, [r4, #0]
 8015aaa:	300c      	adds	r0, #12
 8015aac:	f7fe fd72 	bl	8014594 <rcl_subscription_is_valid>
 8015ab0:	b180      	cbz	r0, 8015ad4 <rcl_action_send_result_request+0x54>
 8015ab2:	6820      	ldr	r0, [r4, #0]
 8015ab4:	3010      	adds	r0, #16
 8015ab6:	f7fe fd6d 	bl	8014594 <rcl_subscription_is_valid>
 8015aba:	b158      	cbz	r0, 8015ad4 <rcl_action_send_result_request+0x54>
 8015abc:	b17d      	cbz	r5, 8015ade <rcl_action_send_result_request+0x5e>
 8015abe:	b176      	cbz	r6, 8015ade <rcl_action_send_result_request+0x5e>
 8015ac0:	6820      	ldr	r0, [r4, #0]
 8015ac2:	4632      	mov	r2, r6
 8015ac4:	4629      	mov	r1, r5
 8015ac6:	3008      	adds	r0, #8
 8015ac8:	f7fd fd64 	bl	8013594 <rcl_send_request>
 8015acc:	3800      	subs	r0, #0
 8015ace:	bf18      	it	ne
 8015ad0:	2001      	movne	r0, #1
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	f7f7 ffec 	bl	800dab0 <rcutils_reset_error>
 8015ad8:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015adc:	bd70      	pop	{r4, r5, r6, pc}
 8015ade:	200b      	movs	r0, #11
 8015ae0:	bd70      	pop	{r4, r5, r6, pc}
 8015ae2:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015ae6:	4770      	bx	lr

08015ae8 <rcl_action_take_result_response>:
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d037      	beq.n	8015b5c <rcl_action_take_result_response+0x74>
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	4604      	mov	r4, r0
 8015af0:	6800      	ldr	r0, [r0, #0]
 8015af2:	b370      	cbz	r0, 8015b52 <rcl_action_take_result_response+0x6a>
 8015af4:	460d      	mov	r5, r1
 8015af6:	4616      	mov	r6, r2
 8015af8:	f7fd fe0a 	bl	8013710 <rcl_client_is_valid>
 8015afc:	b338      	cbz	r0, 8015b4e <rcl_action_take_result_response+0x66>
 8015afe:	6820      	ldr	r0, [r4, #0]
 8015b00:	3004      	adds	r0, #4
 8015b02:	f7fd fe05 	bl	8013710 <rcl_client_is_valid>
 8015b06:	b310      	cbz	r0, 8015b4e <rcl_action_take_result_response+0x66>
 8015b08:	6820      	ldr	r0, [r4, #0]
 8015b0a:	3008      	adds	r0, #8
 8015b0c:	f7fd fe00 	bl	8013710 <rcl_client_is_valid>
 8015b10:	b1e8      	cbz	r0, 8015b4e <rcl_action_take_result_response+0x66>
 8015b12:	6820      	ldr	r0, [r4, #0]
 8015b14:	300c      	adds	r0, #12
 8015b16:	f7fe fd3d 	bl	8014594 <rcl_subscription_is_valid>
 8015b1a:	b1c0      	cbz	r0, 8015b4e <rcl_action_take_result_response+0x66>
 8015b1c:	6820      	ldr	r0, [r4, #0]
 8015b1e:	3010      	adds	r0, #16
 8015b20:	f7fe fd38 	bl	8014594 <rcl_subscription_is_valid>
 8015b24:	b198      	cbz	r0, 8015b4e <rcl_action_take_result_response+0x66>
 8015b26:	b1bd      	cbz	r5, 8015b58 <rcl_action_take_result_response+0x70>
 8015b28:	b1b6      	cbz	r6, 8015b58 <rcl_action_take_result_response+0x70>
 8015b2a:	6820      	ldr	r0, [r4, #0]
 8015b2c:	4632      	mov	r2, r6
 8015b2e:	4629      	mov	r1, r5
 8015b30:	3008      	adds	r0, #8
 8015b32:	f7fd fd81 	bl	8013638 <rcl_take_response>
 8015b36:	b148      	cbz	r0, 8015b4c <rcl_action_take_result_response+0x64>
 8015b38:	280a      	cmp	r0, #10
 8015b3a:	d007      	beq.n	8015b4c <rcl_action_take_result_response+0x64>
 8015b3c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015b40:	f241 0307 	movw	r3, #4103	@ 0x1007
 8015b44:	4290      	cmp	r0, r2
 8015b46:	bf0c      	ite	eq
 8015b48:	4618      	moveq	r0, r3
 8015b4a:	2001      	movne	r0, #1
 8015b4c:	bd70      	pop	{r4, r5, r6, pc}
 8015b4e:	f7f7 ffaf 	bl	800dab0 <rcutils_reset_error>
 8015b52:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015b56:	bd70      	pop	{r4, r5, r6, pc}
 8015b58:	200b      	movs	r0, #11
 8015b5a:	bd70      	pop	{r4, r5, r6, pc}
 8015b5c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015b60:	4770      	bx	lr
 8015b62:	bf00      	nop

08015b64 <rcl_action_take_cancel_response>:
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d037      	beq.n	8015bd8 <rcl_action_take_cancel_response+0x74>
 8015b68:	b570      	push	{r4, r5, r6, lr}
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	6800      	ldr	r0, [r0, #0]
 8015b6e:	b370      	cbz	r0, 8015bce <rcl_action_take_cancel_response+0x6a>
 8015b70:	460d      	mov	r5, r1
 8015b72:	4616      	mov	r6, r2
 8015b74:	f7fd fdcc 	bl	8013710 <rcl_client_is_valid>
 8015b78:	b338      	cbz	r0, 8015bca <rcl_action_take_cancel_response+0x66>
 8015b7a:	6820      	ldr	r0, [r4, #0]
 8015b7c:	3004      	adds	r0, #4
 8015b7e:	f7fd fdc7 	bl	8013710 <rcl_client_is_valid>
 8015b82:	b310      	cbz	r0, 8015bca <rcl_action_take_cancel_response+0x66>
 8015b84:	6820      	ldr	r0, [r4, #0]
 8015b86:	3008      	adds	r0, #8
 8015b88:	f7fd fdc2 	bl	8013710 <rcl_client_is_valid>
 8015b8c:	b1e8      	cbz	r0, 8015bca <rcl_action_take_cancel_response+0x66>
 8015b8e:	6820      	ldr	r0, [r4, #0]
 8015b90:	300c      	adds	r0, #12
 8015b92:	f7fe fcff 	bl	8014594 <rcl_subscription_is_valid>
 8015b96:	b1c0      	cbz	r0, 8015bca <rcl_action_take_cancel_response+0x66>
 8015b98:	6820      	ldr	r0, [r4, #0]
 8015b9a:	3010      	adds	r0, #16
 8015b9c:	f7fe fcfa 	bl	8014594 <rcl_subscription_is_valid>
 8015ba0:	b198      	cbz	r0, 8015bca <rcl_action_take_cancel_response+0x66>
 8015ba2:	b1bd      	cbz	r5, 8015bd4 <rcl_action_take_cancel_response+0x70>
 8015ba4:	b1b6      	cbz	r6, 8015bd4 <rcl_action_take_cancel_response+0x70>
 8015ba6:	6820      	ldr	r0, [r4, #0]
 8015ba8:	4632      	mov	r2, r6
 8015baa:	4629      	mov	r1, r5
 8015bac:	3004      	adds	r0, #4
 8015bae:	f7fd fd43 	bl	8013638 <rcl_take_response>
 8015bb2:	b148      	cbz	r0, 8015bc8 <rcl_action_take_cancel_response+0x64>
 8015bb4:	280a      	cmp	r0, #10
 8015bb6:	d007      	beq.n	8015bc8 <rcl_action_take_cancel_response+0x64>
 8015bb8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015bbc:	f241 0307 	movw	r3, #4103	@ 0x1007
 8015bc0:	4290      	cmp	r0, r2
 8015bc2:	bf0c      	ite	eq
 8015bc4:	4618      	moveq	r0, r3
 8015bc6:	2001      	movne	r0, #1
 8015bc8:	bd70      	pop	{r4, r5, r6, pc}
 8015bca:	f7f7 ff71 	bl	800dab0 <rcutils_reset_error>
 8015bce:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015bd2:	bd70      	pop	{r4, r5, r6, pc}
 8015bd4:	200b      	movs	r0, #11
 8015bd6:	bd70      	pop	{r4, r5, r6, pc}
 8015bd8:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015bdc:	4770      	bx	lr
 8015bde:	bf00      	nop

08015be0 <rcl_action_take_feedback>:
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d037      	beq.n	8015c54 <rcl_action_take_feedback+0x74>
 8015be4:	b530      	push	{r4, r5, lr}
 8015be6:	4604      	mov	r4, r0
 8015be8:	6800      	ldr	r0, [r0, #0]
 8015bea:	b08f      	sub	sp, #60	@ 0x3c
 8015bec:	b358      	cbz	r0, 8015c46 <rcl_action_take_feedback+0x66>
 8015bee:	460d      	mov	r5, r1
 8015bf0:	f7fd fd8e 	bl	8013710 <rcl_client_is_valid>
 8015bf4:	b328      	cbz	r0, 8015c42 <rcl_action_take_feedback+0x62>
 8015bf6:	6820      	ldr	r0, [r4, #0]
 8015bf8:	3004      	adds	r0, #4
 8015bfa:	f7fd fd89 	bl	8013710 <rcl_client_is_valid>
 8015bfe:	b300      	cbz	r0, 8015c42 <rcl_action_take_feedback+0x62>
 8015c00:	6820      	ldr	r0, [r4, #0]
 8015c02:	3008      	adds	r0, #8
 8015c04:	f7fd fd84 	bl	8013710 <rcl_client_is_valid>
 8015c08:	b1d8      	cbz	r0, 8015c42 <rcl_action_take_feedback+0x62>
 8015c0a:	6820      	ldr	r0, [r4, #0]
 8015c0c:	300c      	adds	r0, #12
 8015c0e:	f7fe fcc1 	bl	8014594 <rcl_subscription_is_valid>
 8015c12:	b1b0      	cbz	r0, 8015c42 <rcl_action_take_feedback+0x62>
 8015c14:	6820      	ldr	r0, [r4, #0]
 8015c16:	3010      	adds	r0, #16
 8015c18:	f7fe fcbc 	bl	8014594 <rcl_subscription_is_valid>
 8015c1c:	b188      	cbz	r0, 8015c42 <rcl_action_take_feedback+0x62>
 8015c1e:	b1b5      	cbz	r5, 8015c4e <rcl_action_take_feedback+0x6e>
 8015c20:	6820      	ldr	r0, [r4, #0]
 8015c22:	2300      	movs	r3, #0
 8015c24:	466a      	mov	r2, sp
 8015c26:	4629      	mov	r1, r5
 8015c28:	300c      	adds	r0, #12
 8015c2a:	f7fe fc55 	bl	80144d8 <rcl_take>
 8015c2e:	b160      	cbz	r0, 8015c4a <rcl_action_take_feedback+0x6a>
 8015c30:	f240 1391 	movw	r3, #401	@ 0x191
 8015c34:	4298      	cmp	r0, r3
 8015c36:	d010      	beq.n	8015c5a <rcl_action_take_feedback+0x7a>
 8015c38:	280a      	cmp	r0, #10
 8015c3a:	bf18      	it	ne
 8015c3c:	2001      	movne	r0, #1
 8015c3e:	b00f      	add	sp, #60	@ 0x3c
 8015c40:	bd30      	pop	{r4, r5, pc}
 8015c42:	f7f7 ff35 	bl	800dab0 <rcutils_reset_error>
 8015c46:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015c4a:	b00f      	add	sp, #60	@ 0x3c
 8015c4c:	bd30      	pop	{r4, r5, pc}
 8015c4e:	200b      	movs	r0, #11
 8015c50:	b00f      	add	sp, #60	@ 0x3c
 8015c52:	bd30      	pop	{r4, r5, pc}
 8015c54:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015c58:	4770      	bx	lr
 8015c5a:	f241 0007 	movw	r0, #4103	@ 0x1007
 8015c5e:	e7f4      	b.n	8015c4a <rcl_action_take_feedback+0x6a>

08015c60 <rcl_action_wait_set_add_action_client>:
 8015c60:	2800      	cmp	r0, #0
 8015c62:	d045      	beq.n	8015cf0 <rcl_action_wait_set_add_action_client+0x90>
 8015c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c66:	460c      	mov	r4, r1
 8015c68:	2900      	cmp	r1, #0
 8015c6a:	d03e      	beq.n	8015cea <rcl_action_wait_set_add_action_client+0x8a>
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	6808      	ldr	r0, [r1, #0]
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d03a      	beq.n	8015cea <rcl_action_wait_set_add_action_client+0x8a>
 8015c74:	4617      	mov	r7, r2
 8015c76:	461e      	mov	r6, r3
 8015c78:	f7fd fd4a 	bl	8013710 <rcl_client_is_valid>
 8015c7c:	b398      	cbz	r0, 8015ce6 <rcl_action_wait_set_add_action_client+0x86>
 8015c7e:	6820      	ldr	r0, [r4, #0]
 8015c80:	3004      	adds	r0, #4
 8015c82:	f7fd fd45 	bl	8013710 <rcl_client_is_valid>
 8015c86:	b370      	cbz	r0, 8015ce6 <rcl_action_wait_set_add_action_client+0x86>
 8015c88:	6820      	ldr	r0, [r4, #0]
 8015c8a:	3008      	adds	r0, #8
 8015c8c:	f7fd fd40 	bl	8013710 <rcl_client_is_valid>
 8015c90:	b348      	cbz	r0, 8015ce6 <rcl_action_wait_set_add_action_client+0x86>
 8015c92:	6820      	ldr	r0, [r4, #0]
 8015c94:	300c      	adds	r0, #12
 8015c96:	f7fe fc7d 	bl	8014594 <rcl_subscription_is_valid>
 8015c9a:	b320      	cbz	r0, 8015ce6 <rcl_action_wait_set_add_action_client+0x86>
 8015c9c:	6820      	ldr	r0, [r4, #0]
 8015c9e:	3010      	adds	r0, #16
 8015ca0:	f7fe fc78 	bl	8014594 <rcl_subscription_is_valid>
 8015ca4:	b1f8      	cbz	r0, 8015ce6 <rcl_action_wait_set_add_action_client+0x86>
 8015ca6:	6821      	ldr	r1, [r4, #0]
 8015ca8:	4628      	mov	r0, r5
 8015caa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015cae:	f7ff fc71 	bl	8015594 <rcl_wait_set_add_client>
 8015cb2:	b9b8      	cbnz	r0, 8015ce4 <rcl_action_wait_set_add_action_client+0x84>
 8015cb4:	6821      	ldr	r1, [r4, #0]
 8015cb6:	4628      	mov	r0, r5
 8015cb8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015cbc:	3104      	adds	r1, #4
 8015cbe:	f7ff fc69 	bl	8015594 <rcl_wait_set_add_client>
 8015cc2:	b978      	cbnz	r0, 8015ce4 <rcl_action_wait_set_add_action_client+0x84>
 8015cc4:	6821      	ldr	r1, [r4, #0]
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015ccc:	3108      	adds	r1, #8
 8015cce:	f7ff fc61 	bl	8015594 <rcl_wait_set_add_client>
 8015cd2:	b938      	cbnz	r0, 8015ce4 <rcl_action_wait_set_add_action_client+0x84>
 8015cd4:	6821      	ldr	r1, [r4, #0]
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015cdc:	310c      	adds	r1, #12
 8015cde:	f7ff f903 	bl	8014ee8 <rcl_wait_set_add_subscription>
 8015ce2:	b140      	cbz	r0, 8015cf6 <rcl_action_wait_set_add_action_client+0x96>
 8015ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ce6:	f7f7 fee3 	bl	800dab0 <rcutils_reset_error>
 8015cea:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cf0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015cf4:	4770      	bx	lr
 8015cf6:	6821      	ldr	r1, [r4, #0]
 8015cf8:	4628      	mov	r0, r5
 8015cfa:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015cfe:	3110      	adds	r1, #16
 8015d00:	f7ff f8f2 	bl	8014ee8 <rcl_wait_set_add_subscription>
 8015d04:	2800      	cmp	r0, #0
 8015d06:	d1ed      	bne.n	8015ce4 <rcl_action_wait_set_add_action_client+0x84>
 8015d08:	b11f      	cbz	r7, 8015d12 <rcl_action_wait_set_add_action_client+0xb2>
 8015d0a:	6823      	ldr	r3, [r4, #0]
 8015d0c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015d10:	603b      	str	r3, [r7, #0]
 8015d12:	2e00      	cmp	r6, #0
 8015d14:	d0e6      	beq.n	8015ce4 <rcl_action_wait_set_add_action_client+0x84>
 8015d16:	6823      	ldr	r3, [r4, #0]
 8015d18:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015d1c:	6033      	str	r3, [r6, #0]
 8015d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d20 <rcl_action_client_wait_set_get_entities_ready>:
 8015d20:	2800      	cmp	r0, #0
 8015d22:	f000 8089 	beq.w	8015e38 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8015d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d2a:	460c      	mov	r4, r1
 8015d2c:	2900      	cmp	r1, #0
 8015d2e:	d079      	beq.n	8015e24 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015d30:	4605      	mov	r5, r0
 8015d32:	6808      	ldr	r0, [r1, #0]
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d075      	beq.n	8015e24 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015d38:	4616      	mov	r6, r2
 8015d3a:	461f      	mov	r7, r3
 8015d3c:	f7fd fce8 	bl	8013710 <rcl_client_is_valid>
 8015d40:	2800      	cmp	r0, #0
 8015d42:	d06d      	beq.n	8015e20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015d44:	6820      	ldr	r0, [r4, #0]
 8015d46:	3004      	adds	r0, #4
 8015d48:	f7fd fce2 	bl	8013710 <rcl_client_is_valid>
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	d067      	beq.n	8015e20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015d50:	6820      	ldr	r0, [r4, #0]
 8015d52:	3008      	adds	r0, #8
 8015d54:	f7fd fcdc 	bl	8013710 <rcl_client_is_valid>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d061      	beq.n	8015e20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015d5c:	6820      	ldr	r0, [r4, #0]
 8015d5e:	300c      	adds	r0, #12
 8015d60:	f7fe fc18 	bl	8014594 <rcl_subscription_is_valid>
 8015d64:	2800      	cmp	r0, #0
 8015d66:	d05b      	beq.n	8015e20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015d68:	6820      	ldr	r0, [r4, #0]
 8015d6a:	3010      	adds	r0, #16
 8015d6c:	f7fe fc12 	bl	8014594 <rcl_subscription_is_valid>
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d055      	beq.n	8015e20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015d74:	2e00      	cmp	r6, #0
 8015d76:	d05c      	beq.n	8015e32 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8015d78:	2f00      	cmp	r7, #0
 8015d7a:	d05a      	beq.n	8015e32 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8015d7c:	9b06      	ldr	r3, [sp, #24]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d057      	beq.n	8015e32 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8015d82:	9b07      	ldr	r3, [sp, #28]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d054      	beq.n	8015e32 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8015d88:	9b08      	ldr	r3, [sp, #32]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d051      	beq.n	8015e32 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8015d8e:	6823      	ldr	r3, [r4, #0]
 8015d90:	686a      	ldr	r2, [r5, #4]
 8015d92:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015d96:	428a      	cmp	r2, r1
 8015d98:	d948      	bls.n	8015e2c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8015d9a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015d9e:	4282      	cmp	r2, r0
 8015da0:	d944      	bls.n	8015e2c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8015da2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015da6:	69ea      	ldr	r2, [r5, #28]
 8015da8:	42a2      	cmp	r2, r4
 8015daa:	d93f      	bls.n	8015e2c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8015dac:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015db0:	4562      	cmp	r2, ip
 8015db2:	d93b      	bls.n	8015e2c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8015db4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015db8:	4572      	cmp	r2, lr
 8015dba:	d937      	bls.n	8015e2c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8015dbc:	69aa      	ldr	r2, [r5, #24]
 8015dbe:	682d      	ldr	r5, [r5, #0]
 8015dc0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015dc4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015dc8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015dcc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015dd0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015dd4:	f103 0c0c 	add.w	ip, r3, #12
 8015dd8:	eba5 050c 	sub.w	r5, r5, ip
 8015ddc:	fab5 f585 	clz	r5, r5
 8015de0:	096d      	lsrs	r5, r5, #5
 8015de2:	7035      	strb	r5, [r6, #0]
 8015de4:	f103 0510 	add.w	r5, r3, #16
 8015de8:	1b64      	subs	r4, r4, r5
 8015dea:	fab4 f484 	clz	r4, r4
 8015dee:	0964      	lsrs	r4, r4, #5
 8015df0:	703c      	strb	r4, [r7, #0]
 8015df2:	eba3 0008 	sub.w	r0, r3, r8
 8015df6:	1d1c      	adds	r4, r3, #4
 8015df8:	3308      	adds	r3, #8
 8015dfa:	1ad3      	subs	r3, r2, r3
 8015dfc:	fab0 f080 	clz	r0, r0
 8015e00:	9a06      	ldr	r2, [sp, #24]
 8015e02:	0940      	lsrs	r0, r0, #5
 8015e04:	1b09      	subs	r1, r1, r4
 8015e06:	7010      	strb	r0, [r2, #0]
 8015e08:	fab1 f181 	clz	r1, r1
 8015e0c:	9a07      	ldr	r2, [sp, #28]
 8015e0e:	0949      	lsrs	r1, r1, #5
 8015e10:	7011      	strb	r1, [r2, #0]
 8015e12:	fab3 f383 	clz	r3, r3
 8015e16:	9a08      	ldr	r2, [sp, #32]
 8015e18:	095b      	lsrs	r3, r3, #5
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	7013      	strb	r3, [r2, #0]
 8015e1e:	e003      	b.n	8015e28 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015e20:	f7f7 fe46 	bl	800dab0 <rcutils_reset_error>
 8015e24:	f241 0006 	movw	r0, #4102	@ 0x1006
 8015e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e2c:	2001      	movs	r0, #1
 8015e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e32:	200b      	movs	r0, #11
 8015e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e38:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e3c:	4770      	bx	lr
 8015e3e:	bf00      	nop

08015e40 <rcl_action_take_goal_request>:
 8015e40:	b3b0      	cbz	r0, 8015eb0 <rcl_action_take_goal_request+0x70>
 8015e42:	b570      	push	{r4, r5, r6, lr}
 8015e44:	4604      	mov	r4, r0
 8015e46:	6800      	ldr	r0, [r0, #0]
 8015e48:	b368      	cbz	r0, 8015ea6 <rcl_action_take_goal_request+0x66>
 8015e4a:	460d      	mov	r5, r1
 8015e4c:	4616      	mov	r6, r2
 8015e4e:	f7fe f9ef 	bl	8014230 <rcl_service_is_valid>
 8015e52:	b330      	cbz	r0, 8015ea2 <rcl_action_take_goal_request+0x62>
 8015e54:	6820      	ldr	r0, [r4, #0]
 8015e56:	3004      	adds	r0, #4
 8015e58:	f7fe f9ea 	bl	8014230 <rcl_service_is_valid>
 8015e5c:	b308      	cbz	r0, 8015ea2 <rcl_action_take_goal_request+0x62>
 8015e5e:	6820      	ldr	r0, [r4, #0]
 8015e60:	3008      	adds	r0, #8
 8015e62:	f7fe f9e5 	bl	8014230 <rcl_service_is_valid>
 8015e66:	b1e0      	cbz	r0, 8015ea2 <rcl_action_take_goal_request+0x62>
 8015e68:	6820      	ldr	r0, [r4, #0]
 8015e6a:	300c      	adds	r0, #12
 8015e6c:	f7f6 fe90 	bl	800cb90 <rcl_publisher_is_valid>
 8015e70:	b1b8      	cbz	r0, 8015ea2 <rcl_action_take_goal_request+0x62>
 8015e72:	6820      	ldr	r0, [r4, #0]
 8015e74:	3010      	adds	r0, #16
 8015e76:	f7f6 fe8b 	bl	800cb90 <rcl_publisher_is_valid>
 8015e7a:	b190      	cbz	r0, 8015ea2 <rcl_action_take_goal_request+0x62>
 8015e7c:	b1b5      	cbz	r5, 8015eac <rcl_action_take_goal_request+0x6c>
 8015e7e:	b1ae      	cbz	r6, 8015eac <rcl_action_take_goal_request+0x6c>
 8015e80:	6820      	ldr	r0, [r4, #0]
 8015e82:	4632      	mov	r2, r6
 8015e84:	4629      	mov	r1, r5
 8015e86:	f7fe f953 	bl	8014130 <rcl_take_request>
 8015e8a:	b148      	cbz	r0, 8015ea0 <rcl_action_take_goal_request+0x60>
 8015e8c:	280a      	cmp	r0, #10
 8015e8e:	d007      	beq.n	8015ea0 <rcl_action_take_goal_request+0x60>
 8015e90:	f240 2259 	movw	r2, #601	@ 0x259
 8015e94:	f241 0369 	movw	r3, #4201	@ 0x1069
 8015e98:	4290      	cmp	r0, r2
 8015e9a:	bf0c      	ite	eq
 8015e9c:	4618      	moveq	r0, r3
 8015e9e:	2001      	movne	r0, #1
 8015ea0:	bd70      	pop	{r4, r5, r6, pc}
 8015ea2:	f7f7 fe05 	bl	800dab0 <rcutils_reset_error>
 8015ea6:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015eaa:	bd70      	pop	{r4, r5, r6, pc}
 8015eac:	200b      	movs	r0, #11
 8015eae:	bd70      	pop	{r4, r5, r6, pc}
 8015eb0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015eb4:	4770      	bx	lr
 8015eb6:	bf00      	nop

08015eb8 <rcl_action_send_goal_response>:
 8015eb8:	b378      	cbz	r0, 8015f1a <rcl_action_send_goal_response+0x62>
 8015eba:	b570      	push	{r4, r5, r6, lr}
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	6800      	ldr	r0, [r0, #0]
 8015ec0:	b330      	cbz	r0, 8015f10 <rcl_action_send_goal_response+0x58>
 8015ec2:	460d      	mov	r5, r1
 8015ec4:	4616      	mov	r6, r2
 8015ec6:	f7fe f9b3 	bl	8014230 <rcl_service_is_valid>
 8015eca:	b1f8      	cbz	r0, 8015f0c <rcl_action_send_goal_response+0x54>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	3004      	adds	r0, #4
 8015ed0:	f7fe f9ae 	bl	8014230 <rcl_service_is_valid>
 8015ed4:	b1d0      	cbz	r0, 8015f0c <rcl_action_send_goal_response+0x54>
 8015ed6:	6820      	ldr	r0, [r4, #0]
 8015ed8:	3008      	adds	r0, #8
 8015eda:	f7fe f9a9 	bl	8014230 <rcl_service_is_valid>
 8015ede:	b1a8      	cbz	r0, 8015f0c <rcl_action_send_goal_response+0x54>
 8015ee0:	6820      	ldr	r0, [r4, #0]
 8015ee2:	300c      	adds	r0, #12
 8015ee4:	f7f6 fe54 	bl	800cb90 <rcl_publisher_is_valid>
 8015ee8:	b180      	cbz	r0, 8015f0c <rcl_action_send_goal_response+0x54>
 8015eea:	6820      	ldr	r0, [r4, #0]
 8015eec:	3010      	adds	r0, #16
 8015eee:	f7f6 fe4f 	bl	800cb90 <rcl_publisher_is_valid>
 8015ef2:	b158      	cbz	r0, 8015f0c <rcl_action_send_goal_response+0x54>
 8015ef4:	b17d      	cbz	r5, 8015f16 <rcl_action_send_goal_response+0x5e>
 8015ef6:	b176      	cbz	r6, 8015f16 <rcl_action_send_goal_response+0x5e>
 8015ef8:	6820      	ldr	r0, [r4, #0]
 8015efa:	4632      	mov	r2, r6
 8015efc:	4629      	mov	r1, r5
 8015efe:	f7fe f967 	bl	80141d0 <rcl_send_response>
 8015f02:	b110      	cbz	r0, 8015f0a <rcl_action_send_goal_response+0x52>
 8015f04:	2802      	cmp	r0, #2
 8015f06:	bf18      	it	ne
 8015f08:	2001      	movne	r0, #1
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	f7f7 fdd0 	bl	800dab0 <rcutils_reset_error>
 8015f10:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015f14:	bd70      	pop	{r4, r5, r6, pc}
 8015f16:	200b      	movs	r0, #11
 8015f18:	bd70      	pop	{r4, r5, r6, pc}
 8015f1a:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015f1e:	4770      	bx	lr

08015f20 <rcl_action_take_result_request>:
 8015f20:	2800      	cmp	r0, #0
 8015f22:	d037      	beq.n	8015f94 <rcl_action_take_result_request+0x74>
 8015f24:	b570      	push	{r4, r5, r6, lr}
 8015f26:	4604      	mov	r4, r0
 8015f28:	6800      	ldr	r0, [r0, #0]
 8015f2a:	b370      	cbz	r0, 8015f8a <rcl_action_take_result_request+0x6a>
 8015f2c:	460d      	mov	r5, r1
 8015f2e:	4616      	mov	r6, r2
 8015f30:	f7fe f97e 	bl	8014230 <rcl_service_is_valid>
 8015f34:	b338      	cbz	r0, 8015f86 <rcl_action_take_result_request+0x66>
 8015f36:	6820      	ldr	r0, [r4, #0]
 8015f38:	3004      	adds	r0, #4
 8015f3a:	f7fe f979 	bl	8014230 <rcl_service_is_valid>
 8015f3e:	b310      	cbz	r0, 8015f86 <rcl_action_take_result_request+0x66>
 8015f40:	6820      	ldr	r0, [r4, #0]
 8015f42:	3008      	adds	r0, #8
 8015f44:	f7fe f974 	bl	8014230 <rcl_service_is_valid>
 8015f48:	b1e8      	cbz	r0, 8015f86 <rcl_action_take_result_request+0x66>
 8015f4a:	6820      	ldr	r0, [r4, #0]
 8015f4c:	300c      	adds	r0, #12
 8015f4e:	f7f6 fe1f 	bl	800cb90 <rcl_publisher_is_valid>
 8015f52:	b1c0      	cbz	r0, 8015f86 <rcl_action_take_result_request+0x66>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	3010      	adds	r0, #16
 8015f58:	f7f6 fe1a 	bl	800cb90 <rcl_publisher_is_valid>
 8015f5c:	b198      	cbz	r0, 8015f86 <rcl_action_take_result_request+0x66>
 8015f5e:	b1bd      	cbz	r5, 8015f90 <rcl_action_take_result_request+0x70>
 8015f60:	b1b6      	cbz	r6, 8015f90 <rcl_action_take_result_request+0x70>
 8015f62:	6820      	ldr	r0, [r4, #0]
 8015f64:	4632      	mov	r2, r6
 8015f66:	4629      	mov	r1, r5
 8015f68:	3008      	adds	r0, #8
 8015f6a:	f7fe f8e1 	bl	8014130 <rcl_take_request>
 8015f6e:	b148      	cbz	r0, 8015f84 <rcl_action_take_result_request+0x64>
 8015f70:	280a      	cmp	r0, #10
 8015f72:	d007      	beq.n	8015f84 <rcl_action_take_result_request+0x64>
 8015f74:	f240 2259 	movw	r2, #601	@ 0x259
 8015f78:	f241 0369 	movw	r3, #4201	@ 0x1069
 8015f7c:	4290      	cmp	r0, r2
 8015f7e:	bf0c      	ite	eq
 8015f80:	4618      	moveq	r0, r3
 8015f82:	2001      	movne	r0, #1
 8015f84:	bd70      	pop	{r4, r5, r6, pc}
 8015f86:	f7f7 fd93 	bl	800dab0 <rcutils_reset_error>
 8015f8a:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015f8e:	bd70      	pop	{r4, r5, r6, pc}
 8015f90:	200b      	movs	r0, #11
 8015f92:	bd70      	pop	{r4, r5, r6, pc}
 8015f94:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop

08015f9c <rcl_action_take_cancel_request>:
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d037      	beq.n	8016010 <rcl_action_take_cancel_request+0x74>
 8015fa0:	b570      	push	{r4, r5, r6, lr}
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	6800      	ldr	r0, [r0, #0]
 8015fa6:	b370      	cbz	r0, 8016006 <rcl_action_take_cancel_request+0x6a>
 8015fa8:	460d      	mov	r5, r1
 8015faa:	4616      	mov	r6, r2
 8015fac:	f7fe f940 	bl	8014230 <rcl_service_is_valid>
 8015fb0:	b338      	cbz	r0, 8016002 <rcl_action_take_cancel_request+0x66>
 8015fb2:	6820      	ldr	r0, [r4, #0]
 8015fb4:	3004      	adds	r0, #4
 8015fb6:	f7fe f93b 	bl	8014230 <rcl_service_is_valid>
 8015fba:	b310      	cbz	r0, 8016002 <rcl_action_take_cancel_request+0x66>
 8015fbc:	6820      	ldr	r0, [r4, #0]
 8015fbe:	3008      	adds	r0, #8
 8015fc0:	f7fe f936 	bl	8014230 <rcl_service_is_valid>
 8015fc4:	b1e8      	cbz	r0, 8016002 <rcl_action_take_cancel_request+0x66>
 8015fc6:	6820      	ldr	r0, [r4, #0]
 8015fc8:	300c      	adds	r0, #12
 8015fca:	f7f6 fde1 	bl	800cb90 <rcl_publisher_is_valid>
 8015fce:	b1c0      	cbz	r0, 8016002 <rcl_action_take_cancel_request+0x66>
 8015fd0:	6820      	ldr	r0, [r4, #0]
 8015fd2:	3010      	adds	r0, #16
 8015fd4:	f7f6 fddc 	bl	800cb90 <rcl_publisher_is_valid>
 8015fd8:	b198      	cbz	r0, 8016002 <rcl_action_take_cancel_request+0x66>
 8015fda:	b1bd      	cbz	r5, 801600c <rcl_action_take_cancel_request+0x70>
 8015fdc:	b1b6      	cbz	r6, 801600c <rcl_action_take_cancel_request+0x70>
 8015fde:	6820      	ldr	r0, [r4, #0]
 8015fe0:	4632      	mov	r2, r6
 8015fe2:	4629      	mov	r1, r5
 8015fe4:	3004      	adds	r0, #4
 8015fe6:	f7fe f8a3 	bl	8014130 <rcl_take_request>
 8015fea:	b148      	cbz	r0, 8016000 <rcl_action_take_cancel_request+0x64>
 8015fec:	280a      	cmp	r0, #10
 8015fee:	d007      	beq.n	8016000 <rcl_action_take_cancel_request+0x64>
 8015ff0:	f240 2259 	movw	r2, #601	@ 0x259
 8015ff4:	f241 0369 	movw	r3, #4201	@ 0x1069
 8015ff8:	4290      	cmp	r0, r2
 8015ffa:	bf0c      	ite	eq
 8015ffc:	4618      	moveq	r0, r3
 8015ffe:	2001      	movne	r0, #1
 8016000:	bd70      	pop	{r4, r5, r6, pc}
 8016002:	f7f7 fd55 	bl	800dab0 <rcutils_reset_error>
 8016006:	f241 0068 	movw	r0, #4200	@ 0x1068
 801600a:	bd70      	pop	{r4, r5, r6, pc}
 801600c:	200b      	movs	r0, #11
 801600e:	bd70      	pop	{r4, r5, r6, pc}
 8016010:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016014:	4770      	bx	lr
 8016016:	bf00      	nop

08016018 <rcl_action_send_cancel_response>:
 8016018:	b380      	cbz	r0, 801607c <rcl_action_send_cancel_response+0x64>
 801601a:	b570      	push	{r4, r5, r6, lr}
 801601c:	4604      	mov	r4, r0
 801601e:	6800      	ldr	r0, [r0, #0]
 8016020:	b338      	cbz	r0, 8016072 <rcl_action_send_cancel_response+0x5a>
 8016022:	460d      	mov	r5, r1
 8016024:	4616      	mov	r6, r2
 8016026:	f7fe f903 	bl	8014230 <rcl_service_is_valid>
 801602a:	b300      	cbz	r0, 801606e <rcl_action_send_cancel_response+0x56>
 801602c:	6820      	ldr	r0, [r4, #0]
 801602e:	3004      	adds	r0, #4
 8016030:	f7fe f8fe 	bl	8014230 <rcl_service_is_valid>
 8016034:	b1d8      	cbz	r0, 801606e <rcl_action_send_cancel_response+0x56>
 8016036:	6820      	ldr	r0, [r4, #0]
 8016038:	3008      	adds	r0, #8
 801603a:	f7fe f8f9 	bl	8014230 <rcl_service_is_valid>
 801603e:	b1b0      	cbz	r0, 801606e <rcl_action_send_cancel_response+0x56>
 8016040:	6820      	ldr	r0, [r4, #0]
 8016042:	300c      	adds	r0, #12
 8016044:	f7f6 fda4 	bl	800cb90 <rcl_publisher_is_valid>
 8016048:	b188      	cbz	r0, 801606e <rcl_action_send_cancel_response+0x56>
 801604a:	6820      	ldr	r0, [r4, #0]
 801604c:	3010      	adds	r0, #16
 801604e:	f7f6 fd9f 	bl	800cb90 <rcl_publisher_is_valid>
 8016052:	b160      	cbz	r0, 801606e <rcl_action_send_cancel_response+0x56>
 8016054:	b185      	cbz	r5, 8016078 <rcl_action_send_cancel_response+0x60>
 8016056:	b17e      	cbz	r6, 8016078 <rcl_action_send_cancel_response+0x60>
 8016058:	6820      	ldr	r0, [r4, #0]
 801605a:	4632      	mov	r2, r6
 801605c:	4629      	mov	r1, r5
 801605e:	3004      	adds	r0, #4
 8016060:	f7fe f8b6 	bl	80141d0 <rcl_send_response>
 8016064:	b110      	cbz	r0, 801606c <rcl_action_send_cancel_response+0x54>
 8016066:	2802      	cmp	r0, #2
 8016068:	bf18      	it	ne
 801606a:	2001      	movne	r0, #1
 801606c:	bd70      	pop	{r4, r5, r6, pc}
 801606e:	f7f7 fd1f 	bl	800dab0 <rcutils_reset_error>
 8016072:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016076:	bd70      	pop	{r4, r5, r6, pc}
 8016078:	200b      	movs	r0, #11
 801607a:	bd70      	pop	{r4, r5, r6, pc}
 801607c:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016080:	4770      	bx	lr
 8016082:	bf00      	nop

08016084 <rcl_action_wait_set_add_action_server>:
 8016084:	2800      	cmp	r0, #0
 8016086:	d04a      	beq.n	801611e <rcl_action_wait_set_add_action_server+0x9a>
 8016088:	b570      	push	{r4, r5, r6, lr}
 801608a:	460c      	mov	r4, r1
 801608c:	2900      	cmp	r1, #0
 801608e:	d043      	beq.n	8016118 <rcl_action_wait_set_add_action_server+0x94>
 8016090:	4605      	mov	r5, r0
 8016092:	6808      	ldr	r0, [r1, #0]
 8016094:	2800      	cmp	r0, #0
 8016096:	d03f      	beq.n	8016118 <rcl_action_wait_set_add_action_server+0x94>
 8016098:	4616      	mov	r6, r2
 801609a:	f7fe f8c9 	bl	8014230 <rcl_service_is_valid>
 801609e:	2800      	cmp	r0, #0
 80160a0:	d038      	beq.n	8016114 <rcl_action_wait_set_add_action_server+0x90>
 80160a2:	6820      	ldr	r0, [r4, #0]
 80160a4:	3004      	adds	r0, #4
 80160a6:	f7fe f8c3 	bl	8014230 <rcl_service_is_valid>
 80160aa:	b398      	cbz	r0, 8016114 <rcl_action_wait_set_add_action_server+0x90>
 80160ac:	6820      	ldr	r0, [r4, #0]
 80160ae:	3008      	adds	r0, #8
 80160b0:	f7fe f8be 	bl	8014230 <rcl_service_is_valid>
 80160b4:	b370      	cbz	r0, 8016114 <rcl_action_wait_set_add_action_server+0x90>
 80160b6:	6820      	ldr	r0, [r4, #0]
 80160b8:	300c      	adds	r0, #12
 80160ba:	f7f6 fd83 	bl	800cbc4 <rcl_publisher_is_valid_except_context>
 80160be:	b348      	cbz	r0, 8016114 <rcl_action_wait_set_add_action_server+0x90>
 80160c0:	6820      	ldr	r0, [r4, #0]
 80160c2:	3010      	adds	r0, #16
 80160c4:	f7f6 fd7e 	bl	800cbc4 <rcl_publisher_is_valid_except_context>
 80160c8:	b320      	cbz	r0, 8016114 <rcl_action_wait_set_add_action_server+0x90>
 80160ca:	6821      	ldr	r1, [r4, #0]
 80160cc:	4628      	mov	r0, r5
 80160ce:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80160d2:	f7ff fa8b 	bl	80155ec <rcl_wait_set_add_service>
 80160d6:	b9e0      	cbnz	r0, 8016112 <rcl_action_wait_set_add_action_server+0x8e>
 80160d8:	6821      	ldr	r1, [r4, #0]
 80160da:	4628      	mov	r0, r5
 80160dc:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80160e0:	3104      	adds	r1, #4
 80160e2:	f7ff fa83 	bl	80155ec <rcl_wait_set_add_service>
 80160e6:	b9a0      	cbnz	r0, 8016112 <rcl_action_wait_set_add_action_server+0x8e>
 80160e8:	6821      	ldr	r1, [r4, #0]
 80160ea:	4628      	mov	r0, r5
 80160ec:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80160f0:	3108      	adds	r1, #8
 80160f2:	f7ff fa7b 	bl	80155ec <rcl_wait_set_add_service>
 80160f6:	b960      	cbnz	r0, 8016112 <rcl_action_wait_set_add_action_server+0x8e>
 80160f8:	6821      	ldr	r1, [r4, #0]
 80160fa:	4628      	mov	r0, r5
 80160fc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016100:	3114      	adds	r1, #20
 8016102:	f7ff fa17 	bl	8015534 <rcl_wait_set_add_timer>
 8016106:	b920      	cbnz	r0, 8016112 <rcl_action_wait_set_add_action_server+0x8e>
 8016108:	b11e      	cbz	r6, 8016112 <rcl_action_wait_set_add_action_server+0x8e>
 801610a:	6823      	ldr	r3, [r4, #0]
 801610c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016110:	6033      	str	r3, [r6, #0]
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	f7f7 fccc 	bl	800dab0 <rcutils_reset_error>
 8016118:	f241 0068 	movw	r0, #4200	@ 0x1068
 801611c:	bd70      	pop	{r4, r5, r6, pc}
 801611e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016122:	4770      	bx	lr

08016124 <rcl_action_server_wait_set_get_entities_ready>:
 8016124:	2800      	cmp	r0, #0
 8016126:	d060      	beq.n	80161ea <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8016128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801612a:	460c      	mov	r4, r1
 801612c:	2900      	cmp	r1, #0
 801612e:	d057      	beq.n	80161e0 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8016130:	4605      	mov	r5, r0
 8016132:	6808      	ldr	r0, [r1, #0]
 8016134:	2800      	cmp	r0, #0
 8016136:	d053      	beq.n	80161e0 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8016138:	4616      	mov	r6, r2
 801613a:	461f      	mov	r7, r3
 801613c:	f7fe f878 	bl	8014230 <rcl_service_is_valid>
 8016140:	2800      	cmp	r0, #0
 8016142:	d04b      	beq.n	80161dc <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016144:	6820      	ldr	r0, [r4, #0]
 8016146:	3004      	adds	r0, #4
 8016148:	f7fe f872 	bl	8014230 <rcl_service_is_valid>
 801614c:	2800      	cmp	r0, #0
 801614e:	d045      	beq.n	80161dc <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016150:	6820      	ldr	r0, [r4, #0]
 8016152:	3008      	adds	r0, #8
 8016154:	f7fe f86c 	bl	8014230 <rcl_service_is_valid>
 8016158:	2800      	cmp	r0, #0
 801615a:	d03f      	beq.n	80161dc <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801615c:	6820      	ldr	r0, [r4, #0]
 801615e:	300c      	adds	r0, #12
 8016160:	f7f6 fd30 	bl	800cbc4 <rcl_publisher_is_valid_except_context>
 8016164:	2800      	cmp	r0, #0
 8016166:	d039      	beq.n	80161dc <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016168:	6820      	ldr	r0, [r4, #0]
 801616a:	3010      	adds	r0, #16
 801616c:	f7f6 fd2a 	bl	800cbc4 <rcl_publisher_is_valid_except_context>
 8016170:	b3a0      	cbz	r0, 80161dc <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016172:	b3c6      	cbz	r6, 80161e6 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8016174:	b3bf      	cbz	r7, 80161e6 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8016176:	9b06      	ldr	r3, [sp, #24]
 8016178:	b3ab      	cbz	r3, 80161e6 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801617a:	9b07      	ldr	r3, [sp, #28]
 801617c:	b39b      	cbz	r3, 80161e6 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801617e:	6823      	ldr	r3, [r4, #0]
 8016180:	692a      	ldr	r2, [r5, #16]
 8016182:	6a2c      	ldr	r4, [r5, #32]
 8016184:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8016188:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 801618c:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8016190:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016194:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8016198:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 801619c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80161a0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80161a4:	1ae4      	subs	r4, r4, r3
 80161a6:	fab4 f484 	clz	r4, r4
 80161aa:	0964      	lsrs	r4, r4, #5
 80161ac:	7034      	strb	r4, [r6, #0]
 80161ae:	1d1c      	adds	r4, r3, #4
 80161b0:	1b00      	subs	r0, r0, r4
 80161b2:	fab0 f080 	clz	r0, r0
 80161b6:	0940      	lsrs	r0, r0, #5
 80161b8:	7038      	strb	r0, [r7, #0]
 80161ba:	f103 0008 	add.w	r0, r3, #8
 80161be:	1a09      	subs	r1, r1, r0
 80161c0:	3314      	adds	r3, #20
 80161c2:	1ad3      	subs	r3, r2, r3
 80161c4:	fab1 f181 	clz	r1, r1
 80161c8:	9a06      	ldr	r2, [sp, #24]
 80161ca:	0949      	lsrs	r1, r1, #5
 80161cc:	7011      	strb	r1, [r2, #0]
 80161ce:	fab3 f383 	clz	r3, r3
 80161d2:	9a07      	ldr	r2, [sp, #28]
 80161d4:	095b      	lsrs	r3, r3, #5
 80161d6:	2000      	movs	r0, #0
 80161d8:	7013      	strb	r3, [r2, #0]
 80161da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161dc:	f7f7 fc68 	bl	800dab0 <rcutils_reset_error>
 80161e0:	f241 0068 	movw	r0, #4200	@ 0x1068
 80161e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161e6:	200b      	movs	r0, #11
 80161e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80161ee:	4770      	bx	lr

080161f0 <_execute_event_handler>:
 80161f0:	2002      	movs	r0, #2
 80161f2:	4770      	bx	lr

080161f4 <_cancel_goal_event_handler>:
 80161f4:	2003      	movs	r0, #3
 80161f6:	4770      	bx	lr

080161f8 <_succeed_event_handler>:
 80161f8:	2004      	movs	r0, #4
 80161fa:	4770      	bx	lr

080161fc <_abort_event_handler>:
 80161fc:	2006      	movs	r0, #6
 80161fe:	4770      	bx	lr

08016200 <_canceled_event_handler>:
 8016200:	2005      	movs	r0, #5
 8016202:	4770      	bx	lr

08016204 <rcl_action_transition_goal_state>:
 8016204:	fa5f fc80 	uxtb.w	ip, r0
 8016208:	f1bc 0f06 	cmp.w	ip, #6
 801620c:	d80c      	bhi.n	8016228 <rcl_action_transition_goal_state+0x24>
 801620e:	2904      	cmp	r1, #4
 8016210:	d80a      	bhi.n	8016228 <rcl_action_transition_goal_state+0x24>
 8016212:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8016216:	b410      	push	{r4}
 8016218:	440b      	add	r3, r1
 801621a:	4c06      	ldr	r4, [pc, #24]	@ (8016234 <rcl_action_transition_goal_state+0x30>)
 801621c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016220:	b123      	cbz	r3, 801622c <rcl_action_transition_goal_state+0x28>
 8016222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016226:	4718      	bx	r3
 8016228:	2000      	movs	r0, #0
 801622a:	4770      	bx	lr
 801622c:	2000      	movs	r0, #0
 801622e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016232:	4770      	bx	lr
 8016234:	08021b58 	.word	0x08021b58

08016238 <rcl_action_get_zero_initialized_cancel_response>:
 8016238:	b510      	push	{r4, lr}
 801623a:	4c07      	ldr	r4, [pc, #28]	@ (8016258 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801623c:	4686      	mov	lr, r0
 801623e:	4684      	mov	ip, r0
 8016240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016248:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801624c:	6823      	ldr	r3, [r4, #0]
 801624e:	f8cc 3000 	str.w	r3, [ip]
 8016252:	4670      	mov	r0, lr
 8016254:	bd10      	pop	{r4, pc}
 8016256:	bf00      	nop
 8016258:	08021be4 	.word	0x08021be4

0801625c <rclc_action_send_result_request>:
 801625c:	b1d0      	cbz	r0, 8016294 <rclc_action_send_result_request+0x38>
 801625e:	b500      	push	{lr}
 8016260:	4684      	mov	ip, r0
 8016262:	b087      	sub	sp, #28
 8016264:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016268:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801626c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016270:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016274:	f10d 0e08 	add.w	lr, sp, #8
 8016278:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801627c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016280:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016284:	a902      	add	r1, sp, #8
 8016286:	3010      	adds	r0, #16
 8016288:	f7ff fbfa 	bl	8015a80 <rcl_action_send_result_request>
 801628c:	b920      	cbnz	r0, 8016298 <rclc_action_send_result_request+0x3c>
 801628e:	b007      	add	sp, #28
 8016290:	f85d fb04 	ldr.w	pc, [sp], #4
 8016294:	200b      	movs	r0, #11
 8016296:	4770      	bx	lr
 8016298:	9001      	str	r0, [sp, #4]
 801629a:	f7f7 fc09 	bl	800dab0 <rcutils_reset_error>
 801629e:	9801      	ldr	r0, [sp, #4]
 80162a0:	b007      	add	sp, #28
 80162a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80162a6:	bf00      	nop

080162a8 <rclc_action_take_goal_handle>:
 80162a8:	4603      	mov	r3, r0
 80162aa:	b158      	cbz	r0, 80162c4 <rclc_action_take_goal_handle+0x1c>
 80162ac:	6880      	ldr	r0, [r0, #8]
 80162ae:	b148      	cbz	r0, 80162c4 <rclc_action_take_goal_handle+0x1c>
 80162b0:	6801      	ldr	r1, [r0, #0]
 80162b2:	6099      	str	r1, [r3, #8]
 80162b4:	2200      	movs	r2, #0
 80162b6:	7202      	strb	r2, [r0, #8]
 80162b8:	68d9      	ldr	r1, [r3, #12]
 80162ba:	6001      	str	r1, [r0, #0]
 80162bc:	6202      	str	r2, [r0, #32]
 80162be:	8482      	strh	r2, [r0, #36]	@ 0x24
 80162c0:	60d8      	str	r0, [r3, #12]
 80162c2:	4770      	bx	lr
 80162c4:	4770      	bx	lr
 80162c6:	bf00      	nop

080162c8 <rclc_action_remove_used_goal_handle>:
 80162c8:	b180      	cbz	r0, 80162ec <rclc_action_remove_used_goal_handle+0x24>
 80162ca:	b179      	cbz	r1, 80162ec <rclc_action_remove_used_goal_handle+0x24>
 80162cc:	68c3      	ldr	r3, [r0, #12]
 80162ce:	4299      	cmp	r1, r3
 80162d0:	d00d      	beq.n	80162ee <rclc_action_remove_used_goal_handle+0x26>
 80162d2:	b12b      	cbz	r3, 80162e0 <rclc_action_remove_used_goal_handle+0x18>
 80162d4:	681a      	ldr	r2, [r3, #0]
 80162d6:	4291      	cmp	r1, r2
 80162d8:	d003      	beq.n	80162e2 <rclc_action_remove_used_goal_handle+0x1a>
 80162da:	4613      	mov	r3, r2
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d1f9      	bne.n	80162d4 <rclc_action_remove_used_goal_handle+0xc>
 80162e0:	4770      	bx	lr
 80162e2:	680a      	ldr	r2, [r1, #0]
 80162e4:	601a      	str	r2, [r3, #0]
 80162e6:	6883      	ldr	r3, [r0, #8]
 80162e8:	600b      	str	r3, [r1, #0]
 80162ea:	6081      	str	r1, [r0, #8]
 80162ec:	4770      	bx	lr
 80162ee:	680b      	ldr	r3, [r1, #0]
 80162f0:	60c3      	str	r3, [r0, #12]
 80162f2:	e7f8      	b.n	80162e6 <rclc_action_remove_used_goal_handle+0x1e>

080162f4 <rclc_action_find_goal_handle_by_uuid>:
 80162f4:	b538      	push	{r3, r4, r5, lr}
 80162f6:	b180      	cbz	r0, 801631a <rclc_action_find_goal_handle_by_uuid+0x26>
 80162f8:	460d      	mov	r5, r1
 80162fa:	b181      	cbz	r1, 801631e <rclc_action_find_goal_handle_by_uuid+0x2a>
 80162fc:	68c4      	ldr	r4, [r0, #12]
 80162fe:	b914      	cbnz	r4, 8016306 <rclc_action_find_goal_handle_by_uuid+0x12>
 8016300:	e009      	b.n	8016316 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016302:	6824      	ldr	r4, [r4, #0]
 8016304:	b13c      	cbz	r4, 8016316 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016306:	2210      	movs	r2, #16
 8016308:	4629      	mov	r1, r5
 801630a:	f104 0009 	add.w	r0, r4, #9
 801630e:	f005 fa79 	bl	801b804 <memcmp>
 8016312:	2800      	cmp	r0, #0
 8016314:	d1f5      	bne.n	8016302 <rclc_action_find_goal_handle_by_uuid+0xe>
 8016316:	4620      	mov	r0, r4
 8016318:	bd38      	pop	{r3, r4, r5, pc}
 801631a:	4604      	mov	r4, r0
 801631c:	e7fb      	b.n	8016316 <rclc_action_find_goal_handle_by_uuid+0x22>
 801631e:	460c      	mov	r4, r1
 8016320:	e7f9      	b.n	8016316 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016322:	bf00      	nop

08016324 <rclc_action_find_first_handle_by_status>:
 8016324:	b140      	cbz	r0, 8016338 <rclc_action_find_first_handle_by_status+0x14>
 8016326:	68c0      	ldr	r0, [r0, #12]
 8016328:	b910      	cbnz	r0, 8016330 <rclc_action_find_first_handle_by_status+0xc>
 801632a:	e005      	b.n	8016338 <rclc_action_find_first_handle_by_status+0x14>
 801632c:	6800      	ldr	r0, [r0, #0]
 801632e:	b118      	cbz	r0, 8016338 <rclc_action_find_first_handle_by_status+0x14>
 8016330:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016334:	428b      	cmp	r3, r1
 8016336:	d1f9      	bne.n	801632c <rclc_action_find_first_handle_by_status+0x8>
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop

0801633c <rclc_action_find_first_terminated_handle>:
 801633c:	b140      	cbz	r0, 8016350 <rclc_action_find_first_terminated_handle+0x14>
 801633e:	68c0      	ldr	r0, [r0, #12]
 8016340:	b910      	cbnz	r0, 8016348 <rclc_action_find_first_terminated_handle+0xc>
 8016342:	e005      	b.n	8016350 <rclc_action_find_first_terminated_handle+0x14>
 8016344:	6800      	ldr	r0, [r0, #0]
 8016346:	b118      	cbz	r0, 8016350 <rclc_action_find_first_terminated_handle+0x14>
 8016348:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801634c:	2b03      	cmp	r3, #3
 801634e:	ddf9      	ble.n	8016344 <rclc_action_find_first_terminated_handle+0x8>
 8016350:	4770      	bx	lr
 8016352:	bf00      	nop

08016354 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016354:	b170      	cbz	r0, 8016374 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016356:	68c0      	ldr	r0, [r0, #12]
 8016358:	b160      	cbz	r0, 8016374 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801635a:	b410      	push	{r4}
 801635c:	e001      	b.n	8016362 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801635e:	6800      	ldr	r0, [r0, #0]
 8016360:	b128      	cbz	r0, 801636e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016362:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016366:	4299      	cmp	r1, r3
 8016368:	bf08      	it	eq
 801636a:	4294      	cmpeq	r4, r2
 801636c:	d1f7      	bne.n	801635e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801636e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016372:	4770      	bx	lr
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop

08016378 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016378:	b170      	cbz	r0, 8016398 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801637a:	68c0      	ldr	r0, [r0, #12]
 801637c:	b160      	cbz	r0, 8016398 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801637e:	b410      	push	{r4}
 8016380:	e001      	b.n	8016386 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016382:	6800      	ldr	r0, [r0, #0]
 8016384:	b128      	cbz	r0, 8016392 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016386:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801638a:	4299      	cmp	r1, r3
 801638c:	bf08      	it	eq
 801638e:	4294      	cmpeq	r4, r2
 8016390:	d1f7      	bne.n	8016382 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016396:	4770      	bx	lr
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop

0801639c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801639c:	b170      	cbz	r0, 80163bc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801639e:	68c0      	ldr	r0, [r0, #12]
 80163a0:	b160      	cbz	r0, 80163bc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80163a2:	b410      	push	{r4}
 80163a4:	e001      	b.n	80163aa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80163a6:	6800      	ldr	r0, [r0, #0]
 80163a8:	b128      	cbz	r0, 80163b6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80163aa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80163ae:	4299      	cmp	r1, r3
 80163b0:	bf08      	it	eq
 80163b2:	4294      	cmpeq	r4, r2
 80163b4:	d1f7      	bne.n	80163a6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80163b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163ba:	4770      	bx	lr
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop

080163c0 <rclc_action_find_first_handle_with_goal_response>:
 80163c0:	b140      	cbz	r0, 80163d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80163c2:	68c0      	ldr	r0, [r0, #12]
 80163c4:	b910      	cbnz	r0, 80163cc <rclc_action_find_first_handle_with_goal_response+0xc>
 80163c6:	e005      	b.n	80163d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80163c8:	6800      	ldr	r0, [r0, #0]
 80163ca:	b118      	cbz	r0, 80163d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80163cc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d0f9      	beq.n	80163c8 <rclc_action_find_first_handle_with_goal_response+0x8>
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop

080163d8 <rclc_action_find_first_handle_with_result_response>:
 80163d8:	b140      	cbz	r0, 80163ec <rclc_action_find_first_handle_with_result_response+0x14>
 80163da:	68c0      	ldr	r0, [r0, #12]
 80163dc:	b910      	cbnz	r0, 80163e4 <rclc_action_find_first_handle_with_result_response+0xc>
 80163de:	e005      	b.n	80163ec <rclc_action_find_first_handle_with_result_response+0x14>
 80163e0:	6800      	ldr	r0, [r0, #0]
 80163e2:	b118      	cbz	r0, 80163ec <rclc_action_find_first_handle_with_result_response+0x14>
 80163e4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d0f9      	beq.n	80163e0 <rclc_action_find_first_handle_with_result_response+0x8>
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop

080163f0 <rclc_action_server_response_goal_request>:
 80163f0:	b198      	cbz	r0, 801641a <rclc_action_server_response_goal_request+0x2a>
 80163f2:	b510      	push	{r4, lr}
 80163f4:	6844      	ldr	r4, [r0, #4]
 80163f6:	b086      	sub	sp, #24
 80163f8:	2200      	movs	r2, #0
 80163fa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80163fe:	460b      	mov	r3, r1
 8016400:	9205      	str	r2, [sp, #20]
 8016402:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016406:	aa03      	add	r2, sp, #12
 8016408:	f104 0010 	add.w	r0, r4, #16
 801640c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016410:	f7ff fd52 	bl	8015eb8 <rcl_action_send_goal_response>
 8016414:	b918      	cbnz	r0, 801641e <rclc_action_server_response_goal_request+0x2e>
 8016416:	b006      	add	sp, #24
 8016418:	bd10      	pop	{r4, pc}
 801641a:	200b      	movs	r0, #11
 801641c:	4770      	bx	lr
 801641e:	9001      	str	r0, [sp, #4]
 8016420:	f7f7 fb46 	bl	800dab0 <rcutils_reset_error>
 8016424:	9801      	ldr	r0, [sp, #4]
 8016426:	b006      	add	sp, #24
 8016428:	bd10      	pop	{r4, pc}
 801642a:	bf00      	nop
 801642c:	0000      	movs	r0, r0
	...

08016430 <rclc_action_server_goal_cancel_accept>:
 8016430:	b310      	cbz	r0, 8016478 <rclc_action_server_goal_cancel_accept+0x48>
 8016432:	b510      	push	{r4, lr}
 8016434:	b090      	sub	sp, #64	@ 0x40
 8016436:	4604      	mov	r4, r0
 8016438:	a806      	add	r0, sp, #24
 801643a:	f7ff fefd 	bl	8016238 <rcl_action_get_zero_initialized_cancel_response>
 801643e:	2300      	movs	r3, #0
 8016440:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016444:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016448:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801644c:	f88d 3018 	strb.w	r3, [sp, #24]
 8016450:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016454:	f8cd d01c 	str.w	sp, [sp, #28]
 8016458:	46ec      	mov	ip, sp
 801645a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801645e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016480 <rclc_action_server_goal_cancel_accept+0x50>
 8016462:	6860      	ldr	r0, [r4, #4]
 8016464:	aa06      	add	r2, sp, #24
 8016466:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801646a:	3010      	adds	r0, #16
 801646c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016470:	f7ff fdd2 	bl	8016018 <rcl_action_send_cancel_response>
 8016474:	b010      	add	sp, #64	@ 0x40
 8016476:	bd10      	pop	{r4, pc}
 8016478:	200b      	movs	r0, #11
 801647a:	4770      	bx	lr
 801647c:	f3af 8000 	nop.w
 8016480:	00000001 	.word	0x00000001
 8016484:	00000001 	.word	0x00000001

08016488 <rclc_action_server_goal_cancel_reject>:
 8016488:	b082      	sub	sp, #8
 801648a:	b530      	push	{r4, r5, lr}
 801648c:	b08b      	sub	sp, #44	@ 0x2c
 801648e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016490:	e884 000c 	stmia.w	r4, {r2, r3}
 8016494:	b188      	cbz	r0, 80164ba <rclc_action_server_goal_cancel_reject+0x32>
 8016496:	4604      	mov	r4, r0
 8016498:	a801      	add	r0, sp, #4
 801649a:	460d      	mov	r5, r1
 801649c:	f7ff fecc 	bl	8016238 <rcl_action_get_zero_initialized_cancel_response>
 80164a0:	aa01      	add	r2, sp, #4
 80164a2:	a90e      	add	r1, sp, #56	@ 0x38
 80164a4:	f104 0010 	add.w	r0, r4, #16
 80164a8:	f88d 5004 	strb.w	r5, [sp, #4]
 80164ac:	f7ff fdb4 	bl	8016018 <rcl_action_send_cancel_response>
 80164b0:	b00b      	add	sp, #44	@ 0x2c
 80164b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164b6:	b002      	add	sp, #8
 80164b8:	4770      	bx	lr
 80164ba:	200b      	movs	r0, #11
 80164bc:	b00b      	add	sp, #44	@ 0x2c
 80164be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164c2:	b002      	add	sp, #8
 80164c4:	4770      	bx	lr
 80164c6:	bf00      	nop

080164c8 <__atomic_load_8>:
 80164c8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80164cc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80164d0:	4a15      	ldr	r2, [pc, #84]	@ (8016528 <__atomic_load_8+0x60>)
 80164d2:	4b16      	ldr	r3, [pc, #88]	@ (801652c <__atomic_load_8+0x64>)
 80164d4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80164d8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80164dc:	fb02 f101 	mul.w	r1, r2, r1
 80164e0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80164e4:	fba3 2301 	umull	r2, r3, r3, r1
 80164e8:	091b      	lsrs	r3, r3, #4
 80164ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80164ee:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80164f2:	b4f0      	push	{r4, r5, r6, r7}
 80164f4:	4d0e      	ldr	r5, [pc, #56]	@ (8016530 <__atomic_load_8+0x68>)
 80164f6:	1ac9      	subs	r1, r1, r3
 80164f8:	194a      	adds	r2, r1, r5
 80164fa:	f04f 0c01 	mov.w	ip, #1
 80164fe:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016502:	e8c2 cf44 	strexb	r4, ip, [r2]
 8016506:	2c00      	cmp	r4, #0
 8016508:	d1f9      	bne.n	80164fe <__atomic_load_8+0x36>
 801650a:	f3bf 8f5b 	dmb	ish
 801650e:	b2dc      	uxtb	r4, r3
 8016510:	2c00      	cmp	r4, #0
 8016512:	d1f4      	bne.n	80164fe <__atomic_load_8+0x36>
 8016514:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016518:	f3bf 8f5b 	dmb	ish
 801651c:	546b      	strb	r3, [r5, r1]
 801651e:	4630      	mov	r0, r6
 8016520:	4639      	mov	r1, r7
 8016522:	bcf0      	pop	{r4, r5, r6, r7}
 8016524:	4770      	bx	lr
 8016526:	bf00      	nop
 8016528:	27d4eb2d 	.word	0x27d4eb2d
 801652c:	b21642c9 	.word	0xb21642c9
 8016530:	20011954 	.word	0x20011954

08016534 <__atomic_store_8>:
 8016534:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016538:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801653c:	b570      	push	{r4, r5, r6, lr}
 801653e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016542:	4c14      	ldr	r4, [pc, #80]	@ (8016594 <__atomic_store_8+0x60>)
 8016544:	4e14      	ldr	r6, [pc, #80]	@ (8016598 <__atomic_store_8+0x64>)
 8016546:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801654a:	fb04 f101 	mul.w	r1, r4, r1
 801654e:	4c13      	ldr	r4, [pc, #76]	@ (801659c <__atomic_store_8+0x68>)
 8016550:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016554:	fba4 5401 	umull	r5, r4, r4, r1
 8016558:	0924      	lsrs	r4, r4, #4
 801655a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801655e:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016562:	eba1 0e04 	sub.w	lr, r1, r4
 8016566:	f04f 0501 	mov.w	r5, #1
 801656a:	eb0e 0c06 	add.w	ip, lr, r6
 801656e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016572:	e8cc 5f44 	strexb	r4, r5, [ip]
 8016576:	2c00      	cmp	r4, #0
 8016578:	d1f9      	bne.n	801656e <__atomic_store_8+0x3a>
 801657a:	f3bf 8f5b 	dmb	ish
 801657e:	b2cc      	uxtb	r4, r1
 8016580:	2c00      	cmp	r4, #0
 8016582:	d1f4      	bne.n	801656e <__atomic_store_8+0x3a>
 8016584:	e9c0 2300 	strd	r2, r3, [r0]
 8016588:	f3bf 8f5b 	dmb	ish
 801658c:	f806 100e 	strb.w	r1, [r6, lr]
 8016590:	bd70      	pop	{r4, r5, r6, pc}
 8016592:	bf00      	nop
 8016594:	27d4eb2d 	.word	0x27d4eb2d
 8016598:	20011954 	.word	0x20011954
 801659c:	b21642c9 	.word	0xb21642c9

080165a0 <__atomic_exchange_8>:
 80165a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165a2:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80165a6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80165aa:	4917      	ldr	r1, [pc, #92]	@ (8016608 <__atomic_exchange_8+0x68>)
 80165ac:	4f17      	ldr	r7, [pc, #92]	@ (801660c <__atomic_exchange_8+0x6c>)
 80165ae:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80165b2:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80165b6:	fb01 fe0e 	mul.w	lr, r1, lr
 80165ba:	4915      	ldr	r1, [pc, #84]	@ (8016610 <__atomic_exchange_8+0x70>)
 80165bc:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80165c0:	4606      	mov	r6, r0
 80165c2:	fba1 010e 	umull	r0, r1, r1, lr
 80165c6:	0909      	lsrs	r1, r1, #4
 80165c8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80165cc:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80165d0:	ebae 0e01 	sub.w	lr, lr, r1
 80165d4:	f04f 0501 	mov.w	r5, #1
 80165d8:	eb0e 0107 	add.w	r1, lr, r7
 80165dc:	e8d1 cf4f 	ldrexb	ip, [r1]
 80165e0:	e8c1 5f40 	strexb	r0, r5, [r1]
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d1f9      	bne.n	80165dc <__atomic_exchange_8+0x3c>
 80165e8:	f3bf 8f5b 	dmb	ish
 80165ec:	fa5f f48c 	uxtb.w	r4, ip
 80165f0:	2c00      	cmp	r4, #0
 80165f2:	d1f3      	bne.n	80165dc <__atomic_exchange_8+0x3c>
 80165f4:	e9d6 0100 	ldrd	r0, r1, [r6]
 80165f8:	e9c6 2300 	strd	r2, r3, [r6]
 80165fc:	f3bf 8f5b 	dmb	ish
 8016600:	f807 c00e 	strb.w	ip, [r7, lr]
 8016604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016606:	bf00      	nop
 8016608:	27d4eb2d 	.word	0x27d4eb2d
 801660c:	20011954 	.word	0x20011954
 8016610:	b21642c9 	.word	0xb21642c9

08016614 <rcutils_get_env>:
 8016614:	b150      	cbz	r0, 801662c <rcutils_get_env+0x18>
 8016616:	b510      	push	{r4, lr}
 8016618:	460c      	mov	r4, r1
 801661a:	b909      	cbnz	r1, 8016620 <rcutils_get_env+0xc>
 801661c:	4806      	ldr	r0, [pc, #24]	@ (8016638 <rcutils_get_env+0x24>)
 801661e:	bd10      	pop	{r4, pc}
 8016620:	f004 fa28 	bl	801aa74 <getenv>
 8016624:	b120      	cbz	r0, 8016630 <rcutils_get_env+0x1c>
 8016626:	6020      	str	r0, [r4, #0]
 8016628:	2000      	movs	r0, #0
 801662a:	bd10      	pop	{r4, pc}
 801662c:	4803      	ldr	r0, [pc, #12]	@ (801663c <rcutils_get_env+0x28>)
 801662e:	4770      	bx	lr
 8016630:	4b03      	ldr	r3, [pc, #12]	@ (8016640 <rcutils_get_env+0x2c>)
 8016632:	6023      	str	r3, [r4, #0]
 8016634:	e7f8      	b.n	8016628 <rcutils_get_env+0x14>
 8016636:	bf00      	nop
 8016638:	08020fc4 	.word	0x08020fc4
 801663c:	08020fa8 	.word	0x08020fa8
 8016640:	08020cf8 	.word	0x08020cf8

08016644 <rcutils_format_string_limit>:
 8016644:	b40f      	push	{r0, r1, r2, r3}
 8016646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016648:	b083      	sub	sp, #12
 801664a:	ac08      	add	r4, sp, #32
 801664c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801664e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016652:	b376      	cbz	r6, 80166b2 <rcutils_format_string_limit+0x6e>
 8016654:	4620      	mov	r0, r4
 8016656:	f7f7 f9ff 	bl	800da58 <rcutils_allocator_is_valid>
 801665a:	b350      	cbz	r0, 80166b2 <rcutils_format_string_limit+0x6e>
 801665c:	2100      	movs	r1, #0
 801665e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016660:	4632      	mov	r2, r6
 8016662:	4608      	mov	r0, r1
 8016664:	e9cd 3300 	strd	r3, r3, [sp]
 8016668:	f000 f8f8 	bl	801685c <rcutils_vsnprintf>
 801666c:	1c43      	adds	r3, r0, #1
 801666e:	4605      	mov	r5, r0
 8016670:	d01f      	beq.n	80166b2 <rcutils_format_string_limit+0x6e>
 8016672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016674:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016676:	1c47      	adds	r7, r0, #1
 8016678:	429f      	cmp	r7, r3
 801667a:	bf84      	itt	hi
 801667c:	461f      	movhi	r7, r3
 801667e:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8016682:	4638      	mov	r0, r7
 8016684:	9b08      	ldr	r3, [sp, #32]
 8016686:	4798      	blx	r3
 8016688:	4604      	mov	r4, r0
 801668a:	b190      	cbz	r0, 80166b2 <rcutils_format_string_limit+0x6e>
 801668c:	9b01      	ldr	r3, [sp, #4]
 801668e:	4632      	mov	r2, r6
 8016690:	4639      	mov	r1, r7
 8016692:	f000 f8e3 	bl	801685c <rcutils_vsnprintf>
 8016696:	2800      	cmp	r0, #0
 8016698:	db07      	blt.n	80166aa <rcutils_format_string_limit+0x66>
 801669a:	2300      	movs	r3, #0
 801669c:	5563      	strb	r3, [r4, r5]
 801669e:	4620      	mov	r0, r4
 80166a0:	b003      	add	sp, #12
 80166a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80166a6:	b004      	add	sp, #16
 80166a8:	4770      	bx	lr
 80166aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80166ae:	4620      	mov	r0, r4
 80166b0:	4798      	blx	r3
 80166b2:	2400      	movs	r4, #0
 80166b4:	e7f3      	b.n	801669e <rcutils_format_string_limit+0x5a>
 80166b6:	bf00      	nop

080166b8 <rcutils_repl_str>:
 80166b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166bc:	4699      	mov	r9, r3
 80166be:	b089      	sub	sp, #36	@ 0x24
 80166c0:	4603      	mov	r3, r0
 80166c2:	4648      	mov	r0, r9
 80166c4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80166c8:	4698      	mov	r8, r3
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	460c      	mov	r4, r1
 80166ce:	f7f7 f9c3 	bl	800da58 <rcutils_allocator_is_valid>
 80166d2:	2800      	cmp	r0, #0
 80166d4:	f000 80a3 	beq.w	801681e <rcutils_repl_str+0x166>
 80166d8:	4620      	mov	r0, r4
 80166da:	f7e9 fdf9 	bl	80002d0 <strlen>
 80166de:	f04f 0a00 	mov.w	sl, #0
 80166e2:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80166e6:	9001      	str	r0, [sp, #4]
 80166e8:	4657      	mov	r7, sl
 80166ea:	4655      	mov	r5, sl
 80166ec:	2610      	movs	r6, #16
 80166ee:	e01e      	b.n	801672e <rcutils_repl_str+0x76>
 80166f0:	3501      	adds	r5, #1
 80166f2:	45aa      	cmp	sl, r5
 80166f4:	d212      	bcs.n	801671c <rcutils_repl_str+0x64>
 80166f6:	44b2      	add	sl, r6
 80166f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80166fc:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8016700:	4798      	blx	r3
 8016702:	2800      	cmp	r0, #0
 8016704:	f000 8088 	beq.w	8016818 <rcutils_repl_str+0x160>
 8016708:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801670c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8016710:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8016714:	4607      	mov	r7, r0
 8016716:	bf28      	it	cs
 8016718:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 801671c:	9a00      	ldr	r2, [sp, #0]
 801671e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8016722:	1aa2      	subs	r2, r4, r2
 8016724:	f843 2c04 	str.w	r2, [r3, #-4]
 8016728:	9b01      	ldr	r3, [sp, #4]
 801672a:	eb04 0803 	add.w	r8, r4, r3
 801672e:	9902      	ldr	r1, [sp, #8]
 8016730:	4640      	mov	r0, r8
 8016732:	f005 f8cb 	bl	801b8cc <strstr>
 8016736:	4604      	mov	r4, r0
 8016738:	465a      	mov	r2, fp
 801673a:	4638      	mov	r0, r7
 801673c:	2c00      	cmp	r4, #0
 801673e:	d1d7      	bne.n	80166f0 <rcutils_repl_str+0x38>
 8016740:	4640      	mov	r0, r8
 8016742:	f7e9 fdc5 	bl	80002d0 <strlen>
 8016746:	9b00      	ldr	r3, [sp, #0]
 8016748:	eba8 0803 	sub.w	r8, r8, r3
 801674c:	eb08 0300 	add.w	r3, r8, r0
 8016750:	9304      	str	r3, [sp, #16]
 8016752:	f8d9 8000 	ldr.w	r8, [r9]
 8016756:	2d00      	cmp	r5, #0
 8016758:	d03f      	beq.n	80167da <rcutils_repl_str+0x122>
 801675a:	9803      	ldr	r0, [sp, #12]
 801675c:	f7e9 fdb8 	bl	80002d0 <strlen>
 8016760:	4606      	mov	r6, r0
 8016762:	9801      	ldr	r0, [sp, #4]
 8016764:	9a04      	ldr	r2, [sp, #16]
 8016766:	1a33      	subs	r3, r6, r0
 8016768:	fb05 2a03 	mla	sl, r5, r3, r2
 801676c:	4659      	mov	r1, fp
 801676e:	f10a 0001 	add.w	r0, sl, #1
 8016772:	47c0      	blx	r8
 8016774:	4683      	mov	fp, r0
 8016776:	2800      	cmp	r0, #0
 8016778:	d04e      	beq.n	8016818 <rcutils_repl_str+0x160>
 801677a:	683a      	ldr	r2, [r7, #0]
 801677c:	9900      	ldr	r1, [sp, #0]
 801677e:	f005 f953 	bl	801ba28 <memcpy>
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	9706      	str	r7, [sp, #24]
 8016786:	1e6a      	subs	r2, r5, #1
 8016788:	445b      	add	r3, fp
 801678a:	46a8      	mov	r8, r5
 801678c:	9202      	str	r2, [sp, #8]
 801678e:	4625      	mov	r5, r4
 8016790:	f8cd 901c 	str.w	r9, [sp, #28]
 8016794:	461c      	mov	r4, r3
 8016796:	9903      	ldr	r1, [sp, #12]
 8016798:	4632      	mov	r2, r6
 801679a:	4620      	mov	r0, r4
 801679c:	f005 f944 	bl	801ba28 <memcpy>
 80167a0:	9b01      	ldr	r3, [sp, #4]
 80167a2:	f857 2b04 	ldr.w	r2, [r7], #4
 80167a6:	eb02 0c03 	add.w	ip, r2, r3
 80167aa:	9b00      	ldr	r3, [sp, #0]
 80167ac:	eb03 010c 	add.w	r1, r3, ip
 80167b0:	9b02      	ldr	r3, [sp, #8]
 80167b2:	4434      	add	r4, r6
 80167b4:	429d      	cmp	r5, r3
 80167b6:	4620      	mov	r0, r4
 80167b8:	d022      	beq.n	8016800 <rcutils_repl_str+0x148>
 80167ba:	683a      	ldr	r2, [r7, #0]
 80167bc:	eba2 090c 	sub.w	r9, r2, ip
 80167c0:	464a      	mov	r2, r9
 80167c2:	3501      	adds	r5, #1
 80167c4:	f005 f930 	bl	801ba28 <memcpy>
 80167c8:	45a8      	cmp	r8, r5
 80167ca:	444c      	add	r4, r9
 80167cc:	d1e3      	bne.n	8016796 <rcutils_repl_str+0xde>
 80167ce:	2300      	movs	r3, #0
 80167d0:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 80167d4:	f80b 300a 	strb.w	r3, [fp, sl]
 80167d8:	e008      	b.n	80167ec <rcutils_repl_str+0x134>
 80167da:	4618      	mov	r0, r3
 80167dc:	4659      	mov	r1, fp
 80167de:	3001      	adds	r0, #1
 80167e0:	47c0      	blx	r8
 80167e2:	4683      	mov	fp, r0
 80167e4:	b110      	cbz	r0, 80167ec <rcutils_repl_str+0x134>
 80167e6:	9900      	ldr	r1, [sp, #0]
 80167e8:	f005 f916 	bl	801ba18 <strcpy>
 80167ec:	4638      	mov	r0, r7
 80167ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80167f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80167f6:	4798      	blx	r3
 80167f8:	4658      	mov	r0, fp
 80167fa:	b009      	add	sp, #36	@ 0x24
 80167fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016800:	9b04      	ldr	r3, [sp, #16]
 8016802:	eba3 020c 	sub.w	r2, r3, ip
 8016806:	9205      	str	r2, [sp, #20]
 8016808:	3501      	adds	r5, #1
 801680a:	f005 f90d 	bl	801ba28 <memcpy>
 801680e:	9a05      	ldr	r2, [sp, #20]
 8016810:	45a8      	cmp	r8, r5
 8016812:	4414      	add	r4, r2
 8016814:	d1bf      	bne.n	8016796 <rcutils_repl_str+0xde>
 8016816:	e7da      	b.n	80167ce <rcutils_repl_str+0x116>
 8016818:	f04f 0b00 	mov.w	fp, #0
 801681c:	e7e6      	b.n	80167ec <rcutils_repl_str+0x134>
 801681e:	4683      	mov	fp, r0
 8016820:	4658      	mov	r0, fp
 8016822:	b009      	add	sp, #36	@ 0x24
 8016824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016828 <rcutils_snprintf>:
 8016828:	b40c      	push	{r2, r3}
 801682a:	b530      	push	{r4, r5, lr}
 801682c:	b083      	sub	sp, #12
 801682e:	ab06      	add	r3, sp, #24
 8016830:	f853 2b04 	ldr.w	r2, [r3], #4
 8016834:	9301      	str	r3, [sp, #4]
 8016836:	b152      	cbz	r2, 801684e <rcutils_snprintf+0x26>
 8016838:	b138      	cbz	r0, 801684a <rcutils_snprintf+0x22>
 801683a:	b141      	cbz	r1, 801684e <rcutils_snprintf+0x26>
 801683c:	f004 ffd4 	bl	801b7e8 <vsnprintf>
 8016840:	b003      	add	sp, #12
 8016842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016846:	b002      	add	sp, #8
 8016848:	4770      	bx	lr
 801684a:	2900      	cmp	r1, #0
 801684c:	d0f6      	beq.n	801683c <rcutils_snprintf+0x14>
 801684e:	f005 f8a9 	bl	801b9a4 <__errno>
 8016852:	2316      	movs	r3, #22
 8016854:	6003      	str	r3, [r0, #0]
 8016856:	f04f 30ff 	mov.w	r0, #4294967295
 801685a:	e7f1      	b.n	8016840 <rcutils_snprintf+0x18>

0801685c <rcutils_vsnprintf>:
 801685c:	b570      	push	{r4, r5, r6, lr}
 801685e:	b13a      	cbz	r2, 8016870 <rcutils_vsnprintf+0x14>
 8016860:	b120      	cbz	r0, 801686c <rcutils_vsnprintf+0x10>
 8016862:	b129      	cbz	r1, 8016870 <rcutils_vsnprintf+0x14>
 8016864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016868:	f004 bfbe 	b.w	801b7e8 <vsnprintf>
 801686c:	2900      	cmp	r1, #0
 801686e:	d0f9      	beq.n	8016864 <rcutils_vsnprintf+0x8>
 8016870:	f005 f898 	bl	801b9a4 <__errno>
 8016874:	2316      	movs	r3, #22
 8016876:	6003      	str	r3, [r0, #0]
 8016878:	f04f 30ff 	mov.w	r0, #4294967295
 801687c:	bd70      	pop	{r4, r5, r6, pc}
 801687e:	bf00      	nop

08016880 <rcutils_strdup>:
 8016880:	b084      	sub	sp, #16
 8016882:	b570      	push	{r4, r5, r6, lr}
 8016884:	b086      	sub	sp, #24
 8016886:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801688a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801688e:	4604      	mov	r4, r0
 8016890:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016894:	f10d 0e04 	add.w	lr, sp, #4
 8016898:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801689c:	f8dc 3000 	ldr.w	r3, [ip]
 80168a0:	f8ce 3000 	str.w	r3, [lr]
 80168a4:	b304      	cbz	r4, 80168e8 <rcutils_strdup+0x68>
 80168a6:	a801      	add	r0, sp, #4
 80168a8:	f7f7 f8d6 	bl	800da58 <rcutils_allocator_is_valid>
 80168ac:	b1e0      	cbz	r0, 80168e8 <rcutils_strdup+0x68>
 80168ae:	f04f 32ff 	mov.w	r2, #4294967295
 80168b2:	2100      	movs	r1, #0
 80168b4:	4620      	mov	r0, r4
 80168b6:	f7e9 fcbb 	bl	8000230 <memchr>
 80168ba:	b190      	cbz	r0, 80168e2 <rcutils_strdup+0x62>
 80168bc:	1b06      	subs	r6, r0, r4
 80168be:	1c70      	adds	r0, r6, #1
 80168c0:	9b01      	ldr	r3, [sp, #4]
 80168c2:	9905      	ldr	r1, [sp, #20]
 80168c4:	4798      	blx	r3
 80168c6:	4605      	mov	r5, r0
 80168c8:	b128      	cbz	r0, 80168d6 <rcutils_strdup+0x56>
 80168ca:	4632      	mov	r2, r6
 80168cc:	4621      	mov	r1, r4
 80168ce:	f005 f8ab 	bl	801ba28 <memcpy>
 80168d2:	2300      	movs	r3, #0
 80168d4:	55ab      	strb	r3, [r5, r6]
 80168d6:	4628      	mov	r0, r5
 80168d8:	b006      	add	sp, #24
 80168da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168de:	b004      	add	sp, #16
 80168e0:	4770      	bx	lr
 80168e2:	f04f 36ff 	mov.w	r6, #4294967295
 80168e6:	e7eb      	b.n	80168c0 <rcutils_strdup+0x40>
 80168e8:	2500      	movs	r5, #0
 80168ea:	e7f4      	b.n	80168d6 <rcutils_strdup+0x56>

080168ec <rcutils_strndup>:
 80168ec:	b082      	sub	sp, #8
 80168ee:	b570      	push	{r4, r5, r6, lr}
 80168f0:	ac04      	add	r4, sp, #16
 80168f2:	e884 000c 	stmia.w	r4, {r2, r3}
 80168f6:	b1e8      	cbz	r0, 8016934 <rcutils_strndup+0x48>
 80168f8:	4605      	mov	r5, r0
 80168fa:	a804      	add	r0, sp, #16
 80168fc:	460c      	mov	r4, r1
 80168fe:	f7f7 f8ab 	bl	800da58 <rcutils_allocator_is_valid>
 8016902:	b1b8      	cbz	r0, 8016934 <rcutils_strndup+0x48>
 8016904:	4622      	mov	r2, r4
 8016906:	2100      	movs	r1, #0
 8016908:	4628      	mov	r0, r5
 801690a:	f7e9 fc91 	bl	8000230 <memchr>
 801690e:	b100      	cbz	r0, 8016912 <rcutils_strndup+0x26>
 8016910:	1b44      	subs	r4, r0, r5
 8016912:	9b04      	ldr	r3, [sp, #16]
 8016914:	9908      	ldr	r1, [sp, #32]
 8016916:	1c60      	adds	r0, r4, #1
 8016918:	4798      	blx	r3
 801691a:	4606      	mov	r6, r0
 801691c:	b128      	cbz	r0, 801692a <rcutils_strndup+0x3e>
 801691e:	4622      	mov	r2, r4
 8016920:	4629      	mov	r1, r5
 8016922:	f005 f881 	bl	801ba28 <memcpy>
 8016926:	2300      	movs	r3, #0
 8016928:	5533      	strb	r3, [r6, r4]
 801692a:	4630      	mov	r0, r6
 801692c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016930:	b002      	add	sp, #8
 8016932:	4770      	bx	lr
 8016934:	2600      	movs	r6, #0
 8016936:	4630      	mov	r0, r6
 8016938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801693c:	b002      	add	sp, #8
 801693e:	4770      	bx	lr

08016940 <rcutils_get_zero_initialized_string_map>:
 8016940:	4b01      	ldr	r3, [pc, #4]	@ (8016948 <rcutils_get_zero_initialized_string_map+0x8>)
 8016942:	6818      	ldr	r0, [r3, #0]
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop
 8016948:	08021c08 	.word	0x08021c08

0801694c <rcutils_string_map_reserve>:
 801694c:	2800      	cmp	r0, #0
 801694e:	d04e      	beq.n	80169ee <rcutils_string_map_reserve+0xa2>
 8016950:	b530      	push	{r4, r5, lr}
 8016952:	6803      	ldr	r3, [r0, #0]
 8016954:	b087      	sub	sp, #28
 8016956:	4604      	mov	r4, r0
 8016958:	2b00      	cmp	r3, #0
 801695a:	d043      	beq.n	80169e4 <rcutils_string_map_reserve+0x98>
 801695c:	f103 0c0c 	add.w	ip, r3, #12
 8016960:	460d      	mov	r5, r1
 8016962:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016966:	f10d 0e04 	add.w	lr, sp, #4
 801696a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801696e:	f8dc 3000 	ldr.w	r3, [ip]
 8016972:	f8ce 3000 	str.w	r3, [lr]
 8016976:	a801      	add	r0, sp, #4
 8016978:	f7f7 f86e 	bl	800da58 <rcutils_allocator_is_valid>
 801697c:	b308      	cbz	r0, 80169c2 <rcutils_string_map_reserve+0x76>
 801697e:	6823      	ldr	r3, [r4, #0]
 8016980:	6899      	ldr	r1, [r3, #8]
 8016982:	42a9      	cmp	r1, r5
 8016984:	d829      	bhi.n	80169da <rcutils_string_map_reserve+0x8e>
 8016986:	685a      	ldr	r2, [r3, #4]
 8016988:	42aa      	cmp	r2, r5
 801698a:	d024      	beq.n	80169d6 <rcutils_string_map_reserve+0x8a>
 801698c:	b1e5      	cbz	r5, 80169c8 <rcutils_string_map_reserve+0x7c>
 801698e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8016992:	d22a      	bcs.n	80169ea <rcutils_string_map_reserve+0x9e>
 8016994:	6818      	ldr	r0, [r3, #0]
 8016996:	9a05      	ldr	r2, [sp, #20]
 8016998:	9b03      	ldr	r3, [sp, #12]
 801699a:	00e9      	lsls	r1, r5, #3
 801699c:	4798      	blx	r3
 801699e:	b320      	cbz	r0, 80169ea <rcutils_string_map_reserve+0x9e>
 80169a0:	6824      	ldr	r4, [r4, #0]
 80169a2:	6861      	ldr	r1, [r4, #4]
 80169a4:	6020      	str	r0, [r4, #0]
 80169a6:	42a9      	cmp	r1, r5
 80169a8:	d214      	bcs.n	80169d4 <rcutils_string_map_reserve+0x88>
 80169aa:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80169ae:	1a69      	subs	r1, r5, r1
 80169b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80169b4:	2200      	movs	r2, #0
 80169b6:	e9c3 2200 	strd	r2, r2, [r3]
 80169ba:	3308      	adds	r3, #8
 80169bc:	428b      	cmp	r3, r1
 80169be:	d1fa      	bne.n	80169b6 <rcutils_string_map_reserve+0x6a>
 80169c0:	e008      	b.n	80169d4 <rcutils_string_map_reserve+0x88>
 80169c2:	200b      	movs	r0, #11
 80169c4:	b007      	add	sp, #28
 80169c6:	bd30      	pop	{r4, r5, pc}
 80169c8:	9a02      	ldr	r2, [sp, #8]
 80169ca:	9905      	ldr	r1, [sp, #20]
 80169cc:	6818      	ldr	r0, [r3, #0]
 80169ce:	4790      	blx	r2
 80169d0:	6824      	ldr	r4, [r4, #0]
 80169d2:	6025      	str	r5, [r4, #0]
 80169d4:	6065      	str	r5, [r4, #4]
 80169d6:	2000      	movs	r0, #0
 80169d8:	e7f4      	b.n	80169c4 <rcutils_string_map_reserve+0x78>
 80169da:	4620      	mov	r0, r4
 80169dc:	f7ff ffb6 	bl	801694c <rcutils_string_map_reserve>
 80169e0:	b007      	add	sp, #28
 80169e2:	bd30      	pop	{r4, r5, pc}
 80169e4:	201f      	movs	r0, #31
 80169e6:	b007      	add	sp, #28
 80169e8:	bd30      	pop	{r4, r5, pc}
 80169ea:	200a      	movs	r0, #10
 80169ec:	e7ea      	b.n	80169c4 <rcutils_string_map_reserve+0x78>
 80169ee:	200b      	movs	r0, #11
 80169f0:	4770      	bx	lr
 80169f2:	bf00      	nop

080169f4 <rcutils_string_map_init>:
 80169f4:	b082      	sub	sp, #8
 80169f6:	b570      	push	{r4, r5, r6, lr}
 80169f8:	ac04      	add	r4, sp, #16
 80169fa:	e884 000c 	stmia.w	r4, {r2, r3}
 80169fe:	b378      	cbz	r0, 8016a60 <rcutils_string_map_init+0x6c>
 8016a00:	6806      	ldr	r6, [r0, #0]
 8016a02:	4604      	mov	r4, r0
 8016a04:	b12e      	cbz	r6, 8016a12 <rcutils_string_map_init+0x1e>
 8016a06:	251e      	movs	r5, #30
 8016a08:	4628      	mov	r0, r5
 8016a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a0e:	b002      	add	sp, #8
 8016a10:	4770      	bx	lr
 8016a12:	a804      	add	r0, sp, #16
 8016a14:	460d      	mov	r5, r1
 8016a16:	f7f7 f81f 	bl	800da58 <rcutils_allocator_is_valid>
 8016a1a:	b308      	cbz	r0, 8016a60 <rcutils_string_map_init+0x6c>
 8016a1c:	9b04      	ldr	r3, [sp, #16]
 8016a1e:	9908      	ldr	r1, [sp, #32]
 8016a20:	2020      	movs	r0, #32
 8016a22:	4798      	blx	r3
 8016a24:	6020      	str	r0, [r4, #0]
 8016a26:	b308      	cbz	r0, 8016a6c <rcutils_string_map_init+0x78>
 8016a28:	f10d 0e10 	add.w	lr, sp, #16
 8016a2c:	e9c0 6600 	strd	r6, r6, [r0]
 8016a30:	6086      	str	r6, [r0, #8]
 8016a32:	f100 0c0c 	add.w	ip, r0, #12
 8016a36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a3e:	f8de 3000 	ldr.w	r3, [lr]
 8016a42:	f8cc 3000 	str.w	r3, [ip]
 8016a46:	4629      	mov	r1, r5
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f7ff ff7f 	bl	801694c <rcutils_string_map_reserve>
 8016a4e:	4605      	mov	r5, r0
 8016a50:	2800      	cmp	r0, #0
 8016a52:	d0d9      	beq.n	8016a08 <rcutils_string_map_init+0x14>
 8016a54:	9b05      	ldr	r3, [sp, #20]
 8016a56:	9908      	ldr	r1, [sp, #32]
 8016a58:	6820      	ldr	r0, [r4, #0]
 8016a5a:	4798      	blx	r3
 8016a5c:	6026      	str	r6, [r4, #0]
 8016a5e:	e7d3      	b.n	8016a08 <rcutils_string_map_init+0x14>
 8016a60:	250b      	movs	r5, #11
 8016a62:	4628      	mov	r0, r5
 8016a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a68:	b002      	add	sp, #8
 8016a6a:	4770      	bx	lr
 8016a6c:	250a      	movs	r5, #10
 8016a6e:	e7cb      	b.n	8016a08 <rcutils_string_map_init+0x14>

08016a70 <rcutils_string_map_fini>:
 8016a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a74:	b086      	sub	sp, #24
 8016a76:	2800      	cmp	r0, #0
 8016a78:	d04f      	beq.n	8016b1a <rcutils_string_map_fini+0xaa>
 8016a7a:	6805      	ldr	r5, [r0, #0]
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	2d00      	cmp	r5, #0
 8016a80:	d046      	beq.n	8016b10 <rcutils_string_map_fini+0xa0>
 8016a82:	686b      	ldr	r3, [r5, #4]
 8016a84:	b353      	cbz	r3, 8016adc <rcutils_string_map_fini+0x6c>
 8016a86:	2400      	movs	r4, #0
 8016a88:	682a      	ldr	r2, [r5, #0]
 8016a8a:	4627      	mov	r7, r4
 8016a8c:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8016a90:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8016a94:	b1f8      	cbz	r0, 8016ad6 <rcutils_string_map_fini+0x66>
 8016a96:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8016a9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016a9e:	4651      	mov	r1, sl
 8016aa0:	47c8      	blx	r9
 8016aa2:	682b      	ldr	r3, [r5, #0]
 8016aa4:	eb03 0208 	add.w	r2, r3, r8
 8016aa8:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8016aac:	6850      	ldr	r0, [r2, #4]
 8016aae:	4651      	mov	r1, sl
 8016ab0:	47c8      	blx	r9
 8016ab2:	682a      	ldr	r2, [r5, #0]
 8016ab4:	68ab      	ldr	r3, [r5, #8]
 8016ab6:	4442      	add	r2, r8
 8016ab8:	3b01      	subs	r3, #1
 8016aba:	6057      	str	r7, [r2, #4]
 8016abc:	60ab      	str	r3, [r5, #8]
 8016abe:	6835      	ldr	r5, [r6, #0]
 8016ac0:	686b      	ldr	r3, [r5, #4]
 8016ac2:	3401      	adds	r4, #1
 8016ac4:	429c      	cmp	r4, r3
 8016ac6:	d209      	bcs.n	8016adc <rcutils_string_map_fini+0x6c>
 8016ac8:	682a      	ldr	r2, [r5, #0]
 8016aca:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8016ace:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	d1df      	bne.n	8016a96 <rcutils_string_map_fini+0x26>
 8016ad6:	3401      	adds	r4, #1
 8016ad8:	42a3      	cmp	r3, r4
 8016ada:	d8d7      	bhi.n	8016a8c <rcutils_string_map_fini+0x1c>
 8016adc:	2100      	movs	r1, #0
 8016ade:	4630      	mov	r0, r6
 8016ae0:	f7ff ff34 	bl	801694c <rcutils_string_map_reserve>
 8016ae4:	4604      	mov	r4, r0
 8016ae6:	b118      	cbz	r0, 8016af0 <rcutils_string_map_fini+0x80>
 8016ae8:	4620      	mov	r0, r4
 8016aea:	b006      	add	sp, #24
 8016aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016af0:	6835      	ldr	r5, [r6, #0]
 8016af2:	350c      	adds	r5, #12
 8016af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016af6:	af01      	add	r7, sp, #4
 8016af8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016afa:	682b      	ldr	r3, [r5, #0]
 8016afc:	603b      	str	r3, [r7, #0]
 8016afe:	a801      	add	r0, sp, #4
 8016b00:	f7f6 ffaa 	bl	800da58 <rcutils_allocator_is_valid>
 8016b04:	b148      	cbz	r0, 8016b1a <rcutils_string_map_fini+0xaa>
 8016b06:	9b02      	ldr	r3, [sp, #8]
 8016b08:	9905      	ldr	r1, [sp, #20]
 8016b0a:	6830      	ldr	r0, [r6, #0]
 8016b0c:	4798      	blx	r3
 8016b0e:	6034      	str	r4, [r6, #0]
 8016b10:	2400      	movs	r4, #0
 8016b12:	4620      	mov	r0, r4
 8016b14:	b006      	add	sp, #24
 8016b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b1a:	240b      	movs	r4, #11
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	b006      	add	sp, #24
 8016b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016b24 <rcutils_string_map_getn>:
 8016b24:	b338      	cbz	r0, 8016b76 <rcutils_string_map_getn+0x52>
 8016b26:	6800      	ldr	r0, [r0, #0]
 8016b28:	b328      	cbz	r0, 8016b76 <rcutils_string_map_getn+0x52>
 8016b2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b2e:	460e      	mov	r6, r1
 8016b30:	b1c1      	cbz	r1, 8016b64 <rcutils_string_map_getn+0x40>
 8016b32:	e9d0 9800 	ldrd	r9, r8, [r0]
 8016b36:	f1b8 0f00 	cmp.w	r8, #0
 8016b3a:	d013      	beq.n	8016b64 <rcutils_string_map_getn+0x40>
 8016b3c:	4617      	mov	r7, r2
 8016b3e:	2400      	movs	r4, #0
 8016b40:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8016b44:	4628      	mov	r0, r5
 8016b46:	b155      	cbz	r5, 8016b5e <rcutils_string_map_getn+0x3a>
 8016b48:	f7e9 fbc2 	bl	80002d0 <strlen>
 8016b4c:	42b8      	cmp	r0, r7
 8016b4e:	4602      	mov	r2, r0
 8016b50:	4629      	mov	r1, r5
 8016b52:	bf38      	it	cc
 8016b54:	463a      	movcc	r2, r7
 8016b56:	4630      	mov	r0, r6
 8016b58:	f004 fe93 	bl	801b882 <strncmp>
 8016b5c:	b128      	cbz	r0, 8016b6a <rcutils_string_map_getn+0x46>
 8016b5e:	3401      	adds	r4, #1
 8016b60:	45a0      	cmp	r8, r4
 8016b62:	d1ed      	bne.n	8016b40 <rcutils_string_map_getn+0x1c>
 8016b64:	2000      	movs	r0, #0
 8016b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b6a:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8016b6e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8016b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b76:	4770      	bx	lr

08016b78 <rmw_get_zero_initialized_context>:
 8016b78:	b510      	push	{r4, lr}
 8016b7a:	4903      	ldr	r1, [pc, #12]	@ (8016b88 <rmw_get_zero_initialized_context+0x10>)
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	2270      	movs	r2, #112	@ 0x70
 8016b80:	f004 ff52 	bl	801ba28 <memcpy>
 8016b84:	4620      	mov	r0, r4
 8016b86:	bd10      	pop	{r4, pc}
 8016b88:	08021c10 	.word	0x08021c10

08016b8c <rmw_get_zero_initialized_init_options>:
 8016b8c:	b510      	push	{r4, lr}
 8016b8e:	4903      	ldr	r1, [pc, #12]	@ (8016b9c <rmw_get_zero_initialized_init_options+0x10>)
 8016b90:	4604      	mov	r4, r0
 8016b92:	2258      	movs	r2, #88	@ 0x58
 8016b94:	f004 ff48 	bl	801ba28 <memcpy>
 8016b98:	4620      	mov	r0, r4
 8016b9a:	bd10      	pop	{r4, pc}
 8016b9c:	08021c80 	.word	0x08021c80

08016ba0 <rmw_subscription_content_filter_options_fini>:
 8016ba0:	b1b0      	cbz	r0, 8016bd0 <rmw_subscription_content_filter_options_fini+0x30>
 8016ba2:	b538      	push	{r3, r4, r5, lr}
 8016ba4:	4604      	mov	r4, r0
 8016ba6:	4608      	mov	r0, r1
 8016ba8:	460d      	mov	r5, r1
 8016baa:	f7f6 ff55 	bl	800da58 <rcutils_allocator_is_valid>
 8016bae:	b168      	cbz	r0, 8016bcc <rmw_subscription_content_filter_options_fini+0x2c>
 8016bb0:	6820      	ldr	r0, [r4, #0]
 8016bb2:	b120      	cbz	r0, 8016bbe <rmw_subscription_content_filter_options_fini+0x1e>
 8016bb4:	686b      	ldr	r3, [r5, #4]
 8016bb6:	6929      	ldr	r1, [r5, #16]
 8016bb8:	4798      	blx	r3
 8016bba:	2300      	movs	r3, #0
 8016bbc:	6023      	str	r3, [r4, #0]
 8016bbe:	1d20      	adds	r0, r4, #4
 8016bc0:	f003 fc76 	bl	801a4b0 <rcutils_string_array_fini>
 8016bc4:	3800      	subs	r0, #0
 8016bc6:	bf18      	it	ne
 8016bc8:	2001      	movne	r0, #1
 8016bca:	bd38      	pop	{r3, r4, r5, pc}
 8016bcc:	200b      	movs	r0, #11
 8016bce:	bd38      	pop	{r3, r4, r5, pc}
 8016bd0:	200b      	movs	r0, #11
 8016bd2:	4770      	bx	lr

08016bd4 <rmw_get_default_subscription_options>:
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	e9c0 2200 	strd	r2, r2, [r0]
 8016bda:	6082      	str	r2, [r0, #8]
 8016bdc:	4770      	bx	lr
 8016bde:	bf00      	nop

08016be0 <rmw_time_equal>:
 8016be0:	b570      	push	{r4, r5, r6, lr}
 8016be2:	b084      	sub	sp, #16
 8016be4:	ac04      	add	r4, sp, #16
 8016be6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016bea:	4925      	ldr	r1, [pc, #148]	@ (8016c80 <rmw_time_equal+0xa0>)
 8016bec:	9c01      	ldr	r4, [sp, #4]
 8016bee:	2202      	movs	r2, #2
 8016bf0:	4281      	cmp	r1, r0
 8016bf2:	41a2      	sbcs	r2, r4
 8016bf4:	d333      	bcc.n	8016c5e <rmw_time_equal+0x7e>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	4822      	ldr	r0, [pc, #136]	@ (8016c84 <rmw_time_equal+0xa4>)
 8016bfa:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8016bfe:	fba3 3200 	umull	r3, r2, r3, r0
 8016c02:	fb00 2204 	mla	r2, r0, r4, r2
 8016c06:	43de      	mvns	r6, r3
 8016c08:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016c0c:	1a84      	subs	r4, r0, r2
 8016c0e:	428e      	cmp	r6, r1
 8016c10:	41ac      	sbcs	r4, r5
 8016c12:	d332      	bcc.n	8016c7a <rmw_time_equal+0x9a>
 8016c14:	eb11 0e03 	adds.w	lr, r1, r3
 8016c18:	eb42 0005 	adc.w	r0, r2, r5
 8016c1c:	9b08      	ldr	r3, [sp, #32]
 8016c1e:	4918      	ldr	r1, [pc, #96]	@ (8016c80 <rmw_time_equal+0xa0>)
 8016c20:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016c22:	2202      	movs	r2, #2
 8016c24:	4299      	cmp	r1, r3
 8016c26:	41aa      	sbcs	r2, r5
 8016c28:	d31e      	bcc.n	8016c68 <rmw_time_equal+0x88>
 8016c2a:	4c16      	ldr	r4, [pc, #88]	@ (8016c84 <rmw_time_equal+0xa4>)
 8016c2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c2e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016c30:	fba3 3104 	umull	r3, r1, r3, r4
 8016c34:	fb04 1105 	mla	r1, r4, r5, r1
 8016c38:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8016c3c:	43dd      	mvns	r5, r3
 8016c3e:	ebac 0401 	sub.w	r4, ip, r1
 8016c42:	4295      	cmp	r5, r2
 8016c44:	41b4      	sbcs	r4, r6
 8016c46:	d314      	bcc.n	8016c72 <rmw_time_equal+0x92>
 8016c48:	18d2      	adds	r2, r2, r3
 8016c4a:	eb41 0306 	adc.w	r3, r1, r6
 8016c4e:	4283      	cmp	r3, r0
 8016c50:	bf08      	it	eq
 8016c52:	4572      	cmpeq	r2, lr
 8016c54:	bf0c      	ite	eq
 8016c56:	2001      	moveq	r0, #1
 8016c58:	2000      	movne	r0, #0
 8016c5a:	b004      	add	sp, #16
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	f04f 3eff 	mov.w	lr, #4294967295
 8016c62:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016c66:	e7d9      	b.n	8016c1c <rmw_time_equal+0x3c>
 8016c68:	f04f 32ff 	mov.w	r2, #4294967295
 8016c6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016c70:	e7ed      	b.n	8016c4e <rmw_time_equal+0x6e>
 8016c72:	f04f 32ff 	mov.w	r2, #4294967295
 8016c76:	4663      	mov	r3, ip
 8016c78:	e7e9      	b.n	8016c4e <rmw_time_equal+0x6e>
 8016c7a:	f04f 3eff 	mov.w	lr, #4294967295
 8016c7e:	e7cd      	b.n	8016c1c <rmw_time_equal+0x3c>
 8016c80:	25c17d04 	.word	0x25c17d04
 8016c84:	3b9aca00 	.word	0x3b9aca00

08016c88 <rmw_time_total_nsec>:
 8016c88:	b430      	push	{r4, r5}
 8016c8a:	b084      	sub	sp, #16
 8016c8c:	ac04      	add	r4, sp, #16
 8016c8e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016c92:	4914      	ldr	r1, [pc, #80]	@ (8016ce4 <rmw_time_total_nsec+0x5c>)
 8016c94:	9c01      	ldr	r4, [sp, #4]
 8016c96:	2202      	movs	r2, #2
 8016c98:	4281      	cmp	r1, r0
 8016c9a:	41a2      	sbcs	r2, r4
 8016c9c:	d315      	bcc.n	8016cca <rmw_time_total_nsec+0x42>
 8016c9e:	4912      	ldr	r1, [pc, #72]	@ (8016ce8 <rmw_time_total_nsec+0x60>)
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8016ca6:	fba3 3201 	umull	r3, r2, r3, r1
 8016caa:	fb01 2204 	mla	r2, r1, r4, r2
 8016cae:	ea6f 0c03 	mvn.w	ip, r3
 8016cb2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016cb6:	1a8c      	subs	r4, r1, r2
 8016cb8:	4584      	cmp	ip, r0
 8016cba:	41ac      	sbcs	r4, r5
 8016cbc:	d30c      	bcc.n	8016cd8 <rmw_time_total_nsec+0x50>
 8016cbe:	1818      	adds	r0, r3, r0
 8016cc0:	eb42 0105 	adc.w	r1, r2, r5
 8016cc4:	b004      	add	sp, #16
 8016cc6:	bc30      	pop	{r4, r5}
 8016cc8:	4770      	bx	lr
 8016cca:	f04f 30ff 	mov.w	r0, #4294967295
 8016cce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016cd2:	b004      	add	sp, #16
 8016cd4:	bc30      	pop	{r4, r5}
 8016cd6:	4770      	bx	lr
 8016cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8016cdc:	b004      	add	sp, #16
 8016cde:	bc30      	pop	{r4, r5}
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	25c17d04 	.word	0x25c17d04
 8016ce8:	3b9aca00 	.word	0x3b9aca00

08016cec <rmw_get_zero_initialized_message_info>:
 8016cec:	b510      	push	{r4, lr}
 8016cee:	4c09      	ldr	r4, [pc, #36]	@ (8016d14 <rmw_get_zero_initialized_message_info+0x28>)
 8016cf0:	4686      	mov	lr, r0
 8016cf2:	4684      	mov	ip, r0
 8016cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016d0a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016d0e:	4670      	mov	r0, lr
 8016d10:	bd10      	pop	{r4, pc}
 8016d12:	bf00      	nop
 8016d14:	08021cd8 	.word	0x08021cd8

08016d18 <rmw_validate_full_topic_name>:
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	d049      	beq.n	8016db0 <rmw_validate_full_topic_name+0x98>
 8016d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d20:	460e      	mov	r6, r1
 8016d22:	2900      	cmp	r1, #0
 8016d24:	d056      	beq.n	8016dd4 <rmw_validate_full_topic_name+0xbc>
 8016d26:	4615      	mov	r5, r2
 8016d28:	4604      	mov	r4, r0
 8016d2a:	f7e9 fad1 	bl	80002d0 <strlen>
 8016d2e:	b150      	cbz	r0, 8016d46 <rmw_validate_full_topic_name+0x2e>
 8016d30:	7823      	ldrb	r3, [r4, #0]
 8016d32:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d34:	d00c      	beq.n	8016d50 <rmw_validate_full_topic_name+0x38>
 8016d36:	2302      	movs	r3, #2
 8016d38:	6033      	str	r3, [r6, #0]
 8016d3a:	b10d      	cbz	r5, 8016d40 <rmw_validate_full_topic_name+0x28>
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	602b      	str	r3, [r5, #0]
 8016d40:	2000      	movs	r0, #0
 8016d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d46:	2301      	movs	r3, #1
 8016d48:	6033      	str	r3, [r6, #0]
 8016d4a:	2d00      	cmp	r5, #0
 8016d4c:	d1f6      	bne.n	8016d3c <rmw_validate_full_topic_name+0x24>
 8016d4e:	e7f7      	b.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016d50:	1e47      	subs	r7, r0, #1
 8016d52:	5de3      	ldrb	r3, [r4, r7]
 8016d54:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d56:	d03f      	beq.n	8016dd8 <rmw_validate_full_topic_name+0xc0>
 8016d58:	1e63      	subs	r3, r4, #1
 8016d5a:	4621      	mov	r1, r4
 8016d5c:	eb03 0e00 	add.w	lr, r3, r0
 8016d60:	469c      	mov	ip, r3
 8016d62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8016d66:	2a5f      	cmp	r2, #95	@ 0x5f
 8016d68:	d006      	beq.n	8016d78 <rmw_validate_full_topic_name+0x60>
 8016d6a:	d823      	bhi.n	8016db4 <rmw_validate_full_topic_name+0x9c>
 8016d6c:	2a39      	cmp	r2, #57	@ 0x39
 8016d6e:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8016d72:	d82b      	bhi.n	8016dcc <rmw_validate_full_topic_name+0xb4>
 8016d74:	2a2e      	cmp	r2, #46	@ 0x2e
 8016d76:	d920      	bls.n	8016dba <rmw_validate_full_topic_name+0xa2>
 8016d78:	4573      	cmp	r3, lr
 8016d7a:	d1f1      	bne.n	8016d60 <rmw_validate_full_topic_name+0x48>
 8016d7c:	4c21      	ldr	r4, [pc, #132]	@ (8016e04 <rmw_validate_full_topic_name+0xec>)
 8016d7e:	2300      	movs	r3, #0
 8016d80:	e003      	b.n	8016d8a <rmw_validate_full_topic_name+0x72>
 8016d82:	4298      	cmp	r0, r3
 8016d84:	f101 0101 	add.w	r1, r1, #1
 8016d88:	d02c      	beq.n	8016de4 <rmw_validate_full_topic_name+0xcc>
 8016d8a:	429f      	cmp	r7, r3
 8016d8c:	f103 0301 	add.w	r3, r3, #1
 8016d90:	d0f7      	beq.n	8016d82 <rmw_validate_full_topic_name+0x6a>
 8016d92:	780a      	ldrb	r2, [r1, #0]
 8016d94:	2a2f      	cmp	r2, #47	@ 0x2f
 8016d96:	d1f4      	bne.n	8016d82 <rmw_validate_full_topic_name+0x6a>
 8016d98:	784a      	ldrb	r2, [r1, #1]
 8016d9a:	2a2f      	cmp	r2, #47	@ 0x2f
 8016d9c:	d02d      	beq.n	8016dfa <rmw_validate_full_topic_name+0xe2>
 8016d9e:	5ca2      	ldrb	r2, [r4, r2]
 8016da0:	0752      	lsls	r2, r2, #29
 8016da2:	d5ee      	bpl.n	8016d82 <rmw_validate_full_topic_name+0x6a>
 8016da4:	2206      	movs	r2, #6
 8016da6:	6032      	str	r2, [r6, #0]
 8016da8:	2d00      	cmp	r5, #0
 8016daa:	d0c9      	beq.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016dac:	602b      	str	r3, [r5, #0]
 8016dae:	e7c7      	b.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016db0:	200b      	movs	r0, #11
 8016db2:	4770      	bx	lr
 8016db4:	3a61      	subs	r2, #97	@ 0x61
 8016db6:	2a19      	cmp	r2, #25
 8016db8:	d9de      	bls.n	8016d78 <rmw_validate_full_topic_name+0x60>
 8016dba:	2304      	movs	r3, #4
 8016dbc:	6033      	str	r3, [r6, #0]
 8016dbe:	2d00      	cmp	r5, #0
 8016dc0:	d0be      	beq.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016dc2:	f1c4 0401 	rsb	r4, r4, #1
 8016dc6:	4464      	add	r4, ip
 8016dc8:	602c      	str	r4, [r5, #0]
 8016dca:	e7b9      	b.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016dcc:	f1b8 0f19 	cmp.w	r8, #25
 8016dd0:	d9d2      	bls.n	8016d78 <rmw_validate_full_topic_name+0x60>
 8016dd2:	e7f2      	b.n	8016dba <rmw_validate_full_topic_name+0xa2>
 8016dd4:	200b      	movs	r0, #11
 8016dd6:	e7b4      	b.n	8016d42 <rmw_validate_full_topic_name+0x2a>
 8016dd8:	2303      	movs	r3, #3
 8016dda:	6033      	str	r3, [r6, #0]
 8016ddc:	2d00      	cmp	r5, #0
 8016dde:	d0af      	beq.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016de0:	602f      	str	r7, [r5, #0]
 8016de2:	e7ad      	b.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016de4:	28f7      	cmp	r0, #247	@ 0xf7
 8016de6:	d802      	bhi.n	8016dee <rmw_validate_full_topic_name+0xd6>
 8016de8:	2300      	movs	r3, #0
 8016dea:	6033      	str	r3, [r6, #0]
 8016dec:	e7a8      	b.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016dee:	2307      	movs	r3, #7
 8016df0:	6033      	str	r3, [r6, #0]
 8016df2:	2d00      	cmp	r5, #0
 8016df4:	d0a4      	beq.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016df6:	23f6      	movs	r3, #246	@ 0xf6
 8016df8:	e7d8      	b.n	8016dac <rmw_validate_full_topic_name+0x94>
 8016dfa:	2205      	movs	r2, #5
 8016dfc:	6032      	str	r2, [r6, #0]
 8016dfe:	2d00      	cmp	r5, #0
 8016e00:	d1d4      	bne.n	8016dac <rmw_validate_full_topic_name+0x94>
 8016e02:	e79d      	b.n	8016d40 <rmw_validate_full_topic_name+0x28>
 8016e04:	08022149 	.word	0x08022149

08016e08 <rmw_validate_namespace_with_size>:
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	d031      	beq.n	8016e70 <rmw_validate_namespace_with_size+0x68>
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	4614      	mov	r4, r2
 8016e10:	b0c2      	sub	sp, #264	@ 0x108
 8016e12:	b1ba      	cbz	r2, 8016e44 <rmw_validate_namespace_with_size+0x3c>
 8016e14:	2901      	cmp	r1, #1
 8016e16:	460e      	mov	r6, r1
 8016e18:	461d      	mov	r5, r3
 8016e1a:	d102      	bne.n	8016e22 <rmw_validate_namespace_with_size+0x1a>
 8016e1c:	7803      	ldrb	r3, [r0, #0]
 8016e1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016e20:	d015      	beq.n	8016e4e <rmw_validate_namespace_with_size+0x46>
 8016e22:	aa01      	add	r2, sp, #4
 8016e24:	4669      	mov	r1, sp
 8016e26:	f7ff ff77 	bl	8016d18 <rmw_validate_full_topic_name>
 8016e2a:	b960      	cbnz	r0, 8016e46 <rmw_validate_namespace_with_size+0x3e>
 8016e2c:	9b00      	ldr	r3, [sp, #0]
 8016e2e:	b163      	cbz	r3, 8016e4a <rmw_validate_namespace_with_size+0x42>
 8016e30:	2b07      	cmp	r3, #7
 8016e32:	d00a      	beq.n	8016e4a <rmw_validate_namespace_with_size+0x42>
 8016e34:	1e5a      	subs	r2, r3, #1
 8016e36:	2a05      	cmp	r2, #5
 8016e38:	d81c      	bhi.n	8016e74 <rmw_validate_namespace_with_size+0x6c>
 8016e3a:	e8df f002 	tbb	[pc, r2]
 8016e3e:	0c0c      	.short	0x0c0c
 8016e40:	0c0c0c0c 	.word	0x0c0c0c0c
 8016e44:	200b      	movs	r0, #11
 8016e46:	b042      	add	sp, #264	@ 0x108
 8016e48:	bd70      	pop	{r4, r5, r6, pc}
 8016e4a:	2ef5      	cmp	r6, #245	@ 0xf5
 8016e4c:	d809      	bhi.n	8016e62 <rmw_validate_namespace_with_size+0x5a>
 8016e4e:	2300      	movs	r3, #0
 8016e50:	6023      	str	r3, [r4, #0]
 8016e52:	2000      	movs	r0, #0
 8016e54:	e7f7      	b.n	8016e46 <rmw_validate_namespace_with_size+0x3e>
 8016e56:	6023      	str	r3, [r4, #0]
 8016e58:	2d00      	cmp	r5, #0
 8016e5a:	d0fa      	beq.n	8016e52 <rmw_validate_namespace_with_size+0x4a>
 8016e5c:	9b01      	ldr	r3, [sp, #4]
 8016e5e:	602b      	str	r3, [r5, #0]
 8016e60:	e7f7      	b.n	8016e52 <rmw_validate_namespace_with_size+0x4a>
 8016e62:	2307      	movs	r3, #7
 8016e64:	6023      	str	r3, [r4, #0]
 8016e66:	2d00      	cmp	r5, #0
 8016e68:	d0f3      	beq.n	8016e52 <rmw_validate_namespace_with_size+0x4a>
 8016e6a:	23f4      	movs	r3, #244	@ 0xf4
 8016e6c:	602b      	str	r3, [r5, #0]
 8016e6e:	e7f0      	b.n	8016e52 <rmw_validate_namespace_with_size+0x4a>
 8016e70:	200b      	movs	r0, #11
 8016e72:	4770      	bx	lr
 8016e74:	4a03      	ldr	r2, [pc, #12]	@ (8016e84 <rmw_validate_namespace_with_size+0x7c>)
 8016e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016e7a:	a802      	add	r0, sp, #8
 8016e7c:	f7ff fcd4 	bl	8016828 <rcutils_snprintf>
 8016e80:	2001      	movs	r0, #1
 8016e82:	e7e0      	b.n	8016e46 <rmw_validate_namespace_with_size+0x3e>
 8016e84:	08020fe0 	.word	0x08020fe0

08016e88 <rmw_validate_namespace>:
 8016e88:	b168      	cbz	r0, 8016ea6 <rmw_validate_namespace+0x1e>
 8016e8a:	b570      	push	{r4, r5, r6, lr}
 8016e8c:	460d      	mov	r5, r1
 8016e8e:	4616      	mov	r6, r2
 8016e90:	4604      	mov	r4, r0
 8016e92:	f7e9 fa1d 	bl	80002d0 <strlen>
 8016e96:	4633      	mov	r3, r6
 8016e98:	4601      	mov	r1, r0
 8016e9a:	462a      	mov	r2, r5
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ea2:	f7ff bfb1 	b.w	8016e08 <rmw_validate_namespace_with_size>
 8016ea6:	200b      	movs	r0, #11
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop

08016eac <rmw_namespace_validation_result_string>:
 8016eac:	2807      	cmp	r0, #7
 8016eae:	bf9a      	itte	ls
 8016eb0:	4b02      	ldrls	r3, [pc, #8]	@ (8016ebc <rmw_namespace_validation_result_string+0x10>)
 8016eb2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016eb6:	4802      	ldrhi	r0, [pc, #8]	@ (8016ec0 <rmw_namespace_validation_result_string+0x14>)
 8016eb8:	4770      	bx	lr
 8016eba:	bf00      	nop
 8016ebc:	08021d10 	.word	0x08021d10
 8016ec0:	08021030 	.word	0x08021030

08016ec4 <rmw_validate_node_name>:
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d037      	beq.n	8016f38 <rmw_validate_node_name+0x74>
 8016ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eca:	460e      	mov	r6, r1
 8016ecc:	2900      	cmp	r1, #0
 8016ece:	d035      	beq.n	8016f3c <rmw_validate_node_name+0x78>
 8016ed0:	4617      	mov	r7, r2
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	f7e9 f9fc 	bl	80002d0 <strlen>
 8016ed8:	b1d8      	cbz	r0, 8016f12 <rmw_validate_node_name+0x4e>
 8016eda:	1e63      	subs	r3, r4, #1
 8016edc:	1819      	adds	r1, r3, r0
 8016ede:	461a      	mov	r2, r3
 8016ee0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016ee4:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8016ee8:	f02e 0c20 	bic.w	ip, lr, #32
 8016eec:	2d09      	cmp	r5, #9
 8016eee:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016ef2:	d915      	bls.n	8016f20 <rmw_validate_node_name+0x5c>
 8016ef4:	f1bc 0f19 	cmp.w	ip, #25
 8016ef8:	d912      	bls.n	8016f20 <rmw_validate_node_name+0x5c>
 8016efa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016efe:	d00f      	beq.n	8016f20 <rmw_validate_node_name+0x5c>
 8016f00:	2302      	movs	r3, #2
 8016f02:	6033      	str	r3, [r6, #0]
 8016f04:	b11f      	cbz	r7, 8016f0e <rmw_validate_node_name+0x4a>
 8016f06:	f1c4 0401 	rsb	r4, r4, #1
 8016f0a:	4414      	add	r4, r2
 8016f0c:	603c      	str	r4, [r7, #0]
 8016f0e:	2000      	movs	r0, #0
 8016f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f12:	2301      	movs	r3, #1
 8016f14:	6033      	str	r3, [r6, #0]
 8016f16:	2f00      	cmp	r7, #0
 8016f18:	d0f9      	beq.n	8016f0e <rmw_validate_node_name+0x4a>
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	603b      	str	r3, [r7, #0]
 8016f1e:	e7f6      	b.n	8016f0e <rmw_validate_node_name+0x4a>
 8016f20:	4299      	cmp	r1, r3
 8016f22:	d1dc      	bne.n	8016ede <rmw_validate_node_name+0x1a>
 8016f24:	7823      	ldrb	r3, [r4, #0]
 8016f26:	4a0c      	ldr	r2, [pc, #48]	@ (8016f58 <rmw_validate_node_name+0x94>)
 8016f28:	5cd3      	ldrb	r3, [r2, r3]
 8016f2a:	f013 0304 	ands.w	r3, r3, #4
 8016f2e:	d10e      	bne.n	8016f4e <rmw_validate_node_name+0x8a>
 8016f30:	28ff      	cmp	r0, #255	@ 0xff
 8016f32:	d805      	bhi.n	8016f40 <rmw_validate_node_name+0x7c>
 8016f34:	6033      	str	r3, [r6, #0]
 8016f36:	e7ea      	b.n	8016f0e <rmw_validate_node_name+0x4a>
 8016f38:	200b      	movs	r0, #11
 8016f3a:	4770      	bx	lr
 8016f3c:	200b      	movs	r0, #11
 8016f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f40:	2304      	movs	r3, #4
 8016f42:	6033      	str	r3, [r6, #0]
 8016f44:	2f00      	cmp	r7, #0
 8016f46:	d0e2      	beq.n	8016f0e <rmw_validate_node_name+0x4a>
 8016f48:	23fe      	movs	r3, #254	@ 0xfe
 8016f4a:	603b      	str	r3, [r7, #0]
 8016f4c:	e7df      	b.n	8016f0e <rmw_validate_node_name+0x4a>
 8016f4e:	2303      	movs	r3, #3
 8016f50:	6033      	str	r3, [r6, #0]
 8016f52:	2f00      	cmp	r7, #0
 8016f54:	d1e1      	bne.n	8016f1a <rmw_validate_node_name+0x56>
 8016f56:	e7da      	b.n	8016f0e <rmw_validate_node_name+0x4a>
 8016f58:	08022149 	.word	0x08022149

08016f5c <rmw_node_name_validation_result_string>:
 8016f5c:	2804      	cmp	r0, #4
 8016f5e:	bf9a      	itte	ls
 8016f60:	4b02      	ldrls	r3, [pc, #8]	@ (8016f6c <rmw_node_name_validation_result_string+0x10>)
 8016f62:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016f66:	4802      	ldrhi	r0, [pc, #8]	@ (8016f70 <rmw_node_name_validation_result_string+0x14>)
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop
 8016f6c:	08021d30 	.word	0x08021d30
 8016f70:	080211d8 	.word	0x080211d8

08016f74 <get_memory>:
 8016f74:	4603      	mov	r3, r0
 8016f76:	6840      	ldr	r0, [r0, #4]
 8016f78:	b158      	cbz	r0, 8016f92 <get_memory+0x1e>
 8016f7a:	6842      	ldr	r2, [r0, #4]
 8016f7c:	605a      	str	r2, [r3, #4]
 8016f7e:	b10a      	cbz	r2, 8016f84 <get_memory+0x10>
 8016f80:	2100      	movs	r1, #0
 8016f82:	6011      	str	r1, [r2, #0]
 8016f84:	681a      	ldr	r2, [r3, #0]
 8016f86:	6042      	str	r2, [r0, #4]
 8016f88:	b102      	cbz	r2, 8016f8c <get_memory+0x18>
 8016f8a:	6010      	str	r0, [r2, #0]
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	6002      	str	r2, [r0, #0]
 8016f90:	6018      	str	r0, [r3, #0]
 8016f92:	4770      	bx	lr

08016f94 <put_memory>:
 8016f94:	680b      	ldr	r3, [r1, #0]
 8016f96:	b10b      	cbz	r3, 8016f9c <put_memory+0x8>
 8016f98:	684a      	ldr	r2, [r1, #4]
 8016f9a:	605a      	str	r2, [r3, #4]
 8016f9c:	684a      	ldr	r2, [r1, #4]
 8016f9e:	b102      	cbz	r2, 8016fa2 <put_memory+0xe>
 8016fa0:	6013      	str	r3, [r2, #0]
 8016fa2:	6803      	ldr	r3, [r0, #0]
 8016fa4:	428b      	cmp	r3, r1
 8016fa6:	6843      	ldr	r3, [r0, #4]
 8016fa8:	bf08      	it	eq
 8016faa:	6002      	streq	r2, [r0, #0]
 8016fac:	604b      	str	r3, [r1, #4]
 8016fae:	b103      	cbz	r3, 8016fb2 <put_memory+0x1e>
 8016fb0:	6019      	str	r1, [r3, #0]
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	600b      	str	r3, [r1, #0]
 8016fb6:	6041      	str	r1, [r0, #4]
 8016fb8:	4770      	bx	lr
 8016fba:	bf00      	nop

08016fbc <rmw_destroy_client>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	b128      	cbz	r0, 8016fcc <rmw_destroy_client+0x10>
 8016fc0:	4604      	mov	r4, r0
 8016fc2:	6800      	ldr	r0, [r0, #0]
 8016fc4:	460d      	mov	r5, r1
 8016fc6:	f7f7 fb83 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8016fca:	b910      	cbnz	r0, 8016fd2 <rmw_destroy_client+0x16>
 8016fcc:	2401      	movs	r4, #1
 8016fce:	4620      	mov	r0, r4
 8016fd0:	bd70      	pop	{r4, r5, r6, pc}
 8016fd2:	6863      	ldr	r3, [r4, #4]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d0f9      	beq.n	8016fcc <rmw_destroy_client+0x10>
 8016fd8:	2d00      	cmp	r5, #0
 8016fda:	d0f7      	beq.n	8016fcc <rmw_destroy_client+0x10>
 8016fdc:	6828      	ldr	r0, [r5, #0]
 8016fde:	f7f7 fb77 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d0f2      	beq.n	8016fcc <rmw_destroy_client+0x10>
 8016fe6:	686e      	ldr	r6, [r5, #4]
 8016fe8:	2e00      	cmp	r6, #0
 8016fea:	d0ef      	beq.n	8016fcc <rmw_destroy_client+0x10>
 8016fec:	6864      	ldr	r4, [r4, #4]
 8016fee:	6932      	ldr	r2, [r6, #16]
 8016ff0:	6920      	ldr	r0, [r4, #16]
 8016ff2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016ff6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ffa:	6819      	ldr	r1, [r3, #0]
 8016ffc:	f002 fc24 	bl	8019848 <uxr_buffer_cancel_data>
 8017000:	4602      	mov	r2, r0
 8017002:	6920      	ldr	r0, [r4, #16]
 8017004:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017008:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801700c:	f7f7 fada 	bl	800e5c4 <run_xrce_session>
 8017010:	6920      	ldr	r0, [r4, #16]
 8017012:	6932      	ldr	r2, [r6, #16]
 8017014:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017018:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801701c:	6819      	ldr	r1, [r3, #0]
 801701e:	f7f8 fca3 	bl	800f968 <uxr_buffer_delete_entity>
 8017022:	4602      	mov	r2, r0
 8017024:	6920      	ldr	r0, [r4, #16]
 8017026:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801702a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801702e:	f7f7 fac9 	bl	800e5c4 <run_xrce_session>
 8017032:	f080 0401 	eor.w	r4, r0, #1
 8017036:	b2e4      	uxtb	r4, r4
 8017038:	4628      	mov	r0, r5
 801703a:	0064      	lsls	r4, r4, #1
 801703c:	f7f7 f9a4 	bl	800e388 <rmw_uxrce_fini_client_memory>
 8017040:	e7c5      	b.n	8016fce <rmw_destroy_client+0x12>
 8017042:	bf00      	nop

08017044 <rmw_get_gid_for_client>:
 8017044:	b1a8      	cbz	r0, 8017072 <rmw_get_gid_for_client+0x2e>
 8017046:	b538      	push	{r3, r4, r5, lr}
 8017048:	460c      	mov	r4, r1
 801704a:	b1a1      	cbz	r1, 8017076 <rmw_get_gid_for_client+0x32>
 801704c:	4605      	mov	r5, r0
 801704e:	6800      	ldr	r0, [r0, #0]
 8017050:	b120      	cbz	r0, 801705c <rmw_get_gid_for_client+0x18>
 8017052:	4b0a      	ldr	r3, [pc, #40]	@ (801707c <rmw_get_gid_for_client+0x38>)
 8017054:	6819      	ldr	r1, [r3, #0]
 8017056:	f7e9 f8db 	bl	8000210 <strcmp>
 801705a:	b940      	cbnz	r0, 801706e <rmw_get_gid_for_client+0x2a>
 801705c:	686b      	ldr	r3, [r5, #4]
 801705e:	2000      	movs	r0, #0
 8017060:	6060      	str	r0, [r4, #4]
 8017062:	60a0      	str	r0, [r4, #8]
 8017064:	60e0      	str	r0, [r4, #12]
 8017066:	6120      	str	r0, [r4, #16]
 8017068:	691b      	ldr	r3, [r3, #16]
 801706a:	6063      	str	r3, [r4, #4]
 801706c:	bd38      	pop	{r3, r4, r5, pc}
 801706e:	200c      	movs	r0, #12
 8017070:	bd38      	pop	{r3, r4, r5, pc}
 8017072:	200b      	movs	r0, #11
 8017074:	4770      	bx	lr
 8017076:	200b      	movs	r0, #11
 8017078:	bd38      	pop	{r3, r4, r5, pc}
 801707a:	bf00      	nop
 801707c:	08021d44 	.word	0x08021d44

08017080 <rmw_get_implementation_identifier>:
 8017080:	4b01      	ldr	r3, [pc, #4]	@ (8017088 <rmw_get_implementation_identifier+0x8>)
 8017082:	6818      	ldr	r0, [r3, #0]
 8017084:	4770      	bx	lr
 8017086:	bf00      	nop
 8017088:	08021d44 	.word	0x08021d44

0801708c <rmw_init_options_init>:
 801708c:	b084      	sub	sp, #16
 801708e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017090:	b083      	sub	sp, #12
 8017092:	ad09      	add	r5, sp, #36	@ 0x24
 8017094:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017098:	b130      	cbz	r0, 80170a8 <rmw_init_options_init+0x1c>
 801709a:	4604      	mov	r4, r0
 801709c:	4628      	mov	r0, r5
 801709e:	f7f6 fcdb 	bl	800da58 <rcutils_allocator_is_valid>
 80170a2:	b108      	cbz	r0, 80170a8 <rmw_init_options_init+0x1c>
 80170a4:	68a6      	ldr	r6, [r4, #8]
 80170a6:	b12e      	cbz	r6, 80170b4 <rmw_init_options_init+0x28>
 80170a8:	200b      	movs	r0, #11
 80170aa:	b003      	add	sp, #12
 80170ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80170b0:	b004      	add	sp, #16
 80170b2:	4770      	bx	lr
 80170b4:	2200      	movs	r2, #0
 80170b6:	2300      	movs	r3, #0
 80170b8:	e9c4 2300 	strd	r2, r3, [r4]
 80170bc:	4b20      	ldr	r3, [pc, #128]	@ (8017140 <rmw_init_options_init+0xb4>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	60a3      	str	r3, [r4, #8]
 80170c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170c4:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 80170c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170cc:	466f      	mov	r7, sp
 80170ce:	682b      	ldr	r3, [r5, #0]
 80170d0:	f8cc 3000 	str.w	r3, [ip]
 80170d4:	4638      	mov	r0, r7
 80170d6:	63a6      	str	r6, [r4, #56]	@ 0x38
 80170d8:	60e6      	str	r6, [r4, #12]
 80170da:	f003 fa6f 	bl	801a5bc <rmw_get_default_security_options>
 80170de:	e897 0003 	ldmia.w	r7, {r0, r1}
 80170e2:	f104 0310 	add.w	r3, r4, #16
 80170e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80170ea:	2203      	movs	r2, #3
 80170ec:	4815      	ldr	r0, [pc, #84]	@ (8017144 <rmw_init_options_init+0xb8>)
 80170ee:	4916      	ldr	r1, [pc, #88]	@ (8017148 <rmw_init_options_init+0xbc>)
 80170f0:	f7f7 f88a 	bl	800e208 <rmw_uxrce_init_init_options_impl_memory>
 80170f4:	4813      	ldr	r0, [pc, #76]	@ (8017144 <rmw_init_options_init+0xb8>)
 80170f6:	f7ff ff3d 	bl	8016f74 <get_memory>
 80170fa:	b1f0      	cbz	r0, 801713a <rmw_init_options_init+0xae>
 80170fc:	4a13      	ldr	r2, [pc, #76]	@ (801714c <rmw_init_options_init+0xc0>)
 80170fe:	6883      	ldr	r3, [r0, #8]
 8017100:	6851      	ldr	r1, [r2, #4]
 8017102:	7810      	ldrb	r0, [r2, #0]
 8017104:	6523      	str	r3, [r4, #80]	@ 0x50
 8017106:	7418      	strb	r0, [r3, #16]
 8017108:	6159      	str	r1, [r3, #20]
 801710a:	68d1      	ldr	r1, [r2, #12]
 801710c:	61d9      	str	r1, [r3, #28]
 801710e:	6911      	ldr	r1, [r2, #16]
 8017110:	6219      	str	r1, [r3, #32]
 8017112:	6951      	ldr	r1, [r2, #20]
 8017114:	6892      	ldr	r2, [r2, #8]
 8017116:	619a      	str	r2, [r3, #24]
 8017118:	6259      	str	r1, [r3, #36]	@ 0x24
 801711a:	f7fa feab 	bl	8011e74 <uxr_nanos>
 801711e:	f003 ff47 	bl	801afb0 <srand>
 8017122:	f003 ff4f 	bl	801afc4 <rand>
 8017126:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017128:	6298      	str	r0, [r3, #40]	@ 0x28
 801712a:	2800      	cmp	r0, #0
 801712c:	d0f9      	beq.n	8017122 <rmw_init_options_init+0x96>
 801712e:	2000      	movs	r0, #0
 8017130:	b003      	add	sp, #12
 8017132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017136:	b004      	add	sp, #16
 8017138:	4770      	bx	lr
 801713a:	2001      	movs	r0, #1
 801713c:	e7b5      	b.n	80170aa <rmw_init_options_init+0x1e>
 801713e:	bf00      	nop
 8017140:	08021d44 	.word	0x08021d44
 8017144:	2000cfb0 	.word	0x2000cfb0
 8017148:	2000cf2c 	.word	0x2000cf2c
 801714c:	2000ce00 	.word	0x2000ce00

08017150 <rmw_init_options_copy>:
 8017150:	2800      	cmp	r0, #0
 8017152:	d03e      	beq.n	80171d2 <rmw_init_options_copy+0x82>
 8017154:	b570      	push	{r4, r5, r6, lr}
 8017156:	460d      	mov	r5, r1
 8017158:	b149      	cbz	r1, 801716e <rmw_init_options_copy+0x1e>
 801715a:	4604      	mov	r4, r0
 801715c:	6880      	ldr	r0, [r0, #8]
 801715e:	b120      	cbz	r0, 801716a <rmw_init_options_copy+0x1a>
 8017160:	4b21      	ldr	r3, [pc, #132]	@ (80171e8 <rmw_init_options_copy+0x98>)
 8017162:	6819      	ldr	r1, [r3, #0]
 8017164:	f7e9 f854 	bl	8000210 <strcmp>
 8017168:	bb78      	cbnz	r0, 80171ca <rmw_init_options_copy+0x7a>
 801716a:	68ab      	ldr	r3, [r5, #8]
 801716c:	b11b      	cbz	r3, 8017176 <rmw_init_options_copy+0x26>
 801716e:	f04f 0c0b 	mov.w	ip, #11
 8017172:	4660      	mov	r0, ip
 8017174:	bd70      	pop	{r4, r5, r6, pc}
 8017176:	2258      	movs	r2, #88	@ 0x58
 8017178:	4621      	mov	r1, r4
 801717a:	4628      	mov	r0, r5
 801717c:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8017180:	f004 fc52 	bl	801ba28 <memcpy>
 8017184:	4630      	mov	r0, r6
 8017186:	f7f6 fc67 	bl	800da58 <rcutils_allocator_is_valid>
 801718a:	2800      	cmp	r0, #0
 801718c:	d0ef      	beq.n	801716e <rmw_init_options_copy+0x1e>
 801718e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017190:	b138      	cbz	r0, 80171a2 <rmw_init_options_copy+0x52>
 8017192:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8017196:	4631      	mov	r1, r6
 8017198:	f003 f9dc 	bl	801a554 <rmw_enclave_options_copy>
 801719c:	4684      	mov	ip, r0
 801719e:	2800      	cmp	r0, #0
 80171a0:	d1e7      	bne.n	8017172 <rmw_init_options_copy+0x22>
 80171a2:	4812      	ldr	r0, [pc, #72]	@ (80171ec <rmw_init_options_copy+0x9c>)
 80171a4:	f7ff fee6 	bl	8016f74 <get_memory>
 80171a8:	b1b8      	cbz	r0, 80171da <rmw_init_options_copy+0x8a>
 80171aa:	6883      	ldr	r3, [r0, #8]
 80171ac:	652b      	str	r3, [r5, #80]	@ 0x50
 80171ae:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 80171b0:	3510      	adds	r5, #16
 80171b2:	f103 0410 	add.w	r4, r3, #16
 80171b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80171be:	f04f 0c00 	mov.w	ip, #0
 80171c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80171c6:	4660      	mov	r0, ip
 80171c8:	bd70      	pop	{r4, r5, r6, pc}
 80171ca:	f04f 0c0c 	mov.w	ip, #12
 80171ce:	4660      	mov	r0, ip
 80171d0:	bd70      	pop	{r4, r5, r6, pc}
 80171d2:	f04f 0c0b 	mov.w	ip, #11
 80171d6:	4660      	mov	r0, ip
 80171d8:	4770      	bx	lr
 80171da:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80171dc:	4631      	mov	r1, r6
 80171de:	f003 f9db 	bl	801a598 <rmw_enclave_options_fini>
 80171e2:	f04f 0c01 	mov.w	ip, #1
 80171e6:	e7c4      	b.n	8017172 <rmw_init_options_copy+0x22>
 80171e8:	08021d44 	.word	0x08021d44
 80171ec:	2000cfb0 	.word	0x2000cfb0

080171f0 <rmw_init_options_fini>:
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d035      	beq.n	8017260 <rmw_init_options_fini+0x70>
 80171f4:	b530      	push	{r4, r5, lr}
 80171f6:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 80171fa:	b097      	sub	sp, #92	@ 0x5c
 80171fc:	4604      	mov	r4, r0
 80171fe:	4628      	mov	r0, r5
 8017200:	f7f6 fc2a 	bl	800da58 <rcutils_allocator_is_valid>
 8017204:	b320      	cbz	r0, 8017250 <rmw_init_options_fini+0x60>
 8017206:	68a0      	ldr	r0, [r4, #8]
 8017208:	b120      	cbz	r0, 8017214 <rmw_init_options_fini+0x24>
 801720a:	4b16      	ldr	r3, [pc, #88]	@ (8017264 <rmw_init_options_fini+0x74>)
 801720c:	6819      	ldr	r1, [r3, #0]
 801720e:	f7e8 ffff 	bl	8000210 <strcmp>
 8017212:	bb18      	cbnz	r0, 801725c <rmw_init_options_fini+0x6c>
 8017214:	4b14      	ldr	r3, [pc, #80]	@ (8017268 <rmw_init_options_fini+0x78>)
 8017216:	6819      	ldr	r1, [r3, #0]
 8017218:	b1e9      	cbz	r1, 8017256 <rmw_init_options_fini+0x66>
 801721a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801721c:	e001      	b.n	8017222 <rmw_init_options_fini+0x32>
 801721e:	6849      	ldr	r1, [r1, #4]
 8017220:	b1c9      	cbz	r1, 8017256 <rmw_init_options_fini+0x66>
 8017222:	688b      	ldr	r3, [r1, #8]
 8017224:	429a      	cmp	r2, r3
 8017226:	d1fa      	bne.n	801721e <rmw_init_options_fini+0x2e>
 8017228:	480f      	ldr	r0, [pc, #60]	@ (8017268 <rmw_init_options_fini+0x78>)
 801722a:	f7ff feb3 	bl	8016f94 <put_memory>
 801722e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017230:	b118      	cbz	r0, 801723a <rmw_init_options_fini+0x4a>
 8017232:	4629      	mov	r1, r5
 8017234:	f003 f9b0 	bl	801a598 <rmw_enclave_options_fini>
 8017238:	b940      	cbnz	r0, 801724c <rmw_init_options_fini+0x5c>
 801723a:	4668      	mov	r0, sp
 801723c:	f7ff fca6 	bl	8016b8c <rmw_get_zero_initialized_init_options>
 8017240:	2258      	movs	r2, #88	@ 0x58
 8017242:	4669      	mov	r1, sp
 8017244:	4620      	mov	r0, r4
 8017246:	f004 fbef 	bl	801ba28 <memcpy>
 801724a:	2000      	movs	r0, #0
 801724c:	b017      	add	sp, #92	@ 0x5c
 801724e:	bd30      	pop	{r4, r5, pc}
 8017250:	200b      	movs	r0, #11
 8017252:	b017      	add	sp, #92	@ 0x5c
 8017254:	bd30      	pop	{r4, r5, pc}
 8017256:	2001      	movs	r0, #1
 8017258:	b017      	add	sp, #92	@ 0x5c
 801725a:	bd30      	pop	{r4, r5, pc}
 801725c:	200c      	movs	r0, #12
 801725e:	e7f5      	b.n	801724c <rmw_init_options_fini+0x5c>
 8017260:	200b      	movs	r0, #11
 8017262:	4770      	bx	lr
 8017264:	08021d44 	.word	0x08021d44
 8017268:	2000cfb0 	.word	0x2000cfb0

0801726c <rmw_init>:
 801726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017270:	b083      	sub	sp, #12
 8017272:	2800      	cmp	r0, #0
 8017274:	f000 80d4 	beq.w	8017420 <rmw_init+0x1b4>
 8017278:	460e      	mov	r6, r1
 801727a:	2900      	cmp	r1, #0
 801727c:	f000 80d0 	beq.w	8017420 <rmw_init+0x1b4>
 8017280:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8017282:	4605      	mov	r5, r0
 8017284:	2b00      	cmp	r3, #0
 8017286:	f000 80cb 	beq.w	8017420 <rmw_init+0x1b4>
 801728a:	4b77      	ldr	r3, [pc, #476]	@ (8017468 <rmw_init+0x1fc>)
 801728c:	6880      	ldr	r0, [r0, #8]
 801728e:	681f      	ldr	r7, [r3, #0]
 8017290:	b128      	cbz	r0, 801729e <rmw_init+0x32>
 8017292:	4639      	mov	r1, r7
 8017294:	f7e8 ffbc 	bl	8000210 <strcmp>
 8017298:	2800      	cmp	r0, #0
 801729a:	f040 80d3 	bne.w	8017444 <rmw_init+0x1d8>
 801729e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80172a2:	4c72      	ldr	r4, [pc, #456]	@ (801746c <rmw_init+0x200>)
 80172a4:	4972      	ldr	r1, [pc, #456]	@ (8017470 <rmw_init+0x204>)
 80172a6:	4873      	ldr	r0, [pc, #460]	@ (8017474 <rmw_init+0x208>)
 80172a8:	60b7      	str	r7, [r6, #8]
 80172aa:	e9c6 2300 	strd	r2, r3, [r6]
 80172ae:	68eb      	ldr	r3, [r5, #12]
 80172b0:	66b3      	str	r3, [r6, #104]	@ 0x68
 80172b2:	2201      	movs	r2, #1
 80172b4:	f7f6 ff48 	bl	800e148 <rmw_uxrce_init_session_memory>
 80172b8:	4620      	mov	r0, r4
 80172ba:	496f      	ldr	r1, [pc, #444]	@ (8017478 <rmw_init+0x20c>)
 80172bc:	2204      	movs	r2, #4
 80172be:	f7f6 ff83 	bl	800e1c8 <rmw_uxrce_init_static_input_buffer_memory>
 80172c2:	f04f 0800 	mov.w	r8, #0
 80172c6:	486b      	ldr	r0, [pc, #428]	@ (8017474 <rmw_init+0x208>)
 80172c8:	f884 800d 	strb.w	r8, [r4, #13]
 80172cc:	f7ff fe52 	bl	8016f74 <get_memory>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	f000 80b2 	beq.w	801743a <rmw_init+0x1ce>
 80172d6:	6884      	ldr	r4, [r0, #8]
 80172d8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80172da:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80172dc:	f890 c010 	ldrb.w	ip, [r0, #16]
 80172e0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80172e4:	9101      	str	r1, [sp, #4]
 80172e6:	6a00      	ldr	r0, [r0, #32]
 80172e8:	9000      	str	r0, [sp, #0]
 80172ea:	f104 0910 	add.w	r9, r4, #16
 80172ee:	4661      	mov	r1, ip
 80172f0:	4648      	mov	r0, r9
 80172f2:	f7f8 fd8d 	bl	800fe10 <uxr_set_custom_transport_callbacks>
 80172f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80172fa:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 80172fe:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8017302:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8017306:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801730a:	495c      	ldr	r1, [pc, #368]	@ (801747c <rmw_init+0x210>)
 801730c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8017310:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8017314:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8017318:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801731c:	4858      	ldr	r0, [pc, #352]	@ (8017480 <rmw_init+0x214>)
 801731e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8017322:	2201      	movs	r2, #1
 8017324:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8017326:	f7f6 feef 	bl	800e108 <rmw_uxrce_init_node_memory>
 801732a:	4956      	ldr	r1, [pc, #344]	@ (8017484 <rmw_init+0x218>)
 801732c:	4856      	ldr	r0, [pc, #344]	@ (8017488 <rmw_init+0x21c>)
 801732e:	2205      	movs	r2, #5
 8017330:	f7f6 feca 	bl	800e0c8 <rmw_uxrce_init_subscription_memory>
 8017334:	4955      	ldr	r1, [pc, #340]	@ (801748c <rmw_init+0x220>)
 8017336:	4856      	ldr	r0, [pc, #344]	@ (8017490 <rmw_init+0x224>)
 8017338:	220a      	movs	r2, #10
 801733a:	f7f6 fea5 	bl	800e088 <rmw_uxrce_init_publisher_memory>
 801733e:	4955      	ldr	r1, [pc, #340]	@ (8017494 <rmw_init+0x228>)
 8017340:	4855      	ldr	r0, [pc, #340]	@ (8017498 <rmw_init+0x22c>)
 8017342:	2201      	movs	r2, #1
 8017344:	f7f6 fe60 	bl	800e008 <rmw_uxrce_init_service_memory>
 8017348:	4954      	ldr	r1, [pc, #336]	@ (801749c <rmw_init+0x230>)
 801734a:	4855      	ldr	r0, [pc, #340]	@ (80174a0 <rmw_init+0x234>)
 801734c:	2201      	movs	r2, #1
 801734e:	f7f6 fe7b 	bl	800e048 <rmw_uxrce_init_client_memory>
 8017352:	4954      	ldr	r1, [pc, #336]	@ (80174a4 <rmw_init+0x238>)
 8017354:	4854      	ldr	r0, [pc, #336]	@ (80174a8 <rmw_init+0x23c>)
 8017356:	220f      	movs	r2, #15
 8017358:	f7f6 ff16 	bl	800e188 <rmw_uxrce_init_topic_memory>
 801735c:	4953      	ldr	r1, [pc, #332]	@ (80174ac <rmw_init+0x240>)
 801735e:	4854      	ldr	r0, [pc, #336]	@ (80174b0 <rmw_init+0x244>)
 8017360:	2203      	movs	r2, #3
 8017362:	f7f6 ff51 	bl	800e208 <rmw_uxrce_init_init_options_impl_memory>
 8017366:	4953      	ldr	r1, [pc, #332]	@ (80174b4 <rmw_init+0x248>)
 8017368:	4853      	ldr	r0, [pc, #332]	@ (80174b8 <rmw_init+0x24c>)
 801736a:	2204      	movs	r2, #4
 801736c:	f7f6 ff6c 	bl	800e248 <rmw_uxrce_init_wait_set_memory>
 8017370:	4952      	ldr	r1, [pc, #328]	@ (80174bc <rmw_init+0x250>)
 8017372:	4853      	ldr	r0, [pc, #332]	@ (80174c0 <rmw_init+0x254>)
 8017374:	2204      	movs	r2, #4
 8017376:	f7f6 ff87 	bl	800e288 <rmw_uxrce_init_guard_condition_memory>
 801737a:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 801737c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 801737e:	4642      	mov	r2, r8
 8017380:	f7f6 fe0a 	bl	800df98 <rmw_uxrce_transport_init>
 8017384:	4607      	mov	r7, r0
 8017386:	2800      	cmp	r0, #0
 8017388:	d161      	bne.n	801744e <rmw_init+0x1e2>
 801738a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801738c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8017390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017392:	4628      	mov	r0, r5
 8017394:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8017398:	f7f8 ff46 	bl	8010228 <uxr_init_session>
 801739c:	4628      	mov	r0, r5
 801739e:	4949      	ldr	r1, [pc, #292]	@ (80174c4 <rmw_init+0x258>)
 80173a0:	4622      	mov	r2, r4
 80173a2:	f7f8 ff65 	bl	8010270 <uxr_set_topic_callback>
 80173a6:	4628      	mov	r0, r5
 80173a8:	4947      	ldr	r1, [pc, #284]	@ (80174c8 <rmw_init+0x25c>)
 80173aa:	463a      	mov	r2, r7
 80173ac:	f7f8 ff5c 	bl	8010268 <uxr_set_status_callback>
 80173b0:	4628      	mov	r0, r5
 80173b2:	4946      	ldr	r1, [pc, #280]	@ (80174cc <rmw_init+0x260>)
 80173b4:	463a      	mov	r2, r7
 80173b6:	f7f8 ff5f 	bl	8010278 <uxr_set_request_callback>
 80173ba:	4628      	mov	r0, r5
 80173bc:	4944      	ldr	r1, [pc, #272]	@ (80174d0 <rmw_init+0x264>)
 80173be:	463a      	mov	r2, r7
 80173c0:	f7f8 ff5e 	bl	8010280 <uxr_set_reply_callback>
 80173c4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80173c8:	2304      	movs	r3, #4
 80173ca:	0092      	lsls	r2, r2, #2
 80173cc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80173d0:	4628      	mov	r0, r5
 80173d2:	f7f8 ff83 	bl	80102dc <uxr_create_input_reliable_stream>
 80173d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80173da:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80173de:	2304      	movs	r3, #4
 80173e0:	0092      	lsls	r2, r2, #2
 80173e2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80173e6:	4628      	mov	r0, r5
 80173e8:	f7f8 ff60 	bl	80102ac <uxr_create_output_reliable_stream>
 80173ec:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80173f0:	4628      	mov	r0, r5
 80173f2:	f7f8 ff6d 	bl	80102d0 <uxr_create_input_best_effort_stream>
 80173f6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80173fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80173fe:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8017402:	3114      	adds	r1, #20
 8017404:	4628      	mov	r0, r5
 8017406:	f7f8 ff3f 	bl	8010288 <uxr_create_output_best_effort_stream>
 801740a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801740e:	4628      	mov	r0, r5
 8017410:	f7f9 fd00 	bl	8010e14 <uxr_create_session>
 8017414:	4605      	mov	r5, r0
 8017416:	b140      	cbz	r0, 801742a <rmw_init+0x1be>
 8017418:	4638      	mov	r0, r7
 801741a:	b003      	add	sp, #12
 801741c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017420:	270b      	movs	r7, #11
 8017422:	4638      	mov	r0, r7
 8017424:	b003      	add	sp, #12
 8017426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801742a:	4648      	mov	r0, r9
 801742c:	f7f8 fd32 	bl	800fe94 <uxr_close_custom_transport>
 8017430:	4810      	ldr	r0, [pc, #64]	@ (8017474 <rmw_init+0x208>)
 8017432:	4621      	mov	r1, r4
 8017434:	f7ff fdae 	bl	8016f94 <put_memory>
 8017438:	66f5      	str	r5, [r6, #108]	@ 0x6c
 801743a:	2701      	movs	r7, #1
 801743c:	4638      	mov	r0, r7
 801743e:	b003      	add	sp, #12
 8017440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017444:	270c      	movs	r7, #12
 8017446:	4638      	mov	r0, r7
 8017448:	b003      	add	sp, #12
 801744a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801744e:	4648      	mov	r0, r9
 8017450:	f7f8 fd20 	bl	800fe94 <uxr_close_custom_transport>
 8017454:	4807      	ldr	r0, [pc, #28]	@ (8017474 <rmw_init+0x208>)
 8017456:	4621      	mov	r1, r4
 8017458:	f7ff fd9c 	bl	8016f94 <put_memory>
 801745c:	4638      	mov	r0, r7
 801745e:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8017462:	b003      	add	sp, #12
 8017464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017468:	08021d44 	.word	0x08021d44
 801746c:	2000f0c0 	.word	0x2000f0c0
 8017470:	200101b8 	.word	0x200101b8
 8017474:	20011760 	.word	0x20011760
 8017478:	2000cfc0 	.word	0x2000cfc0
 801747c:	20010100 	.word	0x20010100
 8017480:	200101a4 	.word	0x200101a4
 8017484:	2000f438 	.word	0x2000f438
 8017488:	2000f870 	.word	0x2000f870
 801748c:	2000f880 	.word	0x2000f880
 8017490:	200100f0 	.word	0x200100f0
 8017494:	2000f360 	.word	0x2000f360
 8017498:	2000f428 	.word	0x2000f428
 801749c:	2000f288 	.word	0x2000f288
 80174a0:	2000f350 	.word	0x2000f350
 80174a4:	2000f0d0 	.word	0x2000f0d0
 80174a8:	2000f274 	.word	0x2000f274
 80174ac:	2000cf2c 	.word	0x2000cf2c
 80174b0:	2000cfb0 	.word	0x2000cfb0
 80174b4:	2000ceac 	.word	0x2000ceac
 80174b8:	2000cf1c 	.word	0x2000cf1c
 80174bc:	2000ce1c 	.word	0x2000ce1c
 80174c0:	2000ce9c 	.word	0x2000ce9c
 80174c4:	0801a5cd 	.word	0x0801a5cd
 80174c8:	0801a5c5 	.word	0x0801a5c5
 80174cc:	0801a665 	.word	0x0801a665
 80174d0:	0801a701 	.word	0x0801a701

080174d4 <rmw_context_fini>:
 80174d4:	4b17      	ldr	r3, [pc, #92]	@ (8017534 <rmw_context_fini+0x60>)
 80174d6:	b570      	push	{r4, r5, r6, lr}
 80174d8:	681c      	ldr	r4, [r3, #0]
 80174da:	4605      	mov	r5, r0
 80174dc:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80174de:	b33c      	cbz	r4, 8017530 <rmw_context_fini+0x5c>
 80174e0:	2600      	movs	r6, #0
 80174e2:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 80174e6:	691a      	ldr	r2, [r3, #16]
 80174e8:	4282      	cmp	r2, r0
 80174ea:	d018      	beq.n	801751e <rmw_context_fini+0x4a>
 80174ec:	2c00      	cmp	r4, #0
 80174ee:	d1f8      	bne.n	80174e2 <rmw_context_fini+0xe>
 80174f0:	b188      	cbz	r0, 8017516 <rmw_context_fini+0x42>
 80174f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80174f6:	789b      	ldrb	r3, [r3, #2]
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	bf14      	ite	ne
 80174fc:	210a      	movne	r1, #10
 80174fe:	2100      	moveq	r1, #0
 8017500:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017504:	f7f9 fc5e 	bl	8010dc4 <uxr_delete_session_retries>
 8017508:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801750a:	f7f6 fedd 	bl	800e2c8 <rmw_uxrce_fini_session_memory>
 801750e:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8017510:	3010      	adds	r0, #16
 8017512:	f7f8 fcbf 	bl	800fe94 <uxr_close_custom_transport>
 8017516:	2300      	movs	r3, #0
 8017518:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801751a:	4630      	mov	r0, r6
 801751c:	bd70      	pop	{r4, r5, r6, pc}
 801751e:	f103 0018 	add.w	r0, r3, #24
 8017522:	f000 f911 	bl	8017748 <rmw_destroy_node>
 8017526:	4606      	mov	r6, r0
 8017528:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801752a:	2c00      	cmp	r4, #0
 801752c:	d1d9      	bne.n	80174e2 <rmw_context_fini+0xe>
 801752e:	e7df      	b.n	80174f0 <rmw_context_fini+0x1c>
 8017530:	4626      	mov	r6, r4
 8017532:	e7dd      	b.n	80174f0 <rmw_context_fini+0x1c>
 8017534:	200101a4 	.word	0x200101a4

08017538 <create_topic>:
 8017538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801753c:	4604      	mov	r4, r0
 801753e:	b084      	sub	sp, #16
 8017540:	4824      	ldr	r0, [pc, #144]	@ (80175d4 <create_topic+0x9c>)
 8017542:	460f      	mov	r7, r1
 8017544:	4616      	mov	r6, r2
 8017546:	f7ff fd15 	bl	8016f74 <get_memory>
 801754a:	2800      	cmp	r0, #0
 801754c:	d03c      	beq.n	80175c8 <create_topic+0x90>
 801754e:	6923      	ldr	r3, [r4, #16]
 8017550:	6885      	ldr	r5, [r0, #8]
 8017552:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80175dc <create_topic+0xa4>
 8017556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801755a:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801755e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017562:	1c42      	adds	r2, r0, #1
 8017564:	2102      	movs	r1, #2
 8017566:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801756a:	f7f8 fc97 	bl	800fe9c <uxr_object_id>
 801756e:	223c      	movs	r2, #60	@ 0x3c
 8017570:	6128      	str	r0, [r5, #16]
 8017572:	4641      	mov	r1, r8
 8017574:	4638      	mov	r0, r7
 8017576:	f7f7 f891 	bl	800e69c <generate_topic_name>
 801757a:	b310      	cbz	r0, 80175c2 <create_topic+0x8a>
 801757c:	4f16      	ldr	r7, [pc, #88]	@ (80175d8 <create_topic+0xa0>)
 801757e:	4630      	mov	r0, r6
 8017580:	2264      	movs	r2, #100	@ 0x64
 8017582:	4639      	mov	r1, r7
 8017584:	f7f7 f85a 	bl	800e63c <generate_type_name>
 8017588:	b1d8      	cbz	r0, 80175c2 <create_topic+0x8a>
 801758a:	6920      	ldr	r0, [r4, #16]
 801758c:	2306      	movs	r3, #6
 801758e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017592:	f8cd 8000 	str.w	r8, [sp]
 8017596:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801759a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801759e:	6811      	ldr	r1, [r2, #0]
 80175a0:	6963      	ldr	r3, [r4, #20]
 80175a2:	692a      	ldr	r2, [r5, #16]
 80175a4:	f7f8 fa5c 	bl	800fa60 <uxr_buffer_create_topic_bin>
 80175a8:	4602      	mov	r2, r0
 80175aa:	6920      	ldr	r0, [r4, #16]
 80175ac:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80175b0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80175b4:	f7f7 f806 	bl	800e5c4 <run_xrce_session>
 80175b8:	b118      	cbz	r0, 80175c2 <create_topic+0x8a>
 80175ba:	4628      	mov	r0, r5
 80175bc:	b004      	add	sp, #16
 80175be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175c2:	4628      	mov	r0, r5
 80175c4:	f7f6 fef6 	bl	800e3b4 <rmw_uxrce_fini_topic_memory>
 80175c8:	2500      	movs	r5, #0
 80175ca:	4628      	mov	r0, r5
 80175cc:	b004      	add	sp, #16
 80175ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d2:	bf00      	nop
 80175d4:	2000f274 	.word	0x2000f274
 80175d8:	2001196c 	.word	0x2001196c
 80175dc:	200119d0 	.word	0x200119d0

080175e0 <destroy_topic>:
 80175e0:	b538      	push	{r3, r4, r5, lr}
 80175e2:	6984      	ldr	r4, [r0, #24]
 80175e4:	b1d4      	cbz	r4, 801761c <destroy_topic+0x3c>
 80175e6:	4605      	mov	r5, r0
 80175e8:	6920      	ldr	r0, [r4, #16]
 80175ea:	692a      	ldr	r2, [r5, #16]
 80175ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80175f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80175f4:	6819      	ldr	r1, [r3, #0]
 80175f6:	f7f8 f9b7 	bl	800f968 <uxr_buffer_delete_entity>
 80175fa:	4602      	mov	r2, r0
 80175fc:	6920      	ldr	r0, [r4, #16]
 80175fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017602:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017606:	f7f6 ffdd 	bl	800e5c4 <run_xrce_session>
 801760a:	f080 0401 	eor.w	r4, r0, #1
 801760e:	b2e4      	uxtb	r4, r4
 8017610:	4628      	mov	r0, r5
 8017612:	0064      	lsls	r4, r4, #1
 8017614:	f7f6 fece 	bl	800e3b4 <rmw_uxrce_fini_topic_memory>
 8017618:	4620      	mov	r0, r4
 801761a:	bd38      	pop	{r3, r4, r5, pc}
 801761c:	2401      	movs	r4, #1
 801761e:	4620      	mov	r0, r4
 8017620:	bd38      	pop	{r3, r4, r5, pc}
 8017622:	bf00      	nop

08017624 <create_node>:
 8017624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017628:	b083      	sub	sp, #12
 801762a:	2b00      	cmp	r3, #0
 801762c:	d063      	beq.n	80176f6 <create_node+0xd2>
 801762e:	4606      	mov	r6, r0
 8017630:	4836      	ldr	r0, [pc, #216]	@ (801770c <create_node+0xe8>)
 8017632:	460f      	mov	r7, r1
 8017634:	4690      	mov	r8, r2
 8017636:	461d      	mov	r5, r3
 8017638:	f7ff fc9c 	bl	8016f74 <get_memory>
 801763c:	2800      	cmp	r0, #0
 801763e:	d05a      	beq.n	80176f6 <create_node+0xd2>
 8017640:	6884      	ldr	r4, [r0, #8]
 8017642:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8017644:	6123      	str	r3, [r4, #16]
 8017646:	f7ff fd1b 	bl	8017080 <rmw_get_implementation_identifier>
 801764a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801764e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8017652:	f8c4 9020 	str.w	r9, [r4, #32]
 8017656:	4630      	mov	r0, r6
 8017658:	f7e8 fe3a 	bl	80002d0 <strlen>
 801765c:	1c42      	adds	r2, r0, #1
 801765e:	2a3c      	cmp	r2, #60	@ 0x3c
 8017660:	f104 0518 	add.w	r5, r4, #24
 8017664:	d844      	bhi.n	80176f0 <create_node+0xcc>
 8017666:	4648      	mov	r0, r9
 8017668:	4631      	mov	r1, r6
 801766a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801766e:	f004 f9db 	bl	801ba28 <memcpy>
 8017672:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8017676:	4638      	mov	r0, r7
 8017678:	f7e8 fe2a 	bl	80002d0 <strlen>
 801767c:	1c42      	adds	r2, r0, #1
 801767e:	2a3c      	cmp	r2, #60	@ 0x3c
 8017680:	d836      	bhi.n	80176f0 <create_node+0xcc>
 8017682:	4639      	mov	r1, r7
 8017684:	4648      	mov	r0, r9
 8017686:	f004 f9cf 	bl	801ba28 <memcpy>
 801768a:	6923      	ldr	r3, [r4, #16]
 801768c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017690:	2101      	movs	r1, #1
 8017692:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8017696:	1842      	adds	r2, r0, r1
 8017698:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801769c:	f7f8 fbfe 	bl	800fe9c <uxr_object_id>
 80176a0:	6160      	str	r0, [r4, #20]
 80176a2:	783b      	ldrb	r3, [r7, #0]
 80176a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80176a6:	d128      	bne.n	80176fa <create_node+0xd6>
 80176a8:	787b      	ldrb	r3, [r7, #1]
 80176aa:	bb33      	cbnz	r3, 80176fa <create_node+0xd6>
 80176ac:	4a18      	ldr	r2, [pc, #96]	@ (8017710 <create_node+0xec>)
 80176ae:	4819      	ldr	r0, [pc, #100]	@ (8017714 <create_node+0xf0>)
 80176b0:	4633      	mov	r3, r6
 80176b2:	213c      	movs	r1, #60	@ 0x3c
 80176b4:	f003 fff0 	bl	801b698 <snprintf>
 80176b8:	6920      	ldr	r0, [r4, #16]
 80176ba:	4916      	ldr	r1, [pc, #88]	@ (8017714 <create_node+0xf0>)
 80176bc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80176c0:	9100      	str	r1, [sp, #0]
 80176c2:	2106      	movs	r1, #6
 80176c4:	9101      	str	r1, [sp, #4]
 80176c6:	6811      	ldr	r1, [r2, #0]
 80176c8:	6962      	ldr	r2, [r4, #20]
 80176ca:	fa1f f388 	uxth.w	r3, r8
 80176ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176d2:	f7f8 f993 	bl	800f9fc <uxr_buffer_create_participant_bin>
 80176d6:	4602      	mov	r2, r0
 80176d8:	6920      	ldr	r0, [r4, #16]
 80176da:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80176de:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80176e2:	f7f6 ff6f 	bl	800e5c4 <run_xrce_session>
 80176e6:	b118      	cbz	r0, 80176f0 <create_node+0xcc>
 80176e8:	4628      	mov	r0, r5
 80176ea:	b003      	add	sp, #12
 80176ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176f0:	4628      	mov	r0, r5
 80176f2:	f7f6 fdef 	bl	800e2d4 <rmw_uxrce_fini_node_memory>
 80176f6:	2500      	movs	r5, #0
 80176f8:	e7f6      	b.n	80176e8 <create_node+0xc4>
 80176fa:	4a07      	ldr	r2, [pc, #28]	@ (8017718 <create_node+0xf4>)
 80176fc:	9600      	str	r6, [sp, #0]
 80176fe:	463b      	mov	r3, r7
 8017700:	213c      	movs	r1, #60	@ 0x3c
 8017702:	4804      	ldr	r0, [pc, #16]	@ (8017714 <create_node+0xf0>)
 8017704:	f003 ffc8 	bl	801b698 <snprintf>
 8017708:	e7d6      	b.n	80176b8 <create_node+0x94>
 801770a:	bf00      	nop
 801770c:	200101a4 	.word	0x200101a4
 8017710:	08020c98 	.word	0x08020c98
 8017714:	20011a0c 	.word	0x20011a0c
 8017718:	08020f84 	.word	0x08020f84

0801771c <rmw_create_node>:
 801771c:	b191      	cbz	r1, 8017744 <rmw_create_node+0x28>
 801771e:	b410      	push	{r4}
 8017720:	4614      	mov	r4, r2
 8017722:	780a      	ldrb	r2, [r1, #0]
 8017724:	4603      	mov	r3, r0
 8017726:	4608      	mov	r0, r1
 8017728:	b142      	cbz	r2, 801773c <rmw_create_node+0x20>
 801772a:	b13c      	cbz	r4, 801773c <rmw_create_node+0x20>
 801772c:	7822      	ldrb	r2, [r4, #0]
 801772e:	b12a      	cbz	r2, 801773c <rmw_create_node+0x20>
 8017730:	4621      	mov	r1, r4
 8017732:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017738:	f7ff bf74 	b.w	8017624 <create_node>
 801773c:	2000      	movs	r0, #0
 801773e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017742:	4770      	bx	lr
 8017744:	2000      	movs	r0, #0
 8017746:	4770      	bx	lr

08017748 <rmw_destroy_node>:
 8017748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801774a:	b328      	cbz	r0, 8017798 <rmw_destroy_node+0x50>
 801774c:	4607      	mov	r7, r0
 801774e:	6800      	ldr	r0, [r0, #0]
 8017750:	b120      	cbz	r0, 801775c <rmw_destroy_node+0x14>
 8017752:	4b36      	ldr	r3, [pc, #216]	@ (801782c <rmw_destroy_node+0xe4>)
 8017754:	6819      	ldr	r1, [r3, #0]
 8017756:	f7e8 fd5b 	bl	8000210 <strcmp>
 801775a:	b9e8      	cbnz	r0, 8017798 <rmw_destroy_node+0x50>
 801775c:	687d      	ldr	r5, [r7, #4]
 801775e:	b1dd      	cbz	r5, 8017798 <rmw_destroy_node+0x50>
 8017760:	4b33      	ldr	r3, [pc, #204]	@ (8017830 <rmw_destroy_node+0xe8>)
 8017762:	681c      	ldr	r4, [r3, #0]
 8017764:	2c00      	cmp	r4, #0
 8017766:	d05f      	beq.n	8017828 <rmw_destroy_node+0xe0>
 8017768:	2600      	movs	r6, #0
 801776a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801776e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8017772:	429d      	cmp	r5, r3
 8017774:	d013      	beq.n	801779e <rmw_destroy_node+0x56>
 8017776:	2c00      	cmp	r4, #0
 8017778:	d1f7      	bne.n	801776a <rmw_destroy_node+0x22>
 801777a:	4b2e      	ldr	r3, [pc, #184]	@ (8017834 <rmw_destroy_node+0xec>)
 801777c:	681c      	ldr	r4, [r3, #0]
 801777e:	b1c4      	cbz	r4, 80177b2 <rmw_destroy_node+0x6a>
 8017780:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017784:	6a0b      	ldr	r3, [r1, #32]
 8017786:	429d      	cmp	r5, r3
 8017788:	d1f9      	bne.n	801777e <rmw_destroy_node+0x36>
 801778a:	317c      	adds	r1, #124	@ 0x7c
 801778c:	4638      	mov	r0, r7
 801778e:	f000 fad9 	bl	8017d44 <rmw_destroy_subscription>
 8017792:	2801      	cmp	r0, #1
 8017794:	4606      	mov	r6, r0
 8017796:	d1f2      	bne.n	801777e <rmw_destroy_node+0x36>
 8017798:	2601      	movs	r6, #1
 801779a:	4630      	mov	r0, r6
 801779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801779e:	3184      	adds	r1, #132	@ 0x84
 80177a0:	4638      	mov	r0, r7
 80177a2:	f7f6 fba7 	bl	800def4 <rmw_destroy_publisher>
 80177a6:	2801      	cmp	r0, #1
 80177a8:	4606      	mov	r6, r0
 80177aa:	d0f5      	beq.n	8017798 <rmw_destroy_node+0x50>
 80177ac:	2c00      	cmp	r4, #0
 80177ae:	d1dc      	bne.n	801776a <rmw_destroy_node+0x22>
 80177b0:	e7e3      	b.n	801777a <rmw_destroy_node+0x32>
 80177b2:	4b21      	ldr	r3, [pc, #132]	@ (8017838 <rmw_destroy_node+0xf0>)
 80177b4:	681c      	ldr	r4, [r3, #0]
 80177b6:	b16c      	cbz	r4, 80177d4 <rmw_destroy_node+0x8c>
 80177b8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80177bc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80177be:	429d      	cmp	r5, r3
 80177c0:	d1f9      	bne.n	80177b6 <rmw_destroy_node+0x6e>
 80177c2:	317c      	adds	r1, #124	@ 0x7c
 80177c4:	4638      	mov	r0, r7
 80177c6:	f000 f98b 	bl	8017ae0 <rmw_destroy_service>
 80177ca:	2801      	cmp	r0, #1
 80177cc:	4606      	mov	r6, r0
 80177ce:	d0e3      	beq.n	8017798 <rmw_destroy_node+0x50>
 80177d0:	2c00      	cmp	r4, #0
 80177d2:	d1f1      	bne.n	80177b8 <rmw_destroy_node+0x70>
 80177d4:	4b19      	ldr	r3, [pc, #100]	@ (801783c <rmw_destroy_node+0xf4>)
 80177d6:	681c      	ldr	r4, [r3, #0]
 80177d8:	b16c      	cbz	r4, 80177f6 <rmw_destroy_node+0xae>
 80177da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80177de:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80177e0:	429d      	cmp	r5, r3
 80177e2:	d1f9      	bne.n	80177d8 <rmw_destroy_node+0x90>
 80177e4:	317c      	adds	r1, #124	@ 0x7c
 80177e6:	4638      	mov	r0, r7
 80177e8:	f7ff fbe8 	bl	8016fbc <rmw_destroy_client>
 80177ec:	2801      	cmp	r0, #1
 80177ee:	4606      	mov	r6, r0
 80177f0:	d0d2      	beq.n	8017798 <rmw_destroy_node+0x50>
 80177f2:	2c00      	cmp	r4, #0
 80177f4:	d1f1      	bne.n	80177da <rmw_destroy_node+0x92>
 80177f6:	6928      	ldr	r0, [r5, #16]
 80177f8:	696a      	ldr	r2, [r5, #20]
 80177fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80177fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017802:	6819      	ldr	r1, [r3, #0]
 8017804:	f7f8 f8b0 	bl	800f968 <uxr_buffer_delete_entity>
 8017808:	4602      	mov	r2, r0
 801780a:	6928      	ldr	r0, [r5, #16]
 801780c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017810:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017814:	f7f6 fed6 	bl	800e5c4 <run_xrce_session>
 8017818:	2800      	cmp	r0, #0
 801781a:	bf08      	it	eq
 801781c:	2602      	moveq	r6, #2
 801781e:	4638      	mov	r0, r7
 8017820:	f7f6 fd58 	bl	800e2d4 <rmw_uxrce_fini_node_memory>
 8017824:	4630      	mov	r0, r6
 8017826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017828:	4626      	mov	r6, r4
 801782a:	e7a6      	b.n	801777a <rmw_destroy_node+0x32>
 801782c:	08021d44 	.word	0x08021d44
 8017830:	200100f0 	.word	0x200100f0
 8017834:	2000f870 	.word	0x2000f870
 8017838:	2000f428 	.word	0x2000f428
 801783c:	2000f350 	.word	0x2000f350

08017840 <rmw_node_get_graph_guard_condition>:
 8017840:	6843      	ldr	r3, [r0, #4]
 8017842:	6918      	ldr	r0, [r3, #16]
 8017844:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8017848:	4770      	bx	lr
 801784a:	bf00      	nop

0801784c <rmw_send_request>:
 801784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017850:	4604      	mov	r4, r0
 8017852:	6800      	ldr	r0, [r0, #0]
 8017854:	b08a      	sub	sp, #40	@ 0x28
 8017856:	460e      	mov	r6, r1
 8017858:	4615      	mov	r5, r2
 801785a:	b128      	cbz	r0, 8017868 <rmw_send_request+0x1c>
 801785c:	4b1e      	ldr	r3, [pc, #120]	@ (80178d8 <rmw_send_request+0x8c>)
 801785e:	6819      	ldr	r1, [r3, #0]
 8017860:	f7e8 fcd6 	bl	8000210 <strcmp>
 8017864:	2800      	cmp	r0, #0
 8017866:	d133      	bne.n	80178d0 <rmw_send_request+0x84>
 8017868:	6864      	ldr	r4, [r4, #4]
 801786a:	6963      	ldr	r3, [r4, #20]
 801786c:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801786e:	689b      	ldr	r3, [r3, #8]
 8017870:	4798      	blx	r3
 8017872:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017876:	4630      	mov	r0, r6
 8017878:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801787c:	4798      	blx	r3
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	9000      	str	r0, [sp, #0]
 8017882:	6922      	ldr	r2, [r4, #16]
 8017884:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017886:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801788a:	ab02      	add	r3, sp, #8
 801788c:	f7fa fb94 	bl	8011fb8 <uxr_prepare_output_stream>
 8017890:	2300      	movs	r3, #0
 8017892:	6028      	str	r0, [r5, #0]
 8017894:	606b      	str	r3, [r5, #4]
 8017896:	b190      	cbz	r0, 80178be <rmw_send_request+0x72>
 8017898:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801789c:	a902      	add	r1, sp, #8
 801789e:	4630      	mov	r0, r6
 80178a0:	4798      	blx	r3
 80178a2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80178a6:	6938      	ldr	r0, [r7, #16]
 80178a8:	2b01      	cmp	r3, #1
 80178aa:	d00c      	beq.n	80178c6 <rmw_send_request+0x7a>
 80178ac:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80178ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178b2:	f7f9 f8c1 	bl	8010a38 <uxr_run_session_until_confirm_delivery>
 80178b6:	2000      	movs	r0, #0
 80178b8:	b00a      	add	sp, #40	@ 0x28
 80178ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178be:	2001      	movs	r0, #1
 80178c0:	b00a      	add	sp, #40	@ 0x28
 80178c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178ca:	f7f8 fd1d 	bl	8010308 <uxr_flash_output_streams>
 80178ce:	e7f2      	b.n	80178b6 <rmw_send_request+0x6a>
 80178d0:	200c      	movs	r0, #12
 80178d2:	b00a      	add	sp, #40	@ 0x28
 80178d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178d8:	08021d44 	.word	0x08021d44

080178dc <rmw_take_request>:
 80178dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178e0:	4605      	mov	r5, r0
 80178e2:	6800      	ldr	r0, [r0, #0]
 80178e4:	b089      	sub	sp, #36	@ 0x24
 80178e6:	460c      	mov	r4, r1
 80178e8:	4690      	mov	r8, r2
 80178ea:	461e      	mov	r6, r3
 80178ec:	b128      	cbz	r0, 80178fa <rmw_take_request+0x1e>
 80178ee:	4b28      	ldr	r3, [pc, #160]	@ (8017990 <rmw_take_request+0xb4>)
 80178f0:	6819      	ldr	r1, [r3, #0]
 80178f2:	f7e8 fc8d 	bl	8000210 <strcmp>
 80178f6:	2800      	cmp	r0, #0
 80178f8:	d146      	bne.n	8017988 <rmw_take_request+0xac>
 80178fa:	b10e      	cbz	r6, 8017900 <rmw_take_request+0x24>
 80178fc:	2300      	movs	r3, #0
 80178fe:	7033      	strb	r3, [r6, #0]
 8017900:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017904:	f7f6 fde0 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017908:	4648      	mov	r0, r9
 801790a:	f7f6 fdb7 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 801790e:	4607      	mov	r7, r0
 8017910:	b3b0      	cbz	r0, 8017980 <rmw_take_request+0xa4>
 8017912:	6885      	ldr	r5, [r0, #8]
 8017914:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017918:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801791c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017920:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017924:	7423      	strb	r3, [r4, #16]
 8017926:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801792a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801792e:	74e2      	strb	r2, [r4, #19]
 8017930:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017934:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017938:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801793c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017940:	61e1      	str	r1, [r4, #28]
 8017942:	6162      	str	r2, [r4, #20]
 8017944:	61a3      	str	r3, [r4, #24]
 8017946:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801794a:	689b      	ldr	r3, [r3, #8]
 801794c:	4798      	blx	r3
 801794e:	6844      	ldr	r4, [r0, #4]
 8017950:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017954:	f105 0110 	add.w	r1, r5, #16
 8017958:	4668      	mov	r0, sp
 801795a:	f7f4 febf 	bl	800c6dc <ucdr_init_buffer>
 801795e:	68e3      	ldr	r3, [r4, #12]
 8017960:	4641      	mov	r1, r8
 8017962:	4668      	mov	r0, sp
 8017964:	4798      	blx	r3
 8017966:	4639      	mov	r1, r7
 8017968:	4604      	mov	r4, r0
 801796a:	480a      	ldr	r0, [pc, #40]	@ (8017994 <rmw_take_request+0xb8>)
 801796c:	f7ff fb12 	bl	8016f94 <put_memory>
 8017970:	b106      	cbz	r6, 8017974 <rmw_take_request+0x98>
 8017972:	7034      	strb	r4, [r6, #0]
 8017974:	f084 0001 	eor.w	r0, r4, #1
 8017978:	b2c0      	uxtb	r0, r0
 801797a:	b009      	add	sp, #36	@ 0x24
 801797c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017980:	2001      	movs	r0, #1
 8017982:	b009      	add	sp, #36	@ 0x24
 8017984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017988:	200c      	movs	r0, #12
 801798a:	b009      	add	sp, #36	@ 0x24
 801798c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017990:	08021d44 	.word	0x08021d44
 8017994:	2000f0c0 	.word	0x2000f0c0

08017998 <rmw_send_response>:
 8017998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801799a:	4605      	mov	r5, r0
 801799c:	6800      	ldr	r0, [r0, #0]
 801799e:	b091      	sub	sp, #68	@ 0x44
 80179a0:	460c      	mov	r4, r1
 80179a2:	4616      	mov	r6, r2
 80179a4:	b128      	cbz	r0, 80179b2 <rmw_send_response+0x1a>
 80179a6:	4b28      	ldr	r3, [pc, #160]	@ (8017a48 <rmw_send_response+0xb0>)
 80179a8:	6819      	ldr	r1, [r3, #0]
 80179aa:	f7e8 fc31 	bl	8000210 <strcmp>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d141      	bne.n	8017a36 <rmw_send_response+0x9e>
 80179b2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80179b6:	9306      	str	r3, [sp, #24]
 80179b8:	4623      	mov	r3, r4
 80179ba:	9207      	str	r2, [sp, #28]
 80179bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179c0:	686d      	ldr	r5, [r5, #4]
 80179c2:	789b      	ldrb	r3, [r3, #2]
 80179c4:	68a1      	ldr	r1, [r4, #8]
 80179c6:	f88d 2017 	strb.w	r2, [sp, #23]
 80179ca:	f88d 3016 	strb.w	r3, [sp, #22]
 80179ce:	68e2      	ldr	r2, [r4, #12]
 80179d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80179d4:	6860      	ldr	r0, [r4, #4]
 80179d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179da:	ab02      	add	r3, sp, #8
 80179dc:	c307      	stmia	r3!, {r0, r1, r2}
 80179de:	696b      	ldr	r3, [r5, #20]
 80179e0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	4798      	blx	r3
 80179e6:	6844      	ldr	r4, [r0, #4]
 80179e8:	4630      	mov	r0, r6
 80179ea:	6923      	ldr	r3, [r4, #16]
 80179ec:	4798      	blx	r3
 80179ee:	f100 0318 	add.w	r3, r0, #24
 80179f2:	6938      	ldr	r0, [r7, #16]
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	692a      	ldr	r2, [r5, #16]
 80179f8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80179fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80179fe:	ab08      	add	r3, sp, #32
 8017a00:	f7fa fada 	bl	8011fb8 <uxr_prepare_output_stream>
 8017a04:	b910      	cbnz	r0, 8017a0c <rmw_send_response+0x74>
 8017a06:	2001      	movs	r0, #1
 8017a08:	b011      	add	sp, #68	@ 0x44
 8017a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a0c:	a902      	add	r1, sp, #8
 8017a0e:	a808      	add	r0, sp, #32
 8017a10:	f7fb fc04 	bl	801321c <uxr_serialize_SampleIdentity>
 8017a14:	68a3      	ldr	r3, [r4, #8]
 8017a16:	a908      	add	r1, sp, #32
 8017a18:	4630      	mov	r0, r6
 8017a1a:	4798      	blx	r3
 8017a1c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017a20:	6938      	ldr	r0, [r7, #16]
 8017a22:	2b01      	cmp	r3, #1
 8017a24:	d00a      	beq.n	8017a3c <rmw_send_response+0xa4>
 8017a26:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017a28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a2c:	f7f9 f804 	bl	8010a38 <uxr_run_session_until_confirm_delivery>
 8017a30:	2000      	movs	r0, #0
 8017a32:	b011      	add	sp, #68	@ 0x44
 8017a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a36:	200c      	movs	r0, #12
 8017a38:	b011      	add	sp, #68	@ 0x44
 8017a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a40:	f7f8 fc62 	bl	8010308 <uxr_flash_output_streams>
 8017a44:	e7f4      	b.n	8017a30 <rmw_send_response+0x98>
 8017a46:	bf00      	nop
 8017a48:	08021d44 	.word	0x08021d44

08017a4c <rmw_take_response>:
 8017a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a50:	4604      	mov	r4, r0
 8017a52:	6800      	ldr	r0, [r0, #0]
 8017a54:	b088      	sub	sp, #32
 8017a56:	4688      	mov	r8, r1
 8017a58:	4617      	mov	r7, r2
 8017a5a:	461d      	mov	r5, r3
 8017a5c:	b120      	cbz	r0, 8017a68 <rmw_take_response+0x1c>
 8017a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8017ad8 <rmw_take_response+0x8c>)
 8017a60:	6819      	ldr	r1, [r3, #0]
 8017a62:	f7e8 fbd5 	bl	8000210 <strcmp>
 8017a66:	bb78      	cbnz	r0, 8017ac8 <rmw_take_response+0x7c>
 8017a68:	b10d      	cbz	r5, 8017a6e <rmw_take_response+0x22>
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	702b      	strb	r3, [r5, #0]
 8017a6e:	6864      	ldr	r4, [r4, #4]
 8017a70:	f7f6 fd2a 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a74:	4620      	mov	r0, r4
 8017a76:	f7f6 fd01 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	b340      	cbz	r0, 8017ad0 <rmw_take_response+0x84>
 8017a7e:	6963      	ldr	r3, [r4, #20]
 8017a80:	6884      	ldr	r4, [r0, #8]
 8017a82:	68db      	ldr	r3, [r3, #12]
 8017a84:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017a88:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017a8c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017a90:	4798      	blx	r3
 8017a92:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017a96:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017a9a:	f104 0110 	add.w	r1, r4, #16
 8017a9e:	4668      	mov	r0, sp
 8017aa0:	f7f4 fe1c 	bl	800c6dc <ucdr_init_buffer>
 8017aa4:	4639      	mov	r1, r7
 8017aa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017aaa:	4668      	mov	r0, sp
 8017aac:	4798      	blx	r3
 8017aae:	4631      	mov	r1, r6
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	480a      	ldr	r0, [pc, #40]	@ (8017adc <rmw_take_response+0x90>)
 8017ab4:	f7ff fa6e 	bl	8016f94 <put_memory>
 8017ab8:	b105      	cbz	r5, 8017abc <rmw_take_response+0x70>
 8017aba:	702c      	strb	r4, [r5, #0]
 8017abc:	f084 0001 	eor.w	r0, r4, #1
 8017ac0:	b2c0      	uxtb	r0, r0
 8017ac2:	b008      	add	sp, #32
 8017ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ac8:	200c      	movs	r0, #12
 8017aca:	b008      	add	sp, #32
 8017acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad0:	2001      	movs	r0, #1
 8017ad2:	b008      	add	sp, #32
 8017ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad8:	08021d44 	.word	0x08021d44
 8017adc:	2000f0c0 	.word	0x2000f0c0

08017ae0 <rmw_destroy_service>:
 8017ae0:	b570      	push	{r4, r5, r6, lr}
 8017ae2:	b128      	cbz	r0, 8017af0 <rmw_destroy_service+0x10>
 8017ae4:	4604      	mov	r4, r0
 8017ae6:	6800      	ldr	r0, [r0, #0]
 8017ae8:	460d      	mov	r5, r1
 8017aea:	f7f6 fdf1 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8017aee:	b910      	cbnz	r0, 8017af6 <rmw_destroy_service+0x16>
 8017af0:	2401      	movs	r4, #1
 8017af2:	4620      	mov	r0, r4
 8017af4:	bd70      	pop	{r4, r5, r6, pc}
 8017af6:	6863      	ldr	r3, [r4, #4]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d0f9      	beq.n	8017af0 <rmw_destroy_service+0x10>
 8017afc:	2d00      	cmp	r5, #0
 8017afe:	d0f7      	beq.n	8017af0 <rmw_destroy_service+0x10>
 8017b00:	6828      	ldr	r0, [r5, #0]
 8017b02:	f7f6 fde5 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8017b06:	2800      	cmp	r0, #0
 8017b08:	d0f2      	beq.n	8017af0 <rmw_destroy_service+0x10>
 8017b0a:	686e      	ldr	r6, [r5, #4]
 8017b0c:	2e00      	cmp	r6, #0
 8017b0e:	d0ef      	beq.n	8017af0 <rmw_destroy_service+0x10>
 8017b10:	6864      	ldr	r4, [r4, #4]
 8017b12:	6932      	ldr	r2, [r6, #16]
 8017b14:	6920      	ldr	r0, [r4, #16]
 8017b16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017b1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b1e:	6819      	ldr	r1, [r3, #0]
 8017b20:	f001 fe92 	bl	8019848 <uxr_buffer_cancel_data>
 8017b24:	4602      	mov	r2, r0
 8017b26:	6920      	ldr	r0, [r4, #16]
 8017b28:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017b2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017b30:	f7f6 fd48 	bl	800e5c4 <run_xrce_session>
 8017b34:	6920      	ldr	r0, [r4, #16]
 8017b36:	6932      	ldr	r2, [r6, #16]
 8017b38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017b3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b40:	6819      	ldr	r1, [r3, #0]
 8017b42:	f7f7 ff11 	bl	800f968 <uxr_buffer_delete_entity>
 8017b46:	4602      	mov	r2, r0
 8017b48:	6920      	ldr	r0, [r4, #16]
 8017b4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017b4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017b52:	f7f6 fd37 	bl	800e5c4 <run_xrce_session>
 8017b56:	f080 0401 	eor.w	r4, r0, #1
 8017b5a:	b2e4      	uxtb	r4, r4
 8017b5c:	4628      	mov	r0, r5
 8017b5e:	0064      	lsls	r4, r4, #1
 8017b60:	f7f6 fbfc 	bl	800e35c <rmw_uxrce_fini_service_memory>
 8017b64:	e7c5      	b.n	8017af2 <rmw_destroy_service+0x12>
 8017b66:	bf00      	nop

08017b68 <rmw_create_subscription>:
 8017b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b6c:	b08d      	sub	sp, #52	@ 0x34
 8017b6e:	2800      	cmp	r0, #0
 8017b70:	f000 80d1 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017b74:	460f      	mov	r7, r1
 8017b76:	2900      	cmp	r1, #0
 8017b78:	f000 80cd 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	6800      	ldr	r0, [r0, #0]
 8017b80:	4615      	mov	r5, r2
 8017b82:	461e      	mov	r6, r3
 8017b84:	f7f6 fda4 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8017b88:	2800      	cmp	r0, #0
 8017b8a:	f000 80c4 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017b8e:	2d00      	cmp	r5, #0
 8017b90:	f000 80c1 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017b94:	782b      	ldrb	r3, [r5, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	f000 80bd 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017b9c:	2e00      	cmp	r6, #0
 8017b9e:	f000 80ba 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017ba2:	485e      	ldr	r0, [pc, #376]	@ (8017d1c <rmw_create_subscription+0x1b4>)
 8017ba4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017ba8:	f7ff f9e4 	bl	8016f74 <get_memory>
 8017bac:	2800      	cmp	r0, #0
 8017bae:	f000 80b2 	beq.w	8017d16 <rmw_create_subscription+0x1ae>
 8017bb2:	6884      	ldr	r4, [r0, #8]
 8017bb4:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8017bb8:	f7ff fa62 	bl	8017080 <rmw_get_implementation_identifier>
 8017bbc:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8017bc0:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8017bc2:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8017bc6:	4628      	mov	r0, r5
 8017bc8:	f7e8 fb82 	bl	80002d0 <strlen>
 8017bcc:	3001      	adds	r0, #1
 8017bce:	283c      	cmp	r0, #60	@ 0x3c
 8017bd0:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8017bd4:	f200 8098 	bhi.w	8017d08 <rmw_create_subscription+0x1a0>
 8017bd8:	4a51      	ldr	r2, [pc, #324]	@ (8017d20 <rmw_create_subscription+0x1b8>)
 8017bda:	462b      	mov	r3, r5
 8017bdc:	213c      	movs	r1, #60	@ 0x3c
 8017bde:	4650      	mov	r0, sl
 8017be0:	f003 fd5a 	bl	801b698 <snprintf>
 8017be4:	4631      	mov	r1, r6
 8017be6:	f8c4 9020 	str.w	r9, [r4, #32]
 8017bea:	2250      	movs	r2, #80	@ 0x50
 8017bec:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8017bf0:	f003 ff1a 	bl	801ba28 <memcpy>
 8017bf4:	494b      	ldr	r1, [pc, #300]	@ (8017d24 <rmw_create_subscription+0x1bc>)
 8017bf6:	4638      	mov	r0, r7
 8017bf8:	f7f6 fd78 	bl	800e6ec <get_message_typesupport_handle>
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	f000 8083 	beq.w	8017d08 <rmw_create_subscription+0x1a0>
 8017c02:	6842      	ldr	r2, [r0, #4]
 8017c04:	61a2      	str	r2, [r4, #24]
 8017c06:	2a00      	cmp	r2, #0
 8017c08:	d07e      	beq.n	8017d08 <rmw_create_subscription+0x1a0>
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	4633      	mov	r3, r6
 8017c0e:	4648      	mov	r0, r9
 8017c10:	f7ff fc92 	bl	8017538 <create_topic>
 8017c14:	61e0      	str	r0, [r4, #28]
 8017c16:	2800      	cmp	r0, #0
 8017c18:	d07a      	beq.n	8017d10 <rmw_create_subscription+0x1a8>
 8017c1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c22:	2104      	movs	r1, #4
 8017c24:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8017c28:	1c42      	adds	r2, r0, #1
 8017c2a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8017c2e:	f7f8 f935 	bl	800fe9c <uxr_object_id>
 8017c32:	6120      	str	r0, [r4, #16]
 8017c34:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017c38:	2506      	movs	r5, #6
 8017c3a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8017c3e:	9500      	str	r5, [sp, #0]
 8017c40:	6819      	ldr	r1, [r3, #0]
 8017c42:	6922      	ldr	r2, [r4, #16]
 8017c44:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017c48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c4c:	f7f7 ff6a 	bl	800fb24 <uxr_buffer_create_subscriber_bin>
 8017c50:	4602      	mov	r2, r0
 8017c52:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017c56:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017c5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017c5e:	f7f6 fcb1 	bl	800e5c4 <run_xrce_session>
 8017c62:	2800      	cmp	r0, #0
 8017c64:	d050      	beq.n	8017d08 <rmw_create_subscription+0x1a0>
 8017c66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c6e:	4629      	mov	r1, r5
 8017c70:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8017c74:	1c42      	adds	r2, r0, #1
 8017c76:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8017c7a:	f7f8 f90f 	bl	800fe9c <uxr_object_id>
 8017c7e:	af08      	add	r7, sp, #32
 8017c80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017c84:	69e3      	ldr	r3, [r4, #28]
 8017c86:	6160      	str	r0, [r4, #20]
 8017c88:	4631      	mov	r1, r6
 8017c8a:	4638      	mov	r0, r7
 8017c8c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8017c90:	9305      	str	r3, [sp, #20]
 8017c92:	f7f6 fcb7 	bl	800e604 <convert_qos_profile>
 8017c96:	9503      	str	r5, [sp, #12]
 8017c98:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017c9c:	9b05      	ldr	r3, [sp, #20]
 8017c9e:	9001      	str	r0, [sp, #4]
 8017ca0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017ca4:	691b      	ldr	r3, [r3, #16]
 8017ca6:	9300      	str	r3, [sp, #0]
 8017ca8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8017cac:	f8db 1000 	ldr.w	r1, [fp]
 8017cb0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8017cb4:	f7f7 ffca 	bl	800fc4c <uxr_buffer_create_datareader_bin>
 8017cb8:	4602      	mov	r2, r0
 8017cba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017cbe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017cc2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017cc6:	f7f6 fc7d 	bl	800e5c4 <run_xrce_session>
 8017cca:	b1e8      	cbz	r0, 8017d08 <rmw_create_subscription+0x1a0>
 8017ccc:	7a33      	ldrb	r3, [r6, #8]
 8017cce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017cd2:	2b02      	cmp	r3, #2
 8017cd4:	bf0c      	ite	eq
 8017cd6:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8017cda:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8017cde:	9307      	str	r3, [sp, #28]
 8017ce0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8017cea:	ab0a      	add	r3, sp, #40	@ 0x28
 8017cec:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017cf0:	9300      	str	r3, [sp, #0]
 8017cf2:	6962      	ldr	r2, [r4, #20]
 8017cf4:	9b07      	ldr	r3, [sp, #28]
 8017cf6:	6809      	ldr	r1, [r1, #0]
 8017cf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cfc:	f001 fd6c 	bl	80197d8 <uxr_buffer_request_data>
 8017d00:	4640      	mov	r0, r8
 8017d02:	b00d      	add	sp, #52	@ 0x34
 8017d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d08:	69e0      	ldr	r0, [r4, #28]
 8017d0a:	b108      	cbz	r0, 8017d10 <rmw_create_subscription+0x1a8>
 8017d0c:	f7f6 fb52 	bl	800e3b4 <rmw_uxrce_fini_topic_memory>
 8017d10:	4640      	mov	r0, r8
 8017d12:	f7f6 fb0d 	bl	800e330 <rmw_uxrce_fini_subscription_memory>
 8017d16:	f04f 0800 	mov.w	r8, #0
 8017d1a:	e7f1      	b.n	8017d00 <rmw_create_subscription+0x198>
 8017d1c:	2000f870 	.word	0x2000f870
 8017d20:	08020c98 	.word	0x08020c98
 8017d24:	08020b08 	.word	0x08020b08

08017d28 <rmw_subscription_get_actual_qos>:
 8017d28:	b508      	push	{r3, lr}
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	b140      	cbz	r0, 8017d40 <rmw_subscription_get_actual_qos+0x18>
 8017d2e:	4608      	mov	r0, r1
 8017d30:	b131      	cbz	r1, 8017d40 <rmw_subscription_get_actual_qos+0x18>
 8017d32:	6859      	ldr	r1, [r3, #4]
 8017d34:	2250      	movs	r2, #80	@ 0x50
 8017d36:	3128      	adds	r1, #40	@ 0x28
 8017d38:	f003 fe76 	bl	801ba28 <memcpy>
 8017d3c:	2000      	movs	r0, #0
 8017d3e:	bd08      	pop	{r3, pc}
 8017d40:	200b      	movs	r0, #11
 8017d42:	bd08      	pop	{r3, pc}

08017d44 <rmw_destroy_subscription>:
 8017d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d48:	b128      	cbz	r0, 8017d56 <rmw_destroy_subscription+0x12>
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	6800      	ldr	r0, [r0, #0]
 8017d4e:	460d      	mov	r5, r1
 8017d50:	f7f6 fcbe 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8017d54:	b918      	cbnz	r0, 8017d5e <rmw_destroy_subscription+0x1a>
 8017d56:	2401      	movs	r4, #1
 8017d58:	4620      	mov	r0, r4
 8017d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d5e:	6863      	ldr	r3, [r4, #4]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d0f8      	beq.n	8017d56 <rmw_destroy_subscription+0x12>
 8017d64:	2d00      	cmp	r5, #0
 8017d66:	d0f6      	beq.n	8017d56 <rmw_destroy_subscription+0x12>
 8017d68:	6828      	ldr	r0, [r5, #0]
 8017d6a:	f7f6 fcb1 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	d0f1      	beq.n	8017d56 <rmw_destroy_subscription+0x12>
 8017d72:	686c      	ldr	r4, [r5, #4]
 8017d74:	2c00      	cmp	r4, #0
 8017d76:	d0ee      	beq.n	8017d56 <rmw_destroy_subscription+0x12>
 8017d78:	6a26      	ldr	r6, [r4, #32]
 8017d7a:	6962      	ldr	r2, [r4, #20]
 8017d7c:	6930      	ldr	r0, [r6, #16]
 8017d7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017d82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d86:	6819      	ldr	r1, [r3, #0]
 8017d88:	f001 fd5e 	bl	8019848 <uxr_buffer_cancel_data>
 8017d8c:	4602      	mov	r2, r0
 8017d8e:	6930      	ldr	r0, [r6, #16]
 8017d90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017d94:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017d98:	f7f6 fc14 	bl	800e5c4 <run_xrce_session>
 8017d9c:	69e0      	ldr	r0, [r4, #28]
 8017d9e:	f7ff fc1f 	bl	80175e0 <destroy_topic>
 8017da2:	6a23      	ldr	r3, [r4, #32]
 8017da4:	6962      	ldr	r2, [r4, #20]
 8017da6:	6918      	ldr	r0, [r3, #16]
 8017da8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017dac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017db0:	6819      	ldr	r1, [r3, #0]
 8017db2:	f7f7 fdd9 	bl	800f968 <uxr_buffer_delete_entity>
 8017db6:	6a23      	ldr	r3, [r4, #32]
 8017db8:	6922      	ldr	r2, [r4, #16]
 8017dba:	4680      	mov	r8, r0
 8017dbc:	6918      	ldr	r0, [r3, #16]
 8017dbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017dc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017dc6:	6819      	ldr	r1, [r3, #0]
 8017dc8:	f7f7 fdce 	bl	800f968 <uxr_buffer_delete_entity>
 8017dcc:	4607      	mov	r7, r0
 8017dce:	6930      	ldr	r0, [r6, #16]
 8017dd0:	4642      	mov	r2, r8
 8017dd2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017dd6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017dda:	f7f6 fbf3 	bl	800e5c4 <run_xrce_session>
 8017dde:	4604      	mov	r4, r0
 8017de0:	6930      	ldr	r0, [r6, #16]
 8017de2:	463a      	mov	r2, r7
 8017de4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017de8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017dec:	f7f6 fbea 	bl	800e5c4 <run_xrce_session>
 8017df0:	4004      	ands	r4, r0
 8017df2:	f084 0401 	eor.w	r4, r4, #1
 8017df6:	b2e4      	uxtb	r4, r4
 8017df8:	4628      	mov	r0, r5
 8017dfa:	0064      	lsls	r4, r4, #1
 8017dfc:	f7f6 fa98 	bl	800e330 <rmw_uxrce_fini_subscription_memory>
 8017e00:	e7aa      	b.n	8017d58 <rmw_destroy_subscription+0x14>
 8017e02:	bf00      	nop

08017e04 <rmw_take_with_info>:
 8017e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e06:	4604      	mov	r4, r0
 8017e08:	6800      	ldr	r0, [r0, #0]
 8017e0a:	b089      	sub	sp, #36	@ 0x24
 8017e0c:	460f      	mov	r7, r1
 8017e0e:	4615      	mov	r5, r2
 8017e10:	b128      	cbz	r0, 8017e1e <rmw_take_with_info+0x1a>
 8017e12:	4b23      	ldr	r3, [pc, #140]	@ (8017ea0 <rmw_take_with_info+0x9c>)
 8017e14:	6819      	ldr	r1, [r3, #0]
 8017e16:	f7e8 f9fb 	bl	8000210 <strcmp>
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d13d      	bne.n	8017e9a <rmw_take_with_info+0x96>
 8017e1e:	6864      	ldr	r4, [r4, #4]
 8017e20:	b1fd      	cbz	r5, 8017e62 <rmw_take_with_info+0x5e>
 8017e22:	2300      	movs	r3, #0
 8017e24:	702b      	strb	r3, [r5, #0]
 8017e26:	f7f6 fb4f 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	f7f6 fb26 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e30:	4606      	mov	r6, r0
 8017e32:	b1e8      	cbz	r0, 8017e70 <rmw_take_with_info+0x6c>
 8017e34:	6881      	ldr	r1, [r0, #8]
 8017e36:	4668      	mov	r0, sp
 8017e38:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017e3c:	3110      	adds	r1, #16
 8017e3e:	f7f4 fc4d 	bl	800c6dc <ucdr_init_buffer>
 8017e42:	69a3      	ldr	r3, [r4, #24]
 8017e44:	4639      	mov	r1, r7
 8017e46:	68db      	ldr	r3, [r3, #12]
 8017e48:	4668      	mov	r0, sp
 8017e4a:	4798      	blx	r3
 8017e4c:	4631      	mov	r1, r6
 8017e4e:	4604      	mov	r4, r0
 8017e50:	4814      	ldr	r0, [pc, #80]	@ (8017ea4 <rmw_take_with_info+0xa0>)
 8017e52:	f7ff f89f 	bl	8016f94 <put_memory>
 8017e56:	702c      	strb	r4, [r5, #0]
 8017e58:	f084 0001 	eor.w	r0, r4, #1
 8017e5c:	b2c0      	uxtb	r0, r0
 8017e5e:	b009      	add	sp, #36	@ 0x24
 8017e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e62:	f7f6 fb31 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e66:	4620      	mov	r0, r4
 8017e68:	f7f6 fb08 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e6c:	4605      	mov	r5, r0
 8017e6e:	b910      	cbnz	r0, 8017e76 <rmw_take_with_info+0x72>
 8017e70:	2001      	movs	r0, #1
 8017e72:	b009      	add	sp, #36	@ 0x24
 8017e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e76:	68a9      	ldr	r1, [r5, #8]
 8017e78:	4668      	mov	r0, sp
 8017e7a:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017e7e:	3110      	adds	r1, #16
 8017e80:	f7f4 fc2c 	bl	800c6dc <ucdr_init_buffer>
 8017e84:	69a3      	ldr	r3, [r4, #24]
 8017e86:	4639      	mov	r1, r7
 8017e88:	68db      	ldr	r3, [r3, #12]
 8017e8a:	4668      	mov	r0, sp
 8017e8c:	4798      	blx	r3
 8017e8e:	4629      	mov	r1, r5
 8017e90:	4604      	mov	r4, r0
 8017e92:	4804      	ldr	r0, [pc, #16]	@ (8017ea4 <rmw_take_with_info+0xa0>)
 8017e94:	f7ff f87e 	bl	8016f94 <put_memory>
 8017e98:	e7de      	b.n	8017e58 <rmw_take_with_info+0x54>
 8017e9a:	200c      	movs	r0, #12
 8017e9c:	b009      	add	sp, #36	@ 0x24
 8017e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ea0:	08021d44 	.word	0x08021d44
 8017ea4:	2000f0c0 	.word	0x2000f0c0

08017ea8 <rmw_wait>:
 8017ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017eac:	b089      	sub	sp, #36	@ 0x24
 8017eae:	4607      	mov	r7, r0
 8017eb0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017eb2:	460e      	mov	r6, r1
 8017eb4:	4698      	mov	r8, r3
 8017eb6:	4691      	mov	r9, r2
 8017eb8:	2a00      	cmp	r2, #0
 8017eba:	f000 811e 	beq.w	80180fa <rmw_wait+0x252>
 8017ebe:	2c00      	cmp	r4, #0
 8017ec0:	f000 80ef 	beq.w	80180a2 <rmw_wait+0x1fa>
 8017ec4:	4bb5      	ldr	r3, [pc, #724]	@ (801819c <rmw_wait+0x2f4>)
 8017ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ec8:	ad04      	add	r5, sp, #16
 8017eca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8017ece:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017ed2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017ed6:	f7fe fe83 	bl	8016be0 <rmw_time_equal>
 8017eda:	2800      	cmp	r0, #0
 8017edc:	f000 811b 	beq.w	8018116 <rmw_wait+0x26e>
 8017ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8017ee4:	f7f6 faf0 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017ee8:	4bad      	ldr	r3, [pc, #692]	@ (80181a0 <rmw_wait+0x2f8>)
 8017eea:	681c      	ldr	r4, [r3, #0]
 8017eec:	b14c      	cbz	r4, 8017f02 <rmw_wait+0x5a>
 8017eee:	4623      	mov	r3, r4
 8017ef0:	2100      	movs	r1, #0
 8017ef2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017ef6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017efa:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d1f7      	bne.n	8017ef2 <rmw_wait+0x4a>
 8017f02:	f1b9 0f00 	cmp.w	r9, #0
 8017f06:	d011      	beq.n	8017f2c <rmw_wait+0x84>
 8017f08:	f8d9 1000 	ldr.w	r1, [r9]
 8017f0c:	b171      	cbz	r1, 8017f2c <rmw_wait+0x84>
 8017f0e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017f12:	2300      	movs	r3, #0
 8017f14:	2001      	movs	r0, #1
 8017f16:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017f1a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017f1c:	6912      	ldr	r2, [r2, #16]
 8017f1e:	3301      	adds	r3, #1
 8017f20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f24:	4299      	cmp	r1, r3
 8017f26:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f2a:	d1f4      	bne.n	8017f16 <rmw_wait+0x6e>
 8017f2c:	f1b8 0f00 	cmp.w	r8, #0
 8017f30:	f000 8109 	beq.w	8018146 <rmw_wait+0x29e>
 8017f34:	f8d8 1000 	ldr.w	r1, [r8]
 8017f38:	2900      	cmp	r1, #0
 8017f3a:	f000 8116 	beq.w	801816a <rmw_wait+0x2c2>
 8017f3e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017f42:	2300      	movs	r3, #0
 8017f44:	2001      	movs	r0, #1
 8017f46:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017f4a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017f4c:	6912      	ldr	r2, [r2, #16]
 8017f4e:	3301      	adds	r3, #1
 8017f50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f54:	4299      	cmp	r1, r3
 8017f56:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f5a:	d1f4      	bne.n	8017f46 <rmw_wait+0x9e>
 8017f5c:	2f00      	cmp	r7, #0
 8017f5e:	f000 8114 	beq.w	801818a <rmw_wait+0x2e2>
 8017f62:	6839      	ldr	r1, [r7, #0]
 8017f64:	b171      	cbz	r1, 8017f84 <rmw_wait+0xdc>
 8017f66:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	2001      	movs	r0, #1
 8017f6e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017f72:	6a12      	ldr	r2, [r2, #32]
 8017f74:	6912      	ldr	r2, [r2, #16]
 8017f76:	3301      	adds	r3, #1
 8017f78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f7c:	4299      	cmp	r1, r3
 8017f7e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f82:	d1f4      	bne.n	8017f6e <rmw_wait+0xc6>
 8017f84:	b344      	cbz	r4, 8017fd8 <rmw_wait+0x130>
 8017f86:	4622      	mov	r2, r4
 8017f88:	2300      	movs	r3, #0
 8017f8a:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017f8e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017f92:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017f96:	440b      	add	r3, r1
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	2a00      	cmp	r2, #0
 8017f9c:	d1f5      	bne.n	8017f8a <rmw_wait+0xe2>
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d075      	beq.n	801808e <rmw_wait+0x1e6>
 8017fa2:	1c6a      	adds	r2, r5, #1
 8017fa4:	d00d      	beq.n	8017fc2 <rmw_wait+0x11a>
 8017fa6:	ee07 5a90 	vmov	s15, r5
 8017faa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017fae:	ee07 3a90 	vmov	s15, r3
 8017fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017fba:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017fbe:	ee17 5a90 	vmov	r5, s15
 8017fc2:	68a0      	ldr	r0, [r4, #8]
 8017fc4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017fc8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	f040 808a 	bne.w	80180e6 <rmw_wait+0x23e>
 8017fd2:	6864      	ldr	r4, [r4, #4]
 8017fd4:	2c00      	cmp	r4, #0
 8017fd6:	d1f4      	bne.n	8017fc2 <rmw_wait+0x11a>
 8017fd8:	f1b9 0f00 	cmp.w	r9, #0
 8017fdc:	f000 80c3 	beq.w	8018166 <rmw_wait+0x2be>
 8017fe0:	f8d9 5000 	ldr.w	r5, [r9]
 8017fe4:	b185      	cbz	r5, 8018008 <rmw_wait+0x160>
 8017fe6:	2400      	movs	r4, #0
 8017fe8:	4625      	mov	r5, r4
 8017fea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017fee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ff2:	f7f6 fa43 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	d06d      	beq.n	80180d6 <rmw_wait+0x22e>
 8017ffa:	f8d9 3000 	ldr.w	r3, [r9]
 8017ffe:	3401      	adds	r4, #1
 8018000:	42a3      	cmp	r3, r4
 8018002:	f04f 0501 	mov.w	r5, #1
 8018006:	d8f0      	bhi.n	8017fea <rmw_wait+0x142>
 8018008:	f1b8 0f00 	cmp.w	r8, #0
 801800c:	d012      	beq.n	8018034 <rmw_wait+0x18c>
 801800e:	f8d8 1000 	ldr.w	r1, [r8]
 8018012:	2400      	movs	r4, #0
 8018014:	b171      	cbz	r1, 8018034 <rmw_wait+0x18c>
 8018016:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801801a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801801e:	f7f6 fa2d 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018022:	2800      	cmp	r0, #0
 8018024:	d047      	beq.n	80180b6 <rmw_wait+0x20e>
 8018026:	f8d8 3000 	ldr.w	r3, [r8]
 801802a:	3401      	adds	r4, #1
 801802c:	42a3      	cmp	r3, r4
 801802e:	f04f 0501 	mov.w	r5, #1
 8018032:	d8f0      	bhi.n	8018016 <rmw_wait+0x16e>
 8018034:	b17f      	cbz	r7, 8018056 <rmw_wait+0x1ae>
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	2400      	movs	r4, #0
 801803a:	b163      	cbz	r3, 8018056 <rmw_wait+0x1ae>
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018042:	f7f6 fa1b 	bl	800e47c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018046:	2800      	cmp	r0, #0
 8018048:	d03d      	beq.n	80180c6 <rmw_wait+0x21e>
 801804a:	683b      	ldr	r3, [r7, #0]
 801804c:	3401      	adds	r4, #1
 801804e:	42a3      	cmp	r3, r4
 8018050:	f04f 0501 	mov.w	r5, #1
 8018054:	d8f2      	bhi.n	801803c <rmw_wait+0x194>
 8018056:	b1a6      	cbz	r6, 8018082 <rmw_wait+0x1da>
 8018058:	6834      	ldr	r4, [r6, #0]
 801805a:	b194      	cbz	r4, 8018082 <rmw_wait+0x1da>
 801805c:	2300      	movs	r3, #0
 801805e:	461f      	mov	r7, r3
 8018060:	e004      	b.n	801806c <rmw_wait+0x1c4>
 8018062:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018066:	3301      	adds	r3, #1
 8018068:	429c      	cmp	r4, r3
 801806a:	d00a      	beq.n	8018082 <rmw_wait+0x1da>
 801806c:	6870      	ldr	r0, [r6, #4]
 801806e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018072:	7c0a      	ldrb	r2, [r1, #16]
 8018074:	2a00      	cmp	r2, #0
 8018076:	d0f4      	beq.n	8018062 <rmw_wait+0x1ba>
 8018078:	3301      	adds	r3, #1
 801807a:	429c      	cmp	r4, r3
 801807c:	740f      	strb	r7, [r1, #16]
 801807e:	4615      	mov	r5, r2
 8018080:	d1f4      	bne.n	801806c <rmw_wait+0x1c4>
 8018082:	f085 0001 	eor.w	r0, r5, #1
 8018086:	0040      	lsls	r0, r0, #1
 8018088:	b009      	add	sp, #36	@ 0x24
 801808a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801808e:	68a0      	ldr	r0, [r4, #8]
 8018090:	2100      	movs	r1, #0
 8018092:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018096:	f7f8 fc95 	bl	80109c4 <uxr_run_session_timeout>
 801809a:	6864      	ldr	r4, [r4, #4]
 801809c:	2c00      	cmp	r4, #0
 801809e:	d1f6      	bne.n	801808e <rmw_wait+0x1e6>
 80180a0:	e79a      	b.n	8017fd8 <rmw_wait+0x130>
 80180a2:	f7f6 fa11 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80180a6:	4b3e      	ldr	r3, [pc, #248]	@ (80181a0 <rmw_wait+0x2f8>)
 80180a8:	681c      	ldr	r4, [r3, #0]
 80180aa:	f04f 35ff 	mov.w	r5, #4294967295
 80180ae:	2c00      	cmp	r4, #0
 80180b0:	f47f af1d 	bne.w	8017eee <rmw_wait+0x46>
 80180b4:	e728      	b.n	8017f08 <rmw_wait+0x60>
 80180b6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80180ba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80180be:	3401      	adds	r4, #1
 80180c0:	429c      	cmp	r4, r3
 80180c2:	d3a8      	bcc.n	8018016 <rmw_wait+0x16e>
 80180c4:	e7b6      	b.n	8018034 <rmw_wait+0x18c>
 80180c6:	e9d7 3200 	ldrd	r3, r2, [r7]
 80180ca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80180ce:	3401      	adds	r4, #1
 80180d0:	42a3      	cmp	r3, r4
 80180d2:	d8b3      	bhi.n	801803c <rmw_wait+0x194>
 80180d4:	e7bf      	b.n	8018056 <rmw_wait+0x1ae>
 80180d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80180da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80180de:	3401      	adds	r4, #1
 80180e0:	42a3      	cmp	r3, r4
 80180e2:	d882      	bhi.n	8017fea <rmw_wait+0x142>
 80180e4:	e790      	b.n	8018008 <rmw_wait+0x160>
 80180e6:	4629      	mov	r1, r5
 80180e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80180ec:	f7f8 fc84 	bl	80109f8 <uxr_run_session_until_data>
 80180f0:	6864      	ldr	r4, [r4, #4]
 80180f2:	2c00      	cmp	r4, #0
 80180f4:	f47f af65 	bne.w	8017fc2 <rmw_wait+0x11a>
 80180f8:	e76e      	b.n	8017fd8 <rmw_wait+0x130>
 80180fa:	b1f3      	cbz	r3, 801813a <rmw_wait+0x292>
 80180fc:	2c00      	cmp	r4, #0
 80180fe:	f47f aee1 	bne.w	8017ec4 <rmw_wait+0x1c>
 8018102:	f7f6 f9e1 	bl	800e4c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018106:	4b26      	ldr	r3, [pc, #152]	@ (80181a0 <rmw_wait+0x2f8>)
 8018108:	681c      	ldr	r4, [r3, #0]
 801810a:	f04f 35ff 	mov.w	r5, #4294967295
 801810e:	2c00      	cmp	r4, #0
 8018110:	f47f aeed 	bne.w	8017eee <rmw_wait+0x46>
 8018114:	e70a      	b.n	8017f2c <rmw_wait+0x84>
 8018116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801811a:	f7fe fdb5 	bl	8016c88 <rmw_time_total_nsec>
 801811e:	4a21      	ldr	r2, [pc, #132]	@ (80181a4 <rmw_wait+0x2fc>)
 8018120:	2300      	movs	r3, #0
 8018122:	f7e8 fe11 	bl	8000d48 <__aeabi_uldivmod>
 8018126:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801812a:	f171 0100 	sbcs.w	r1, r1, #0
 801812e:	4605      	mov	r5, r0
 8018130:	f6ff aed8 	blt.w	8017ee4 <rmw_wait+0x3c>
 8018134:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8018138:	e6d4      	b.n	8017ee4 <rmw_wait+0x3c>
 801813a:	2800      	cmp	r0, #0
 801813c:	d1de      	bne.n	80180fc <rmw_wait+0x254>
 801813e:	2900      	cmp	r1, #0
 8018140:	d1dc      	bne.n	80180fc <rmw_wait+0x254>
 8018142:	4608      	mov	r0, r1
 8018144:	e7a0      	b.n	8018088 <rmw_wait+0x1e0>
 8018146:	2f00      	cmp	r7, #0
 8018148:	f47f af0b 	bne.w	8017f62 <rmw_wait+0xba>
 801814c:	2c00      	cmp	r4, #0
 801814e:	f47f af1a 	bne.w	8017f86 <rmw_wait+0xde>
 8018152:	f1b9 0f00 	cmp.w	r9, #0
 8018156:	d027      	beq.n	80181a8 <rmw_wait+0x300>
 8018158:	f8d9 3000 	ldr.w	r3, [r9]
 801815c:	4625      	mov	r5, r4
 801815e:	2b00      	cmp	r3, #0
 8018160:	f47f af41 	bne.w	8017fe6 <rmw_wait+0x13e>
 8018164:	e777      	b.n	8018056 <rmw_wait+0x1ae>
 8018166:	464d      	mov	r5, r9
 8018168:	e74e      	b.n	8018008 <rmw_wait+0x160>
 801816a:	2f00      	cmp	r7, #0
 801816c:	f47f aef9 	bne.w	8017f62 <rmw_wait+0xba>
 8018170:	2c00      	cmp	r4, #0
 8018172:	f47f af08 	bne.w	8017f86 <rmw_wait+0xde>
 8018176:	f1b9 0f00 	cmp.w	r9, #0
 801817a:	d015      	beq.n	80181a8 <rmw_wait+0x300>
 801817c:	f8d9 3000 	ldr.w	r3, [r9]
 8018180:	2b00      	cmp	r3, #0
 8018182:	f47f af30 	bne.w	8017fe6 <rmw_wait+0x13e>
 8018186:	2500      	movs	r5, #0
 8018188:	e743      	b.n	8018012 <rmw_wait+0x16a>
 801818a:	2c00      	cmp	r4, #0
 801818c:	f47f aefb 	bne.w	8017f86 <rmw_wait+0xde>
 8018190:	f1b9 0f00 	cmp.w	r9, #0
 8018194:	f47f af24 	bne.w	8017fe0 <rmw_wait+0x138>
 8018198:	e7f5      	b.n	8018186 <rmw_wait+0x2de>
 801819a:	bf00      	nop
 801819c:	080209b0 	.word	0x080209b0
 80181a0:	20011760 	.word	0x20011760
 80181a4:	000f4240 	.word	0x000f4240
 80181a8:	464d      	mov	r5, r9
 80181aa:	e754      	b.n	8018056 <rmw_wait+0x1ae>

080181ac <rmw_create_wait_set>:
 80181ac:	b508      	push	{r3, lr}
 80181ae:	4803      	ldr	r0, [pc, #12]	@ (80181bc <rmw_create_wait_set+0x10>)
 80181b0:	f7fe fee0 	bl	8016f74 <get_memory>
 80181b4:	b108      	cbz	r0, 80181ba <rmw_create_wait_set+0xe>
 80181b6:	6880      	ldr	r0, [r0, #8]
 80181b8:	3010      	adds	r0, #16
 80181ba:	bd08      	pop	{r3, pc}
 80181bc:	2000cf1c 	.word	0x2000cf1c

080181c0 <rmw_destroy_wait_set>:
 80181c0:	b508      	push	{r3, lr}
 80181c2:	4b08      	ldr	r3, [pc, #32]	@ (80181e4 <rmw_destroy_wait_set+0x24>)
 80181c4:	6819      	ldr	r1, [r3, #0]
 80181c6:	b911      	cbnz	r1, 80181ce <rmw_destroy_wait_set+0xe>
 80181c8:	e00a      	b.n	80181e0 <rmw_destroy_wait_set+0x20>
 80181ca:	6849      	ldr	r1, [r1, #4]
 80181cc:	b141      	cbz	r1, 80181e0 <rmw_destroy_wait_set+0x20>
 80181ce:	688b      	ldr	r3, [r1, #8]
 80181d0:	3310      	adds	r3, #16
 80181d2:	4298      	cmp	r0, r3
 80181d4:	d1f9      	bne.n	80181ca <rmw_destroy_wait_set+0xa>
 80181d6:	4803      	ldr	r0, [pc, #12]	@ (80181e4 <rmw_destroy_wait_set+0x24>)
 80181d8:	f7fe fedc 	bl	8016f94 <put_memory>
 80181dc:	2000      	movs	r0, #0
 80181de:	bd08      	pop	{r3, pc}
 80181e0:	2001      	movs	r0, #1
 80181e2:	bd08      	pop	{r3, pc}
 80181e4:	2000cf1c 	.word	0x2000cf1c

080181e8 <std_msgs__msg__Float32MultiArray__get_type_hash>:
 80181e8:	4800      	ldr	r0, [pc, #0]	@ (80181ec <std_msgs__msg__Float32MultiArray__get_type_hash+0x4>)
 80181ea:	4770      	bx	lr
 80181ec:	200011fc 	.word	0x200011fc

080181f0 <std_msgs__msg__Float32MultiArray__get_type_description>:
 80181f0:	b570      	push	{r4, r5, r6, lr}
 80181f2:	4e0c      	ldr	r6, [pc, #48]	@ (8018224 <std_msgs__msg__Float32MultiArray__get_type_description+0x34>)
 80181f4:	7835      	ldrb	r5, [r6, #0]
 80181f6:	b10d      	cbz	r5, 80181fc <std_msgs__msg__Float32MultiArray__get_type_description+0xc>
 80181f8:	480b      	ldr	r0, [pc, #44]	@ (8018228 <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 80181fa:	bd70      	pop	{r4, r5, r6, pc}
 80181fc:	4628      	mov	r0, r5
 80181fe:	f000 f8c7 	bl	8018390 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8018202:	300c      	adds	r0, #12
 8018204:	c807      	ldmia	r0, {r0, r1, r2}
 8018206:	4c09      	ldr	r4, [pc, #36]	@ (801822c <std_msgs__msg__Float32MultiArray__get_type_description+0x3c>)
 8018208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801820c:	4628      	mov	r0, r5
 801820e:	f000 f96d 	bl	80184ec <std_msgs__msg__MultiArrayLayout__get_type_description>
 8018212:	300c      	adds	r0, #12
 8018214:	c807      	ldmia	r0, {r0, r1, r2}
 8018216:	3418      	adds	r4, #24
 8018218:	2301      	movs	r3, #1
 801821a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801821e:	7033      	strb	r3, [r6, #0]
 8018220:	4801      	ldr	r0, [pc, #4]	@ (8018228 <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 8018222:	bd70      	pop	{r4, r5, r6, pc}
 8018224:	20011ab5 	.word	0x20011ab5
 8018228:	08021d78 	.word	0x08021d78
 801822c:	200013fc 	.word	0x200013fc

08018230 <std_msgs__msg__Float32MultiArray__get_type_description_sources>:
 8018230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018232:	4e17      	ldr	r6, [pc, #92]	@ (8018290 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x60>)
 8018234:	7837      	ldrb	r7, [r6, #0]
 8018236:	b10f      	cbz	r7, 801823c <std_msgs__msg__Float32MultiArray__get_type_description_sources+0xc>
 8018238:	4816      	ldr	r0, [pc, #88]	@ (8018294 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 801823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801823c:	4d16      	ldr	r5, [pc, #88]	@ (8018298 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x68>)
 801823e:	4c17      	ldr	r4, [pc, #92]	@ (801829c <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x6c>)
 8018240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018248:	682b      	ldr	r3, [r5, #0]
 801824a:	4625      	mov	r5, r4
 801824c:	4638      	mov	r0, r7
 801824e:	f845 3b04 	str.w	r3, [r5], #4
 8018252:	f000 f8a9 	bl	80183a8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8018256:	4684      	mov	ip, r0
 8018258:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801825c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801825e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018264:	4638      	mov	r0, r7
 8018266:	f8dc 3000 	ldr.w	r3, [ip]
 801826a:	602b      	str	r3, [r5, #0]
 801826c:	f000 f956 	bl	801851c <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 8018270:	2301      	movs	r3, #1
 8018272:	4684      	mov	ip, r0
 8018274:	7033      	strb	r3, [r6, #0]
 8018276:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801827a:	3428      	adds	r4, #40	@ 0x28
 801827c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801827e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018284:	f8dc 3000 	ldr.w	r3, [ip]
 8018288:	4802      	ldr	r0, [pc, #8]	@ (8018294 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 801828a:	6023      	str	r3, [r4, #0]
 801828c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801828e:	bf00      	nop
 8018290:	20011ab4 	.word	0x20011ab4
 8018294:	08021d48 	.word	0x08021d48
 8018298:	08021d54 	.word	0x08021d54
 801829c:	20011a48 	.word	0x20011a48

080182a0 <std_msgs__msg__Header__get_type_hash>:
 80182a0:	4800      	ldr	r0, [pc, #0]	@ (80182a4 <std_msgs__msg__Header__get_type_hash+0x4>)
 80182a2:	4770      	bx	lr
 80182a4:	20001524 	.word	0x20001524

080182a8 <std_msgs__msg__Header__get_type_description>:
 80182a8:	b510      	push	{r4, lr}
 80182aa:	4c08      	ldr	r4, [pc, #32]	@ (80182cc <std_msgs__msg__Header__get_type_description+0x24>)
 80182ac:	7820      	ldrb	r0, [r4, #0]
 80182ae:	b108      	cbz	r0, 80182b4 <std_msgs__msg__Header__get_type_description+0xc>
 80182b0:	4807      	ldr	r0, [pc, #28]	@ (80182d0 <std_msgs__msg__Header__get_type_description+0x28>)
 80182b2:	bd10      	pop	{r4, pc}
 80182b4:	f000 fa08 	bl	80186c8 <builtin_interfaces__msg__Time__get_type_description>
 80182b8:	300c      	adds	r0, #12
 80182ba:	c807      	ldmia	r0, {r0, r1, r2}
 80182bc:	4b05      	ldr	r3, [pc, #20]	@ (80182d4 <std_msgs__msg__Header__get_type_description+0x2c>)
 80182be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80182c2:	2301      	movs	r3, #1
 80182c4:	4802      	ldr	r0, [pc, #8]	@ (80182d0 <std_msgs__msg__Header__get_type_description+0x28>)
 80182c6:	7023      	strb	r3, [r4, #0]
 80182c8:	bd10      	pop	{r4, pc}
 80182ca:	bf00      	nop
 80182cc:	20011b01 	.word	0x20011b01
 80182d0:	08021dcc 	.word	0x08021dcc
 80182d4:	2000169c 	.word	0x2000169c

080182d8 <std_msgs__msg__Header__get_individual_type_description_source>:
 80182d8:	4800      	ldr	r0, [pc, #0]	@ (80182dc <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 80182da:	4770      	bx	lr
 80182dc:	08021da8 	.word	0x08021da8

080182e0 <std_msgs__msg__Header__get_type_description_sources>:
 80182e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182e2:	4e0f      	ldr	r6, [pc, #60]	@ (8018320 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 80182e4:	7837      	ldrb	r7, [r6, #0]
 80182e6:	b10f      	cbz	r7, 80182ec <std_msgs__msg__Header__get_type_description_sources+0xc>
 80182e8:	480e      	ldr	r0, [pc, #56]	@ (8018324 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 80182ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182ec:	4d0e      	ldr	r5, [pc, #56]	@ (8018328 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 80182ee:	4c0f      	ldr	r4, [pc, #60]	@ (801832c <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 80182f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182f8:	682b      	ldr	r3, [r5, #0]
 80182fa:	f844 3b04 	str.w	r3, [r4], #4
 80182fe:	4638      	mov	r0, r7
 8018300:	f000 f9ee 	bl	80186e0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8018304:	2301      	movs	r3, #1
 8018306:	4684      	mov	ip, r0
 8018308:	7033      	strb	r3, [r6, #0]
 801830a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801830e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018310:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018316:	f8dc 3000 	ldr.w	r3, [ip]
 801831a:	4802      	ldr	r0, [pc, #8]	@ (8018324 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801831c:	6023      	str	r3, [r4, #0]
 801831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018320:	20011b00 	.word	0x20011b00
 8018324:	08021d9c 	.word	0x08021d9c
 8018328:	08021da8 	.word	0x08021da8
 801832c:	20011ab8 	.word	0x20011ab8

08018330 <std_msgs__msg__Header__init>:
 8018330:	b1d8      	cbz	r0, 801836a <std_msgs__msg__Header__init+0x3a>
 8018332:	b538      	push	{r3, r4, r5, lr}
 8018334:	4604      	mov	r4, r0
 8018336:	f000 f9f3 	bl	8018720 <builtin_interfaces__msg__Time__init>
 801833a:	b130      	cbz	r0, 801834a <std_msgs__msg__Header__init+0x1a>
 801833c:	f104 0508 	add.w	r5, r4, #8
 8018340:	4628      	mov	r0, r5
 8018342:	f7f6 fa0d 	bl	800e760 <rosidl_runtime_c__String__init>
 8018346:	b148      	cbz	r0, 801835c <std_msgs__msg__Header__init+0x2c>
 8018348:	bd38      	pop	{r3, r4, r5, pc}
 801834a:	4620      	mov	r0, r4
 801834c:	f000 f9ec 	bl	8018728 <builtin_interfaces__msg__Time__fini>
 8018350:	f104 0008 	add.w	r0, r4, #8
 8018354:	f7f6 fa1e 	bl	800e794 <rosidl_runtime_c__String__fini>
 8018358:	2000      	movs	r0, #0
 801835a:	bd38      	pop	{r3, r4, r5, pc}
 801835c:	4620      	mov	r0, r4
 801835e:	f000 f9e3 	bl	8018728 <builtin_interfaces__msg__Time__fini>
 8018362:	4628      	mov	r0, r5
 8018364:	f7f6 fa16 	bl	800e794 <rosidl_runtime_c__String__fini>
 8018368:	e7f6      	b.n	8018358 <std_msgs__msg__Header__init+0x28>
 801836a:	2000      	movs	r0, #0
 801836c:	4770      	bx	lr
 801836e:	bf00      	nop

08018370 <std_msgs__msg__Header__fini>:
 8018370:	b148      	cbz	r0, 8018386 <std_msgs__msg__Header__fini+0x16>
 8018372:	b510      	push	{r4, lr}
 8018374:	4604      	mov	r4, r0
 8018376:	f000 f9d7 	bl	8018728 <builtin_interfaces__msg__Time__fini>
 801837a:	f104 0008 	add.w	r0, r4, #8
 801837e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018382:	f7f6 ba07 	b.w	800e794 <rosidl_runtime_c__String__fini>
 8018386:	4770      	bx	lr

08018388 <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 8018388:	4800      	ldr	r0, [pc, #0]	@ (801838c <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 801838a:	4770      	bx	lr
 801838c:	2000177c 	.word	0x2000177c

08018390 <std_msgs__msg__MultiArrayDimension__get_type_description>:
 8018390:	4b03      	ldr	r3, [pc, #12]	@ (80183a0 <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 8018392:	781a      	ldrb	r2, [r3, #0]
 8018394:	b90a      	cbnz	r2, 801839a <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 8018396:	2201      	movs	r2, #1
 8018398:	701a      	strb	r2, [r3, #0]
 801839a:	4802      	ldr	r0, [pc, #8]	@ (80183a4 <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 801839c:	4770      	bx	lr
 801839e:	bf00      	nop
 80183a0:	20011b29 	.word	0x20011b29
 80183a4:	08021e20 	.word	0x08021e20

080183a8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 80183a8:	4800      	ldr	r0, [pc, #0]	@ (80183ac <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 80183aa:	4770      	bx	lr
 80183ac:	08021dfc 	.word	0x08021dfc

080183b0 <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 80183b0:	4b09      	ldr	r3, [pc, #36]	@ (80183d8 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 80183b2:	781a      	ldrb	r2, [r3, #0]
 80183b4:	b96a      	cbnz	r2, 80183d2 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 80183b6:	b430      	push	{r4, r5}
 80183b8:	4d08      	ldr	r5, [pc, #32]	@ (80183dc <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 80183ba:	4c09      	ldr	r4, [pc, #36]	@ (80183e0 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 80183bc:	2201      	movs	r2, #1
 80183be:	701a      	strb	r2, [r3, #0]
 80183c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183c8:	682b      	ldr	r3, [r5, #0]
 80183ca:	4806      	ldr	r0, [pc, #24]	@ (80183e4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	bc30      	pop	{r4, r5}
 80183d0:	4770      	bx	lr
 80183d2:	4804      	ldr	r0, [pc, #16]	@ (80183e4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop
 80183d8:	20011b28 	.word	0x20011b28
 80183dc:	08021dfc 	.word	0x08021dfc
 80183e0:	20011b04 	.word	0x20011b04
 80183e4:	08021df0 	.word	0x08021df0

080183e8 <std_msgs__msg__MultiArrayDimension__init>:
 80183e8:	b150      	cbz	r0, 8018400 <std_msgs__msg__MultiArrayDimension__init+0x18>
 80183ea:	b510      	push	{r4, lr}
 80183ec:	4604      	mov	r4, r0
 80183ee:	f7f6 f9b7 	bl	800e760 <rosidl_runtime_c__String__init>
 80183f2:	b100      	cbz	r0, 80183f6 <std_msgs__msg__MultiArrayDimension__init+0xe>
 80183f4:	bd10      	pop	{r4, pc}
 80183f6:	4620      	mov	r0, r4
 80183f8:	f7f6 f9cc 	bl	800e794 <rosidl_runtime_c__String__fini>
 80183fc:	2000      	movs	r0, #0
 80183fe:	bd10      	pop	{r4, pc}
 8018400:	2000      	movs	r0, #0
 8018402:	4770      	bx	lr

08018404 <std_msgs__msg__MultiArrayDimension__fini>:
 8018404:	b108      	cbz	r0, 801840a <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8018406:	f7f6 b9c5 	b.w	800e794 <rosidl_runtime_c__String__fini>
 801840a:	4770      	bx	lr

0801840c <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 801840c:	2800      	cmp	r0, #0
 801840e:	d03f      	beq.n	8018490 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 8018410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018414:	b087      	sub	sp, #28
 8018416:	460d      	mov	r5, r1
 8018418:	4681      	mov	r9, r0
 801841a:	a801      	add	r0, sp, #4
 801841c:	f7f5 faf0 	bl	800da00 <rcutils_get_default_allocator>
 8018420:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018424:	b35d      	cbz	r5, 801847e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 8018426:	9b04      	ldr	r3, [sp, #16]
 8018428:	4642      	mov	r2, r8
 801842a:	2114      	movs	r1, #20
 801842c:	4628      	mov	r0, r5
 801842e:	4798      	blx	r3
 8018430:	4607      	mov	r7, r0
 8018432:	b310      	cbz	r0, 801847a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 8018434:	4606      	mov	r6, r0
 8018436:	2400      	movs	r4, #0
 8018438:	e004      	b.n	8018444 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 801843a:	3401      	adds	r4, #1
 801843c:	42a5      	cmp	r5, r4
 801843e:	f106 0614 	add.w	r6, r6, #20
 8018442:	d01d      	beq.n	8018480 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8018444:	4630      	mov	r0, r6
 8018446:	f7f6 f98b 	bl	800e760 <rosidl_runtime_c__String__init>
 801844a:	2800      	cmp	r0, #0
 801844c:	d1f5      	bne.n	801843a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 801844e:	4630      	mov	r0, r6
 8018450:	f7f6 f9a0 	bl	800e794 <rosidl_runtime_c__String__fini>
 8018454:	42a5      	cmp	r5, r4
 8018456:	d913      	bls.n	8018480 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8018458:	b15c      	cbz	r4, 8018472 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 801845a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801845e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8018462:	3c14      	subs	r4, #20
 8018464:	4620      	mov	r0, r4
 8018466:	f7f6 f995 	bl	800e794 <rosidl_runtime_c__String__fini>
 801846a:	42bc      	cmp	r4, r7
 801846c:	f1a4 0414 	sub.w	r4, r4, #20
 8018470:	d1f8      	bne.n	8018464 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 8018472:	9b02      	ldr	r3, [sp, #8]
 8018474:	4641      	mov	r1, r8
 8018476:	4638      	mov	r0, r7
 8018478:	4798      	blx	r3
 801847a:	2000      	movs	r0, #0
 801847c:	e005      	b.n	801848a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 801847e:	462f      	mov	r7, r5
 8018480:	e9c9 7500 	strd	r7, r5, [r9]
 8018484:	f8c9 5008 	str.w	r5, [r9, #8]
 8018488:	2001      	movs	r0, #1
 801848a:	b007      	add	sp, #28
 801848c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018490:	2000      	movs	r0, #0
 8018492:	4770      	bx	lr

08018494 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8018494:	b320      	cbz	r0, 80184e0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8018496:	b530      	push	{r4, r5, lr}
 8018498:	4605      	mov	r5, r0
 801849a:	b087      	sub	sp, #28
 801849c:	a801      	add	r0, sp, #4
 801849e:	f7f5 faaf 	bl	800da00 <rcutils_get_default_allocator>
 80184a2:	682a      	ldr	r2, [r5, #0]
 80184a4:	b1b2      	cbz	r2, 80184d4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80184a6:	68a9      	ldr	r1, [r5, #8]
 80184a8:	b161      	cbz	r1, 80184c4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80184aa:	2400      	movs	r4, #0
 80184ac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80184b0:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80184b4:	d010      	beq.n	80184d8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80184b6:	f7f6 f96d 	bl	800e794 <rosidl_runtime_c__String__fini>
 80184ba:	68a9      	ldr	r1, [r5, #8]
 80184bc:	682a      	ldr	r2, [r5, #0]
 80184be:	3401      	adds	r4, #1
 80184c0:	428c      	cmp	r4, r1
 80184c2:	d3f3      	bcc.n	80184ac <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80184c4:	9b02      	ldr	r3, [sp, #8]
 80184c6:	9905      	ldr	r1, [sp, #20]
 80184c8:	4610      	mov	r0, r2
 80184ca:	4798      	blx	r3
 80184cc:	2300      	movs	r3, #0
 80184ce:	e9c5 3300 	strd	r3, r3, [r5]
 80184d2:	60ab      	str	r3, [r5, #8]
 80184d4:	b007      	add	sp, #28
 80184d6:	bd30      	pop	{r4, r5, pc}
 80184d8:	3401      	adds	r4, #1
 80184da:	428c      	cmp	r4, r1
 80184dc:	d3e6      	bcc.n	80184ac <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80184de:	e7f1      	b.n	80184c4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80184e0:	4770      	bx	lr
 80184e2:	bf00      	nop

080184e4 <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 80184e4:	4800      	ldr	r0, [pc, #0]	@ (80184e8 <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 80184e6:	4770      	bx	lr
 80184e8:	20001a44 	.word	0x20001a44

080184ec <std_msgs__msg__MultiArrayLayout__get_type_description>:
 80184ec:	b510      	push	{r4, lr}
 80184ee:	4c08      	ldr	r4, [pc, #32]	@ (8018510 <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 80184f0:	7820      	ldrb	r0, [r4, #0]
 80184f2:	b108      	cbz	r0, 80184f8 <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 80184f4:	4807      	ldr	r0, [pc, #28]	@ (8018514 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 80184f6:	bd10      	pop	{r4, pc}
 80184f8:	f7ff ff4a 	bl	8018390 <std_msgs__msg__MultiArrayDimension__get_type_description>
 80184fc:	300c      	adds	r0, #12
 80184fe:	c807      	ldmia	r0, {r0, r1, r2}
 8018500:	4b05      	ldr	r3, [pc, #20]	@ (8018518 <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 8018502:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018506:	2301      	movs	r3, #1
 8018508:	4802      	ldr	r0, [pc, #8]	@ (8018514 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 801850a:	7023      	strb	r3, [r4, #0]
 801850c:	bd10      	pop	{r4, pc}
 801850e:	bf00      	nop
 8018510:	20011b75 	.word	0x20011b75
 8018514:	08021e74 	.word	0x08021e74
 8018518:	20001f00 	.word	0x20001f00

0801851c <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 801851c:	4800      	ldr	r0, [pc, #0]	@ (8018520 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 801851e:	4770      	bx	lr
 8018520:	08021e50 	.word	0x08021e50

08018524 <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 8018524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018526:	4e0f      	ldr	r6, [pc, #60]	@ (8018564 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 8018528:	7837      	ldrb	r7, [r6, #0]
 801852a:	b10f      	cbz	r7, 8018530 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 801852c:	480e      	ldr	r0, [pc, #56]	@ (8018568 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 801852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018530:	4d0e      	ldr	r5, [pc, #56]	@ (801856c <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 8018532:	4c0f      	ldr	r4, [pc, #60]	@ (8018570 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8018534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801853a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801853c:	682b      	ldr	r3, [r5, #0]
 801853e:	f844 3b04 	str.w	r3, [r4], #4
 8018542:	4638      	mov	r0, r7
 8018544:	f7ff ff30 	bl	80183a8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8018548:	2301      	movs	r3, #1
 801854a:	4684      	mov	ip, r0
 801854c:	7033      	strb	r3, [r6, #0]
 801854e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018554:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801855a:	f8dc 3000 	ldr.w	r3, [ip]
 801855e:	4802      	ldr	r0, [pc, #8]	@ (8018568 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8018560:	6023      	str	r3, [r4, #0]
 8018562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018564:	20011b74 	.word	0x20011b74
 8018568:	08021e44 	.word	0x08021e44
 801856c:	08021e50 	.word	0x08021e50
 8018570:	20011b2c 	.word	0x20011b2c

08018574 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8018574:	f7ff bf38 	b.w	80183e8 <std_msgs__msg__MultiArrayDimension__init>

08018578 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8018578:	f7ff bf44 	b.w	8018404 <std_msgs__msg__MultiArrayDimension__fini>

0801857c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801857c:	4b04      	ldr	r3, [pc, #16]	@ (8018590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801857e:	681a      	ldr	r2, [r3, #0]
 8018580:	b10a      	cbz	r2, 8018586 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8018582:	4803      	ldr	r0, [pc, #12]	@ (8018590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8018584:	4770      	bx	lr
 8018586:	4a03      	ldr	r2, [pc, #12]	@ (8018594 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8018588:	4801      	ldr	r0, [pc, #4]	@ (8018590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801858a:	6812      	ldr	r2, [r2, #0]
 801858c:	601a      	str	r2, [r3, #0]
 801858e:	4770      	bx	lr
 8018590:	20001ff4 	.word	0x20001ff4
 8018594:	200003a4 	.word	0x200003a4

08018598 <_MultiArrayDimension__cdr_serialize>:
 8018598:	b1d0      	cbz	r0, 80185d0 <_MultiArrayDimension__cdr_serialize+0x38>
 801859a:	b570      	push	{r4, r5, r6, lr}
 801859c:	6806      	ldr	r6, [r0, #0]
 801859e:	460d      	mov	r5, r1
 80185a0:	4604      	mov	r4, r0
 80185a2:	b196      	cbz	r6, 80185ca <_MultiArrayDimension__cdr_serialize+0x32>
 80185a4:	4630      	mov	r0, r6
 80185a6:	f7e7 fe93 	bl	80002d0 <strlen>
 80185aa:	1c42      	adds	r2, r0, #1
 80185ac:	6060      	str	r0, [r4, #4]
 80185ae:	4631      	mov	r1, r6
 80185b0:	4628      	mov	r0, r5
 80185b2:	f7f7 f94f 	bl	800f854 <ucdr_serialize_sequence_char>
 80185b6:	68e1      	ldr	r1, [r4, #12]
 80185b8:	4628      	mov	r0, r5
 80185ba:	f7f2 fecd 	bl	800b358 <ucdr_serialize_uint32_t>
 80185be:	6921      	ldr	r1, [r4, #16]
 80185c0:	4628      	mov	r0, r5
 80185c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185c6:	f7f2 bec7 	b.w	800b358 <ucdr_serialize_uint32_t>
 80185ca:	4632      	mov	r2, r6
 80185cc:	4630      	mov	r0, r6
 80185ce:	e7ed      	b.n	80185ac <_MultiArrayDimension__cdr_serialize+0x14>
 80185d0:	4770      	bx	lr
 80185d2:	bf00      	nop

080185d4 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80185d4:	b570      	push	{r4, r5, r6, lr}
 80185d6:	4604      	mov	r4, r0
 80185d8:	b1b0      	cbz	r0, 8018608 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80185da:	460d      	mov	r5, r1
 80185dc:	4628      	mov	r0, r5
 80185de:	2104      	movs	r1, #4
 80185e0:	f7f4 f880 	bl	800c6e4 <ucdr_alignment>
 80185e4:	6863      	ldr	r3, [r4, #4]
 80185e6:	1d6e      	adds	r6, r5, #5
 80185e8:	441e      	add	r6, r3
 80185ea:	4406      	add	r6, r0
 80185ec:	2104      	movs	r1, #4
 80185ee:	4630      	mov	r0, r6
 80185f0:	f7f4 f878 	bl	800c6e4 <ucdr_alignment>
 80185f4:	1d04      	adds	r4, r0, #4
 80185f6:	4434      	add	r4, r6
 80185f8:	2104      	movs	r1, #4
 80185fa:	4620      	mov	r0, r4
 80185fc:	f7f4 f872 	bl	800c6e4 <ucdr_alignment>
 8018600:	f1c5 0504 	rsb	r5, r5, #4
 8018604:	4405      	add	r5, r0
 8018606:	1928      	adds	r0, r5, r4
 8018608:	bd70      	pop	{r4, r5, r6, pc}
 801860a:	bf00      	nop

0801860c <_MultiArrayDimension__cdr_deserialize>:
 801860c:	b570      	push	{r4, r5, r6, lr}
 801860e:	460c      	mov	r4, r1
 8018610:	b082      	sub	sp, #8
 8018612:	b1d9      	cbz	r1, 801864c <_MultiArrayDimension__cdr_deserialize+0x40>
 8018614:	688e      	ldr	r6, [r1, #8]
 8018616:	6809      	ldr	r1, [r1, #0]
 8018618:	ab01      	add	r3, sp, #4
 801861a:	4632      	mov	r2, r6
 801861c:	4605      	mov	r5, r0
 801861e:	f7f7 f92b 	bl	800f878 <ucdr_deserialize_sequence_char>
 8018622:	9b01      	ldr	r3, [sp, #4]
 8018624:	b970      	cbnz	r0, 8018644 <_MultiArrayDimension__cdr_deserialize+0x38>
 8018626:	429e      	cmp	r6, r3
 8018628:	d313      	bcc.n	8018652 <_MultiArrayDimension__cdr_deserialize+0x46>
 801862a:	f104 010c 	add.w	r1, r4, #12
 801862e:	4628      	mov	r0, r5
 8018630:	f7f2 ffbc 	bl	800b5ac <ucdr_deserialize_uint32_t>
 8018634:	f104 0110 	add.w	r1, r4, #16
 8018638:	4628      	mov	r0, r5
 801863a:	b002      	add	sp, #8
 801863c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018640:	f7f2 bfb4 	b.w	800b5ac <ucdr_deserialize_uint32_t>
 8018644:	b103      	cbz	r3, 8018648 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8018646:	3b01      	subs	r3, #1
 8018648:	6063      	str	r3, [r4, #4]
 801864a:	e7ee      	b.n	801862a <_MultiArrayDimension__cdr_deserialize+0x1e>
 801864c:	4608      	mov	r0, r1
 801864e:	b002      	add	sp, #8
 8018650:	bd70      	pop	{r4, r5, r6, pc}
 8018652:	2101      	movs	r1, #1
 8018654:	75a8      	strb	r0, [r5, #22]
 8018656:	7569      	strb	r1, [r5, #21]
 8018658:	6060      	str	r0, [r4, #4]
 801865a:	4628      	mov	r0, r5
 801865c:	f7f4 f858 	bl	800c710 <ucdr_align_to>
 8018660:	9901      	ldr	r1, [sp, #4]
 8018662:	4628      	mov	r0, r5
 8018664:	f7f4 f88a 	bl	800c77c <ucdr_advance_buffer>
 8018668:	e7df      	b.n	801862a <_MultiArrayDimension__cdr_deserialize+0x1e>
 801866a:	bf00      	nop

0801866c <_MultiArrayDimension__max_serialized_size>:
 801866c:	b510      	push	{r4, lr}
 801866e:	2104      	movs	r1, #4
 8018670:	2000      	movs	r0, #0
 8018672:	f7f4 f837 	bl	800c6e4 <ucdr_alignment>
 8018676:	1d04      	adds	r4, r0, #4
 8018678:	2104      	movs	r1, #4
 801867a:	4620      	mov	r0, r4
 801867c:	f7f4 f832 	bl	800c6e4 <ucdr_alignment>
 8018680:	3004      	adds	r0, #4
 8018682:	4420      	add	r0, r4
 8018684:	bd10      	pop	{r4, pc}
 8018686:	bf00      	nop

08018688 <_MultiArrayDimension__get_serialized_size>:
 8018688:	b538      	push	{r3, r4, r5, lr}
 801868a:	4604      	mov	r4, r0
 801868c:	b190      	cbz	r0, 80186b4 <_MultiArrayDimension__get_serialized_size+0x2c>
 801868e:	2104      	movs	r1, #4
 8018690:	2000      	movs	r0, #0
 8018692:	f7f4 f827 	bl	800c6e4 <ucdr_alignment>
 8018696:	6865      	ldr	r5, [r4, #4]
 8018698:	3505      	adds	r5, #5
 801869a:	4405      	add	r5, r0
 801869c:	2104      	movs	r1, #4
 801869e:	4628      	mov	r0, r5
 80186a0:	f7f4 f820 	bl	800c6e4 <ucdr_alignment>
 80186a4:	1d04      	adds	r4, r0, #4
 80186a6:	442c      	add	r4, r5
 80186a8:	2104      	movs	r1, #4
 80186aa:	4620      	mov	r0, r4
 80186ac:	f7f4 f81a 	bl	800c6e4 <ucdr_alignment>
 80186b0:	3004      	adds	r0, #4
 80186b2:	4420      	add	r0, r4
 80186b4:	bd38      	pop	{r3, r4, r5, pc}
 80186b6:	bf00      	nop

080186b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80186b8:	4800      	ldr	r0, [pc, #0]	@ (80186bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80186ba:	4770      	bx	lr
 80186bc:	200020c0 	.word	0x200020c0

080186c0 <builtin_interfaces__msg__Time__get_type_hash>:
 80186c0:	4800      	ldr	r0, [pc, #0]	@ (80186c4 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 80186c2:	4770      	bx	lr
 80186c4:	200020f4 	.word	0x200020f4

080186c8 <builtin_interfaces__msg__Time__get_type_description>:
 80186c8:	4b03      	ldr	r3, [pc, #12]	@ (80186d8 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 80186ca:	781a      	ldrb	r2, [r3, #0]
 80186cc:	b90a      	cbnz	r2, 80186d2 <builtin_interfaces__msg__Time__get_type_description+0xa>
 80186ce:	2201      	movs	r2, #1
 80186d0:	701a      	strb	r2, [r3, #0]
 80186d2:	4802      	ldr	r0, [pc, #8]	@ (80186dc <builtin_interfaces__msg__Time__get_type_description+0x14>)
 80186d4:	4770      	bx	lr
 80186d6:	bf00      	nop
 80186d8:	20011b9d 	.word	0x20011b9d
 80186dc:	08021ee8 	.word	0x08021ee8

080186e0 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 80186e0:	4800      	ldr	r0, [pc, #0]	@ (80186e4 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 80186e2:	4770      	bx	lr
 80186e4:	08021ec4 	.word	0x08021ec4

080186e8 <builtin_interfaces__msg__Time__get_type_description_sources>:
 80186e8:	4b09      	ldr	r3, [pc, #36]	@ (8018710 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 80186ea:	781a      	ldrb	r2, [r3, #0]
 80186ec:	b96a      	cbnz	r2, 801870a <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 80186ee:	b430      	push	{r4, r5}
 80186f0:	4d08      	ldr	r5, [pc, #32]	@ (8018714 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 80186f2:	4c09      	ldr	r4, [pc, #36]	@ (8018718 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 80186f4:	2201      	movs	r2, #1
 80186f6:	701a      	strb	r2, [r3, #0]
 80186f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018700:	682b      	ldr	r3, [r5, #0]
 8018702:	4806      	ldr	r0, [pc, #24]	@ (801871c <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8018704:	6023      	str	r3, [r4, #0]
 8018706:	bc30      	pop	{r4, r5}
 8018708:	4770      	bx	lr
 801870a:	4804      	ldr	r0, [pc, #16]	@ (801871c <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801870c:	4770      	bx	lr
 801870e:	bf00      	nop
 8018710:	20011b9c 	.word	0x20011b9c
 8018714:	08021ec4 	.word	0x08021ec4
 8018718:	20011b78 	.word	0x20011b78
 801871c:	08021eb8 	.word	0x08021eb8

08018720 <builtin_interfaces__msg__Time__init>:
 8018720:	3800      	subs	r0, #0
 8018722:	bf18      	it	ne
 8018724:	2001      	movne	r0, #1
 8018726:	4770      	bx	lr

08018728 <builtin_interfaces__msg__Time__fini>:
 8018728:	4770      	bx	lr
 801872a:	bf00      	nop

0801872c <geometry_msgs__msg__Point__get_type_hash>:
 801872c:	4800      	ldr	r0, [pc, #0]	@ (8018730 <geometry_msgs__msg__Point__get_type_hash+0x4>)
 801872e:	4770      	bx	lr
 8018730:	20002380 	.word	0x20002380

08018734 <geometry_msgs__msg__Point__get_type_description>:
 8018734:	4b03      	ldr	r3, [pc, #12]	@ (8018744 <geometry_msgs__msg__Point__get_type_description+0x10>)
 8018736:	781a      	ldrb	r2, [r3, #0]
 8018738:	b90a      	cbnz	r2, 801873e <geometry_msgs__msg__Point__get_type_description+0xa>
 801873a:	2201      	movs	r2, #1
 801873c:	701a      	strb	r2, [r3, #0]
 801873e:	4802      	ldr	r0, [pc, #8]	@ (8018748 <geometry_msgs__msg__Point__get_type_description+0x14>)
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop
 8018744:	20011bc5 	.word	0x20011bc5
 8018748:	08021f3c 	.word	0x08021f3c

0801874c <geometry_msgs__msg__Point__get_individual_type_description_source>:
 801874c:	4800      	ldr	r0, [pc, #0]	@ (8018750 <geometry_msgs__msg__Point__get_individual_type_description_source+0x4>)
 801874e:	4770      	bx	lr
 8018750:	08021f18 	.word	0x08021f18

08018754 <geometry_msgs__msg__Point__get_type_description_sources>:
 8018754:	4b09      	ldr	r3, [pc, #36]	@ (801877c <geometry_msgs__msg__Point__get_type_description_sources+0x28>)
 8018756:	781a      	ldrb	r2, [r3, #0]
 8018758:	b96a      	cbnz	r2, 8018776 <geometry_msgs__msg__Point__get_type_description_sources+0x22>
 801875a:	b430      	push	{r4, r5}
 801875c:	4d08      	ldr	r5, [pc, #32]	@ (8018780 <geometry_msgs__msg__Point__get_type_description_sources+0x2c>)
 801875e:	4c09      	ldr	r4, [pc, #36]	@ (8018784 <geometry_msgs__msg__Point__get_type_description_sources+0x30>)
 8018760:	2201      	movs	r2, #1
 8018762:	701a      	strb	r2, [r3, #0]
 8018764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801876a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801876c:	682b      	ldr	r3, [r5, #0]
 801876e:	4806      	ldr	r0, [pc, #24]	@ (8018788 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 8018770:	6023      	str	r3, [r4, #0]
 8018772:	bc30      	pop	{r4, r5}
 8018774:	4770      	bx	lr
 8018776:	4804      	ldr	r0, [pc, #16]	@ (8018788 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 8018778:	4770      	bx	lr
 801877a:	bf00      	nop
 801877c:	20011bc4 	.word	0x20011bc4
 8018780:	08021f18 	.word	0x08021f18
 8018784:	20011ba0 	.word	0x20011ba0
 8018788:	08021f0c 	.word	0x08021f0c

0801878c <geometry_msgs__msg__Pose__get_type_hash>:
 801878c:	4800      	ldr	r0, [pc, #0]	@ (8018790 <geometry_msgs__msg__Pose__get_type_hash+0x4>)
 801878e:	4770      	bx	lr
 8018790:	200024fc 	.word	0x200024fc

08018794 <geometry_msgs__msg__Pose__get_type_description>:
 8018794:	b570      	push	{r4, r5, r6, lr}
 8018796:	4e0c      	ldr	r6, [pc, #48]	@ (80187c8 <geometry_msgs__msg__Pose__get_type_description+0x34>)
 8018798:	7835      	ldrb	r5, [r6, #0]
 801879a:	b10d      	cbz	r5, 80187a0 <geometry_msgs__msg__Pose__get_type_description+0xc>
 801879c:	480b      	ldr	r0, [pc, #44]	@ (80187cc <geometry_msgs__msg__Pose__get_type_description+0x38>)
 801879e:	bd70      	pop	{r4, r5, r6, pc}
 80187a0:	4628      	mov	r0, r5
 80187a2:	f7ff ffc7 	bl	8018734 <geometry_msgs__msg__Point__get_type_description>
 80187a6:	300c      	adds	r0, #12
 80187a8:	c807      	ldmia	r0, {r0, r1, r2}
 80187aa:	4c09      	ldr	r4, [pc, #36]	@ (80187d0 <geometry_msgs__msg__Pose__get_type_description+0x3c>)
 80187ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80187b0:	4628      	mov	r0, r5
 80187b2:	f000 f8d9 	bl	8018968 <geometry_msgs__msg__Quaternion__get_type_description>
 80187b6:	300c      	adds	r0, #12
 80187b8:	c807      	ldmia	r0, {r0, r1, r2}
 80187ba:	3418      	adds	r4, #24
 80187bc:	2301      	movs	r3, #1
 80187be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80187c2:	7033      	strb	r3, [r6, #0]
 80187c4:	4801      	ldr	r0, [pc, #4]	@ (80187cc <geometry_msgs__msg__Pose__get_type_description+0x38>)
 80187c6:	bd70      	pop	{r4, r5, r6, pc}
 80187c8:	20011c35 	.word	0x20011c35
 80187cc:	08021f90 	.word	0x08021f90
 80187d0:	200025a8 	.word	0x200025a8

080187d4 <geometry_msgs__msg__Pose__get_individual_type_description_source>:
 80187d4:	4800      	ldr	r0, [pc, #0]	@ (80187d8 <geometry_msgs__msg__Pose__get_individual_type_description_source+0x4>)
 80187d6:	4770      	bx	lr
 80187d8:	08021f6c 	.word	0x08021f6c

080187dc <geometry_msgs__msg__Pose__get_type_description_sources>:
 80187dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187de:	4e17      	ldr	r6, [pc, #92]	@ (801883c <geometry_msgs__msg__Pose__get_type_description_sources+0x60>)
 80187e0:	7837      	ldrb	r7, [r6, #0]
 80187e2:	b10f      	cbz	r7, 80187e8 <geometry_msgs__msg__Pose__get_type_description_sources+0xc>
 80187e4:	4816      	ldr	r0, [pc, #88]	@ (8018840 <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 80187e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187e8:	4d16      	ldr	r5, [pc, #88]	@ (8018844 <geometry_msgs__msg__Pose__get_type_description_sources+0x68>)
 80187ea:	4c17      	ldr	r4, [pc, #92]	@ (8018848 <geometry_msgs__msg__Pose__get_type_description_sources+0x6c>)
 80187ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80187f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80187f4:	682b      	ldr	r3, [r5, #0]
 80187f6:	4625      	mov	r5, r4
 80187f8:	4638      	mov	r0, r7
 80187fa:	f845 3b04 	str.w	r3, [r5], #4
 80187fe:	f7ff ffa5 	bl	801874c <geometry_msgs__msg__Point__get_individual_type_description_source>
 8018802:	4684      	mov	ip, r0
 8018804:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801880a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801880e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018810:	4638      	mov	r0, r7
 8018812:	f8dc 3000 	ldr.w	r3, [ip]
 8018816:	602b      	str	r3, [r5, #0]
 8018818:	f000 f8b2 	bl	8018980 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801881c:	2301      	movs	r3, #1
 801881e:	4684      	mov	ip, r0
 8018820:	7033      	strb	r3, [r6, #0]
 8018822:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018826:	3428      	adds	r4, #40	@ 0x28
 8018828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801882a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801882e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018830:	f8dc 3000 	ldr.w	r3, [ip]
 8018834:	4802      	ldr	r0, [pc, #8]	@ (8018840 <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 8018836:	6023      	str	r3, [r4, #0]
 8018838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801883a:	bf00      	nop
 801883c:	20011c34 	.word	0x20011c34
 8018840:	08021f60 	.word	0x08021f60
 8018844:	08021f6c 	.word	0x08021f6c
 8018848:	20011bc8 	.word	0x20011bc8

0801884c <geometry_msgs__msg__PoseWithCovariance__get_type_hash>:
 801884c:	4800      	ldr	r0, [pc, #0]	@ (8018850 <geometry_msgs__msg__PoseWithCovariance__get_type_hash+0x4>)
 801884e:	4770      	bx	lr
 8018850:	200026c8 	.word	0x200026c8

08018854 <geometry_msgs__msg__PoseWithCovariance__get_type_description>:
 8018854:	b570      	push	{r4, r5, r6, lr}
 8018856:	4e11      	ldr	r6, [pc, #68]	@ (801889c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x48>)
 8018858:	7835      	ldrb	r5, [r6, #0]
 801885a:	b10d      	cbz	r5, 8018860 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xc>
 801885c:	4810      	ldr	r0, [pc, #64]	@ (80188a0 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 801885e:	bd70      	pop	{r4, r5, r6, pc}
 8018860:	4628      	mov	r0, r5
 8018862:	f7ff ff67 	bl	8018734 <geometry_msgs__msg__Point__get_type_description>
 8018866:	300c      	adds	r0, #12
 8018868:	c807      	ldmia	r0, {r0, r1, r2}
 801886a:	4c0e      	ldr	r4, [pc, #56]	@ (80188a4 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x50>)
 801886c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018870:	4628      	mov	r0, r5
 8018872:	f7ff ff8f 	bl	8018794 <geometry_msgs__msg__Pose__get_type_description>
 8018876:	300c      	adds	r0, #12
 8018878:	c807      	ldmia	r0, {r0, r1, r2}
 801887a:	f104 0318 	add.w	r3, r4, #24
 801887e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018882:	4628      	mov	r0, r5
 8018884:	f000 f870 	bl	8018968 <geometry_msgs__msg__Quaternion__get_type_description>
 8018888:	300c      	adds	r0, #12
 801888a:	c807      	ldmia	r0, {r0, r1, r2}
 801888c:	3430      	adds	r4, #48	@ 0x30
 801888e:	2301      	movs	r3, #1
 8018890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018894:	7033      	strb	r3, [r6, #0]
 8018896:	4802      	ldr	r0, [pc, #8]	@ (80188a0 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 8018898:	bd70      	pop	{r4, r5, r6, pc}
 801889a:	bf00      	nop
 801889c:	20011cc9 	.word	0x20011cc9
 80188a0:	08021fe4 	.word	0x08021fe4
 80188a4:	20002840 	.word	0x20002840

080188a8 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>:
 80188a8:	4800      	ldr	r0, [pc, #0]	@ (80188ac <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source+0x4>)
 80188aa:	4770      	bx	lr
 80188ac:	08021fc0 	.word	0x08021fc0

080188b0 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources>:
 80188b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188b2:	4e1e      	ldr	r6, [pc, #120]	@ (801892c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x7c>)
 80188b4:	7837      	ldrb	r7, [r6, #0]
 80188b6:	b10f      	cbz	r7, 80188bc <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0xc>
 80188b8:	481d      	ldr	r0, [pc, #116]	@ (8018930 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 80188ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188bc:	4d1d      	ldr	r5, [pc, #116]	@ (8018934 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x84>)
 80188be:	4c1e      	ldr	r4, [pc, #120]	@ (8018938 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x88>)
 80188c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188c8:	682b      	ldr	r3, [r5, #0]
 80188ca:	4625      	mov	r5, r4
 80188cc:	4638      	mov	r0, r7
 80188ce:	f845 3b04 	str.w	r3, [r5], #4
 80188d2:	f7ff ff3b 	bl	801874c <geometry_msgs__msg__Point__get_individual_type_description_source>
 80188d6:	4684      	mov	ip, r0
 80188d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80188dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80188e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188e4:	4638      	mov	r0, r7
 80188e6:	f8dc 3000 	ldr.w	r3, [ip]
 80188ea:	602b      	str	r3, [r5, #0]
 80188ec:	f7ff ff72 	bl	80187d4 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80188f0:	4684      	mov	ip, r0
 80188f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80188f6:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 80188fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018902:	4638      	mov	r0, r7
 8018904:	f8dc 3000 	ldr.w	r3, [ip]
 8018908:	602b      	str	r3, [r5, #0]
 801890a:	f000 f839 	bl	8018980 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801890e:	2301      	movs	r3, #1
 8018910:	4684      	mov	ip, r0
 8018912:	7033      	strb	r3, [r6, #0]
 8018914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018918:	344c      	adds	r4, #76	@ 0x4c
 801891a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801891c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018922:	f8dc 3000 	ldr.w	r3, [ip]
 8018926:	4802      	ldr	r0, [pc, #8]	@ (8018930 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 8018928:	6023      	str	r3, [r4, #0]
 801892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801892c:	20011cc8 	.word	0x20011cc8
 8018930:	08021fb4 	.word	0x08021fb4
 8018934:	08021fc0 	.word	0x08021fc0
 8018938:	20011c38 	.word	0x20011c38

0801893c <geometry_msgs__msg__PoseWithCovariance__init>:
 801893c:	b150      	cbz	r0, 8018954 <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 801893e:	b510      	push	{r4, lr}
 8018940:	4604      	mov	r4, r0
 8018942:	f001 ff5f 	bl	801a804 <geometry_msgs__msg__Pose__init>
 8018946:	b100      	cbz	r0, 801894a <geometry_msgs__msg__PoseWithCovariance__init+0xe>
 8018948:	bd10      	pop	{r4, pc}
 801894a:	4620      	mov	r0, r4
 801894c:	f001 ff7a 	bl	801a844 <geometry_msgs__msg__Pose__fini>
 8018950:	2000      	movs	r0, #0
 8018952:	bd10      	pop	{r4, pc}
 8018954:	2000      	movs	r0, #0
 8018956:	4770      	bx	lr

08018958 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8018958:	b108      	cbz	r0, 801895e <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 801895a:	f001 bf73 	b.w	801a844 <geometry_msgs__msg__Pose__fini>
 801895e:	4770      	bx	lr

08018960 <geometry_msgs__msg__Quaternion__get_type_hash>:
 8018960:	4800      	ldr	r0, [pc, #0]	@ (8018964 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 8018962:	4770      	bx	lr
 8018964:	2000299c 	.word	0x2000299c

08018968 <geometry_msgs__msg__Quaternion__get_type_description>:
 8018968:	4b03      	ldr	r3, [pc, #12]	@ (8018978 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801896a:	781a      	ldrb	r2, [r3, #0]
 801896c:	b90a      	cbnz	r2, 8018972 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801896e:	2201      	movs	r2, #1
 8018970:	701a      	strb	r2, [r3, #0]
 8018972:	4802      	ldr	r0, [pc, #8]	@ (801897c <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8018974:	4770      	bx	lr
 8018976:	bf00      	nop
 8018978:	20011cf1 	.word	0x20011cf1
 801897c:	08022038 	.word	0x08022038

08018980 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 8018980:	4800      	ldr	r0, [pc, #0]	@ (8018984 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 8018982:	4770      	bx	lr
 8018984:	08022014 	.word	0x08022014

08018988 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 8018988:	4b09      	ldr	r3, [pc, #36]	@ (80189b0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801898a:	781a      	ldrb	r2, [r3, #0]
 801898c:	b96a      	cbnz	r2, 80189aa <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801898e:	b430      	push	{r4, r5}
 8018990:	4d08      	ldr	r5, [pc, #32]	@ (80189b4 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 8018992:	4c09      	ldr	r4, [pc, #36]	@ (80189b8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8018994:	2201      	movs	r2, #1
 8018996:	701a      	strb	r2, [r3, #0]
 8018998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801899a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801899c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801899e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189a0:	682b      	ldr	r3, [r5, #0]
 80189a2:	4806      	ldr	r0, [pc, #24]	@ (80189bc <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 80189a4:	6023      	str	r3, [r4, #0]
 80189a6:	bc30      	pop	{r4, r5}
 80189a8:	4770      	bx	lr
 80189aa:	4804      	ldr	r0, [pc, #16]	@ (80189bc <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 80189ac:	4770      	bx	lr
 80189ae:	bf00      	nop
 80189b0:	20011cf0 	.word	0x20011cf0
 80189b4:	08022014 	.word	0x08022014
 80189b8:	20011ccc 	.word	0x20011ccc
 80189bc:	08022008 	.word	0x08022008

080189c0 <geometry_msgs__msg__TwistWithCovariance__get_type_hash>:
 80189c0:	4800      	ldr	r0, [pc, #0]	@ (80189c4 <geometry_msgs__msg__TwistWithCovariance__get_type_hash+0x4>)
 80189c2:	4770      	bx	lr
 80189c4:	20002b98 	.word	0x20002b98

080189c8 <geometry_msgs__msg__TwistWithCovariance__get_type_description>:
 80189c8:	b570      	push	{r4, r5, r6, lr}
 80189ca:	4e0c      	ldr	r6, [pc, #48]	@ (80189fc <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x34>)
 80189cc:	7835      	ldrb	r5, [r6, #0]
 80189ce:	b10d      	cbz	r5, 80189d4 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xc>
 80189d0:	480b      	ldr	r0, [pc, #44]	@ (8018a00 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 80189d2:	bd70      	pop	{r4, r5, r6, pc}
 80189d4:	4628      	mov	r0, r5
 80189d6:	f7f6 facf 	bl	800ef78 <geometry_msgs__msg__Twist__get_type_description>
 80189da:	300c      	adds	r0, #12
 80189dc:	c807      	ldmia	r0, {r0, r1, r2}
 80189de:	4c09      	ldr	r4, [pc, #36]	@ (8018a04 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x3c>)
 80189e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80189e4:	4628      	mov	r0, r5
 80189e6:	f7f6 fb3b 	bl	800f060 <geometry_msgs__msg__Vector3__get_type_description>
 80189ea:	300c      	adds	r0, #12
 80189ec:	c807      	ldmia	r0, {r0, r1, r2}
 80189ee:	3418      	adds	r4, #24
 80189f0:	2301      	movs	r3, #1
 80189f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80189f6:	7033      	strb	r3, [r6, #0]
 80189f8:	4801      	ldr	r0, [pc, #4]	@ (8018a00 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 80189fa:	bd70      	pop	{r4, r5, r6, pc}
 80189fc:	20011d61 	.word	0x20011d61
 8018a00:	0802208c 	.word	0x0802208c
 8018a04:	20002d14 	.word	0x20002d14

08018a08 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>:
 8018a08:	4800      	ldr	r0, [pc, #0]	@ (8018a0c <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source+0x4>)
 8018a0a:	4770      	bx	lr
 8018a0c:	08022068 	.word	0x08022068

08018a10 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources>:
 8018a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a12:	4e17      	ldr	r6, [pc, #92]	@ (8018a70 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x60>)
 8018a14:	7837      	ldrb	r7, [r6, #0]
 8018a16:	b10f      	cbz	r7, 8018a1c <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0xc>
 8018a18:	4816      	ldr	r0, [pc, #88]	@ (8018a74 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 8018a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a1c:	4d16      	ldr	r5, [pc, #88]	@ (8018a78 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x68>)
 8018a1e:	4c17      	ldr	r4, [pc, #92]	@ (8018a7c <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x6c>)
 8018a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a28:	682b      	ldr	r3, [r5, #0]
 8018a2a:	4625      	mov	r5, r4
 8018a2c:	4638      	mov	r0, r7
 8018a2e:	f845 3b04 	str.w	r3, [r5], #4
 8018a32:	f7f6 fab9 	bl	800efa8 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8018a36:	4684      	mov	ip, r0
 8018a38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a44:	4638      	mov	r0, r7
 8018a46:	f8dc 3000 	ldr.w	r3, [ip]
 8018a4a:	602b      	str	r3, [r5, #0]
 8018a4c:	f7f6 fb14 	bl	800f078 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8018a50:	2301      	movs	r3, #1
 8018a52:	4684      	mov	ip, r0
 8018a54:	7033      	strb	r3, [r6, #0]
 8018a56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018a5a:	3428      	adds	r4, #40	@ 0x28
 8018a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a64:	f8dc 3000 	ldr.w	r3, [ip]
 8018a68:	4802      	ldr	r0, [pc, #8]	@ (8018a74 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 8018a6a:	6023      	str	r3, [r4, #0]
 8018a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a6e:	bf00      	nop
 8018a70:	20011d60 	.word	0x20011d60
 8018a74:	0802205c 	.word	0x0802205c
 8018a78:	08022068 	.word	0x08022068
 8018a7c:	20011cf4 	.word	0x20011cf4

08018a80 <geometry_msgs__msg__TwistWithCovariance__init>:
 8018a80:	b150      	cbz	r0, 8018a98 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 8018a82:	b510      	push	{r4, lr}
 8018a84:	4604      	mov	r4, r0
 8018a86:	f7f6 fabb 	bl	800f000 <geometry_msgs__msg__Twist__init>
 8018a8a:	b100      	cbz	r0, 8018a8e <geometry_msgs__msg__TwistWithCovariance__init+0xe>
 8018a8c:	bd10      	pop	{r4, pc}
 8018a8e:	4620      	mov	r0, r4
 8018a90:	f7f6 fad6 	bl	800f040 <geometry_msgs__msg__Twist__fini>
 8018a94:	2000      	movs	r0, #0
 8018a96:	bd10      	pop	{r4, pc}
 8018a98:	2000      	movs	r0, #0
 8018a9a:	4770      	bx	lr

08018a9c <geometry_msgs__msg__TwistWithCovariance__fini>:
 8018a9c:	b108      	cbz	r0, 8018aa2 <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 8018a9e:	f7f6 bacf 	b.w	800f040 <geometry_msgs__msg__Twist__fini>
 8018aa2:	4770      	bx	lr

08018aa4 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8018aa4:	f001 beae 	b.w	801a804 <geometry_msgs__msg__Pose__init>

08018aa8 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 8018aa8:	f001 becc 	b.w	801a844 <geometry_msgs__msg__Pose__fini>

08018aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8018aac:	b510      	push	{r4, lr}
 8018aae:	f001 fef1 	bl	801a894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8018ab2:	4c07      	ldr	r4, [pc, #28]	@ (8018ad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8018ab4:	60e0      	str	r0, [r4, #12]
 8018ab6:	f000 f815 	bl	8018ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8018aba:	4b06      	ldr	r3, [pc, #24]	@ (8018ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8018abc:	64a0      	str	r0, [r4, #72]	@ 0x48
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	b10a      	cbz	r2, 8018ac6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8018ac2:	4804      	ldr	r0, [pc, #16]	@ (8018ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8018ac4:	bd10      	pop	{r4, pc}
 8018ac6:	4a04      	ldr	r2, [pc, #16]	@ (8018ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8018ac8:	4802      	ldr	r0, [pc, #8]	@ (8018ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8018aca:	6812      	ldr	r2, [r2, #0]
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	bd10      	pop	{r4, pc}
 8018ad0:	20002e50 	.word	0x20002e50
 8018ad4:	20002e38 	.word	0x20002e38
 8018ad8:	200003a4 	.word	0x200003a4

08018adc <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8018adc:	f001 bec0 	b.w	801a860 <geometry_msgs__msg__Quaternion__init>

08018ae0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8018ae0:	f001 bed2 	b.w	801a888 <geometry_msgs__msg__Quaternion__fini>

08018ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8018ae4:	4b04      	ldr	r3, [pc, #16]	@ (8018af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8018ae6:	681a      	ldr	r2, [r3, #0]
 8018ae8:	b10a      	cbz	r2, 8018aee <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8018aea:	4803      	ldr	r0, [pc, #12]	@ (8018af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8018aec:	4770      	bx	lr
 8018aee:	4a03      	ldr	r2, [pc, #12]	@ (8018afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8018af0:	4801      	ldr	r0, [pc, #4]	@ (8018af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8018af2:	6812      	ldr	r2, [r2, #0]
 8018af4:	601a      	str	r2, [r3, #0]
 8018af6:	4770      	bx	lr
 8018af8:	20002ec8 	.word	0x20002ec8
 8018afc:	200003a4 	.word	0x200003a4

08018b00 <get_serialized_size_geometry_msgs__msg__Pose>:
 8018b00:	b570      	push	{r4, r5, r6, lr}
 8018b02:	4604      	mov	r4, r0
 8018b04:	b148      	cbz	r0, 8018b1a <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8018b06:	460d      	mov	r5, r1
 8018b08:	f001 fed2 	bl	801a8b0 <get_serialized_size_geometry_msgs__msg__Point>
 8018b0c:	4606      	mov	r6, r0
 8018b0e:	1829      	adds	r1, r5, r0
 8018b10:	f104 0018 	add.w	r0, r4, #24
 8018b14:	f000 f864 	bl	8018be0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8018b18:	4430      	add	r0, r6
 8018b1a:	bd70      	pop	{r4, r5, r6, pc}

08018b1c <_Pose__cdr_deserialize>:
 8018b1c:	b570      	push	{r4, r5, r6, lr}
 8018b1e:	460c      	mov	r4, r1
 8018b20:	b189      	cbz	r1, 8018b46 <_Pose__cdr_deserialize+0x2a>
 8018b22:	4605      	mov	r5, r0
 8018b24:	f001 ff50 	bl	801a9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8018b28:	6843      	ldr	r3, [r0, #4]
 8018b2a:	4621      	mov	r1, r4
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	4628      	mov	r0, r5
 8018b30:	4798      	blx	r3
 8018b32:	f000 f909 	bl	8018d48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8018b36:	6843      	ldr	r3, [r0, #4]
 8018b38:	f104 0118 	add.w	r1, r4, #24
 8018b3c:	4628      	mov	r0, r5
 8018b3e:	68db      	ldr	r3, [r3, #12]
 8018b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b44:	4718      	bx	r3
 8018b46:	4608      	mov	r0, r1
 8018b48:	bd70      	pop	{r4, r5, r6, pc}
 8018b4a:	bf00      	nop

08018b4c <_Pose__cdr_serialize>:
 8018b4c:	b198      	cbz	r0, 8018b76 <_Pose__cdr_serialize+0x2a>
 8018b4e:	b570      	push	{r4, r5, r6, lr}
 8018b50:	460d      	mov	r5, r1
 8018b52:	4604      	mov	r4, r0
 8018b54:	f001 ff38 	bl	801a9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8018b58:	6843      	ldr	r3, [r0, #4]
 8018b5a:	4629      	mov	r1, r5
 8018b5c:	689b      	ldr	r3, [r3, #8]
 8018b5e:	4620      	mov	r0, r4
 8018b60:	4798      	blx	r3
 8018b62:	f000 f8f1 	bl	8018d48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8018b66:	6843      	ldr	r3, [r0, #4]
 8018b68:	4629      	mov	r1, r5
 8018b6a:	f104 0018 	add.w	r0, r4, #24
 8018b6e:	689b      	ldr	r3, [r3, #8]
 8018b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b74:	4718      	bx	r3
 8018b76:	4770      	bx	lr

08018b78 <_Pose__get_serialized_size>:
 8018b78:	b538      	push	{r3, r4, r5, lr}
 8018b7a:	4604      	mov	r4, r0
 8018b7c:	b148      	cbz	r0, 8018b92 <_Pose__get_serialized_size+0x1a>
 8018b7e:	2100      	movs	r1, #0
 8018b80:	f001 fe96 	bl	801a8b0 <get_serialized_size_geometry_msgs__msg__Point>
 8018b84:	4605      	mov	r5, r0
 8018b86:	4601      	mov	r1, r0
 8018b88:	f104 0018 	add.w	r0, r4, #24
 8018b8c:	f000 f828 	bl	8018be0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8018b90:	4428      	add	r0, r5
 8018b92:	bd38      	pop	{r3, r4, r5, pc}

08018b94 <_Pose__max_serialized_size>:
 8018b94:	b510      	push	{r4, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	2301      	movs	r3, #1
 8018b9a:	2100      	movs	r1, #0
 8018b9c:	f10d 0007 	add.w	r0, sp, #7
 8018ba0:	f88d 3007 	strb.w	r3, [sp, #7]
 8018ba4:	f001 fef6 	bl	801a994 <max_serialized_size_geometry_msgs__msg__Point>
 8018ba8:	4604      	mov	r4, r0
 8018baa:	4601      	mov	r1, r0
 8018bac:	f10d 0007 	add.w	r0, sp, #7
 8018bb0:	f000 f8a8 	bl	8018d04 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8018bb4:	4420      	add	r0, r4
 8018bb6:	b002      	add	sp, #8
 8018bb8:	bd10      	pop	{r4, pc}
 8018bba:	bf00      	nop

08018bbc <max_serialized_size_geometry_msgs__msg__Pose>:
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	b570      	push	{r4, r5, r6, lr}
 8018bc0:	7003      	strb	r3, [r0, #0]
 8018bc2:	4605      	mov	r5, r0
 8018bc4:	460e      	mov	r6, r1
 8018bc6:	f001 fee5 	bl	801a994 <max_serialized_size_geometry_msgs__msg__Point>
 8018bca:	4604      	mov	r4, r0
 8018bcc:	1831      	adds	r1, r6, r0
 8018bce:	4628      	mov	r0, r5
 8018bd0:	f000 f898 	bl	8018d04 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8018bd4:	4420      	add	r0, r4
 8018bd6:	bd70      	pop	{r4, r5, r6, pc}

08018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8018bd8:	4800      	ldr	r0, [pc, #0]	@ (8018bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8018bda:	4770      	bx	lr
 8018bdc:	20002fd0 	.word	0x20002fd0

08018be0 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8018be0:	b1f0      	cbz	r0, 8018c20 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8018be2:	b570      	push	{r4, r5, r6, lr}
 8018be4:	460d      	mov	r5, r1
 8018be6:	4628      	mov	r0, r5
 8018be8:	2108      	movs	r1, #8
 8018bea:	f7f3 fd7b 	bl	800c6e4 <ucdr_alignment>
 8018bee:	2108      	movs	r1, #8
 8018bf0:	186c      	adds	r4, r5, r1
 8018bf2:	4404      	add	r4, r0
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	f7f3 fd75 	bl	800c6e4 <ucdr_alignment>
 8018bfa:	f100 0608 	add.w	r6, r0, #8
 8018bfe:	4426      	add	r6, r4
 8018c00:	2108      	movs	r1, #8
 8018c02:	4630      	mov	r0, r6
 8018c04:	f7f3 fd6e 	bl	800c6e4 <ucdr_alignment>
 8018c08:	f100 0408 	add.w	r4, r0, #8
 8018c0c:	4434      	add	r4, r6
 8018c0e:	2108      	movs	r1, #8
 8018c10:	4620      	mov	r0, r4
 8018c12:	f7f3 fd67 	bl	800c6e4 <ucdr_alignment>
 8018c16:	f1c5 0508 	rsb	r5, r5, #8
 8018c1a:	4405      	add	r5, r0
 8018c1c:	1928      	adds	r0, r5, r4
 8018c1e:	bd70      	pop	{r4, r5, r6, pc}
 8018c20:	4770      	bx	lr
 8018c22:	bf00      	nop

08018c24 <_Quaternion__cdr_deserialize>:
 8018c24:	b538      	push	{r3, r4, r5, lr}
 8018c26:	460c      	mov	r4, r1
 8018c28:	b199      	cbz	r1, 8018c52 <_Quaternion__cdr_deserialize+0x2e>
 8018c2a:	4605      	mov	r5, r0
 8018c2c:	f7f3 fb7c 	bl	800c328 <ucdr_deserialize_double>
 8018c30:	f104 0108 	add.w	r1, r4, #8
 8018c34:	4628      	mov	r0, r5
 8018c36:	f7f3 fb77 	bl	800c328 <ucdr_deserialize_double>
 8018c3a:	f104 0110 	add.w	r1, r4, #16
 8018c3e:	4628      	mov	r0, r5
 8018c40:	f7f3 fb72 	bl	800c328 <ucdr_deserialize_double>
 8018c44:	f104 0118 	add.w	r1, r4, #24
 8018c48:	4628      	mov	r0, r5
 8018c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c4e:	f7f3 bb6b 	b.w	800c328 <ucdr_deserialize_double>
 8018c52:	4608      	mov	r0, r1
 8018c54:	bd38      	pop	{r3, r4, r5, pc}
 8018c56:	bf00      	nop

08018c58 <_Quaternion__cdr_serialize>:
 8018c58:	b1c0      	cbz	r0, 8018c8c <_Quaternion__cdr_serialize+0x34>
 8018c5a:	b538      	push	{r3, r4, r5, lr}
 8018c5c:	ed90 0b00 	vldr	d0, [r0]
 8018c60:	460d      	mov	r5, r1
 8018c62:	4604      	mov	r4, r0
 8018c64:	4608      	mov	r0, r1
 8018c66:	f7f3 f9cf 	bl	800c008 <ucdr_serialize_double>
 8018c6a:	ed94 0b02 	vldr	d0, [r4, #8]
 8018c6e:	4628      	mov	r0, r5
 8018c70:	f7f3 f9ca 	bl	800c008 <ucdr_serialize_double>
 8018c74:	ed94 0b04 	vldr	d0, [r4, #16]
 8018c78:	4628      	mov	r0, r5
 8018c7a:	f7f3 f9c5 	bl	800c008 <ucdr_serialize_double>
 8018c7e:	ed94 0b06 	vldr	d0, [r4, #24]
 8018c82:	4628      	mov	r0, r5
 8018c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c88:	f7f3 b9be 	b.w	800c008 <ucdr_serialize_double>
 8018c8c:	4770      	bx	lr
 8018c8e:	bf00      	nop

08018c90 <_Quaternion__get_serialized_size>:
 8018c90:	b1d8      	cbz	r0, 8018cca <_Quaternion__get_serialized_size+0x3a>
 8018c92:	b538      	push	{r3, r4, r5, lr}
 8018c94:	2108      	movs	r1, #8
 8018c96:	2000      	movs	r0, #0
 8018c98:	f7f3 fd24 	bl	800c6e4 <ucdr_alignment>
 8018c9c:	f100 0408 	add.w	r4, r0, #8
 8018ca0:	2108      	movs	r1, #8
 8018ca2:	4620      	mov	r0, r4
 8018ca4:	f7f3 fd1e 	bl	800c6e4 <ucdr_alignment>
 8018ca8:	f100 0508 	add.w	r5, r0, #8
 8018cac:	4425      	add	r5, r4
 8018cae:	2108      	movs	r1, #8
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	f7f3 fd17 	bl	800c6e4 <ucdr_alignment>
 8018cb6:	f100 0408 	add.w	r4, r0, #8
 8018cba:	442c      	add	r4, r5
 8018cbc:	2108      	movs	r1, #8
 8018cbe:	4620      	mov	r0, r4
 8018cc0:	f7f3 fd10 	bl	800c6e4 <ucdr_alignment>
 8018cc4:	3008      	adds	r0, #8
 8018cc6:	4420      	add	r0, r4
 8018cc8:	bd38      	pop	{r3, r4, r5, pc}
 8018cca:	4770      	bx	lr

08018ccc <_Quaternion__max_serialized_size>:
 8018ccc:	b538      	push	{r3, r4, r5, lr}
 8018cce:	2108      	movs	r1, #8
 8018cd0:	2000      	movs	r0, #0
 8018cd2:	f7f3 fd07 	bl	800c6e4 <ucdr_alignment>
 8018cd6:	f100 0408 	add.w	r4, r0, #8
 8018cda:	2108      	movs	r1, #8
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f7f3 fd01 	bl	800c6e4 <ucdr_alignment>
 8018ce2:	f100 0508 	add.w	r5, r0, #8
 8018ce6:	4425      	add	r5, r4
 8018ce8:	2108      	movs	r1, #8
 8018cea:	4628      	mov	r0, r5
 8018cec:	f7f3 fcfa 	bl	800c6e4 <ucdr_alignment>
 8018cf0:	f100 0408 	add.w	r4, r0, #8
 8018cf4:	442c      	add	r4, r5
 8018cf6:	2108      	movs	r1, #8
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f7f3 fcf3 	bl	800c6e4 <ucdr_alignment>
 8018cfe:	3008      	adds	r0, #8
 8018d00:	4420      	add	r0, r4
 8018d02:	bd38      	pop	{r3, r4, r5, pc}

08018d04 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8018d04:	b570      	push	{r4, r5, r6, lr}
 8018d06:	2301      	movs	r3, #1
 8018d08:	460c      	mov	r4, r1
 8018d0a:	7003      	strb	r3, [r0, #0]
 8018d0c:	2108      	movs	r1, #8
 8018d0e:	4620      	mov	r0, r4
 8018d10:	f7f3 fce8 	bl	800c6e4 <ucdr_alignment>
 8018d14:	2108      	movs	r1, #8
 8018d16:	1863      	adds	r3, r4, r1
 8018d18:	18c5      	adds	r5, r0, r3
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f7f3 fce2 	bl	800c6e4 <ucdr_alignment>
 8018d20:	f100 0608 	add.w	r6, r0, #8
 8018d24:	442e      	add	r6, r5
 8018d26:	2108      	movs	r1, #8
 8018d28:	4630      	mov	r0, r6
 8018d2a:	f7f3 fcdb 	bl	800c6e4 <ucdr_alignment>
 8018d2e:	f100 0508 	add.w	r5, r0, #8
 8018d32:	4435      	add	r5, r6
 8018d34:	2108      	movs	r1, #8
 8018d36:	4628      	mov	r0, r5
 8018d38:	f7f3 fcd4 	bl	800c6e4 <ucdr_alignment>
 8018d3c:	f1c4 0408 	rsb	r4, r4, #8
 8018d40:	4420      	add	r0, r4
 8018d42:	4428      	add	r0, r5
 8018d44:	bd70      	pop	{r4, r5, r6, pc}
 8018d46:	bf00      	nop

08018d48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8018d48:	4800      	ldr	r0, [pc, #0]	@ (8018d4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8018d4a:	4770      	bx	lr
 8018d4c:	20003004 	.word	0x20003004

08018d50 <ucdr_serialize_string>:
 8018d50:	b538      	push	{r3, r4, r5, lr}
 8018d52:	4605      	mov	r5, r0
 8018d54:	4608      	mov	r0, r1
 8018d56:	460c      	mov	r4, r1
 8018d58:	f7e7 faba 	bl	80002d0 <strlen>
 8018d5c:	4621      	mov	r1, r4
 8018d5e:	1c42      	adds	r2, r0, #1
 8018d60:	4628      	mov	r0, r5
 8018d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d66:	f7f6 bd75 	b.w	800f854 <ucdr_serialize_sequence_char>
 8018d6a:	bf00      	nop

08018d6c <ucdr_deserialize_string>:
 8018d6c:	b500      	push	{lr}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	ab01      	add	r3, sp, #4
 8018d72:	f7f6 fd81 	bl	800f878 <ucdr_deserialize_sequence_char>
 8018d76:	b003      	add	sp, #12
 8018d78:	f85d fb04 	ldr.w	pc, [sp], #4

08018d7c <uxr_init_input_best_effort_stream>:
 8018d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018d80:	8003      	strh	r3, [r0, #0]
 8018d82:	4770      	bx	lr

08018d84 <uxr_reset_input_best_effort_stream>:
 8018d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018d88:	8003      	strh	r3, [r0, #0]
 8018d8a:	4770      	bx	lr

08018d8c <uxr_receive_best_effort_message>:
 8018d8c:	b538      	push	{r3, r4, r5, lr}
 8018d8e:	4604      	mov	r4, r0
 8018d90:	8800      	ldrh	r0, [r0, #0]
 8018d92:	460d      	mov	r5, r1
 8018d94:	f000 fe5e 	bl	8019a54 <uxr_seq_num_cmp>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018da0:	bfb8      	it	lt
 8018da2:	8025      	strhlt	r5, [r4, #0]
 8018da4:	bd38      	pop	{r3, r4, r5, pc}
 8018da6:	bf00      	nop

08018da8 <on_full_input_buffer>:
 8018da8:	b570      	push	{r4, r5, r6, lr}
 8018daa:	4605      	mov	r5, r0
 8018dac:	460c      	mov	r4, r1
 8018dae:	682b      	ldr	r3, [r5, #0]
 8018db0:	6809      	ldr	r1, [r1, #0]
 8018db2:	8920      	ldrh	r0, [r4, #8]
 8018db4:	6862      	ldr	r2, [r4, #4]
 8018db6:	fbb2 f2f0 	udiv	r2, r2, r0
 8018dba:	1a5b      	subs	r3, r3, r1
 8018dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018dc0:	3301      	adds	r3, #1
 8018dc2:	b29b      	uxth	r3, r3
 8018dc4:	fbb3 f6f0 	udiv	r6, r3, r0
 8018dc8:	fb00 3316 	mls	r3, r0, r6, r3
 8018dcc:	b29b      	uxth	r3, r3
 8018dce:	fb02 f303 	mul.w	r3, r2, r3
 8018dd2:	1d18      	adds	r0, r3, #4
 8018dd4:	4408      	add	r0, r1
 8018dd6:	7d26      	ldrb	r6, [r4, #20]
 8018dd8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018ddc:	b116      	cbz	r6, 8018de4 <on_full_input_buffer+0x3c>
 8018dde:	2600      	movs	r6, #0
 8018de0:	f840 6c04 	str.w	r6, [r0, #-4]
 8018de4:	2a03      	cmp	r2, #3
 8018de6:	d801      	bhi.n	8018dec <on_full_input_buffer+0x44>
 8018de8:	2001      	movs	r0, #1
 8018dea:	bd70      	pop	{r4, r5, r6, pc}
 8018dec:	3308      	adds	r3, #8
 8018dee:	4419      	add	r1, r3
 8018df0:	4628      	mov	r0, r5
 8018df2:	692b      	ldr	r3, [r5, #16]
 8018df4:	3a04      	subs	r2, #4
 8018df6:	f7f3 fc69 	bl	800c6cc <ucdr_init_buffer_origin>
 8018dfa:	4628      	mov	r0, r5
 8018dfc:	4902      	ldr	r1, [pc, #8]	@ (8018e08 <on_full_input_buffer+0x60>)
 8018dfe:	4622      	mov	r2, r4
 8018e00:	f7f3 fc40 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 8018e04:	2000      	movs	r0, #0
 8018e06:	bd70      	pop	{r4, r5, r6, pc}
 8018e08:	08018da9 	.word	0x08018da9

08018e0c <uxr_init_input_reliable_stream>:
 8018e0c:	b500      	push	{lr}
 8018e0e:	e9c0 1200 	strd	r1, r2, [r0]
 8018e12:	f04f 0e00 	mov.w	lr, #0
 8018e16:	9a01      	ldr	r2, [sp, #4]
 8018e18:	8103      	strh	r3, [r0, #8]
 8018e1a:	6102      	str	r2, [r0, #16]
 8018e1c:	f880 e014 	strb.w	lr, [r0, #20]
 8018e20:	b1d3      	cbz	r3, 8018e58 <uxr_init_input_reliable_stream+0x4c>
 8018e22:	f8c1 e000 	str.w	lr, [r1]
 8018e26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018e2a:	f1bc 0f01 	cmp.w	ip, #1
 8018e2e:	d913      	bls.n	8018e58 <uxr_init_input_reliable_stream+0x4c>
 8018e30:	2301      	movs	r3, #1
 8018e32:	fbb3 f1fc 	udiv	r1, r3, ip
 8018e36:	fb0c 3111 	mls	r1, ip, r1, r3
 8018e3a:	b289      	uxth	r1, r1
 8018e3c:	6842      	ldr	r2, [r0, #4]
 8018e3e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018e42:	fb01 f202 	mul.w	r2, r1, r2
 8018e46:	6801      	ldr	r1, [r0, #0]
 8018e48:	f841 e002 	str.w	lr, [r1, r2]
 8018e4c:	3301      	adds	r3, #1
 8018e4e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	459c      	cmp	ip, r3
 8018e56:	d8ec      	bhi.n	8018e32 <uxr_init_input_reliable_stream+0x26>
 8018e58:	f04f 33ff 	mov.w	r3, #4294967295
 8018e5c:	60c3      	str	r3, [r0, #12]
 8018e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e62:	bf00      	nop

08018e64 <uxr_reset_input_reliable_stream>:
 8018e64:	8901      	ldrh	r1, [r0, #8]
 8018e66:	b1e9      	cbz	r1, 8018ea4 <uxr_reset_input_reliable_stream+0x40>
 8018e68:	f04f 0c00 	mov.w	ip, #0
 8018e6c:	b500      	push	{lr}
 8018e6e:	4663      	mov	r3, ip
 8018e70:	46e6      	mov	lr, ip
 8018e72:	fbb3 f2f1 	udiv	r2, r3, r1
 8018e76:	fb01 3312 	mls	r3, r1, r2, r3
 8018e7a:	b29b      	uxth	r3, r3
 8018e7c:	6842      	ldr	r2, [r0, #4]
 8018e7e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018e82:	fb03 f202 	mul.w	r2, r3, r2
 8018e86:	6803      	ldr	r3, [r0, #0]
 8018e88:	f843 e002 	str.w	lr, [r3, r2]
 8018e8c:	f10c 0c01 	add.w	ip, ip, #1
 8018e90:	8901      	ldrh	r1, [r0, #8]
 8018e92:	fa1f f38c 	uxth.w	r3, ip
 8018e96:	4299      	cmp	r1, r3
 8018e98:	d8eb      	bhi.n	8018e72 <uxr_reset_input_reliable_stream+0xe>
 8018e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e9e:	60c3      	str	r3, [r0, #12]
 8018ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ea8:	60c3      	str	r3, [r0, #12]
 8018eaa:	4770      	bx	lr

08018eac <uxr_receive_reliable_message>:
 8018eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb0:	4604      	mov	r4, r0
 8018eb2:	460d      	mov	r5, r1
 8018eb4:	8901      	ldrh	r1, [r0, #8]
 8018eb6:	8980      	ldrh	r0, [r0, #12]
 8018eb8:	4690      	mov	r8, r2
 8018eba:	461f      	mov	r7, r3
 8018ebc:	f000 fdc2 	bl	8019a44 <uxr_seq_num_add>
 8018ec0:	4629      	mov	r1, r5
 8018ec2:	4606      	mov	r6, r0
 8018ec4:	89a0      	ldrh	r0, [r4, #12]
 8018ec6:	f000 fdc5 	bl	8019a54 <uxr_seq_num_cmp>
 8018eca:	2800      	cmp	r0, #0
 8018ecc:	db0a      	blt.n	8018ee4 <uxr_receive_reliable_message+0x38>
 8018ece:	2600      	movs	r6, #0
 8018ed0:	89e0      	ldrh	r0, [r4, #14]
 8018ed2:	4629      	mov	r1, r5
 8018ed4:	f000 fdbe 	bl	8019a54 <uxr_seq_num_cmp>
 8018ed8:	2800      	cmp	r0, #0
 8018eda:	bfb8      	it	lt
 8018edc:	81e5      	strhlt	r5, [r4, #14]
 8018ede:	4630      	mov	r0, r6
 8018ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ee4:	4630      	mov	r0, r6
 8018ee6:	4629      	mov	r1, r5
 8018ee8:	f000 fdb4 	bl	8019a54 <uxr_seq_num_cmp>
 8018eec:	2800      	cmp	r0, #0
 8018eee:	dbee      	blt.n	8018ece <uxr_receive_reliable_message+0x22>
 8018ef0:	6923      	ldr	r3, [r4, #16]
 8018ef2:	4640      	mov	r0, r8
 8018ef4:	4798      	blx	r3
 8018ef6:	2101      	movs	r1, #1
 8018ef8:	4606      	mov	r6, r0
 8018efa:	89a0      	ldrh	r0, [r4, #12]
 8018efc:	f000 fda2 	bl	8019a44 <uxr_seq_num_add>
 8018f00:	b90e      	cbnz	r6, 8018f06 <uxr_receive_reliable_message+0x5a>
 8018f02:	4285      	cmp	r5, r0
 8018f04:	d046      	beq.n	8018f94 <uxr_receive_reliable_message+0xe8>
 8018f06:	8921      	ldrh	r1, [r4, #8]
 8018f08:	fbb5 f2f1 	udiv	r2, r5, r1
 8018f0c:	fb01 5212 	mls	r2, r1, r2, r5
 8018f10:	b292      	uxth	r2, r2
 8018f12:	6863      	ldr	r3, [r4, #4]
 8018f14:	6820      	ldr	r0, [r4, #0]
 8018f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f1a:	fb02 f303 	mul.w	r3, r2, r3
 8018f1e:	3304      	adds	r3, #4
 8018f20:	4418      	add	r0, r3
 8018f22:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d1d1      	bne.n	8018ece <uxr_receive_reliable_message+0x22>
 8018f2a:	4641      	mov	r1, r8
 8018f2c:	463a      	mov	r2, r7
 8018f2e:	f002 fd7b 	bl	801ba28 <memcpy>
 8018f32:	8921      	ldrh	r1, [r4, #8]
 8018f34:	fbb5 f2f1 	udiv	r2, r5, r1
 8018f38:	fb01 5212 	mls	r2, r1, r2, r5
 8018f3c:	b292      	uxth	r2, r2
 8018f3e:	6863      	ldr	r3, [r4, #4]
 8018f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f44:	fb02 f303 	mul.w	r3, r2, r3
 8018f48:	6822      	ldr	r2, [r4, #0]
 8018f4a:	50d7      	str	r7, [r2, r3]
 8018f4c:	9a06      	ldr	r2, [sp, #24]
 8018f4e:	2301      	movs	r3, #1
 8018f50:	7013      	strb	r3, [r2, #0]
 8018f52:	2e00      	cmp	r6, #0
 8018f54:	d0bb      	beq.n	8018ece <uxr_receive_reliable_message+0x22>
 8018f56:	89a6      	ldrh	r6, [r4, #12]
 8018f58:	2101      	movs	r1, #1
 8018f5a:	4630      	mov	r0, r6
 8018f5c:	f000 fd72 	bl	8019a44 <uxr_seq_num_add>
 8018f60:	8921      	ldrh	r1, [r4, #8]
 8018f62:	fbb0 f2f1 	udiv	r2, r0, r1
 8018f66:	fb01 0212 	mls	r2, r1, r2, r0
 8018f6a:	b292      	uxth	r2, r2
 8018f6c:	6863      	ldr	r3, [r4, #4]
 8018f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f72:	4606      	mov	r6, r0
 8018f74:	fb02 f303 	mul.w	r3, r2, r3
 8018f78:	6820      	ldr	r0, [r4, #0]
 8018f7a:	3304      	adds	r3, #4
 8018f7c:	4418      	add	r0, r3
 8018f7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d0a3      	beq.n	8018ece <uxr_receive_reliable_message+0x22>
 8018f86:	6923      	ldr	r3, [r4, #16]
 8018f88:	4798      	blx	r3
 8018f8a:	2802      	cmp	r0, #2
 8018f8c:	d005      	beq.n	8018f9a <uxr_receive_reliable_message+0xee>
 8018f8e:	2801      	cmp	r0, #1
 8018f90:	d0e2      	beq.n	8018f58 <uxr_receive_reliable_message+0xac>
 8018f92:	e79c      	b.n	8018ece <uxr_receive_reliable_message+0x22>
 8018f94:	9b06      	ldr	r3, [sp, #24]
 8018f96:	81a5      	strh	r5, [r4, #12]
 8018f98:	701e      	strb	r6, [r3, #0]
 8018f9a:	2601      	movs	r6, #1
 8018f9c:	e798      	b.n	8018ed0 <uxr_receive_reliable_message+0x24>
 8018f9e:	bf00      	nop

08018fa0 <uxr_next_input_reliable_buffer_available>:
 8018fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fa4:	4604      	mov	r4, r0
 8018fa6:	460f      	mov	r7, r1
 8018fa8:	8980      	ldrh	r0, [r0, #12]
 8018faa:	2101      	movs	r1, #1
 8018fac:	4690      	mov	r8, r2
 8018fae:	f000 fd49 	bl	8019a44 <uxr_seq_num_add>
 8018fb2:	8921      	ldrh	r1, [r4, #8]
 8018fb4:	fbb0 f2f1 	udiv	r2, r0, r1
 8018fb8:	fb01 0212 	mls	r2, r1, r2, r0
 8018fbc:	b292      	uxth	r2, r2
 8018fbe:	6863      	ldr	r3, [r4, #4]
 8018fc0:	6826      	ldr	r6, [r4, #0]
 8018fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8018fc6:	fb02 f303 	mul.w	r3, r2, r3
 8018fca:	3304      	adds	r3, #4
 8018fcc:	441e      	add	r6, r3
 8018fce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018fd2:	f1b9 0f00 	cmp.w	r9, #0
 8018fd6:	d023      	beq.n	8019020 <uxr_next_input_reliable_buffer_available+0x80>
 8018fd8:	6923      	ldr	r3, [r4, #16]
 8018fda:	4605      	mov	r5, r0
 8018fdc:	4630      	mov	r0, r6
 8018fde:	4798      	blx	r3
 8018fe0:	4682      	mov	sl, r0
 8018fe2:	b300      	cbz	r0, 8019026 <uxr_next_input_reliable_buffer_available+0x86>
 8018fe4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018fe8:	2101      	movs	r1, #1
 8018fea:	4650      	mov	r0, sl
 8018fec:	f000 fd2a 	bl	8019a44 <uxr_seq_num_add>
 8018ff0:	8921      	ldrh	r1, [r4, #8]
 8018ff2:	fbb0 f2f1 	udiv	r2, r0, r1
 8018ff6:	4682      	mov	sl, r0
 8018ff8:	fb01 0212 	mls	r2, r1, r2, r0
 8018ffc:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019000:	b292      	uxth	r2, r2
 8019002:	fbb3 f3f1 	udiv	r3, r3, r1
 8019006:	fb02 f303 	mul.w	r3, r2, r3
 801900a:	3304      	adds	r3, #4
 801900c:	4418      	add	r0, r3
 801900e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019012:	b12b      	cbz	r3, 8019020 <uxr_next_input_reliable_buffer_available+0x80>
 8019014:	6923      	ldr	r3, [r4, #16]
 8019016:	4798      	blx	r3
 8019018:	2802      	cmp	r0, #2
 801901a:	d01b      	beq.n	8019054 <uxr_next_input_reliable_buffer_available+0xb4>
 801901c:	2801      	cmp	r0, #1
 801901e:	d0e3      	beq.n	8018fe8 <uxr_next_input_reliable_buffer_available+0x48>
 8019020:	2000      	movs	r0, #0
 8019022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019026:	464a      	mov	r2, r9
 8019028:	4631      	mov	r1, r6
 801902a:	4638      	mov	r0, r7
 801902c:	f7f3 fb56 	bl	800c6dc <ucdr_init_buffer>
 8019030:	8921      	ldrh	r1, [r4, #8]
 8019032:	fbb5 f2f1 	udiv	r2, r5, r1
 8019036:	fb01 5212 	mls	r2, r1, r2, r5
 801903a:	b292      	uxth	r2, r2
 801903c:	6863      	ldr	r3, [r4, #4]
 801903e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019042:	fb02 f303 	mul.w	r3, r2, r3
 8019046:	6822      	ldr	r2, [r4, #0]
 8019048:	f842 a003 	str.w	sl, [r2, r3]
 801904c:	81a5      	strh	r5, [r4, #12]
 801904e:	2001      	movs	r0, #1
 8019050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019054:	eb06 0108 	add.w	r1, r6, r8
 8019058:	8926      	ldrh	r6, [r4, #8]
 801905a:	fbb5 f0f6 	udiv	r0, r5, r6
 801905e:	fb06 5010 	mls	r0, r6, r0, r5
 8019062:	b280      	uxth	r0, r0
 8019064:	6863      	ldr	r3, [r4, #4]
 8019066:	fbb3 f3f6 	udiv	r3, r3, r6
 801906a:	fb00 f303 	mul.w	r3, r0, r3
 801906e:	6820      	ldr	r0, [r4, #0]
 8019070:	2500      	movs	r5, #0
 8019072:	50c5      	str	r5, [r0, r3]
 8019074:	eba9 0208 	sub.w	r2, r9, r8
 8019078:	4638      	mov	r0, r7
 801907a:	f7f3 fb2f 	bl	800c6dc <ucdr_init_buffer>
 801907e:	4903      	ldr	r1, [pc, #12]	@ (801908c <uxr_next_input_reliable_buffer_available+0xec>)
 8019080:	4622      	mov	r2, r4
 8019082:	4638      	mov	r0, r7
 8019084:	f7f3 fafe 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 8019088:	4655      	mov	r5, sl
 801908a:	e7df      	b.n	801904c <uxr_next_input_reliable_buffer_available+0xac>
 801908c:	08018da9 	.word	0x08018da9

08019090 <uxr_process_heartbeat>:
 8019090:	b538      	push	{r3, r4, r5, lr}
 8019092:	4611      	mov	r1, r2
 8019094:	4604      	mov	r4, r0
 8019096:	89c0      	ldrh	r0, [r0, #14]
 8019098:	4615      	mov	r5, r2
 801909a:	f000 fcdb 	bl	8019a54 <uxr_seq_num_cmp>
 801909e:	2800      	cmp	r0, #0
 80190a0:	bfb8      	it	lt
 80190a2:	81e5      	strhlt	r5, [r4, #14]
 80190a4:	bd38      	pop	{r3, r4, r5, pc}
 80190a6:	bf00      	nop

080190a8 <uxr_compute_acknack>:
 80190a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190ac:	8903      	ldrh	r3, [r0, #8]
 80190ae:	8985      	ldrh	r5, [r0, #12]
 80190b0:	4604      	mov	r4, r0
 80190b2:	460e      	mov	r6, r1
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d048      	beq.n	801914a <uxr_compute_acknack+0xa2>
 80190b8:	4628      	mov	r0, r5
 80190ba:	2701      	movs	r7, #1
 80190bc:	e003      	b.n	80190c6 <uxr_compute_acknack+0x1e>
 80190be:	4567      	cmp	r7, ip
 80190c0:	d243      	bcs.n	801914a <uxr_compute_acknack+0xa2>
 80190c2:	89a0      	ldrh	r0, [r4, #12]
 80190c4:	3701      	adds	r7, #1
 80190c6:	b2b9      	uxth	r1, r7
 80190c8:	f000 fcbc 	bl	8019a44 <uxr_seq_num_add>
 80190cc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80190d0:	fbb0 f2fc 	udiv	r2, r0, ip
 80190d4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80190d8:	fb0c 0212 	mls	r2, ip, r2, r0
 80190dc:	b292      	uxth	r2, r2
 80190de:	fbb3 f3fc 	udiv	r3, r3, ip
 80190e2:	fb02 f303 	mul.w	r3, r2, r3
 80190e6:	58cb      	ldr	r3, [r1, r3]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d1e8      	bne.n	80190be <uxr_compute_acknack+0x16>
 80190ec:	8030      	strh	r0, [r6, #0]
 80190ee:	2101      	movs	r1, #1
 80190f0:	89e5      	ldrh	r5, [r4, #14]
 80190f2:	f000 fcab 	bl	8019a4c <uxr_seq_num_sub>
 80190f6:	4601      	mov	r1, r0
 80190f8:	4628      	mov	r0, r5
 80190fa:	f000 fca7 	bl	8019a4c <uxr_seq_num_sub>
 80190fe:	4605      	mov	r5, r0
 8019100:	4607      	mov	r7, r0
 8019102:	b1f8      	cbz	r0, 8019144 <uxr_compute_acknack+0x9c>
 8019104:	f04f 0900 	mov.w	r9, #0
 8019108:	464d      	mov	r5, r9
 801910a:	f04f 0801 	mov.w	r8, #1
 801910e:	fa1f f189 	uxth.w	r1, r9
 8019112:	8830      	ldrh	r0, [r6, #0]
 8019114:	f000 fc96 	bl	8019a44 <uxr_seq_num_add>
 8019118:	8921      	ldrh	r1, [r4, #8]
 801911a:	fbb0 f3f1 	udiv	r3, r0, r1
 801911e:	fb03 0011 	mls	r0, r3, r1, r0
 8019122:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019126:	b280      	uxth	r0, r0
 8019128:	fbb3 f3f1 	udiv	r3, r3, r1
 801912c:	fb00 f303 	mul.w	r3, r0, r3
 8019130:	fa08 f109 	lsl.w	r1, r8, r9
 8019134:	58d3      	ldr	r3, [r2, r3]
 8019136:	f109 0901 	add.w	r9, r9, #1
 801913a:	b90b      	cbnz	r3, 8019140 <uxr_compute_acknack+0x98>
 801913c:	4329      	orrs	r1, r5
 801913e:	b28d      	uxth	r5, r1
 8019140:	454f      	cmp	r7, r9
 8019142:	d1e4      	bne.n	801910e <uxr_compute_acknack+0x66>
 8019144:	4628      	mov	r0, r5
 8019146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801914a:	4628      	mov	r0, r5
 801914c:	e7ce      	b.n	80190ec <uxr_compute_acknack+0x44>
 801914e:	bf00      	nop

08019150 <uxr_init_output_best_effort_stream>:
 8019150:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019154:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019158:	6001      	str	r1, [r0, #0]
 801915a:	7303      	strb	r3, [r0, #12]
 801915c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019160:	4770      	bx	lr
 8019162:	bf00      	nop

08019164 <uxr_reset_output_best_effort_stream>:
 8019164:	7b02      	ldrb	r2, [r0, #12]
 8019166:	6042      	str	r2, [r0, #4]
 8019168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801916c:	81c3      	strh	r3, [r0, #14]
 801916e:	4770      	bx	lr

08019170 <uxr_prepare_best_effort_buffer_to_write>:
 8019170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019172:	4604      	mov	r4, r0
 8019174:	b083      	sub	sp, #12
 8019176:	6840      	ldr	r0, [r0, #4]
 8019178:	460d      	mov	r5, r1
 801917a:	4616      	mov	r6, r2
 801917c:	f7f8 fe5a 	bl	8011e34 <uxr_submessage_padding>
 8019180:	6863      	ldr	r3, [r4, #4]
 8019182:	4418      	add	r0, r3
 8019184:	68a3      	ldr	r3, [r4, #8]
 8019186:	1942      	adds	r2, r0, r5
 8019188:	4293      	cmp	r3, r2
 801918a:	bf2c      	ite	cs
 801918c:	2701      	movcs	r7, #1
 801918e:	2700      	movcc	r7, #0
 8019190:	d202      	bcs.n	8019198 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019192:	4638      	mov	r0, r7
 8019194:	b003      	add	sp, #12
 8019196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019198:	9000      	str	r0, [sp, #0]
 801919a:	6821      	ldr	r1, [r4, #0]
 801919c:	4630      	mov	r0, r6
 801919e:	2300      	movs	r3, #0
 80191a0:	f7f3 fa8a 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 80191a4:	6863      	ldr	r3, [r4, #4]
 80191a6:	4638      	mov	r0, r7
 80191a8:	442b      	add	r3, r5
 80191aa:	6063      	str	r3, [r4, #4]
 80191ac:	b003      	add	sp, #12
 80191ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191b0 <uxr_prepare_best_effort_buffer_to_send>:
 80191b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b4:	4604      	mov	r4, r0
 80191b6:	461d      	mov	r5, r3
 80191b8:	6840      	ldr	r0, [r0, #4]
 80191ba:	7b23      	ldrb	r3, [r4, #12]
 80191bc:	4298      	cmp	r0, r3
 80191be:	bf8c      	ite	hi
 80191c0:	2601      	movhi	r6, #1
 80191c2:	2600      	movls	r6, #0
 80191c4:	d802      	bhi.n	80191cc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80191c6:	4630      	mov	r0, r6
 80191c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191cc:	4688      	mov	r8, r1
 80191ce:	89e0      	ldrh	r0, [r4, #14]
 80191d0:	2101      	movs	r1, #1
 80191d2:	4617      	mov	r7, r2
 80191d4:	f000 fc36 	bl	8019a44 <uxr_seq_num_add>
 80191d8:	6823      	ldr	r3, [r4, #0]
 80191da:	81e0      	strh	r0, [r4, #14]
 80191dc:	8028      	strh	r0, [r5, #0]
 80191de:	f8c8 3000 	str.w	r3, [r8]
 80191e2:	6863      	ldr	r3, [r4, #4]
 80191e4:	603b      	str	r3, [r7, #0]
 80191e6:	7b23      	ldrb	r3, [r4, #12]
 80191e8:	6063      	str	r3, [r4, #4]
 80191ea:	4630      	mov	r0, r6
 80191ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080191f0 <on_full_output_buffer>:
 80191f0:	b538      	push	{r3, r4, r5, lr}
 80191f2:	460c      	mov	r4, r1
 80191f4:	6803      	ldr	r3, [r0, #0]
 80191f6:	6809      	ldr	r1, [r1, #0]
 80191f8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80191fc:	6862      	ldr	r2, [r4, #4]
 80191fe:	fbb2 f2fc 	udiv	r2, r2, ip
 8019202:	1a5b      	subs	r3, r3, r1
 8019204:	fbb3 f3f2 	udiv	r3, r3, r2
 8019208:	3301      	adds	r3, #1
 801920a:	b29b      	uxth	r3, r3
 801920c:	fbb3 fefc 	udiv	lr, r3, ip
 8019210:	fb0c 331e 	mls	r3, ip, lr, r3
 8019214:	b29b      	uxth	r3, r3
 8019216:	fb02 f303 	mul.w	r3, r2, r3
 801921a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801921e:	58ca      	ldr	r2, [r1, r3]
 8019220:	4463      	add	r3, ip
 8019222:	eba2 020c 	sub.w	r2, r2, ip
 8019226:	3308      	adds	r3, #8
 8019228:	4605      	mov	r5, r0
 801922a:	4419      	add	r1, r3
 801922c:	3a04      	subs	r2, #4
 801922e:	6903      	ldr	r3, [r0, #16]
 8019230:	f7f3 fa4c 	bl	800c6cc <ucdr_init_buffer_origin>
 8019234:	4628      	mov	r0, r5
 8019236:	4903      	ldr	r1, [pc, #12]	@ (8019244 <on_full_output_buffer+0x54>)
 8019238:	4622      	mov	r2, r4
 801923a:	f7f3 fa23 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 801923e:	2000      	movs	r0, #0
 8019240:	bd38      	pop	{r3, r4, r5, pc}
 8019242:	bf00      	nop
 8019244:	080191f1 	.word	0x080191f1

08019248 <uxr_init_output_reliable_stream>:
 8019248:	b410      	push	{r4}
 801924a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801924e:	8103      	strh	r3, [r0, #8]
 8019250:	e9c0 1200 	strd	r1, r2, [r0]
 8019254:	f880 c00c 	strb.w	ip, [r0, #12]
 8019258:	b1d3      	cbz	r3, 8019290 <uxr_init_output_reliable_stream+0x48>
 801925a:	f8c1 c000 	str.w	ip, [r1]
 801925e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019262:	f1bc 0f01 	cmp.w	ip, #1
 8019266:	d913      	bls.n	8019290 <uxr_init_output_reliable_stream+0x48>
 8019268:	2301      	movs	r3, #1
 801926a:	fbb3 f1fc 	udiv	r1, r3, ip
 801926e:	fb0c 3111 	mls	r1, ip, r1, r3
 8019272:	b289      	uxth	r1, r1
 8019274:	6842      	ldr	r2, [r0, #4]
 8019276:	6804      	ldr	r4, [r0, #0]
 8019278:	fbb2 f2fc 	udiv	r2, r2, ip
 801927c:	fb01 f202 	mul.w	r2, r1, r2
 8019280:	7b01      	ldrb	r1, [r0, #12]
 8019282:	50a1      	str	r1, [r4, r2]
 8019284:	3301      	adds	r3, #1
 8019286:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801928a:	b29b      	uxth	r3, r3
 801928c:	459c      	cmp	ip, r3
 801928e:	d8ec      	bhi.n	801926a <uxr_init_output_reliable_stream+0x22>
 8019290:	f04f 32ff 	mov.w	r2, #4294967295
 8019294:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019298:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801929c:	4905      	ldr	r1, [pc, #20]	@ (80192b4 <uxr_init_output_reliable_stream+0x6c>)
 801929e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192a2:	f8c0 100e 	str.w	r1, [r0, #14]
 80192a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80192aa:	2300      	movs	r3, #0
 80192ac:	8242      	strh	r2, [r0, #18]
 80192ae:	8403      	strh	r3, [r0, #32]
 80192b0:	4770      	bx	lr
 80192b2:	bf00      	nop
 80192b4:	ffff0000 	.word	0xffff0000

080192b8 <uxr_reset_output_reliable_stream>:
 80192b8:	8901      	ldrh	r1, [r0, #8]
 80192ba:	b1b1      	cbz	r1, 80192ea <uxr_reset_output_reliable_stream+0x32>
 80192bc:	f04f 0c00 	mov.w	ip, #0
 80192c0:	4663      	mov	r3, ip
 80192c2:	fbb3 f2f1 	udiv	r2, r3, r1
 80192c6:	fb01 3312 	mls	r3, r1, r2, r3
 80192ca:	b29b      	uxth	r3, r3
 80192cc:	6842      	ldr	r2, [r0, #4]
 80192ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80192d2:	6801      	ldr	r1, [r0, #0]
 80192d4:	fb03 f202 	mul.w	r2, r3, r2
 80192d8:	7b03      	ldrb	r3, [r0, #12]
 80192da:	508b      	str	r3, [r1, r2]
 80192dc:	f10c 0c01 	add.w	ip, ip, #1
 80192e0:	8901      	ldrh	r1, [r0, #8]
 80192e2:	fa1f f38c 	uxth.w	r3, ip
 80192e6:	4299      	cmp	r1, r3
 80192e8:	d8eb      	bhi.n	80192c2 <uxr_reset_output_reliable_stream+0xa>
 80192ea:	f04f 32ff 	mov.w	r2, #4294967295
 80192ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80192f2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80192f6:	4904      	ldr	r1, [pc, #16]	@ (8019308 <uxr_reset_output_reliable_stream+0x50>)
 80192f8:	f8c0 100e 	str.w	r1, [r0, #14]
 80192fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019300:	2300      	movs	r3, #0
 8019302:	8242      	strh	r2, [r0, #18]
 8019304:	8403      	strh	r3, [r0, #32]
 8019306:	4770      	bx	lr
 8019308:	ffff0000 	.word	0xffff0000

0801930c <uxr_prepare_reliable_buffer_to_write>:
 801930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019310:	4604      	mov	r4, r0
 8019312:	b091      	sub	sp, #68	@ 0x44
 8019314:	8900      	ldrh	r0, [r0, #8]
 8019316:	89e7      	ldrh	r7, [r4, #14]
 8019318:	6823      	ldr	r3, [r4, #0]
 801931a:	9204      	str	r2, [sp, #16]
 801931c:	fbb7 f2f0 	udiv	r2, r7, r0
 8019320:	fb00 7212 	mls	r2, r0, r2, r7
 8019324:	b292      	uxth	r2, r2
 8019326:	6865      	ldr	r5, [r4, #4]
 8019328:	fbb5 f5f0 	udiv	r5, r5, r0
 801932c:	fb05 3202 	mla	r2, r5, r2, r3
 8019330:	3204      	adds	r2, #4
 8019332:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8019336:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801933a:	9203      	str	r2, [sp, #12]
 801933c:	4688      	mov	r8, r1
 801933e:	f1a5 0904 	sub.w	r9, r5, #4
 8019342:	2800      	cmp	r0, #0
 8019344:	f000 8143 	beq.w	80195ce <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8019348:	2100      	movs	r1, #0
 801934a:	460e      	mov	r6, r1
 801934c:	b28a      	uxth	r2, r1
 801934e:	fbb2 fcf0 	udiv	ip, r2, r0
 8019352:	fb00 221c 	mls	r2, r0, ip, r2
 8019356:	b292      	uxth	r2, r2
 8019358:	fb05 f202 	mul.w	r2, r5, r2
 801935c:	3101      	adds	r1, #1
 801935e:	589a      	ldr	r2, [r3, r2]
 8019360:	455a      	cmp	r2, fp
 8019362:	bf04      	itt	eq
 8019364:	3601      	addeq	r6, #1
 8019366:	b2b6      	uxtheq	r6, r6
 8019368:	4281      	cmp	r1, r0
 801936a:	d1ef      	bne.n	801934c <uxr_prepare_reliable_buffer_to_write+0x40>
 801936c:	4650      	mov	r0, sl
 801936e:	2104      	movs	r1, #4
 8019370:	9605      	str	r6, [sp, #20]
 8019372:	f7f3 f9b7 	bl	800c6e4 <ucdr_alignment>
 8019376:	4482      	add	sl, r0
 8019378:	eb0a 0208 	add.w	r2, sl, r8
 801937c:	454a      	cmp	r2, r9
 801937e:	f240 80ca 	bls.w	8019516 <uxr_prepare_reliable_buffer_to_write+0x20a>
 8019382:	7b22      	ldrb	r2, [r4, #12]
 8019384:	4442      	add	r2, r8
 8019386:	454a      	cmp	r2, r9
 8019388:	f240 80b2 	bls.w	80194f0 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801938c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8019390:	32fc      	adds	r2, #252	@ 0xfc
 8019392:	fa1f f389 	uxth.w	r3, r9
 8019396:	441a      	add	r2, r3
 8019398:	b292      	uxth	r2, r2
 801939a:	fb06 fb02 	mul.w	fp, r6, r2
 801939e:	45c3      	cmp	fp, r8
 80193a0:	9205      	str	r2, [sp, #20]
 80193a2:	9206      	str	r2, [sp, #24]
 80193a4:	f0c0 80b3 	bcc.w	801950e <uxr_prepare_reliable_buffer_to_write+0x202>
 80193a8:	f10a 0204 	add.w	r2, sl, #4
 80193ac:	454a      	cmp	r2, r9
 80193ae:	f080 80db 	bcs.w	8019568 <uxr_prepare_reliable_buffer_to_write+0x25c>
 80193b2:	f1a3 0b04 	sub.w	fp, r3, #4
 80193b6:	ebab 0b0a 	sub.w	fp, fp, sl
 80193ba:	9b05      	ldr	r3, [sp, #20]
 80193bc:	fa1f fb8b 	uxth.w	fp, fp
 80193c0:	eba8 080b 	sub.w	r8, r8, fp
 80193c4:	fbb8 fcf3 	udiv	ip, r8, r3
 80193c8:	fb03 831c 	mls	r3, r3, ip, r8
 80193cc:	fa1f fc8c 	uxth.w	ip, ip
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	f040 80c1 	bne.w	8019558 <uxr_prepare_reliable_buffer_to_write+0x24c>
 80193d6:	45b4      	cmp	ip, r6
 80193d8:	f200 8099 	bhi.w	801950e <uxr_prepare_reliable_buffer_to_write+0x202>
 80193dc:	f10d 0820 	add.w	r8, sp, #32
 80193e0:	f1bc 0f00 	cmp.w	ip, #0
 80193e4:	d040      	beq.n	8019468 <uxr_prepare_reliable_buffer_to_write+0x15c>
 80193e6:	f8cd a01c 	str.w	sl, [sp, #28]
 80193ea:	2600      	movs	r6, #0
 80193ec:	f8dd a014 	ldr.w	sl, [sp, #20]
 80193f0:	9505      	str	r5, [sp, #20]
 80193f2:	f10d 0820 	add.w	r8, sp, #32
 80193f6:	4665      	mov	r5, ip
 80193f8:	e000      	b.n	80193fc <uxr_prepare_reliable_buffer_to_write+0xf0>
 80193fa:	46d3      	mov	fp, sl
 80193fc:	8921      	ldrh	r1, [r4, #8]
 80193fe:	fbb7 f2f1 	udiv	r2, r7, r1
 8019402:	fb01 7212 	mls	r2, r1, r2, r7
 8019406:	b292      	uxth	r2, r2
 8019408:	6863      	ldr	r3, [r4, #4]
 801940a:	fbb3 f3f1 	udiv	r3, r3, r1
 801940e:	6821      	ldr	r1, [r4, #0]
 8019410:	fb02 f303 	mul.w	r3, r2, r3
 8019414:	3304      	adds	r3, #4
 8019416:	4419      	add	r1, r3
 8019418:	4640      	mov	r0, r8
 801941a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801941e:	9200      	str	r2, [sp, #0]
 8019420:	2300      	movs	r3, #0
 8019422:	464a      	mov	r2, r9
 8019424:	f7f3 f948 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8019428:	465a      	mov	r2, fp
 801942a:	2300      	movs	r3, #0
 801942c:	210d      	movs	r1, #13
 801942e:	4640      	mov	r0, r8
 8019430:	f7f8 fcc0 	bl	8011db4 <uxr_buffer_submessage_header>
 8019434:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019438:	fbb7 f2fc 	udiv	r2, r7, ip
 801943c:	fb0c 7212 	mls	r2, ip, r2, r7
 8019440:	b292      	uxth	r2, r2
 8019442:	6863      	ldr	r3, [r4, #4]
 8019444:	fbb3 f3fc 	udiv	r3, r3, ip
 8019448:	fb02 f303 	mul.w	r3, r2, r3
 801944c:	6822      	ldr	r2, [r4, #0]
 801944e:	4638      	mov	r0, r7
 8019450:	f842 9003 	str.w	r9, [r2, r3]
 8019454:	2101      	movs	r1, #1
 8019456:	f000 faf5 	bl	8019a44 <uxr_seq_num_add>
 801945a:	3601      	adds	r6, #1
 801945c:	42ae      	cmp	r6, r5
 801945e:	4607      	mov	r7, r0
 8019460:	d1cb      	bne.n	80193fa <uxr_prepare_reliable_buffer_to_write+0xee>
 8019462:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019466:	9d05      	ldr	r5, [sp, #20]
 8019468:	8920      	ldrh	r0, [r4, #8]
 801946a:	fbb7 f1f0 	udiv	r1, r7, r0
 801946e:	fb00 7111 	mls	r1, r0, r1, r7
 8019472:	b289      	uxth	r1, r1
 8019474:	6863      	ldr	r3, [r4, #4]
 8019476:	fbb3 f3f0 	udiv	r3, r3, r0
 801947a:	fb01 f303 	mul.w	r3, r1, r3
 801947e:	6821      	ldr	r1, [r4, #0]
 8019480:	3304      	adds	r3, #4
 8019482:	4419      	add	r1, r3
 8019484:	464a      	mov	r2, r9
 8019486:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801948a:	9000      	str	r0, [sp, #0]
 801948c:	2300      	movs	r3, #0
 801948e:	4640      	mov	r0, r8
 8019490:	f7f3 f912 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8019494:	4640      	mov	r0, r8
 8019496:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801949a:	2302      	movs	r3, #2
 801949c:	fa1f f288 	uxth.w	r2, r8
 80194a0:	210d      	movs	r1, #13
 80194a2:	f7f8 fc87 	bl	8011db4 <uxr_buffer_submessage_header>
 80194a6:	8926      	ldrh	r6, [r4, #8]
 80194a8:	9b03      	ldr	r3, [sp, #12]
 80194aa:	7b20      	ldrb	r0, [r4, #12]
 80194ac:	f1a5 0208 	sub.w	r2, r5, #8
 80194b0:	f10a 0104 	add.w	r1, sl, #4
 80194b4:	fbb7 f5f6 	udiv	r5, r7, r6
 80194b8:	fb06 7515 	mls	r5, r6, r5, r7
 80194bc:	440b      	add	r3, r1
 80194be:	b2ad      	uxth	r5, r5
 80194c0:	4619      	mov	r1, r3
 80194c2:	3004      	adds	r0, #4
 80194c4:	6863      	ldr	r3, [r4, #4]
 80194c6:	fbb3 f3f6 	udiv	r3, r3, r6
 80194ca:	fb05 f303 	mul.w	r3, r5, r3
 80194ce:	6825      	ldr	r5, [r4, #0]
 80194d0:	4440      	add	r0, r8
 80194d2:	50e8      	str	r0, [r5, r3]
 80194d4:	9d04      	ldr	r5, [sp, #16]
 80194d6:	eba2 020a 	sub.w	r2, r2, sl
 80194da:	4628      	mov	r0, r5
 80194dc:	f7f3 f8fe 	bl	800c6dc <ucdr_init_buffer>
 80194e0:	493c      	ldr	r1, [pc, #240]	@ (80195d4 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 80194e2:	4622      	mov	r2, r4
 80194e4:	4628      	mov	r0, r5
 80194e6:	f7f3 f8cd 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 80194ea:	81e7      	strh	r7, [r4, #14]
 80194ec:	2001      	movs	r0, #1
 80194ee:	e00f      	b.n	8019510 <uxr_prepare_reliable_buffer_to_write+0x204>
 80194f0:	2101      	movs	r1, #1
 80194f2:	89e0      	ldrh	r0, [r4, #14]
 80194f4:	f000 faa6 	bl	8019a44 <uxr_seq_num_add>
 80194f8:	8921      	ldrh	r1, [r4, #8]
 80194fa:	4605      	mov	r5, r0
 80194fc:	8a60      	ldrh	r0, [r4, #18]
 80194fe:	f000 faa1 	bl	8019a44 <uxr_seq_num_add>
 8019502:	4601      	mov	r1, r0
 8019504:	4628      	mov	r0, r5
 8019506:	f000 faa5 	bl	8019a54 <uxr_seq_num_cmp>
 801950a:	2800      	cmp	r0, #0
 801950c:	dd45      	ble.n	801959a <uxr_prepare_reliable_buffer_to_write+0x28e>
 801950e:	2000      	movs	r0, #0
 8019510:	b011      	add	sp, #68	@ 0x44
 8019512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019516:	8921      	ldrh	r1, [r4, #8]
 8019518:	8a60      	ldrh	r0, [r4, #18]
 801951a:	9205      	str	r2, [sp, #20]
 801951c:	f000 fa92 	bl	8019a44 <uxr_seq_num_add>
 8019520:	4601      	mov	r1, r0
 8019522:	4638      	mov	r0, r7
 8019524:	f000 fa96 	bl	8019a54 <uxr_seq_num_cmp>
 8019528:	2800      	cmp	r0, #0
 801952a:	9a05      	ldr	r2, [sp, #20]
 801952c:	dcef      	bgt.n	801950e <uxr_prepare_reliable_buffer_to_write+0x202>
 801952e:	8926      	ldrh	r6, [r4, #8]
 8019530:	fbb7 f5f6 	udiv	r5, r7, r6
 8019534:	fb06 7515 	mls	r5, r6, r5, r7
 8019538:	b2ad      	uxth	r5, r5
 801953a:	6863      	ldr	r3, [r4, #4]
 801953c:	6824      	ldr	r4, [r4, #0]
 801953e:	fbb3 f3f6 	udiv	r3, r3, r6
 8019542:	fb05 f303 	mul.w	r3, r5, r3
 8019546:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801954a:	50e2      	str	r2, [r4, r3]
 801954c:	2300      	movs	r3, #0
 801954e:	f8cd a000 	str.w	sl, [sp]
 8019552:	f7f3 f8b1 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 8019556:	e7c9      	b.n	80194ec <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8019558:	f10c 0c01 	add.w	ip, ip, #1
 801955c:	fa1f fc8c 	uxth.w	ip, ip
 8019560:	45b4      	cmp	ip, r6
 8019562:	9306      	str	r3, [sp, #24]
 8019564:	d8d3      	bhi.n	801950e <uxr_prepare_reliable_buffer_to_write+0x202>
 8019566:	e739      	b.n	80193dc <uxr_prepare_reliable_buffer_to_write+0xd0>
 8019568:	4638      	mov	r0, r7
 801956a:	2101      	movs	r1, #1
 801956c:	9307      	str	r3, [sp, #28]
 801956e:	f000 fa69 	bl	8019a44 <uxr_seq_num_add>
 8019572:	8921      	ldrh	r1, [r4, #8]
 8019574:	6862      	ldr	r2, [r4, #4]
 8019576:	4607      	mov	r7, r0
 8019578:	fbb0 f0f1 	udiv	r0, r0, r1
 801957c:	fb01 7010 	mls	r0, r1, r0, r7
 8019580:	b280      	uxth	r0, r0
 8019582:	fbb2 f1f1 	udiv	r1, r2, r1
 8019586:	6822      	ldr	r2, [r4, #0]
 8019588:	fb00 f101 	mul.w	r1, r0, r1
 801958c:	3104      	adds	r1, #4
 801958e:	1853      	adds	r3, r2, r1
 8019590:	9303      	str	r3, [sp, #12]
 8019592:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8019596:	9b07      	ldr	r3, [sp, #28]
 8019598:	e70b      	b.n	80193b2 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801959a:	8921      	ldrh	r1, [r4, #8]
 801959c:	fbb5 f2f1 	udiv	r2, r5, r1
 80195a0:	fb01 5212 	mls	r2, r1, r2, r5
 80195a4:	b292      	uxth	r2, r2
 80195a6:	6863      	ldr	r3, [r4, #4]
 80195a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80195ac:	6821      	ldr	r1, [r4, #0]
 80195ae:	9804      	ldr	r0, [sp, #16]
 80195b0:	fb02 f303 	mul.w	r3, r2, r3
 80195b4:	3304      	adds	r3, #4
 80195b6:	7b22      	ldrb	r2, [r4, #12]
 80195b8:	4419      	add	r1, r3
 80195ba:	4442      	add	r2, r8
 80195bc:	f841 2c04 	str.w	r2, [r1, #-4]
 80195c0:	7b23      	ldrb	r3, [r4, #12]
 80195c2:	9300      	str	r3, [sp, #0]
 80195c4:	2300      	movs	r3, #0
 80195c6:	f7f3 f877 	bl	800c6b8 <ucdr_init_buffer_origin_offset>
 80195ca:	81e5      	strh	r5, [r4, #14]
 80195cc:	e78e      	b.n	80194ec <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80195ce:	4606      	mov	r6, r0
 80195d0:	e6cc      	b.n	801936c <uxr_prepare_reliable_buffer_to_write+0x60>
 80195d2:	bf00      	nop
 80195d4:	080191f1 	.word	0x080191f1

080195d8 <uxr_prepare_next_reliable_buffer_to_send>:
 80195d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195da:	4604      	mov	r4, r0
 80195dc:	460f      	mov	r7, r1
 80195de:	8a00      	ldrh	r0, [r0, #16]
 80195e0:	2101      	movs	r1, #1
 80195e2:	4615      	mov	r5, r2
 80195e4:	461e      	mov	r6, r3
 80195e6:	f000 fa2d 	bl	8019a44 <uxr_seq_num_add>
 80195ea:	8030      	strh	r0, [r6, #0]
 80195ec:	8922      	ldrh	r2, [r4, #8]
 80195ee:	fbb0 f3f2 	udiv	r3, r0, r2
 80195f2:	fb02 0c13 	mls	ip, r2, r3, r0
 80195f6:	fa1f fc8c 	uxth.w	ip, ip
 80195fa:	6863      	ldr	r3, [r4, #4]
 80195fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8019600:	fb0c fc03 	mul.w	ip, ip, r3
 8019604:	6823      	ldr	r3, [r4, #0]
 8019606:	89e1      	ldrh	r1, [r4, #14]
 8019608:	f10c 0c04 	add.w	ip, ip, #4
 801960c:	4463      	add	r3, ip
 801960e:	603b      	str	r3, [r7, #0]
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	4463      	add	r3, ip
 8019614:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019618:	602b      	str	r3, [r5, #0]
 801961a:	f000 fa1b 	bl	8019a54 <uxr_seq_num_cmp>
 801961e:	2800      	cmp	r0, #0
 8019620:	dd01      	ble.n	8019626 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019622:	2000      	movs	r0, #0
 8019624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019626:	7b23      	ldrb	r3, [r4, #12]
 8019628:	682a      	ldr	r2, [r5, #0]
 801962a:	429a      	cmp	r2, r3
 801962c:	d9f9      	bls.n	8019622 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801962e:	8a61      	ldrh	r1, [r4, #18]
 8019630:	8a20      	ldrh	r0, [r4, #16]
 8019632:	f000 fa0b 	bl	8019a4c <uxr_seq_num_sub>
 8019636:	8923      	ldrh	r3, [r4, #8]
 8019638:	4283      	cmp	r3, r0
 801963a:	d0f2      	beq.n	8019622 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801963c:	8830      	ldrh	r0, [r6, #0]
 801963e:	89e3      	ldrh	r3, [r4, #14]
 8019640:	8220      	strh	r0, [r4, #16]
 8019642:	4298      	cmp	r0, r3
 8019644:	d001      	beq.n	801964a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019646:	2001      	movs	r0, #1
 8019648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801964a:	2101      	movs	r1, #1
 801964c:	f000 f9fa 	bl	8019a44 <uxr_seq_num_add>
 8019650:	81e0      	strh	r0, [r4, #14]
 8019652:	e7f8      	b.n	8019646 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08019654 <uxr_update_output_stream_heartbeat_timestamp>:
 8019654:	b570      	push	{r4, r5, r6, lr}
 8019656:	8a01      	ldrh	r1, [r0, #16]
 8019658:	4604      	mov	r4, r0
 801965a:	8a40      	ldrh	r0, [r0, #18]
 801965c:	4615      	mov	r5, r2
 801965e:	461e      	mov	r6, r3
 8019660:	f000 f9f8 	bl	8019a54 <uxr_seq_num_cmp>
 8019664:	2800      	cmp	r0, #0
 8019666:	db07      	blt.n	8019678 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019668:	f04f 35ff 	mov.w	r5, #4294967295
 801966c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8019670:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019674:	2000      	movs	r0, #0
 8019676:	bd70      	pop	{r4, r5, r6, pc}
 8019678:	f894 3020 	ldrb.w	r3, [r4, #32]
 801967c:	b953      	cbnz	r3, 8019694 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801967e:	2301      	movs	r3, #1
 8019680:	f884 3020 	strb.w	r3, [r4, #32]
 8019684:	3564      	adds	r5, #100	@ 0x64
 8019686:	f04f 0000 	mov.w	r0, #0
 801968a:	f146 0600 	adc.w	r6, r6, #0
 801968e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019698:	428d      	cmp	r5, r1
 801969a:	eb76 0202 	sbcs.w	r2, r6, r2
 801969e:	dbf1      	blt.n	8019684 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80196a0:	3301      	adds	r3, #1
 80196a2:	3564      	adds	r5, #100	@ 0x64
 80196a4:	f884 3020 	strb.w	r3, [r4, #32]
 80196a8:	f04f 0001 	mov.w	r0, #1
 80196ac:	f146 0600 	adc.w	r6, r6, #0
 80196b0:	e7ed      	b.n	801968e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 80196b2:	bf00      	nop

080196b4 <uxr_begin_output_nack_buffer_it>:
 80196b4:	8a40      	ldrh	r0, [r0, #18]
 80196b6:	4770      	bx	lr

080196b8 <uxr_next_reliable_nack_buffer_to_send>:
 80196b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196bc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80196c0:	f1b8 0f00 	cmp.w	r8, #0
 80196c4:	d104      	bne.n	80196d0 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80196c6:	f04f 0800 	mov.w	r8, #0
 80196ca:	4640      	mov	r0, r8
 80196cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196d0:	4604      	mov	r4, r0
 80196d2:	460e      	mov	r6, r1
 80196d4:	8818      	ldrh	r0, [r3, #0]
 80196d6:	4617      	mov	r7, r2
 80196d8:	461d      	mov	r5, r3
 80196da:	e019      	b.n	8019710 <uxr_next_reliable_nack_buffer_to_send+0x58>
 80196dc:	8921      	ldrh	r1, [r4, #8]
 80196de:	8828      	ldrh	r0, [r5, #0]
 80196e0:	fbb0 fcf1 	udiv	ip, r0, r1
 80196e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80196e8:	fb01 0c1c 	mls	ip, r1, ip, r0
 80196ec:	fa1f fc8c 	uxth.w	ip, ip
 80196f0:	fbb2 f2f1 	udiv	r2, r2, r1
 80196f4:	fb02 fc0c 	mul.w	ip, r2, ip
 80196f8:	f10c 0c04 	add.w	ip, ip, #4
 80196fc:	4463      	add	r3, ip
 80196fe:	6033      	str	r3, [r6, #0]
 8019700:	6823      	ldr	r3, [r4, #0]
 8019702:	4463      	add	r3, ip
 8019704:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019708:	603b      	str	r3, [r7, #0]
 801970a:	7b22      	ldrb	r2, [r4, #12]
 801970c:	429a      	cmp	r2, r3
 801970e:	d1dc      	bne.n	80196ca <uxr_next_reliable_nack_buffer_to_send+0x12>
 8019710:	2101      	movs	r1, #1
 8019712:	f000 f997 	bl	8019a44 <uxr_seq_num_add>
 8019716:	8028      	strh	r0, [r5, #0]
 8019718:	8a21      	ldrh	r1, [r4, #16]
 801971a:	f000 f99b 	bl	8019a54 <uxr_seq_num_cmp>
 801971e:	2800      	cmp	r0, #0
 8019720:	dddc      	ble.n	80196dc <uxr_next_reliable_nack_buffer_to_send+0x24>
 8019722:	2300      	movs	r3, #0
 8019724:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8019728:	e7cd      	b.n	80196c6 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801972a:	bf00      	nop

0801972c <uxr_process_acknack>:
 801972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801972e:	4604      	mov	r4, r0
 8019730:	460e      	mov	r6, r1
 8019732:	4610      	mov	r0, r2
 8019734:	2101      	movs	r1, #1
 8019736:	f000 f989 	bl	8019a4c <uxr_seq_num_sub>
 801973a:	8a61      	ldrh	r1, [r4, #18]
 801973c:	f000 f986 	bl	8019a4c <uxr_seq_num_sub>
 8019740:	b1c0      	cbz	r0, 8019774 <uxr_process_acknack+0x48>
 8019742:	4605      	mov	r5, r0
 8019744:	2700      	movs	r7, #0
 8019746:	2101      	movs	r1, #1
 8019748:	8a60      	ldrh	r0, [r4, #18]
 801974a:	f000 f97b 	bl	8019a44 <uxr_seq_num_add>
 801974e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019752:	fbb0 f1fc 	udiv	r1, r0, ip
 8019756:	e9d4 2300 	ldrd	r2, r3, [r4]
 801975a:	fb0c 0111 	mls	r1, ip, r1, r0
 801975e:	b289      	uxth	r1, r1
 8019760:	3701      	adds	r7, #1
 8019762:	fbb3 f3fc 	udiv	r3, r3, ip
 8019766:	fb01 f303 	mul.w	r3, r1, r3
 801976a:	42bd      	cmp	r5, r7
 801976c:	7b21      	ldrb	r1, [r4, #12]
 801976e:	8260      	strh	r0, [r4, #18]
 8019770:	50d1      	str	r1, [r2, r3]
 8019772:	d1e8      	bne.n	8019746 <uxr_process_acknack+0x1a>
 8019774:	3e00      	subs	r6, #0
 8019776:	f04f 0300 	mov.w	r3, #0
 801977a:	bf18      	it	ne
 801977c:	2601      	movne	r6, #1
 801977e:	f884 3020 	strb.w	r3, [r4, #32]
 8019782:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8019786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019788 <uxr_is_output_up_to_date>:
 8019788:	8a01      	ldrh	r1, [r0, #16]
 801978a:	8a40      	ldrh	r0, [r0, #18]
 801978c:	b508      	push	{r3, lr}
 801978e:	f000 f961 	bl	8019a54 <uxr_seq_num_cmp>
 8019792:	fab0 f080 	clz	r0, r0
 8019796:	0940      	lsrs	r0, r0, #5
 8019798:	bd08      	pop	{r3, pc}
 801979a:	bf00      	nop

0801979c <get_available_free_slots>:
 801979c:	8901      	ldrh	r1, [r0, #8]
 801979e:	b1c1      	cbz	r1, 80197d2 <get_available_free_slots+0x36>
 80197a0:	b530      	push	{r4, r5, lr}
 80197a2:	2200      	movs	r2, #0
 80197a4:	6843      	ldr	r3, [r0, #4]
 80197a6:	6805      	ldr	r5, [r0, #0]
 80197a8:	7b04      	ldrb	r4, [r0, #12]
 80197aa:	fbb3 fef1 	udiv	lr, r3, r1
 80197ae:	4610      	mov	r0, r2
 80197b0:	b293      	uxth	r3, r2
 80197b2:	fbb3 fcf1 	udiv	ip, r3, r1
 80197b6:	fb01 331c 	mls	r3, r1, ip, r3
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	fb0e f303 	mul.w	r3, lr, r3
 80197c0:	3201      	adds	r2, #1
 80197c2:	58eb      	ldr	r3, [r5, r3]
 80197c4:	429c      	cmp	r4, r3
 80197c6:	bf04      	itt	eq
 80197c8:	3001      	addeq	r0, #1
 80197ca:	b280      	uxtheq	r0, r0
 80197cc:	4291      	cmp	r1, r2
 80197ce:	d1ef      	bne.n	80197b0 <get_available_free_slots+0x14>
 80197d0:	bd30      	pop	{r4, r5, pc}
 80197d2:	4608      	mov	r0, r1
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop

080197d8 <uxr_buffer_request_data>:
 80197d8:	b530      	push	{r4, r5, lr}
 80197da:	b095      	sub	sp, #84	@ 0x54
 80197dc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80197e0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80197e2:	f88d 301c 	strb.w	r3, [sp, #28]
 80197e6:	2200      	movs	r2, #0
 80197e8:	2d00      	cmp	r5, #0
 80197ea:	bf14      	ite	ne
 80197ec:	2101      	movne	r1, #1
 80197ee:	4611      	moveq	r1, r2
 80197f0:	4604      	mov	r4, r0
 80197f2:	f88d 201d 	strb.w	r2, [sp, #29]
 80197f6:	f88d 201e 	strb.w	r2, [sp, #30]
 80197fa:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80197fe:	d021      	beq.n	8019844 <uxr_buffer_request_data+0x6c>
 8019800:	682a      	ldr	r2, [r5, #0]
 8019802:	686b      	ldr	r3, [r5, #4]
 8019804:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8019808:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801980c:	2210      	movs	r2, #16
 801980e:	2308      	movs	r3, #8
 8019810:	2100      	movs	r1, #0
 8019812:	e9cd 3100 	strd	r3, r1, [sp]
 8019816:	4620      	mov	r0, r4
 8019818:	9905      	ldr	r1, [sp, #20]
 801981a:	ab0c      	add	r3, sp, #48	@ 0x30
 801981c:	f7f7 fbe0 	bl	8010fe0 <uxr_prepare_stream_to_write_submessage>
 8019820:	b918      	cbnz	r0, 801982a <uxr_buffer_request_data+0x52>
 8019822:	4604      	mov	r4, r0
 8019824:	4620      	mov	r0, r4
 8019826:	b015      	add	sp, #84	@ 0x54
 8019828:	bd30      	pop	{r4, r5, pc}
 801982a:	9904      	ldr	r1, [sp, #16]
 801982c:	aa06      	add	r2, sp, #24
 801982e:	4620      	mov	r0, r4
 8019830:	f7f7 fd10 	bl	8011254 <uxr_init_base_object_request>
 8019834:	a906      	add	r1, sp, #24
 8019836:	4604      	mov	r4, r0
 8019838:	a80c      	add	r0, sp, #48	@ 0x30
 801983a:	f7f9 fc41 	bl	80130c0 <uxr_serialize_READ_DATA_Payload>
 801983e:	4620      	mov	r0, r4
 8019840:	b015      	add	sp, #84	@ 0x54
 8019842:	bd30      	pop	{r4, r5, pc}
 8019844:	2208      	movs	r2, #8
 8019846:	e7e2      	b.n	801980e <uxr_buffer_request_data+0x36>

08019848 <uxr_buffer_cancel_data>:
 8019848:	b510      	push	{r4, lr}
 801984a:	b094      	sub	sp, #80	@ 0x50
 801984c:	2300      	movs	r3, #0
 801984e:	9301      	str	r3, [sp, #4]
 8019850:	9205      	str	r2, [sp, #20]
 8019852:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019856:	2201      	movs	r2, #1
 8019858:	f88d 301e 	strb.w	r3, [sp, #30]
 801985c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8019860:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8019864:	2308      	movs	r3, #8
 8019866:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801986a:	9300      	str	r3, [sp, #0]
 801986c:	2210      	movs	r2, #16
 801986e:	ab0c      	add	r3, sp, #48	@ 0x30
 8019870:	4604      	mov	r4, r0
 8019872:	f7f7 fbb5 	bl	8010fe0 <uxr_prepare_stream_to_write_submessage>
 8019876:	b918      	cbnz	r0, 8019880 <uxr_buffer_cancel_data+0x38>
 8019878:	4604      	mov	r4, r0
 801987a:	4620      	mov	r0, r4
 801987c:	b014      	add	sp, #80	@ 0x50
 801987e:	bd10      	pop	{r4, pc}
 8019880:	9905      	ldr	r1, [sp, #20]
 8019882:	aa06      	add	r2, sp, #24
 8019884:	4620      	mov	r0, r4
 8019886:	f7f7 fce5 	bl	8011254 <uxr_init_base_object_request>
 801988a:	a906      	add	r1, sp, #24
 801988c:	4604      	mov	r4, r0
 801988e:	a80c      	add	r0, sp, #48	@ 0x30
 8019890:	f7f9 fc16 	bl	80130c0 <uxr_serialize_READ_DATA_Payload>
 8019894:	4620      	mov	r0, r4
 8019896:	b014      	add	sp, #80	@ 0x50
 8019898:	bd10      	pop	{r4, pc}
 801989a:	bf00      	nop

0801989c <read_submessage_format>:
 801989c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198a0:	b095      	sub	sp, #84	@ 0x54
 80198a2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80198a6:	b113      	cbz	r3, 80198ae <read_submessage_format+0x12>
 80198a8:	b015      	add	sp, #84	@ 0x54
 80198aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198ae:	460c      	mov	r4, r1
 80198b0:	4616      	mov	r6, r2
 80198b2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80198b6:	461d      	mov	r5, r3
 80198b8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80198ba:	9304      	str	r3, [sp, #16]
 80198bc:	1a52      	subs	r2, r2, r1
 80198be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80198c0:	9305      	str	r3, [sp, #20]
 80198c2:	4680      	mov	r8, r0
 80198c4:	a80c      	add	r0, sp, #48	@ 0x30
 80198c6:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80198ca:	f7f2 ff07 	bl	800c6dc <ucdr_init_buffer>
 80198ce:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80198d2:	a80c      	add	r0, sp, #48	@ 0x30
 80198d4:	f7f2 fed6 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 80198d8:	69e3      	ldr	r3, [r4, #28]
 80198da:	b35b      	cbz	r3, 8019934 <read_submessage_format+0x98>
 80198dc:	f1b9 0f07 	cmp.w	r9, #7
 80198e0:	751d      	strb	r5, [r3, #20]
 80198e2:	d043      	beq.n	801996c <read_submessage_format+0xd0>
 80198e4:	f1b9 0f08 	cmp.w	r9, #8
 80198e8:	d032      	beq.n	8019950 <read_submessage_format+0xb4>
 80198ea:	f1b9 0f06 	cmp.w	r9, #6
 80198ee:	d008      	beq.n	8019902 <read_submessage_format+0x66>
 80198f0:	2201      	movs	r2, #1
 80198f2:	751a      	strb	r2, [r3, #20]
 80198f4:	4631      	mov	r1, r6
 80198f6:	4620      	mov	r0, r4
 80198f8:	f7f2 ff40 	bl	800c77c <ucdr_advance_buffer>
 80198fc:	b015      	add	sp, #84	@ 0x54
 80198fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019902:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8019906:	2d00      	cmp	r5, #0
 8019908:	d0f2      	beq.n	80198f0 <read_submessage_format+0x54>
 801990a:	ab0c      	add	r3, sp, #48	@ 0x30
 801990c:	e9cd 3600 	strd	r3, r6, [sp]
 8019910:	2306      	movs	r3, #6
 8019912:	f88d 3016 	strb.w	r3, [sp, #22]
 8019916:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801991a:	9302      	str	r3, [sp, #8]
 801991c:	463a      	mov	r2, r7
 801991e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8019922:	4640      	mov	r0, r8
 8019924:	47a8      	blx	r5
 8019926:	69e3      	ldr	r3, [r4, #28]
 8019928:	2201      	movs	r2, #1
 801992a:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 801992e:	2b00      	cmp	r3, #0
 8019930:	d1de      	bne.n	80198f0 <read_submessage_format+0x54>
 8019932:	e7df      	b.n	80198f4 <read_submessage_format+0x58>
 8019934:	f1b9 0f07 	cmp.w	r9, #7
 8019938:	d032      	beq.n	80199a0 <read_submessage_format+0x104>
 801993a:	f1b9 0f08 	cmp.w	r9, #8
 801993e:	d02a      	beq.n	8019996 <read_submessage_format+0xfa>
 8019940:	f1b9 0f06 	cmp.w	r9, #6
 8019944:	d1d6      	bne.n	80198f4 <read_submessage_format+0x58>
 8019946:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801994a:	2d00      	cmp	r5, #0
 801994c:	d1dd      	bne.n	801990a <read_submessage_format+0x6e>
 801994e:	e7d1      	b.n	80198f4 <read_submessage_format+0x58>
 8019950:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8019954:	2a00      	cmp	r2, #0
 8019956:	d0cb      	beq.n	80198f0 <read_submessage_format+0x54>
 8019958:	a906      	add	r1, sp, #24
 801995a:	a80c      	add	r0, sp, #48	@ 0x30
 801995c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801995e:	f7f9 fc83 	bl	8013268 <uxr_deserialize_SampleIdentity>
 8019962:	bb28      	cbnz	r0, 80199b0 <read_submessage_format+0x114>
 8019964:	69e3      	ldr	r3, [r4, #28]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1c2      	bne.n	80198f0 <read_submessage_format+0x54>
 801996a:	e7c3      	b.n	80198f4 <read_submessage_format+0x58>
 801996c:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8019970:	b16a      	cbz	r2, 801998e <read_submessage_format+0xf2>
 8019972:	a906      	add	r1, sp, #24
 8019974:	a80c      	add	r0, sp, #48	@ 0x30
 8019976:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8019978:	f7f9 f942 	bl	8012c00 <uxr_deserialize_BaseObjectRequest>
 801997c:	2800      	cmp	r0, #0
 801997e:	d13a      	bne.n	80199f6 <read_submessage_format+0x15a>
 8019980:	68a2      	ldr	r2, [r4, #8]
 8019982:	69e3      	ldr	r3, [r4, #28]
 8019984:	4432      	add	r2, r6
 8019986:	60a2      	str	r2, [r4, #8]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d1b1      	bne.n	80198f0 <read_submessage_format+0x54>
 801998c:	e7b2      	b.n	80198f4 <read_submessage_format+0x58>
 801998e:	68a2      	ldr	r2, [r4, #8]
 8019990:	4432      	add	r2, r6
 8019992:	60a2      	str	r2, [r4, #8]
 8019994:	e7ac      	b.n	80198f0 <read_submessage_format+0x54>
 8019996:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801999a:	2b00      	cmp	r3, #0
 801999c:	d1dc      	bne.n	8019958 <read_submessage_format+0xbc>
 801999e:	e7a9      	b.n	80198f4 <read_submessage_format+0x58>
 80199a0:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d1e4      	bne.n	8019972 <read_submessage_format+0xd6>
 80199a8:	68a3      	ldr	r3, [r4, #8]
 80199aa:	4433      	add	r3, r6
 80199ac:	60a3      	str	r3, [r4, #8]
 80199ae:	e7a1      	b.n	80198f4 <read_submessage_format+0x58>
 80199b0:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80199b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199b6:	1a52      	subs	r2, r2, r1
 80199b8:	1aed      	subs	r5, r5, r3
 80199ba:	a80c      	add	r0, sp, #48	@ 0x30
 80199bc:	f7f2 fe8e 	bl	800c6dc <ucdr_init_buffer>
 80199c0:	4435      	add	r5, r6
 80199c2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80199c6:	a80c      	add	r0, sp, #48	@ 0x30
 80199c8:	f7f2 fe5c 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 80199cc:	b2ad      	uxth	r5, r5
 80199ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	9501      	str	r5, [sp, #4]
 80199d4:	2108      	movs	r1, #8
 80199d6:	f88d 1016 	strb.w	r1, [sp, #22]
 80199da:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 80199de:	9102      	str	r1, [sp, #8]
 80199e0:	ab06      	add	r3, sp, #24
 80199e2:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 80199e6:	9905      	ldr	r1, [sp, #20]
 80199e8:	463a      	mov	r2, r7
 80199ea:	4640      	mov	r0, r8
 80199ec:	47a8      	blx	r5
 80199ee:	2301      	movs	r3, #1
 80199f0:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80199f4:	e7b6      	b.n	8019964 <read_submessage_format+0xc8>
 80199f6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80199fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199fc:	1a52      	subs	r2, r2, r1
 80199fe:	1aed      	subs	r5, r5, r3
 8019a00:	a80c      	add	r0, sp, #48	@ 0x30
 8019a02:	f7f2 fe6b 	bl	800c6dc <ucdr_init_buffer>
 8019a06:	4435      	add	r5, r6
 8019a08:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019a0c:	a80c      	add	r0, sp, #48	@ 0x30
 8019a0e:	f7f2 fe39 	bl	800c684 <ucdr_set_on_full_buffer_callback>
 8019a12:	b2ad      	uxth	r5, r5
 8019a14:	ab0c      	add	r3, sp, #48	@ 0x30
 8019a16:	9300      	str	r3, [sp, #0]
 8019a18:	9501      	str	r5, [sp, #4]
 8019a1a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019a1e:	2107      	movs	r1, #7
 8019a20:	f88d 1016 	strb.w	r1, [sp, #22]
 8019a24:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8019a28:	9102      	str	r1, [sp, #8]
 8019a2a:	ba5b      	rev16	r3, r3
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8019a32:	9905      	ldr	r1, [sp, #20]
 8019a34:	463a      	mov	r2, r7
 8019a36:	4640      	mov	r0, r8
 8019a38:	47a8      	blx	r5
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8019a40:	e79e      	b.n	8019980 <read_submessage_format+0xe4>
 8019a42:	bf00      	nop

08019a44 <uxr_seq_num_add>:
 8019a44:	4408      	add	r0, r1
 8019a46:	b280      	uxth	r0, r0
 8019a48:	4770      	bx	lr
 8019a4a:	bf00      	nop

08019a4c <uxr_seq_num_sub>:
 8019a4c:	1a40      	subs	r0, r0, r1
 8019a4e:	b280      	uxth	r0, r0
 8019a50:	4770      	bx	lr
 8019a52:	bf00      	nop

08019a54 <uxr_seq_num_cmp>:
 8019a54:	4288      	cmp	r0, r1
 8019a56:	d010      	beq.n	8019a7a <uxr_seq_num_cmp+0x26>
 8019a58:	d207      	bcs.n	8019a6a <uxr_seq_num_cmp+0x16>
 8019a5a:	1a09      	subs	r1, r1, r0
 8019a5c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8019a60:	bfb4      	ite	lt
 8019a62:	f04f 30ff 	movlt.w	r0, #4294967295
 8019a66:	2001      	movge	r0, #1
 8019a68:	4770      	bx	lr
 8019a6a:	1a41      	subs	r1, r0, r1
 8019a6c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8019a70:	bfcc      	ite	gt
 8019a72:	f04f 30ff 	movgt.w	r0, #4294967295
 8019a76:	2001      	movle	r0, #1
 8019a78:	4770      	bx	lr
 8019a7a:	2000      	movs	r0, #0
 8019a7c:	4770      	bx	lr
 8019a7e:	bf00      	nop

08019a80 <rcl_get_automatic_discovery_range>:
 8019a80:	b530      	push	{r4, r5, lr}
 8019a82:	b083      	sub	sp, #12
 8019a84:	2300      	movs	r3, #0
 8019a86:	9301      	str	r3, [sp, #4]
 8019a88:	b1c0      	cbz	r0, 8019abc <rcl_get_automatic_discovery_range+0x3c>
 8019a8a:	4604      	mov	r4, r0
 8019a8c:	a901      	add	r1, sp, #4
 8019a8e:	4818      	ldr	r0, [pc, #96]	@ (8019af0 <rcl_get_automatic_discovery_range+0x70>)
 8019a90:	f7fc fdc0 	bl	8016614 <rcutils_get_env>
 8019a94:	b110      	cbz	r0, 8019a9c <rcl_get_automatic_discovery_range+0x1c>
 8019a96:	2001      	movs	r0, #1
 8019a98:	b003      	add	sp, #12
 8019a9a:	bd30      	pop	{r4, r5, pc}
 8019a9c:	9d01      	ldr	r5, [sp, #4]
 8019a9e:	782b      	ldrb	r3, [r5, #0]
 8019aa0:	b923      	cbnz	r3, 8019aac <rcl_get_automatic_discovery_range+0x2c>
 8019aa2:	2303      	movs	r3, #3
 8019aa4:	7023      	strb	r3, [r4, #0]
 8019aa6:	2000      	movs	r0, #0
 8019aa8:	b003      	add	sp, #12
 8019aaa:	bd30      	pop	{r4, r5, pc}
 8019aac:	4911      	ldr	r1, [pc, #68]	@ (8019af4 <rcl_get_automatic_discovery_range+0x74>)
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f7e6 fbae 	bl	8000210 <strcmp>
 8019ab4:	b928      	cbnz	r0, 8019ac2 <rcl_get_automatic_discovery_range+0x42>
 8019ab6:	2301      	movs	r3, #1
 8019ab8:	7023      	strb	r3, [r4, #0]
 8019aba:	e7f4      	b.n	8019aa6 <rcl_get_automatic_discovery_range+0x26>
 8019abc:	200b      	movs	r0, #11
 8019abe:	b003      	add	sp, #12
 8019ac0:	bd30      	pop	{r4, r5, pc}
 8019ac2:	490d      	ldr	r1, [pc, #52]	@ (8019af8 <rcl_get_automatic_discovery_range+0x78>)
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	f7e6 fba3 	bl	8000210 <strcmp>
 8019aca:	b168      	cbz	r0, 8019ae8 <rcl_get_automatic_discovery_range+0x68>
 8019acc:	490b      	ldr	r1, [pc, #44]	@ (8019afc <rcl_get_automatic_discovery_range+0x7c>)
 8019ace:	4628      	mov	r0, r5
 8019ad0:	f7e6 fb9e 	bl	8000210 <strcmp>
 8019ad4:	2800      	cmp	r0, #0
 8019ad6:	d0e4      	beq.n	8019aa2 <rcl_get_automatic_discovery_range+0x22>
 8019ad8:	4909      	ldr	r1, [pc, #36]	@ (8019b00 <rcl_get_automatic_discovery_range+0x80>)
 8019ada:	4628      	mov	r0, r5
 8019adc:	f7e6 fb98 	bl	8000210 <strcmp>
 8019ae0:	b910      	cbnz	r0, 8019ae8 <rcl_get_automatic_discovery_range+0x68>
 8019ae2:	2304      	movs	r3, #4
 8019ae4:	7023      	strb	r3, [r4, #0]
 8019ae6:	e7de      	b.n	8019aa6 <rcl_get_automatic_discovery_range+0x26>
 8019ae8:	2302      	movs	r3, #2
 8019aea:	7023      	strb	r3, [r4, #0]
 8019aec:	e7db      	b.n	8019aa6 <rcl_get_automatic_discovery_range+0x26>
 8019aee:	bf00      	nop
 8019af0:	08021338 	.word	0x08021338
 8019af4:	08021358 	.word	0x08021358
 8019af8:	0802135c 	.word	0x0802135c
 8019afc:	08021368 	.word	0x08021368
 8019b00:	08021370 	.word	0x08021370

08019b04 <rcl_automatic_discovery_range_to_string>:
 8019b04:	2804      	cmp	r0, #4
 8019b06:	bf9a      	itte	ls
 8019b08:	4b02      	ldrls	r3, [pc, #8]	@ (8019b14 <rcl_automatic_discovery_range_to_string+0x10>)
 8019b0a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019b0e:	2000      	movhi	r0, #0
 8019b10:	4770      	bx	lr
 8019b12:	bf00      	nop
 8019b14:	080220f0 	.word	0x080220f0

08019b18 <rcl_get_discovery_static_peers>:
 8019b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b1c:	b08c      	sub	sp, #48	@ 0x30
 8019b1e:	2300      	movs	r3, #0
 8019b20:	9304      	str	r3, [sp, #16]
 8019b22:	2800      	cmp	r0, #0
 8019b24:	d04e      	beq.n	8019bc4 <rcl_get_discovery_static_peers+0xac>
 8019b26:	460d      	mov	r5, r1
 8019b28:	2900      	cmp	r1, #0
 8019b2a:	d04b      	beq.n	8019bc4 <rcl_get_discovery_static_peers+0xac>
 8019b2c:	4604      	mov	r4, r0
 8019b2e:	a904      	add	r1, sp, #16
 8019b30:	482d      	ldr	r0, [pc, #180]	@ (8019be8 <rcl_get_discovery_static_peers+0xd0>)
 8019b32:	f7fc fd6f 	bl	8016614 <rcutils_get_env>
 8019b36:	b118      	cbz	r0, 8019b40 <rcl_get_discovery_static_peers+0x28>
 8019b38:	2001      	movs	r0, #1
 8019b3a:	b00c      	add	sp, #48	@ 0x30
 8019b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b40:	9b04      	ldr	r3, [sp, #16]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d0f8      	beq.n	8019b38 <rcl_get_discovery_static_peers+0x20>
 8019b46:	af05      	add	r7, sp, #20
 8019b48:	4638      	mov	r0, r7
 8019b4a:	f000 fc7f 	bl	801a44c <rcutils_get_zero_initialized_string_array>
 8019b4e:	f105 0308 	add.w	r3, r5, #8
 8019b52:	9703      	str	r7, [sp, #12]
 8019b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019b5c:	9804      	ldr	r0, [sp, #16]
 8019b5e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8019b62:	213b      	movs	r1, #59	@ 0x3b
 8019b64:	f000 fbc2 	bl	801a2ec <rcutils_split>
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	d1e5      	bne.n	8019b38 <rcl_get_discovery_static_peers+0x20>
 8019b6c:	9905      	ldr	r1, [sp, #20]
 8019b6e:	462a      	mov	r2, r5
 8019b70:	4620      	mov	r0, r4
 8019b72:	f000 fcc3 	bl	801a4fc <rmw_discovery_options_init>
 8019b76:	4606      	mov	r6, r0
 8019b78:	bb90      	cbnz	r0, 8019be0 <rcl_get_discovery_static_peers+0xc8>
 8019b7a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019b7e:	f1b9 0f00 	cmp.w	r9, #0
 8019b82:	d026      	beq.n	8019bd2 <rcl_get_discovery_static_peers+0xba>
 8019b84:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019b88:	4680      	mov	r8, r0
 8019b8a:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8019b8e:	4628      	mov	r0, r5
 8019b90:	f7e6 fb9e 	bl	80002d0 <strlen>
 8019b94:	28ff      	cmp	r0, #255	@ 0xff
 8019b96:	4629      	mov	r1, r5
 8019b98:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8019b9c:	d816      	bhi.n	8019bcc <rcl_get_discovery_static_peers+0xb4>
 8019b9e:	6860      	ldr	r0, [r4, #4]
 8019ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019ba4:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8019ba8:	f001 fe7d 	bl	801b8a6 <strncpy>
 8019bac:	6863      	ldr	r3, [r4, #4]
 8019bae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019bb2:	3601      	adds	r6, #1
 8019bb4:	442b      	add	r3, r5
 8019bb6:	454e      	cmp	r6, r9
 8019bb8:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8019bbc:	d209      	bcs.n	8019bd2 <rcl_get_discovery_static_peers+0xba>
 8019bbe:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019bc2:	e7e2      	b.n	8019b8a <rcl_get_discovery_static_peers+0x72>
 8019bc4:	200b      	movs	r0, #11
 8019bc6:	b00c      	add	sp, #48	@ 0x30
 8019bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bcc:	3601      	adds	r6, #1
 8019bce:	454e      	cmp	r6, r9
 8019bd0:	d3db      	bcc.n	8019b8a <rcl_get_discovery_static_peers+0x72>
 8019bd2:	4638      	mov	r0, r7
 8019bd4:	f000 fc6c 	bl	801a4b0 <rcutils_string_array_fini>
 8019bd8:	3800      	subs	r0, #0
 8019bda:	bf18      	it	ne
 8019bdc:	2001      	movne	r0, #1
 8019bde:	e7ac      	b.n	8019b3a <rcl_get_discovery_static_peers+0x22>
 8019be0:	f7f9 fda0 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8019be4:	e7a9      	b.n	8019b3a <rcl_get_discovery_static_peers+0x22>
 8019be6:	bf00      	nop
 8019be8:	08021380 	.word	0x08021380

08019bec <rcl_get_default_domain_id>:
 8019bec:	b530      	push	{r4, r5, lr}
 8019bee:	b083      	sub	sp, #12
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	9300      	str	r3, [sp, #0]
 8019bf4:	b1f0      	cbz	r0, 8019c34 <rcl_get_default_domain_id+0x48>
 8019bf6:	4604      	mov	r4, r0
 8019bf8:	4669      	mov	r1, sp
 8019bfa:	4812      	ldr	r0, [pc, #72]	@ (8019c44 <rcl_get_default_domain_id+0x58>)
 8019bfc:	f7fc fd0a 	bl	8016614 <rcutils_get_env>
 8019c00:	4602      	mov	r2, r0
 8019c02:	b108      	cbz	r0, 8019c08 <rcl_get_default_domain_id+0x1c>
 8019c04:	2001      	movs	r0, #1
 8019c06:	e004      	b.n	8019c12 <rcl_get_default_domain_id+0x26>
 8019c08:	9800      	ldr	r0, [sp, #0]
 8019c0a:	b108      	cbz	r0, 8019c10 <rcl_get_default_domain_id+0x24>
 8019c0c:	7803      	ldrb	r3, [r0, #0]
 8019c0e:	b913      	cbnz	r3, 8019c16 <rcl_get_default_domain_id+0x2a>
 8019c10:	2000      	movs	r0, #0
 8019c12:	b003      	add	sp, #12
 8019c14:	bd30      	pop	{r4, r5, pc}
 8019c16:	a901      	add	r1, sp, #4
 8019c18:	9201      	str	r2, [sp, #4]
 8019c1a:	f001 fc0d 	bl	801b438 <strtoul>
 8019c1e:	4605      	mov	r5, r0
 8019c20:	b158      	cbz	r0, 8019c3a <rcl_get_default_domain_id+0x4e>
 8019c22:	1c43      	adds	r3, r0, #1
 8019c24:	d104      	bne.n	8019c30 <rcl_get_default_domain_id+0x44>
 8019c26:	f001 febd 	bl	801b9a4 <__errno>
 8019c2a:	6803      	ldr	r3, [r0, #0]
 8019c2c:	2b22      	cmp	r3, #34	@ 0x22
 8019c2e:	d0e9      	beq.n	8019c04 <rcl_get_default_domain_id+0x18>
 8019c30:	6025      	str	r5, [r4, #0]
 8019c32:	e7ed      	b.n	8019c10 <rcl_get_default_domain_id+0x24>
 8019c34:	200b      	movs	r0, #11
 8019c36:	b003      	add	sp, #12
 8019c38:	bd30      	pop	{r4, r5, pc}
 8019c3a:	9b01      	ldr	r3, [sp, #4]
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d0f6      	beq.n	8019c30 <rcl_get_default_domain_id+0x44>
 8019c42:	e7df      	b.n	8019c04 <rcl_get_default_domain_id+0x18>
 8019c44:	08021460 	.word	0x08021460

08019c48 <rcl_expand_topic_name>:
 8019c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4c:	b08b      	sub	sp, #44	@ 0x2c
 8019c4e:	9306      	str	r3, [sp, #24]
 8019c50:	2800      	cmp	r0, #0
 8019c52:	f000 80ad 	beq.w	8019db0 <rcl_expand_topic_name+0x168>
 8019c56:	460e      	mov	r6, r1
 8019c58:	2900      	cmp	r1, #0
 8019c5a:	f000 80a9 	beq.w	8019db0 <rcl_expand_topic_name+0x168>
 8019c5e:	4617      	mov	r7, r2
 8019c60:	2a00      	cmp	r2, #0
 8019c62:	f000 80a5 	beq.w	8019db0 <rcl_expand_topic_name+0x168>
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	f000 80a2 	beq.w	8019db0 <rcl_expand_topic_name+0x168>
 8019c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	f000 809e 	beq.w	8019db0 <rcl_expand_topic_name+0x168>
 8019c74:	2200      	movs	r2, #0
 8019c76:	a909      	add	r1, sp, #36	@ 0x24
 8019c78:	4680      	mov	r8, r0
 8019c7a:	f000 fa45 	bl	801a108 <rcl_validate_topic_name>
 8019c7e:	4605      	mov	r5, r0
 8019c80:	2800      	cmp	r0, #0
 8019c82:	f040 8096 	bne.w	8019db2 <rcl_expand_topic_name+0x16a>
 8019c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	f040 809a 	bne.w	8019dc2 <rcl_expand_topic_name+0x17a>
 8019c8e:	4602      	mov	r2, r0
 8019c90:	a909      	add	r1, sp, #36	@ 0x24
 8019c92:	4630      	mov	r0, r6
 8019c94:	f7fd f916 	bl	8016ec4 <rmw_validate_node_name>
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	f040 808e 	bne.w	8019dba <rcl_expand_topic_name+0x172>
 8019c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ca0:	2a00      	cmp	r2, #0
 8019ca2:	f040 8093 	bne.w	8019dcc <rcl_expand_topic_name+0x184>
 8019ca6:	a909      	add	r1, sp, #36	@ 0x24
 8019ca8:	4638      	mov	r0, r7
 8019caa:	f7fd f8ed 	bl	8016e88 <rmw_validate_namespace>
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	f040 8083 	bne.w	8019dba <rcl_expand_topic_name+0x172>
 8019cb4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019cb6:	2d00      	cmp	r5, #0
 8019cb8:	f040 80f5 	bne.w	8019ea6 <rcl_expand_topic_name+0x25e>
 8019cbc:	217b      	movs	r1, #123	@ 0x7b
 8019cbe:	4640      	mov	r0, r8
 8019cc0:	f001 fdd2 	bl	801b868 <strchr>
 8019cc4:	f898 3000 	ldrb.w	r3, [r8]
 8019cc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8019cca:	4604      	mov	r4, r0
 8019ccc:	f000 809f 	beq.w	8019e0e <rcl_expand_topic_name+0x1c6>
 8019cd0:	2b7e      	cmp	r3, #126	@ 0x7e
 8019cd2:	f040 80ea 	bne.w	8019eaa <rcl_expand_topic_name+0x262>
 8019cd6:	4638      	mov	r0, r7
 8019cd8:	f7e6 fafa 	bl	80002d0 <strlen>
 8019cdc:	4a86      	ldr	r2, [pc, #536]	@ (8019ef8 <rcl_expand_topic_name+0x2b0>)
 8019cde:	4b87      	ldr	r3, [pc, #540]	@ (8019efc <rcl_expand_topic_name+0x2b4>)
 8019ce0:	2801      	cmp	r0, #1
 8019ce2:	bf08      	it	eq
 8019ce4:	4613      	moveq	r3, r2
 8019ce6:	9302      	str	r3, [sp, #8]
 8019ce8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019cea:	9300      	str	r3, [sp, #0]
 8019cec:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019cf0:	f108 0301 	add.w	r3, r8, #1
 8019cf4:	9305      	str	r3, [sp, #20]
 8019cf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019cfa:	9301      	str	r3, [sp, #4]
 8019cfc:	ab14      	add	r3, sp, #80	@ 0x50
 8019cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019d00:	f7fc fca0 	bl	8016644 <rcutils_format_string_limit>
 8019d04:	4682      	mov	sl, r0
 8019d06:	2800      	cmp	r0, #0
 8019d08:	f000 80e1 	beq.w	8019ece <rcl_expand_topic_name+0x286>
 8019d0c:	2c00      	cmp	r4, #0
 8019d0e:	f000 8085 	beq.w	8019e1c <rcl_expand_topic_name+0x1d4>
 8019d12:	217b      	movs	r1, #123	@ 0x7b
 8019d14:	f001 fda8 	bl	801b868 <strchr>
 8019d18:	46d1      	mov	r9, sl
 8019d1a:	4604      	mov	r4, r0
 8019d1c:	9507      	str	r5, [sp, #28]
 8019d1e:	464d      	mov	r5, r9
 8019d20:	2c00      	cmp	r4, #0
 8019d22:	f000 80a1 	beq.w	8019e68 <rcl_expand_topic_name+0x220>
 8019d26:	217d      	movs	r1, #125	@ 0x7d
 8019d28:	4628      	mov	r0, r5
 8019d2a:	f001 fd9d 	bl	801b868 <strchr>
 8019d2e:	eba0 0904 	sub.w	r9, r0, r4
 8019d32:	f109 0b01 	add.w	fp, r9, #1
 8019d36:	4872      	ldr	r0, [pc, #456]	@ (8019f00 <rcl_expand_topic_name+0x2b8>)
 8019d38:	465a      	mov	r2, fp
 8019d3a:	4621      	mov	r1, r4
 8019d3c:	f001 fda1 	bl	801b882 <strncmp>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d069      	beq.n	8019e18 <rcl_expand_topic_name+0x1d0>
 8019d44:	486f      	ldr	r0, [pc, #444]	@ (8019f04 <rcl_expand_topic_name+0x2bc>)
 8019d46:	465a      	mov	r2, fp
 8019d48:	4621      	mov	r1, r4
 8019d4a:	f001 fd9a 	bl	801b882 <strncmp>
 8019d4e:	b130      	cbz	r0, 8019d5e <rcl_expand_topic_name+0x116>
 8019d50:	486d      	ldr	r0, [pc, #436]	@ (8019f08 <rcl_expand_topic_name+0x2c0>)
 8019d52:	465a      	mov	r2, fp
 8019d54:	4621      	mov	r1, r4
 8019d56:	f001 fd94 	bl	801b882 <strncmp>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d138      	bne.n	8019dd0 <rcl_expand_topic_name+0x188>
 8019d5e:	46b9      	mov	r9, r7
 8019d60:	ab16      	add	r3, sp, #88	@ 0x58
 8019d62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019d6a:	ab14      	add	r3, sp, #80	@ 0x50
 8019d6c:	4620      	mov	r0, r4
 8019d6e:	cb0c      	ldmia	r3, {r2, r3}
 8019d70:	4659      	mov	r1, fp
 8019d72:	f7fc fdbb 	bl	80168ec <rcutils_strndup>
 8019d76:	4604      	mov	r4, r0
 8019d78:	2800      	cmp	r0, #0
 8019d7a:	f000 8099 	beq.w	8019eb0 <rcl_expand_topic_name+0x268>
 8019d7e:	464a      	mov	r2, r9
 8019d80:	4628      	mov	r0, r5
 8019d82:	ab14      	add	r3, sp, #80	@ 0x50
 8019d84:	4621      	mov	r1, r4
 8019d86:	f7fc fc97 	bl	80166b8 <rcutils_repl_str>
 8019d8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019d8c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019d8e:	4605      	mov	r5, r0
 8019d90:	4620      	mov	r0, r4
 8019d92:	4798      	blx	r3
 8019d94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019d96:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019d98:	4650      	mov	r0, sl
 8019d9a:	4798      	blx	r3
 8019d9c:	2d00      	cmp	r5, #0
 8019d9e:	f000 8091 	beq.w	8019ec4 <rcl_expand_topic_name+0x27c>
 8019da2:	217b      	movs	r1, #123	@ 0x7b
 8019da4:	4628      	mov	r0, r5
 8019da6:	f001 fd5f 	bl	801b868 <strchr>
 8019daa:	46aa      	mov	sl, r5
 8019dac:	4604      	mov	r4, r0
 8019dae:	e7b7      	b.n	8019d20 <rcl_expand_topic_name+0xd8>
 8019db0:	250b      	movs	r5, #11
 8019db2:	4628      	mov	r0, r5
 8019db4:	b00b      	add	sp, #44	@ 0x2c
 8019db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dba:	f7f9 fcb3 	bl	8013724 <rcl_convert_rmw_ret_to_rcl_ret>
 8019dbe:	4605      	mov	r5, r0
 8019dc0:	e7f7      	b.n	8019db2 <rcl_expand_topic_name+0x16a>
 8019dc2:	2567      	movs	r5, #103	@ 0x67
 8019dc4:	4628      	mov	r0, r5
 8019dc6:	b00b      	add	sp, #44	@ 0x2c
 8019dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dcc:	25c9      	movs	r5, #201	@ 0xc9
 8019dce:	e7f0      	b.n	8019db2 <rcl_expand_topic_name+0x16a>
 8019dd0:	f109 32ff 	add.w	r2, r9, #4294967295
 8019dd4:	9806      	ldr	r0, [sp, #24]
 8019dd6:	1c61      	adds	r1, r4, #1
 8019dd8:	f7fc fea4 	bl	8016b24 <rcutils_string_map_getn>
 8019ddc:	4681      	mov	r9, r0
 8019dde:	2800      	cmp	r0, #0
 8019de0:	d1be      	bne.n	8019d60 <rcl_expand_topic_name+0x118>
 8019de2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019de4:	ab16      	add	r3, sp, #88	@ 0x58
 8019de6:	6010      	str	r0, [r2, #0]
 8019de8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019dec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019df0:	ab14      	add	r3, sp, #80	@ 0x50
 8019df2:	cb0c      	ldmia	r3, {r2, r3}
 8019df4:	4659      	mov	r1, fp
 8019df6:	4620      	mov	r0, r4
 8019df8:	f7fc fd78 	bl	80168ec <rcutils_strndup>
 8019dfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019dfe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019e00:	4798      	blx	r3
 8019e02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019e04:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019e06:	4650      	mov	r0, sl
 8019e08:	4798      	blx	r3
 8019e0a:	2569      	movs	r5, #105	@ 0x69
 8019e0c:	e7d1      	b.n	8019db2 <rcl_expand_topic_name+0x16a>
 8019e0e:	2800      	cmp	r0, #0
 8019e10:	d061      	beq.n	8019ed6 <rcl_expand_topic_name+0x28e>
 8019e12:	46c1      	mov	r9, r8
 8019e14:	46aa      	mov	sl, r5
 8019e16:	e781      	b.n	8019d1c <rcl_expand_topic_name+0xd4>
 8019e18:	46b1      	mov	r9, r6
 8019e1a:	e7a1      	b.n	8019d60 <rcl_expand_topic_name+0x118>
 8019e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8019e20:	2b2f      	cmp	r3, #47	@ 0x2f
 8019e22:	d01d      	beq.n	8019e60 <rcl_expand_topic_name+0x218>
 8019e24:	4638      	mov	r0, r7
 8019e26:	f7e6 fa53 	bl	80002d0 <strlen>
 8019e2a:	4a38      	ldr	r2, [pc, #224]	@ (8019f0c <rcl_expand_topic_name+0x2c4>)
 8019e2c:	4b38      	ldr	r3, [pc, #224]	@ (8019f10 <rcl_expand_topic_name+0x2c8>)
 8019e2e:	f8cd a010 	str.w	sl, [sp, #16]
 8019e32:	2801      	cmp	r0, #1
 8019e34:	bf18      	it	ne
 8019e36:	4613      	movne	r3, r2
 8019e38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019e3c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019e40:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019e42:	9703      	str	r7, [sp, #12]
 8019e44:	9200      	str	r2, [sp, #0]
 8019e46:	ab14      	add	r3, sp, #80	@ 0x50
 8019e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019e4a:	f7fc fbfb 	bl	8016644 <rcutils_format_string_limit>
 8019e4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019e50:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019e52:	4604      	mov	r4, r0
 8019e54:	4650      	mov	r0, sl
 8019e56:	4798      	blx	r3
 8019e58:	46a2      	mov	sl, r4
 8019e5a:	4653      	mov	r3, sl
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d036      	beq.n	8019ece <rcl_expand_topic_name+0x286>
 8019e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019e62:	f8c3 a000 	str.w	sl, [r3]
 8019e66:	e7a4      	b.n	8019db2 <rcl_expand_topic_name+0x16a>
 8019e68:	4653      	mov	r3, sl
 8019e6a:	9d07      	ldr	r5, [sp, #28]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d1d5      	bne.n	8019e1c <rcl_expand_topic_name+0x1d4>
 8019e70:	f898 3000 	ldrb.w	r3, [r8]
 8019e74:	2b2f      	cmp	r3, #47	@ 0x2f
 8019e76:	d0f3      	beq.n	8019e60 <rcl_expand_topic_name+0x218>
 8019e78:	4638      	mov	r0, r7
 8019e7a:	f7e6 fa29 	bl	80002d0 <strlen>
 8019e7e:	4a23      	ldr	r2, [pc, #140]	@ (8019f0c <rcl_expand_topic_name+0x2c4>)
 8019e80:	4b23      	ldr	r3, [pc, #140]	@ (8019f10 <rcl_expand_topic_name+0x2c8>)
 8019e82:	f8cd 8010 	str.w	r8, [sp, #16]
 8019e86:	2801      	cmp	r0, #1
 8019e88:	bf18      	it	ne
 8019e8a:	4613      	movne	r3, r2
 8019e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019e90:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019e94:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019e96:	9703      	str	r7, [sp, #12]
 8019e98:	9200      	str	r2, [sp, #0]
 8019e9a:	ab14      	add	r3, sp, #80	@ 0x50
 8019e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019e9e:	f7fc fbd1 	bl	8016644 <rcutils_format_string_limit>
 8019ea2:	4682      	mov	sl, r0
 8019ea4:	e7d9      	b.n	8019e5a <rcl_expand_topic_name+0x212>
 8019ea6:	25ca      	movs	r5, #202	@ 0xca
 8019ea8:	e783      	b.n	8019db2 <rcl_expand_topic_name+0x16a>
 8019eaa:	2800      	cmp	r0, #0
 8019eac:	d1b1      	bne.n	8019e12 <rcl_expand_topic_name+0x1ca>
 8019eae:	e7e3      	b.n	8019e78 <rcl_expand_topic_name+0x230>
 8019eb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019eb2:	6018      	str	r0, [r3, #0]
 8019eb4:	f7f3 fdfc 	bl	800dab0 <rcutils_reset_error>
 8019eb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019eba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019ebc:	4650      	mov	r0, sl
 8019ebe:	4798      	blx	r3
 8019ec0:	250a      	movs	r5, #10
 8019ec2:	e776      	b.n	8019db2 <rcl_expand_topic_name+0x16a>
 8019ec4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019ec6:	601d      	str	r5, [r3, #0]
 8019ec8:	f7f3 fdf2 	bl	800dab0 <rcutils_reset_error>
 8019ecc:	e7f8      	b.n	8019ec0 <rcl_expand_topic_name+0x278>
 8019ece:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	6013      	str	r3, [r2, #0]
 8019ed4:	e7f4      	b.n	8019ec0 <rcl_expand_topic_name+0x278>
 8019ed6:	ab17      	add	r3, sp, #92	@ 0x5c
 8019ed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019edc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019ee0:	ab14      	add	r3, sp, #80	@ 0x50
 8019ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019ee4:	4640      	mov	r0, r8
 8019ee6:	f7fc fccb 	bl	8016880 <rcutils_strdup>
 8019eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019eec:	6018      	str	r0, [r3, #0]
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	f47f af5f 	bne.w	8019db2 <rcl_expand_topic_name+0x16a>
 8019ef4:	e7e8      	b.n	8019ec8 <rcl_expand_topic_name+0x280>
 8019ef6:	bf00      	nop
 8019ef8:	08020c94 	.word	0x08020c94
 8019efc:	08021470 	.word	0x08021470
 8019f00:	08021478 	.word	0x08021478
 8019f04:	08021480 	.word	0x08021480
 8019f08:	08021488 	.word	0x08021488
 8019f0c:	08020f84 	.word	0x08020f84
 8019f10:	08020ca4 	.word	0x08020ca4

08019f14 <rcl_get_default_topic_name_substitutions>:
 8019f14:	2800      	cmp	r0, #0
 8019f16:	bf0c      	ite	eq
 8019f18:	200b      	moveq	r0, #11
 8019f1a:	2000      	movne	r0, #0
 8019f1c:	4770      	bx	lr
 8019f1e:	bf00      	nop

08019f20 <rcl_get_zero_initialized_guard_condition>:
 8019f20:	4a03      	ldr	r2, [pc, #12]	@ (8019f30 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019f22:	4603      	mov	r3, r0
 8019f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019f28:	e883 0003 	stmia.w	r3, {r0, r1}
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	4770      	bx	lr
 8019f30:	08022104 	.word	0x08022104

08019f34 <rcl_guard_condition_init>:
 8019f34:	b082      	sub	sp, #8
 8019f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f38:	b087      	sub	sp, #28
 8019f3a:	ac0c      	add	r4, sp, #48	@ 0x30
 8019f3c:	e884 000c 	stmia.w	r4, {r2, r3}
 8019f40:	46a6      	mov	lr, r4
 8019f42:	460d      	mov	r5, r1
 8019f44:	4604      	mov	r4, r0
 8019f46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019f4a:	f10d 0c04 	add.w	ip, sp, #4
 8019f4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f52:	f8de 3000 	ldr.w	r3, [lr]
 8019f56:	f8cc 3000 	str.w	r3, [ip]
 8019f5a:	a801      	add	r0, sp, #4
 8019f5c:	f7f3 fd7c 	bl	800da58 <rcutils_allocator_is_valid>
 8019f60:	b338      	cbz	r0, 8019fb2 <rcl_guard_condition_init+0x7e>
 8019f62:	b334      	cbz	r4, 8019fb2 <rcl_guard_condition_init+0x7e>
 8019f64:	6866      	ldr	r6, [r4, #4]
 8019f66:	b9ee      	cbnz	r6, 8019fa4 <rcl_guard_condition_init+0x70>
 8019f68:	b31d      	cbz	r5, 8019fb2 <rcl_guard_condition_init+0x7e>
 8019f6a:	4628      	mov	r0, r5
 8019f6c:	f7f9 fbf4 	bl	8013758 <rcl_context_is_valid>
 8019f70:	b308      	cbz	r0, 8019fb6 <rcl_guard_condition_init+0x82>
 8019f72:	9b01      	ldr	r3, [sp, #4]
 8019f74:	9905      	ldr	r1, [sp, #20]
 8019f76:	201c      	movs	r0, #28
 8019f78:	4798      	blx	r3
 8019f7a:	4607      	mov	r7, r0
 8019f7c:	6060      	str	r0, [r4, #4]
 8019f7e:	b310      	cbz	r0, 8019fc6 <rcl_guard_condition_init+0x92>
 8019f80:	6828      	ldr	r0, [r5, #0]
 8019f82:	3028      	adds	r0, #40	@ 0x28
 8019f84:	f000 fc06 	bl	801a794 <rmw_create_guard_condition>
 8019f88:	6038      	str	r0, [r7, #0]
 8019f8a:	6860      	ldr	r0, [r4, #4]
 8019f8c:	6807      	ldr	r7, [r0, #0]
 8019f8e:	b1a7      	cbz	r7, 8019fba <rcl_guard_condition_init+0x86>
 8019f90:	2301      	movs	r3, #1
 8019f92:	ac01      	add	r4, sp, #4
 8019f94:	7103      	strb	r3, [r0, #4]
 8019f96:	f100 0708 	add.w	r7, r0, #8
 8019f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019f9e:	6823      	ldr	r3, [r4, #0]
 8019fa0:	603b      	str	r3, [r7, #0]
 8019fa2:	e000      	b.n	8019fa6 <rcl_guard_condition_init+0x72>
 8019fa4:	2664      	movs	r6, #100	@ 0x64
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	b007      	add	sp, #28
 8019faa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019fae:	b002      	add	sp, #8
 8019fb0:	4770      	bx	lr
 8019fb2:	260b      	movs	r6, #11
 8019fb4:	e7f7      	b.n	8019fa6 <rcl_guard_condition_init+0x72>
 8019fb6:	2665      	movs	r6, #101	@ 0x65
 8019fb8:	e7f5      	b.n	8019fa6 <rcl_guard_condition_init+0x72>
 8019fba:	9b02      	ldr	r3, [sp, #8]
 8019fbc:	9905      	ldr	r1, [sp, #20]
 8019fbe:	4798      	blx	r3
 8019fc0:	2601      	movs	r6, #1
 8019fc2:	6067      	str	r7, [r4, #4]
 8019fc4:	e7ef      	b.n	8019fa6 <rcl_guard_condition_init+0x72>
 8019fc6:	260a      	movs	r6, #10
 8019fc8:	e7ed      	b.n	8019fa6 <rcl_guard_condition_init+0x72>
 8019fca:	bf00      	nop

08019fcc <rcl_guard_condition_init_from_rmw>:
 8019fcc:	b082      	sub	sp, #8
 8019fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fd2:	b086      	sub	sp, #24
 8019fd4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019fd8:	4604      	mov	r4, r0
 8019fda:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019fde:	460e      	mov	r6, r1
 8019fe0:	4617      	mov	r7, r2
 8019fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019fe6:	f10d 0e04 	add.w	lr, sp, #4
 8019fea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019fee:	f8dc 3000 	ldr.w	r3, [ip]
 8019ff2:	f8ce 3000 	str.w	r3, [lr]
 8019ff6:	a801      	add	r0, sp, #4
 8019ff8:	f7f3 fd2e 	bl	800da58 <rcutils_allocator_is_valid>
 8019ffc:	b350      	cbz	r0, 801a054 <rcl_guard_condition_init_from_rmw+0x88>
 8019ffe:	b34c      	cbz	r4, 801a054 <rcl_guard_condition_init_from_rmw+0x88>
 801a000:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a004:	f1b8 0f00 	cmp.w	r8, #0
 801a008:	d11e      	bne.n	801a048 <rcl_guard_condition_init_from_rmw+0x7c>
 801a00a:	b31f      	cbz	r7, 801a054 <rcl_guard_condition_init_from_rmw+0x88>
 801a00c:	4638      	mov	r0, r7
 801a00e:	f7f9 fba3 	bl	8013758 <rcl_context_is_valid>
 801a012:	b328      	cbz	r0, 801a060 <rcl_guard_condition_init_from_rmw+0x94>
 801a014:	9b01      	ldr	r3, [sp, #4]
 801a016:	9905      	ldr	r1, [sp, #20]
 801a018:	201c      	movs	r0, #28
 801a01a:	4798      	blx	r3
 801a01c:	4605      	mov	r5, r0
 801a01e:	6060      	str	r0, [r4, #4]
 801a020:	b358      	cbz	r0, 801a07a <rcl_guard_condition_init_from_rmw+0xae>
 801a022:	b1fe      	cbz	r6, 801a064 <rcl_guard_condition_init_from_rmw+0x98>
 801a024:	6006      	str	r6, [r0, #0]
 801a026:	f880 8004 	strb.w	r8, [r0, #4]
 801a02a:	ac01      	add	r4, sp, #4
 801a02c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a02e:	f105 0c08 	add.w	ip, r5, #8
 801a032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a036:	6823      	ldr	r3, [r4, #0]
 801a038:	f8cc 3000 	str.w	r3, [ip]
 801a03c:	2000      	movs	r0, #0
 801a03e:	b006      	add	sp, #24
 801a040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a044:	b002      	add	sp, #8
 801a046:	4770      	bx	lr
 801a048:	2064      	movs	r0, #100	@ 0x64
 801a04a:	b006      	add	sp, #24
 801a04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a050:	b002      	add	sp, #8
 801a052:	4770      	bx	lr
 801a054:	200b      	movs	r0, #11
 801a056:	b006      	add	sp, #24
 801a058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a05c:	b002      	add	sp, #8
 801a05e:	4770      	bx	lr
 801a060:	2065      	movs	r0, #101	@ 0x65
 801a062:	e7f2      	b.n	801a04a <rcl_guard_condition_init_from_rmw+0x7e>
 801a064:	6838      	ldr	r0, [r7, #0]
 801a066:	3028      	adds	r0, #40	@ 0x28
 801a068:	f000 fb94 	bl	801a794 <rmw_create_guard_condition>
 801a06c:	6028      	str	r0, [r5, #0]
 801a06e:	6865      	ldr	r5, [r4, #4]
 801a070:	682e      	ldr	r6, [r5, #0]
 801a072:	b126      	cbz	r6, 801a07e <rcl_guard_condition_init_from_rmw+0xb2>
 801a074:	2301      	movs	r3, #1
 801a076:	712b      	strb	r3, [r5, #4]
 801a078:	e7d7      	b.n	801a02a <rcl_guard_condition_init_from_rmw+0x5e>
 801a07a:	200a      	movs	r0, #10
 801a07c:	e7e5      	b.n	801a04a <rcl_guard_condition_init_from_rmw+0x7e>
 801a07e:	4628      	mov	r0, r5
 801a080:	9b02      	ldr	r3, [sp, #8]
 801a082:	9905      	ldr	r1, [sp, #20]
 801a084:	4798      	blx	r3
 801a086:	2001      	movs	r0, #1
 801a088:	6066      	str	r6, [r4, #4]
 801a08a:	e7de      	b.n	801a04a <rcl_guard_condition_init_from_rmw+0x7e>

0801a08c <rcl_guard_condition_fini>:
 801a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a08e:	b1d8      	cbz	r0, 801a0c8 <rcl_guard_condition_fini+0x3c>
 801a090:	4604      	mov	r4, r0
 801a092:	6840      	ldr	r0, [r0, #4]
 801a094:	b158      	cbz	r0, 801a0ae <rcl_guard_condition_fini+0x22>
 801a096:	6803      	ldr	r3, [r0, #0]
 801a098:	68c6      	ldr	r6, [r0, #12]
 801a09a:	6987      	ldr	r7, [r0, #24]
 801a09c:	b153      	cbz	r3, 801a0b4 <rcl_guard_condition_fini+0x28>
 801a09e:	7905      	ldrb	r5, [r0, #4]
 801a0a0:	b955      	cbnz	r5, 801a0b8 <rcl_guard_condition_fini+0x2c>
 801a0a2:	4639      	mov	r1, r7
 801a0a4:	47b0      	blx	r6
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	6063      	str	r3, [r4, #4]
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ae:	4605      	mov	r5, r0
 801a0b0:	4628      	mov	r0, r5
 801a0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0b4:	461d      	mov	r5, r3
 801a0b6:	e7f4      	b.n	801a0a2 <rcl_guard_condition_fini+0x16>
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f000 fb7f 	bl	801a7bc <rmw_destroy_guard_condition>
 801a0be:	1e05      	subs	r5, r0, #0
 801a0c0:	bf18      	it	ne
 801a0c2:	2501      	movne	r5, #1
 801a0c4:	6860      	ldr	r0, [r4, #4]
 801a0c6:	e7ec      	b.n	801a0a2 <rcl_guard_condition_fini+0x16>
 801a0c8:	250b      	movs	r5, #11
 801a0ca:	4628      	mov	r0, r5
 801a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ce:	bf00      	nop

0801a0d0 <rcl_guard_condition_get_default_options>:
 801a0d0:	b510      	push	{r4, lr}
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	f7f3 fc94 	bl	800da00 <rcutils_get_default_allocator>
 801a0d8:	4620      	mov	r0, r4
 801a0da:	bd10      	pop	{r4, pc}

0801a0dc <rcl_trigger_guard_condition>:
 801a0dc:	b148      	cbz	r0, 801a0f2 <rcl_trigger_guard_condition+0x16>
 801a0de:	b508      	push	{r3, lr}
 801a0e0:	6843      	ldr	r3, [r0, #4]
 801a0e2:	b143      	cbz	r3, 801a0f6 <rcl_trigger_guard_condition+0x1a>
 801a0e4:	6818      	ldr	r0, [r3, #0]
 801a0e6:	f000 fb7d 	bl	801a7e4 <rmw_trigger_guard_condition>
 801a0ea:	3800      	subs	r0, #0
 801a0ec:	bf18      	it	ne
 801a0ee:	2001      	movne	r0, #1
 801a0f0:	bd08      	pop	{r3, pc}
 801a0f2:	200b      	movs	r0, #11
 801a0f4:	4770      	bx	lr
 801a0f6:	200b      	movs	r0, #11
 801a0f8:	bd08      	pop	{r3, pc}
 801a0fa:	bf00      	nop

0801a0fc <rcl_guard_condition_get_rmw_handle>:
 801a0fc:	b110      	cbz	r0, 801a104 <rcl_guard_condition_get_rmw_handle+0x8>
 801a0fe:	6840      	ldr	r0, [r0, #4]
 801a100:	b100      	cbz	r0, 801a104 <rcl_guard_condition_get_rmw_handle+0x8>
 801a102:	6800      	ldr	r0, [r0, #0]
 801a104:	4770      	bx	lr
 801a106:	bf00      	nop

0801a108 <rcl_validate_topic_name>:
 801a108:	2800      	cmp	r0, #0
 801a10a:	d06b      	beq.n	801a1e4 <rcl_validate_topic_name+0xdc>
 801a10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a110:	460d      	mov	r5, r1
 801a112:	2900      	cmp	r1, #0
 801a114:	d06d      	beq.n	801a1f2 <rcl_validate_topic_name+0xea>
 801a116:	4616      	mov	r6, r2
 801a118:	4604      	mov	r4, r0
 801a11a:	f7e6 f8d9 	bl	80002d0 <strlen>
 801a11e:	b190      	cbz	r0, 801a146 <rcl_validate_topic_name+0x3e>
 801a120:	7821      	ldrb	r1, [r4, #0]
 801a122:	4a71      	ldr	r2, [pc, #452]	@ (801a2e8 <rcl_validate_topic_name+0x1e0>)
 801a124:	5c53      	ldrb	r3, [r2, r1]
 801a126:	f013 0304 	ands.w	r3, r3, #4
 801a12a:	d15d      	bne.n	801a1e8 <rcl_validate_topic_name+0xe0>
 801a12c:	1e47      	subs	r7, r0, #1
 801a12e:	f814 c007 	ldrb.w	ip, [r4, r7]
 801a132:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801a136:	d10d      	bne.n	801a154 <rcl_validate_topic_name+0x4c>
 801a138:	2302      	movs	r3, #2
 801a13a:	602b      	str	r3, [r5, #0]
 801a13c:	b146      	cbz	r6, 801a150 <rcl_validate_topic_name+0x48>
 801a13e:	6037      	str	r7, [r6, #0]
 801a140:	2000      	movs	r0, #0
 801a142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a146:	2301      	movs	r3, #1
 801a148:	602b      	str	r3, [r5, #0]
 801a14a:	b10e      	cbz	r6, 801a150 <rcl_validate_topic_name+0x48>
 801a14c:	2300      	movs	r3, #0
 801a14e:	6033      	str	r3, [r6, #0]
 801a150:	2000      	movs	r0, #0
 801a152:	e7f6      	b.n	801a142 <rcl_validate_topic_name+0x3a>
 801a154:	f104 38ff 	add.w	r8, r4, #4294967295
 801a158:	469a      	mov	sl, r3
 801a15a:	469e      	mov	lr, r3
 801a15c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801a160:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801a164:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801a168:	d85b      	bhi.n	801a222 <rcl_validate_topic_name+0x11a>
 801a16a:	e8df f00c 	tbb	[pc, ip]
 801a16e:	4463      	.short	0x4463
 801a170:	44444444 	.word	0x44444444
 801a174:	44444444 	.word	0x44444444
 801a178:	5a5a5a44 	.word	0x5a5a5a44
 801a17c:	5a5a5a5a 	.word	0x5a5a5a5a
 801a180:	44444444 	.word	0x44444444
 801a184:	44444444 	.word	0x44444444
 801a188:	44444444 	.word	0x44444444
 801a18c:	44444444 	.word	0x44444444
 801a190:	44444444 	.word	0x44444444
 801a194:	44444444 	.word	0x44444444
 801a198:	5a5a4444 	.word	0x5a5a4444
 801a19c:	5a2e5a5a 	.word	0x5a2e5a5a
 801a1a0:	44444444 	.word	0x44444444
 801a1a4:	44444444 	.word	0x44444444
 801a1a8:	44444444 	.word	0x44444444
 801a1ac:	44444444 	.word	0x44444444
 801a1b0:	44444444 	.word	0x44444444
 801a1b4:	44444444 	.word	0x44444444
 801a1b8:	5a284444 	.word	0x5a284444
 801a1bc:	6b73      	.short	0x6b73
 801a1be:	f1ba 0f00 	cmp.w	sl, #0
 801a1c2:	d13a      	bne.n	801a23a <rcl_validate_topic_name+0x132>
 801a1c4:	4673      	mov	r3, lr
 801a1c6:	f04f 0a01 	mov.w	sl, #1
 801a1ca:	f10e 0e01 	add.w	lr, lr, #1
 801a1ce:	4570      	cmp	r0, lr
 801a1d0:	d1c4      	bne.n	801a15c <rcl_validate_topic_name+0x54>
 801a1d2:	f1ba 0f00 	cmp.w	sl, #0
 801a1d6:	d048      	beq.n	801a26a <rcl_validate_topic_name+0x162>
 801a1d8:	2205      	movs	r2, #5
 801a1da:	602a      	str	r2, [r5, #0]
 801a1dc:	2e00      	cmp	r6, #0
 801a1de:	d0b7      	beq.n	801a150 <rcl_validate_topic_name+0x48>
 801a1e0:	6033      	str	r3, [r6, #0]
 801a1e2:	e7b5      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a1e4:	200b      	movs	r0, #11
 801a1e6:	4770      	bx	lr
 801a1e8:	2304      	movs	r3, #4
 801a1ea:	602b      	str	r3, [r5, #0]
 801a1ec:	2e00      	cmp	r6, #0
 801a1ee:	d1ad      	bne.n	801a14c <rcl_validate_topic_name+0x44>
 801a1f0:	e7ae      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a1f2:	200b      	movs	r0, #11
 801a1f4:	e7a5      	b.n	801a142 <rcl_validate_topic_name+0x3a>
 801a1f6:	f812 c009 	ldrb.w	ip, [r2, r9]
 801a1fa:	f01c 0f04 	tst.w	ip, #4
 801a1fe:	d0e4      	beq.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a200:	f1ba 0f00 	cmp.w	sl, #0
 801a204:	d0e1      	beq.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a206:	f1be 0f00 	cmp.w	lr, #0
 801a20a:	d0de      	beq.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a20c:	f10e 3cff 	add.w	ip, lr, #4294967295
 801a210:	4563      	cmp	r3, ip
 801a212:	d1da      	bne.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a214:	2309      	movs	r3, #9
 801a216:	602b      	str	r3, [r5, #0]
 801a218:	2e00      	cmp	r6, #0
 801a21a:	d099      	beq.n	801a150 <rcl_validate_topic_name+0x48>
 801a21c:	f8c6 e000 	str.w	lr, [r6]
 801a220:	e796      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a222:	f1ba 0f00 	cmp.w	sl, #0
 801a226:	bf0c      	ite	eq
 801a228:	2303      	moveq	r3, #3
 801a22a:	2308      	movne	r3, #8
 801a22c:	602b      	str	r3, [r5, #0]
 801a22e:	2e00      	cmp	r6, #0
 801a230:	d1f4      	bne.n	801a21c <rcl_validate_topic_name+0x114>
 801a232:	e78d      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a234:	f1ba 0f00 	cmp.w	sl, #0
 801a238:	d0c7      	beq.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a23a:	2308      	movs	r3, #8
 801a23c:	602b      	str	r3, [r5, #0]
 801a23e:	2e00      	cmp	r6, #0
 801a240:	d1ec      	bne.n	801a21c <rcl_validate_topic_name+0x114>
 801a242:	e785      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a244:	f1be 0f00 	cmp.w	lr, #0
 801a248:	d0bf      	beq.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a24a:	2306      	movs	r3, #6
 801a24c:	602b      	str	r3, [r5, #0]
 801a24e:	2e00      	cmp	r6, #0
 801a250:	d1e4      	bne.n	801a21c <rcl_validate_topic_name+0x114>
 801a252:	e77d      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a254:	f1ba 0f00 	cmp.w	sl, #0
 801a258:	d104      	bne.n	801a264 <rcl_validate_topic_name+0x15c>
 801a25a:	2305      	movs	r3, #5
 801a25c:	602b      	str	r3, [r5, #0]
 801a25e:	2e00      	cmp	r6, #0
 801a260:	d1dc      	bne.n	801a21c <rcl_validate_topic_name+0x114>
 801a262:	e775      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a264:	f04f 0a00 	mov.w	sl, #0
 801a268:	e7af      	b.n	801a1ca <rcl_validate_topic_name+0xc2>
 801a26a:	297e      	cmp	r1, #126	@ 0x7e
 801a26c:	d01d      	beq.n	801a2aa <rcl_validate_topic_name+0x1a2>
 801a26e:	2101      	movs	r1, #1
 801a270:	e006      	b.n	801a280 <rcl_validate_topic_name+0x178>
 801a272:	458e      	cmp	lr, r1
 801a274:	f104 0401 	add.w	r4, r4, #1
 801a278:	f101 0301 	add.w	r3, r1, #1
 801a27c:	d912      	bls.n	801a2a4 <rcl_validate_topic_name+0x19c>
 801a27e:	4619      	mov	r1, r3
 801a280:	4557      	cmp	r7, sl
 801a282:	f10a 0a01 	add.w	sl, sl, #1
 801a286:	d0f4      	beq.n	801a272 <rcl_validate_topic_name+0x16a>
 801a288:	7823      	ldrb	r3, [r4, #0]
 801a28a:	2b2f      	cmp	r3, #47	@ 0x2f
 801a28c:	d1f1      	bne.n	801a272 <rcl_validate_topic_name+0x16a>
 801a28e:	7863      	ldrb	r3, [r4, #1]
 801a290:	5cd3      	ldrb	r3, [r2, r3]
 801a292:	075b      	lsls	r3, r3, #29
 801a294:	d5ed      	bpl.n	801a272 <rcl_validate_topic_name+0x16a>
 801a296:	2304      	movs	r3, #4
 801a298:	602b      	str	r3, [r5, #0]
 801a29a:	2e00      	cmp	r6, #0
 801a29c:	f43f af58 	beq.w	801a150 <rcl_validate_topic_name+0x48>
 801a2a0:	6031      	str	r1, [r6, #0]
 801a2a2:	e755      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	602b      	str	r3, [r5, #0]
 801a2a8:	e752      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a2aa:	4653      	mov	r3, sl
 801a2ac:	2101      	movs	r1, #1
 801a2ae:	e00a      	b.n	801a2c6 <rcl_validate_topic_name+0x1be>
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	d012      	beq.n	801a2da <rcl_validate_topic_name+0x1d2>
 801a2b4:	458e      	cmp	lr, r1
 801a2b6:	f103 0301 	add.w	r3, r3, #1
 801a2ba:	f104 0401 	add.w	r4, r4, #1
 801a2be:	f101 0001 	add.w	r0, r1, #1
 801a2c2:	d9ef      	bls.n	801a2a4 <rcl_validate_topic_name+0x19c>
 801a2c4:	4601      	mov	r1, r0
 801a2c6:	429f      	cmp	r7, r3
 801a2c8:	d0f4      	beq.n	801a2b4 <rcl_validate_topic_name+0x1ac>
 801a2ca:	7820      	ldrb	r0, [r4, #0]
 801a2cc:	282f      	cmp	r0, #47	@ 0x2f
 801a2ce:	d1ef      	bne.n	801a2b0 <rcl_validate_topic_name+0x1a8>
 801a2d0:	7860      	ldrb	r0, [r4, #1]
 801a2d2:	5c10      	ldrb	r0, [r2, r0]
 801a2d4:	0740      	lsls	r0, r0, #29
 801a2d6:	d5ed      	bpl.n	801a2b4 <rcl_validate_topic_name+0x1ac>
 801a2d8:	e7dd      	b.n	801a296 <rcl_validate_topic_name+0x18e>
 801a2da:	2207      	movs	r2, #7
 801a2dc:	602a      	str	r2, [r5, #0]
 801a2de:	2e00      	cmp	r6, #0
 801a2e0:	f47f af7e 	bne.w	801a1e0 <rcl_validate_topic_name+0xd8>
 801a2e4:	e734      	b.n	801a150 <rcl_validate_topic_name+0x48>
 801a2e6:	bf00      	nop
 801a2e8:	08022149 	.word	0x08022149

0801a2ec <rcutils_split>:
 801a2ec:	b082      	sub	sp, #8
 801a2ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f2:	b08b      	sub	sp, #44	@ 0x2c
 801a2f4:	ac14      	add	r4, sp, #80	@ 0x50
 801a2f6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801a2f8:	e884 000c 	stmia.w	r4, {r2, r3}
 801a2fc:	2f00      	cmp	r7, #0
 801a2fe:	f000 8091 	beq.w	801a424 <rcutils_split+0x138>
 801a302:	4606      	mov	r6, r0
 801a304:	2800      	cmp	r0, #0
 801a306:	d072      	beq.n	801a3ee <rcutils_split+0x102>
 801a308:	7804      	ldrb	r4, [r0, #0]
 801a30a:	2c00      	cmp	r4, #0
 801a30c:	d06f      	beq.n	801a3ee <rcutils_split+0x102>
 801a30e:	460d      	mov	r5, r1
 801a310:	f7e5 ffde 	bl	80002d0 <strlen>
 801a314:	1833      	adds	r3, r6, r0
 801a316:	1b64      	subs	r4, r4, r5
 801a318:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a31c:	4681      	mov	r9, r0
 801a31e:	fab4 f484 	clz	r4, r4
 801a322:	0964      	lsrs	r4, r4, #5
 801a324:	42ab      	cmp	r3, r5
 801a326:	bf08      	it	eq
 801a328:	f1a9 0901 	subeq.w	r9, r9, #1
 801a32c:	454c      	cmp	r4, r9
 801a32e:	d26a      	bcs.n	801a406 <rcutils_split+0x11a>
 801a330:	1933      	adds	r3, r6, r4
 801a332:	eb06 0009 	add.w	r0, r6, r9
 801a336:	2101      	movs	r1, #1
 801a338:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a33c:	42aa      	cmp	r2, r5
 801a33e:	bf08      	it	eq
 801a340:	3101      	addeq	r1, #1
 801a342:	4283      	cmp	r3, r0
 801a344:	d1f8      	bne.n	801a338 <rcutils_split+0x4c>
 801a346:	aa14      	add	r2, sp, #80	@ 0x50
 801a348:	4638      	mov	r0, r7
 801a34a:	f000 f88f 	bl	801a46c <rcutils_string_array_init>
 801a34e:	2800      	cmp	r0, #0
 801a350:	d141      	bne.n	801a3d6 <rcutils_split+0xea>
 801a352:	687a      	ldr	r2, [r7, #4]
 801a354:	4680      	mov	r8, r0
 801a356:	46a2      	mov	sl, r4
 801a358:	e002      	b.n	801a360 <rcutils_split+0x74>
 801a35a:	3401      	adds	r4, #1
 801a35c:	454c      	cmp	r4, r9
 801a35e:	d222      	bcs.n	801a3a6 <rcutils_split+0xba>
 801a360:	5d33      	ldrb	r3, [r6, r4]
 801a362:	42ab      	cmp	r3, r5
 801a364:	d1f9      	bne.n	801a35a <rcutils_split+0x6e>
 801a366:	4554      	cmp	r4, sl
 801a368:	eba4 0b0a 	sub.w	fp, r4, sl
 801a36c:	d038      	beq.n	801a3e0 <rcutils_split+0xf4>
 801a36e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a370:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a372:	9201      	str	r2, [sp, #4]
 801a374:	f10b 0002 	add.w	r0, fp, #2
 801a378:	4798      	blx	r3
 801a37a:	9a01      	ldr	r2, [sp, #4]
 801a37c:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 801a380:	687a      	ldr	r2, [r7, #4]
 801a382:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801a386:	eb06 030a 	add.w	r3, r6, sl
 801a38a:	f10b 0101 	add.w	r1, fp, #1
 801a38e:	2800      	cmp	r0, #0
 801a390:	d04e      	beq.n	801a430 <rcutils_split+0x144>
 801a392:	4a2d      	ldr	r2, [pc, #180]	@ (801a448 <rcutils_split+0x15c>)
 801a394:	f001 f980 	bl	801b698 <snprintf>
 801a398:	687a      	ldr	r2, [r7, #4]
 801a39a:	f108 0801 	add.w	r8, r8, #1
 801a39e:	3401      	adds	r4, #1
 801a3a0:	454c      	cmp	r4, r9
 801a3a2:	46a2      	mov	sl, r4
 801a3a4:	d3dc      	bcc.n	801a360 <rcutils_split+0x74>
 801a3a6:	4554      	cmp	r4, sl
 801a3a8:	d035      	beq.n	801a416 <rcutils_split+0x12a>
 801a3aa:	eba4 040a 	sub.w	r4, r4, sl
 801a3ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a3b0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a3b2:	9201      	str	r2, [sp, #4]
 801a3b4:	1ca0      	adds	r0, r4, #2
 801a3b6:	4798      	blx	r3
 801a3b8:	9a01      	ldr	r2, [sp, #4]
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 801a3c0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a3c4:	2800      	cmp	r0, #0
 801a3c6:	d035      	beq.n	801a434 <rcutils_split+0x148>
 801a3c8:	4a1f      	ldr	r2, [pc, #124]	@ (801a448 <rcutils_split+0x15c>)
 801a3ca:	eb06 030a 	add.w	r3, r6, sl
 801a3ce:	1c61      	adds	r1, r4, #1
 801a3d0:	f001 f962 	bl	801b698 <snprintf>
 801a3d4:	2000      	movs	r0, #0
 801a3d6:	b00b      	add	sp, #44	@ 0x2c
 801a3d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3dc:	b002      	add	sp, #8
 801a3de:	4770      	bx	lr
 801a3e0:	683b      	ldr	r3, [r7, #0]
 801a3e2:	3b01      	subs	r3, #1
 801a3e4:	2100      	movs	r1, #0
 801a3e6:	603b      	str	r3, [r7, #0]
 801a3e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801a3ec:	e7d7      	b.n	801a39e <rcutils_split+0xb2>
 801a3ee:	a802      	add	r0, sp, #8
 801a3f0:	ac02      	add	r4, sp, #8
 801a3f2:	f000 f82b 	bl	801a44c <rcutils_get_zero_initialized_string_array>
 801a3f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a3fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a3fe:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801a402:	2000      	movs	r0, #0
 801a404:	e7e7      	b.n	801a3d6 <rcutils_split+0xea>
 801a406:	aa14      	add	r2, sp, #80	@ 0x50
 801a408:	2101      	movs	r1, #1
 801a40a:	4638      	mov	r0, r7
 801a40c:	f000 f82e 	bl	801a46c <rcutils_string_array_init>
 801a410:	2800      	cmp	r0, #0
 801a412:	d1e0      	bne.n	801a3d6 <rcutils_split+0xea>
 801a414:	687a      	ldr	r2, [r7, #4]
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	3b01      	subs	r3, #1
 801a41a:	2100      	movs	r1, #0
 801a41c:	603b      	str	r3, [r7, #0]
 801a41e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801a422:	e7ee      	b.n	801a402 <rcutils_split+0x116>
 801a424:	200b      	movs	r0, #11
 801a426:	b00b      	add	sp, #44	@ 0x2c
 801a428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a42c:	b002      	add	sp, #8
 801a42e:	4770      	bx	lr
 801a430:	f8c7 8000 	str.w	r8, [r7]
 801a434:	4638      	mov	r0, r7
 801a436:	f000 f83b 	bl	801a4b0 <rcutils_string_array_fini>
 801a43a:	b908      	cbnz	r0, 801a440 <rcutils_split+0x154>
 801a43c:	200a      	movs	r0, #10
 801a43e:	e7ca      	b.n	801a3d6 <rcutils_split+0xea>
 801a440:	f7f3 fb36 	bl	800dab0 <rcutils_reset_error>
 801a444:	e7fa      	b.n	801a43c <rcutils_split+0x150>
 801a446:	bf00      	nop
 801a448:	08020c98 	.word	0x08020c98

0801a44c <rcutils_get_zero_initialized_string_array>:
 801a44c:	b510      	push	{r4, lr}
 801a44e:	4c06      	ldr	r4, [pc, #24]	@ (801a468 <rcutils_get_zero_initialized_string_array+0x1c>)
 801a450:	4686      	mov	lr, r0
 801a452:	4684      	mov	ip, r0
 801a454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a45a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a45e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801a462:	4670      	mov	r0, lr
 801a464:	bd10      	pop	{r4, pc}
 801a466:	bf00      	nop
 801a468:	0802210c 	.word	0x0802210c

0801a46c <rcutils_string_array_init>:
 801a46c:	b1da      	cbz	r2, 801a4a6 <rcutils_string_array_init+0x3a>
 801a46e:	b570      	push	{r4, r5, r6, lr}
 801a470:	4605      	mov	r5, r0
 801a472:	b1d0      	cbz	r0, 801a4aa <rcutils_string_array_init+0x3e>
 801a474:	460e      	mov	r6, r1
 801a476:	4614      	mov	r4, r2
 801a478:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801a47c:	6001      	str	r1, [r0, #0]
 801a47e:	2104      	movs	r1, #4
 801a480:	4630      	mov	r0, r6
 801a482:	4798      	blx	r3
 801a484:	6068      	str	r0, [r5, #4]
 801a486:	b150      	cbz	r0, 801a49e <rcutils_string_array_init+0x32>
 801a488:	46a4      	mov	ip, r4
 801a48a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a48e:	f105 0408 	add.w	r4, r5, #8
 801a492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a494:	f8dc 3000 	ldr.w	r3, [ip]
 801a498:	6023      	str	r3, [r4, #0]
 801a49a:	2000      	movs	r0, #0
 801a49c:	bd70      	pop	{r4, r5, r6, pc}
 801a49e:	2e00      	cmp	r6, #0
 801a4a0:	d0f2      	beq.n	801a488 <rcutils_string_array_init+0x1c>
 801a4a2:	200a      	movs	r0, #10
 801a4a4:	bd70      	pop	{r4, r5, r6, pc}
 801a4a6:	200b      	movs	r0, #11
 801a4a8:	4770      	bx	lr
 801a4aa:	200b      	movs	r0, #11
 801a4ac:	bd70      	pop	{r4, r5, r6, pc}
 801a4ae:	bf00      	nop

0801a4b0 <rcutils_string_array_fini>:
 801a4b0:	b310      	cbz	r0, 801a4f8 <rcutils_string_array_fini+0x48>
 801a4b2:	6843      	ldr	r3, [r0, #4]
 801a4b4:	b570      	push	{r4, r5, r6, lr}
 801a4b6:	4604      	mov	r4, r0
 801a4b8:	b1d3      	cbz	r3, 801a4f0 <rcutils_string_array_fini+0x40>
 801a4ba:	3008      	adds	r0, #8
 801a4bc:	f7f3 facc 	bl	800da58 <rcutils_allocator_is_valid>
 801a4c0:	b1c0      	cbz	r0, 801a4f4 <rcutils_string_array_fini+0x44>
 801a4c2:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a4c6:	b16b      	cbz	r3, 801a4e4 <rcutils_string_array_fini+0x34>
 801a4c8:	2500      	movs	r5, #0
 801a4ca:	462e      	mov	r6, r5
 801a4cc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a4d0:	68e3      	ldr	r3, [r4, #12]
 801a4d2:	69a1      	ldr	r1, [r4, #24]
 801a4d4:	4798      	blx	r3
 801a4d6:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a4da:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a4de:	3501      	adds	r5, #1
 801a4e0:	42ab      	cmp	r3, r5
 801a4e2:	d8f3      	bhi.n	801a4cc <rcutils_string_array_fini+0x1c>
 801a4e4:	68e3      	ldr	r3, [r4, #12]
 801a4e6:	69a1      	ldr	r1, [r4, #24]
 801a4e8:	4798      	blx	r3
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	e9c4 3300 	strd	r3, r3, [r4]
 801a4f0:	2000      	movs	r0, #0
 801a4f2:	bd70      	pop	{r4, r5, r6, pc}
 801a4f4:	200b      	movs	r0, #11
 801a4f6:	bd70      	pop	{r4, r5, r6, pc}
 801a4f8:	200b      	movs	r0, #11
 801a4fa:	4770      	bx	lr

0801a4fc <rmw_discovery_options_init>:
 801a4fc:	b328      	cbz	r0, 801a54a <rmw_discovery_options_init+0x4e>
 801a4fe:	b570      	push	{r4, r5, r6, lr}
 801a500:	4604      	mov	r4, r0
 801a502:	4610      	mov	r0, r2
 801a504:	460e      	mov	r6, r1
 801a506:	4615      	mov	r5, r2
 801a508:	f7f3 faa6 	bl	800da58 <rcutils_allocator_is_valid>
 801a50c:	b1d8      	cbz	r0, 801a546 <rmw_discovery_options_init+0x4a>
 801a50e:	68a3      	ldr	r3, [r4, #8]
 801a510:	b9cb      	cbnz	r3, 801a546 <rmw_discovery_options_init+0x4a>
 801a512:	6863      	ldr	r3, [r4, #4]
 801a514:	b9bb      	cbnz	r3, 801a546 <rmw_discovery_options_init+0x4a>
 801a516:	7823      	ldrb	r3, [r4, #0]
 801a518:	b90b      	cbnz	r3, 801a51e <rmw_discovery_options_init+0x22>
 801a51a:	2302      	movs	r3, #2
 801a51c:	7023      	strb	r3, [r4, #0]
 801a51e:	b186      	cbz	r6, 801a542 <rmw_discovery_options_init+0x46>
 801a520:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801a524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a528:	4630      	mov	r0, r6
 801a52a:	4798      	blx	r3
 801a52c:	6060      	str	r0, [r4, #4]
 801a52e:	b170      	cbz	r0, 801a54e <rmw_discovery_options_init+0x52>
 801a530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a532:	f104 0c0c 	add.w	ip, r4, #12
 801a536:	60a6      	str	r6, [r4, #8]
 801a538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	f8cc 3000 	str.w	r3, [ip]
 801a542:	2000      	movs	r0, #0
 801a544:	bd70      	pop	{r4, r5, r6, pc}
 801a546:	200b      	movs	r0, #11
 801a548:	bd70      	pop	{r4, r5, r6, pc}
 801a54a:	200b      	movs	r0, #11
 801a54c:	4770      	bx	lr
 801a54e:	200a      	movs	r0, #10
 801a550:	bd70      	pop	{r4, r5, r6, pc}
 801a552:	bf00      	nop

0801a554 <rmw_enclave_options_copy>:
 801a554:	b1e0      	cbz	r0, 801a590 <rmw_enclave_options_copy+0x3c>
 801a556:	b570      	push	{r4, r5, r6, lr}
 801a558:	4616      	mov	r6, r2
 801a55a:	b082      	sub	sp, #8
 801a55c:	b1aa      	cbz	r2, 801a58a <rmw_enclave_options_copy+0x36>
 801a55e:	4605      	mov	r5, r0
 801a560:	4608      	mov	r0, r1
 801a562:	460c      	mov	r4, r1
 801a564:	f7f3 fa78 	bl	800da58 <rcutils_allocator_is_valid>
 801a568:	b178      	cbz	r0, 801a58a <rmw_enclave_options_copy+0x36>
 801a56a:	f104 030c 	add.w	r3, r4, #12
 801a56e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a572:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a576:	4628      	mov	r0, r5
 801a578:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801a57c:	f7fc f980 	bl	8016880 <rcutils_strdup>
 801a580:	b140      	cbz	r0, 801a594 <rmw_enclave_options_copy+0x40>
 801a582:	6030      	str	r0, [r6, #0]
 801a584:	2000      	movs	r0, #0
 801a586:	b002      	add	sp, #8
 801a588:	bd70      	pop	{r4, r5, r6, pc}
 801a58a:	200b      	movs	r0, #11
 801a58c:	b002      	add	sp, #8
 801a58e:	bd70      	pop	{r4, r5, r6, pc}
 801a590:	200b      	movs	r0, #11
 801a592:	4770      	bx	lr
 801a594:	200a      	movs	r0, #10
 801a596:	e7f6      	b.n	801a586 <rmw_enclave_options_copy+0x32>

0801a598 <rmw_enclave_options_fini>:
 801a598:	b170      	cbz	r0, 801a5b8 <rmw_enclave_options_fini+0x20>
 801a59a:	b538      	push	{r3, r4, r5, lr}
 801a59c:	4605      	mov	r5, r0
 801a59e:	4608      	mov	r0, r1
 801a5a0:	460c      	mov	r4, r1
 801a5a2:	f7f3 fa59 	bl	800da58 <rcutils_allocator_is_valid>
 801a5a6:	b128      	cbz	r0, 801a5b4 <rmw_enclave_options_fini+0x1c>
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	6863      	ldr	r3, [r4, #4]
 801a5ac:	6921      	ldr	r1, [r4, #16]
 801a5ae:	4798      	blx	r3
 801a5b0:	2000      	movs	r0, #0
 801a5b2:	bd38      	pop	{r3, r4, r5, pc}
 801a5b4:	200b      	movs	r0, #11
 801a5b6:	bd38      	pop	{r3, r4, r5, pc}
 801a5b8:	200b      	movs	r0, #11
 801a5ba:	4770      	bx	lr

0801a5bc <rmw_get_default_security_options>:
 801a5bc:	2200      	movs	r2, #0
 801a5be:	7002      	strb	r2, [r0, #0]
 801a5c0:	6042      	str	r2, [r0, #4]
 801a5c2:	4770      	bx	lr

0801a5c4 <on_status>:
 801a5c4:	b082      	sub	sp, #8
 801a5c6:	b002      	add	sp, #8
 801a5c8:	4770      	bx	lr
 801a5ca:	bf00      	nop

0801a5cc <on_topic>:
 801a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5d0:	4a22      	ldr	r2, [pc, #136]	@ (801a65c <on_topic+0x90>)
 801a5d2:	b094      	sub	sp, #80	@ 0x50
 801a5d4:	6812      	ldr	r2, [r2, #0]
 801a5d6:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801a5d8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a5dc:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801a5e0:	b3c2      	cbz	r2, 801a654 <on_topic+0x88>
 801a5e2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a5e6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a5ea:	e001      	b.n	801a5f0 <on_topic+0x24>
 801a5ec:	6852      	ldr	r2, [r2, #4]
 801a5ee:	b38a      	cbz	r2, 801a654 <on_topic+0x88>
 801a5f0:	6894      	ldr	r4, [r2, #8]
 801a5f2:	8aa3      	ldrh	r3, [r4, #20]
 801a5f4:	428b      	cmp	r3, r1
 801a5f6:	d1f9      	bne.n	801a5ec <on_topic+0x20>
 801a5f8:	7da3      	ldrb	r3, [r4, #22]
 801a5fa:	4283      	cmp	r3, r0
 801a5fc:	d1f6      	bne.n	801a5ec <on_topic+0x20>
 801a5fe:	2248      	movs	r2, #72	@ 0x48
 801a600:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a604:	4668      	mov	r0, sp
 801a606:	f001 fa0f 	bl	801ba28 <memcpy>
 801a60a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a60e:	cb0c      	ldmia	r3, {r2, r3}
 801a610:	4620      	mov	r0, r4
 801a612:	f7f3 fedb 	bl	800e3cc <rmw_uxrce_get_static_input_buffer_for_entity>
 801a616:	4607      	mov	r7, r0
 801a618:	b1e0      	cbz	r0, 801a654 <on_topic+0x88>
 801a61a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a61e:	4632      	mov	r2, r6
 801a620:	4628      	mov	r0, r5
 801a622:	f108 0110 	add.w	r1, r8, #16
 801a626:	f7f4 ff5d 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 801a62a:	b930      	cbnz	r0, 801a63a <on_topic+0x6e>
 801a62c:	480c      	ldr	r0, [pc, #48]	@ (801a660 <on_topic+0x94>)
 801a62e:	4639      	mov	r1, r7
 801a630:	b014      	add	sp, #80	@ 0x50
 801a632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a636:	f7fc bcad 	b.w	8016f94 <put_memory>
 801a63a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a63e:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801a642:	f7f3 fcc1 	bl	800dfc8 <rmw_uros_epoch_nanos>
 801a646:	2305      	movs	r3, #5
 801a648:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a64c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a650:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a654:	b014      	add	sp, #80	@ 0x50
 801a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a65a:	bf00      	nop
 801a65c:	2000f870 	.word	0x2000f870
 801a660:	2000f0c0 	.word	0x2000f0c0

0801a664 <on_request>:
 801a664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a668:	4823      	ldr	r0, [pc, #140]	@ (801a6f8 <on_request+0x94>)
 801a66a:	b094      	sub	sp, #80	@ 0x50
 801a66c:	6800      	ldr	r0, [r0, #0]
 801a66e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a670:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a674:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a676:	2800      	cmp	r0, #0
 801a678:	d03b      	beq.n	801a6f2 <on_request+0x8e>
 801a67a:	461d      	mov	r5, r3
 801a67c:	e001      	b.n	801a682 <on_request+0x1e>
 801a67e:	6840      	ldr	r0, [r0, #4]
 801a680:	b3b8      	cbz	r0, 801a6f2 <on_request+0x8e>
 801a682:	6884      	ldr	r4, [r0, #8]
 801a684:	8b21      	ldrh	r1, [r4, #24]
 801a686:	4291      	cmp	r1, r2
 801a688:	d1f9      	bne.n	801a67e <on_request+0x1a>
 801a68a:	2248      	movs	r2, #72	@ 0x48
 801a68c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a690:	4668      	mov	r0, sp
 801a692:	f001 f9c9 	bl	801ba28 <memcpy>
 801a696:	f104 0320 	add.w	r3, r4, #32
 801a69a:	cb0c      	ldmia	r3, {r2, r3}
 801a69c:	4620      	mov	r0, r4
 801a69e:	f7f3 fe95 	bl	800e3cc <rmw_uxrce_get_static_input_buffer_for_entity>
 801a6a2:	4680      	mov	r8, r0
 801a6a4:	b328      	cbz	r0, 801a6f2 <on_request+0x8e>
 801a6a6:	4638      	mov	r0, r7
 801a6a8:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a6ac:	4632      	mov	r2, r6
 801a6ae:	f107 0110 	add.w	r1, r7, #16
 801a6b2:	f7f4 ff17 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 801a6b6:	b930      	cbnz	r0, 801a6c6 <on_request+0x62>
 801a6b8:	4810      	ldr	r0, [pc, #64]	@ (801a6fc <on_request+0x98>)
 801a6ba:	4641      	mov	r1, r8
 801a6bc:	b014      	add	sp, #80	@ 0x50
 801a6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c2:	f7fc bc67 	b.w	8016f94 <put_memory>
 801a6c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a6c8:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801a6cc:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a6d0:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a6d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a6dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a6e0:	f7f3 fc72 	bl	800dfc8 <rmw_uros_epoch_nanos>
 801a6e4:	2303      	movs	r3, #3
 801a6e6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a6ea:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a6ee:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a6f2:	b014      	add	sp, #80	@ 0x50
 801a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6f8:	2000f428 	.word	0x2000f428
 801a6fc:	2000f0c0 	.word	0x2000f0c0

0801a700 <on_reply>:
 801a700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a704:	4821      	ldr	r0, [pc, #132]	@ (801a78c <on_reply+0x8c>)
 801a706:	b094      	sub	sp, #80	@ 0x50
 801a708:	6800      	ldr	r0, [r0, #0]
 801a70a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a70c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801a710:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a712:	b3b8      	cbz	r0, 801a784 <on_reply+0x84>
 801a714:	461d      	mov	r5, r3
 801a716:	e001      	b.n	801a71c <on_reply+0x1c>
 801a718:	6840      	ldr	r0, [r0, #4]
 801a71a:	b398      	cbz	r0, 801a784 <on_reply+0x84>
 801a71c:	6884      	ldr	r4, [r0, #8]
 801a71e:	8b21      	ldrh	r1, [r4, #24]
 801a720:	4291      	cmp	r1, r2
 801a722:	d1f9      	bne.n	801a718 <on_reply+0x18>
 801a724:	2248      	movs	r2, #72	@ 0x48
 801a726:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a72a:	4668      	mov	r0, sp
 801a72c:	f001 f97c 	bl	801ba28 <memcpy>
 801a730:	f104 0320 	add.w	r3, r4, #32
 801a734:	cb0c      	ldmia	r3, {r2, r3}
 801a736:	4620      	mov	r0, r4
 801a738:	f7f3 fe48 	bl	800e3cc <rmw_uxrce_get_static_input_buffer_for_entity>
 801a73c:	4680      	mov	r8, r0
 801a73e:	b308      	cbz	r0, 801a784 <on_reply+0x84>
 801a740:	4638      	mov	r0, r7
 801a742:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a746:	4632      	mov	r2, r6
 801a748:	f107 0110 	add.w	r1, r7, #16
 801a74c:	f7f4 feca 	bl	800f4e4 <ucdr_deserialize_array_uint8_t>
 801a750:	b930      	cbnz	r0, 801a760 <on_reply+0x60>
 801a752:	480f      	ldr	r0, [pc, #60]	@ (801a790 <on_reply+0x90>)
 801a754:	4641      	mov	r1, r8
 801a756:	b014      	add	sp, #80	@ 0x50
 801a758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a75c:	f7fc bc1a 	b.w	8016f94 <put_memory>
 801a760:	2200      	movs	r2, #0
 801a762:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801a766:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801a76a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801a76e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801a772:	f7f3 fc29 	bl	800dfc8 <rmw_uros_epoch_nanos>
 801a776:	2304      	movs	r3, #4
 801a778:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801a77c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a780:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801a784:	b014      	add	sp, #80	@ 0x50
 801a786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a78a:	bf00      	nop
 801a78c:	2000f350 	.word	0x2000f350
 801a790:	2000f0c0 	.word	0x2000f0c0

0801a794 <rmw_create_guard_condition>:
 801a794:	b538      	push	{r3, r4, r5, lr}
 801a796:	4605      	mov	r5, r0
 801a798:	4807      	ldr	r0, [pc, #28]	@ (801a7b8 <rmw_create_guard_condition+0x24>)
 801a79a:	f7fc fbeb 	bl	8016f74 <get_memory>
 801a79e:	b148      	cbz	r0, 801a7b4 <rmw_create_guard_condition+0x20>
 801a7a0:	6884      	ldr	r4, [r0, #8]
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	7423      	strb	r3, [r4, #16]
 801a7a6:	61e5      	str	r5, [r4, #28]
 801a7a8:	f7fc fc6a 	bl	8017080 <rmw_get_implementation_identifier>
 801a7ac:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a7b0:	f104 0014 	add.w	r0, r4, #20
 801a7b4:	bd38      	pop	{r3, r4, r5, pc}
 801a7b6:	bf00      	nop
 801a7b8:	2000ce9c 	.word	0x2000ce9c

0801a7bc <rmw_destroy_guard_condition>:
 801a7bc:	b508      	push	{r3, lr}
 801a7be:	4b08      	ldr	r3, [pc, #32]	@ (801a7e0 <rmw_destroy_guard_condition+0x24>)
 801a7c0:	6819      	ldr	r1, [r3, #0]
 801a7c2:	b911      	cbnz	r1, 801a7ca <rmw_destroy_guard_condition+0xe>
 801a7c4:	e00a      	b.n	801a7dc <rmw_destroy_guard_condition+0x20>
 801a7c6:	6849      	ldr	r1, [r1, #4]
 801a7c8:	b141      	cbz	r1, 801a7dc <rmw_destroy_guard_condition+0x20>
 801a7ca:	688b      	ldr	r3, [r1, #8]
 801a7cc:	3314      	adds	r3, #20
 801a7ce:	4298      	cmp	r0, r3
 801a7d0:	d1f9      	bne.n	801a7c6 <rmw_destroy_guard_condition+0xa>
 801a7d2:	4803      	ldr	r0, [pc, #12]	@ (801a7e0 <rmw_destroy_guard_condition+0x24>)
 801a7d4:	f7fc fbde 	bl	8016f94 <put_memory>
 801a7d8:	2000      	movs	r0, #0
 801a7da:	bd08      	pop	{r3, pc}
 801a7dc:	2001      	movs	r0, #1
 801a7de:	bd08      	pop	{r3, pc}
 801a7e0:	2000ce9c 	.word	0x2000ce9c

0801a7e4 <rmw_trigger_guard_condition>:
 801a7e4:	b160      	cbz	r0, 801a800 <rmw_trigger_guard_condition+0x1c>
 801a7e6:	b510      	push	{r4, lr}
 801a7e8:	4604      	mov	r4, r0
 801a7ea:	6800      	ldr	r0, [r0, #0]
 801a7ec:	f7f3 ff70 	bl	800e6d0 <is_uxrce_rmw_identifier_valid>
 801a7f0:	b908      	cbnz	r0, 801a7f6 <rmw_trigger_guard_condition+0x12>
 801a7f2:	2001      	movs	r0, #1
 801a7f4:	bd10      	pop	{r4, pc}
 801a7f6:	6863      	ldr	r3, [r4, #4]
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	741a      	strb	r2, [r3, #16]
 801a7fc:	2000      	movs	r0, #0
 801a7fe:	bd10      	pop	{r4, pc}
 801a800:	2001      	movs	r0, #1
 801a802:	4770      	bx	lr

0801a804 <geometry_msgs__msg__Pose__init>:
 801a804:	b1d8      	cbz	r0, 801a83e <geometry_msgs__msg__Pose__init+0x3a>
 801a806:	b538      	push	{r3, r4, r5, lr}
 801a808:	4604      	mov	r4, r0
 801a80a:	f000 f8e1 	bl	801a9d0 <geometry_msgs__msg__Point__init>
 801a80e:	b130      	cbz	r0, 801a81e <geometry_msgs__msg__Pose__init+0x1a>
 801a810:	f104 0518 	add.w	r5, r4, #24
 801a814:	4628      	mov	r0, r5
 801a816:	f000 f823 	bl	801a860 <geometry_msgs__msg__Quaternion__init>
 801a81a:	b148      	cbz	r0, 801a830 <geometry_msgs__msg__Pose__init+0x2c>
 801a81c:	bd38      	pop	{r3, r4, r5, pc}
 801a81e:	4620      	mov	r0, r4
 801a820:	f000 f8da 	bl	801a9d8 <geometry_msgs__msg__Point__fini>
 801a824:	f104 0018 	add.w	r0, r4, #24
 801a828:	f000 f82e 	bl	801a888 <geometry_msgs__msg__Quaternion__fini>
 801a82c:	2000      	movs	r0, #0
 801a82e:	bd38      	pop	{r3, r4, r5, pc}
 801a830:	4620      	mov	r0, r4
 801a832:	f000 f8d1 	bl	801a9d8 <geometry_msgs__msg__Point__fini>
 801a836:	4628      	mov	r0, r5
 801a838:	f000 f826 	bl	801a888 <geometry_msgs__msg__Quaternion__fini>
 801a83c:	e7f6      	b.n	801a82c <geometry_msgs__msg__Pose__init+0x28>
 801a83e:	2000      	movs	r0, #0
 801a840:	4770      	bx	lr
 801a842:	bf00      	nop

0801a844 <geometry_msgs__msg__Pose__fini>:
 801a844:	b148      	cbz	r0, 801a85a <geometry_msgs__msg__Pose__fini+0x16>
 801a846:	b510      	push	{r4, lr}
 801a848:	4604      	mov	r4, r0
 801a84a:	f000 f8c5 	bl	801a9d8 <geometry_msgs__msg__Point__fini>
 801a84e:	f104 0018 	add.w	r0, r4, #24
 801a852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a856:	f000 b817 	b.w	801a888 <geometry_msgs__msg__Quaternion__fini>
 801a85a:	4770      	bx	lr
 801a85c:	0000      	movs	r0, r0
	...

0801a860 <geometry_msgs__msg__Quaternion__init>:
 801a860:	b160      	cbz	r0, 801a87c <geometry_msgs__msg__Quaternion__init+0x1c>
 801a862:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801a880 <geometry_msgs__msg__Quaternion__init+0x20>
 801a866:	2200      	movs	r2, #0
 801a868:	2300      	movs	r3, #0
 801a86a:	e9c0 2300 	strd	r2, r3, [r0]
 801a86e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a872:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a876:	ed80 7b06 	vstr	d7, [r0, #24]
 801a87a:	2001      	movs	r0, #1
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	00000000 	.word	0x00000000
 801a884:	3ff00000 	.word	0x3ff00000

0801a888 <geometry_msgs__msg__Quaternion__fini>:
 801a888:	4770      	bx	lr
 801a88a:	bf00      	nop

0801a88c <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 801a88c:	f000 b8a0 	b.w	801a9d0 <geometry_msgs__msg__Point__init>

0801a890 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 801a890:	f000 b8a2 	b.w	801a9d8 <geometry_msgs__msg__Point__fini>

0801a894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801a894:	4b04      	ldr	r3, [pc, #16]	@ (801a8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801a896:	681a      	ldr	r2, [r3, #0]
 801a898:	b10a      	cbz	r2, 801a89e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 801a89a:	4803      	ldr	r0, [pc, #12]	@ (801a8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801a89c:	4770      	bx	lr
 801a89e:	4a03      	ldr	r2, [pc, #12]	@ (801a8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 801a8a0:	4801      	ldr	r0, [pc, #4]	@ (801a8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801a8a2:	6812      	ldr	r2, [r2, #0]
 801a8a4:	601a      	str	r2, [r3, #0]
 801a8a6:	4770      	bx	lr
 801a8a8:	20003038 	.word	0x20003038
 801a8ac:	200003a4 	.word	0x200003a4

0801a8b0 <get_serialized_size_geometry_msgs__msg__Point>:
 801a8b0:	b1b8      	cbz	r0, 801a8e2 <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801a8b2:	b570      	push	{r4, r5, r6, lr}
 801a8b4:	460d      	mov	r5, r1
 801a8b6:	4628      	mov	r0, r5
 801a8b8:	2108      	movs	r1, #8
 801a8ba:	f7f1 ff13 	bl	800c6e4 <ucdr_alignment>
 801a8be:	2108      	movs	r1, #8
 801a8c0:	186e      	adds	r6, r5, r1
 801a8c2:	4406      	add	r6, r0
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	f7f1 ff0d 	bl	800c6e4 <ucdr_alignment>
 801a8ca:	f100 0408 	add.w	r4, r0, #8
 801a8ce:	4434      	add	r4, r6
 801a8d0:	2108      	movs	r1, #8
 801a8d2:	4620      	mov	r0, r4
 801a8d4:	f7f1 ff06 	bl	800c6e4 <ucdr_alignment>
 801a8d8:	f1c5 0508 	rsb	r5, r5, #8
 801a8dc:	4405      	add	r5, r0
 801a8de:	1928      	adds	r0, r5, r4
 801a8e0:	bd70      	pop	{r4, r5, r6, pc}
 801a8e2:	4770      	bx	lr

0801a8e4 <_Point__cdr_deserialize>:
 801a8e4:	b538      	push	{r3, r4, r5, lr}
 801a8e6:	460c      	mov	r4, r1
 801a8e8:	b171      	cbz	r1, 801a908 <_Point__cdr_deserialize+0x24>
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	f7f1 fd1c 	bl	800c328 <ucdr_deserialize_double>
 801a8f0:	f104 0108 	add.w	r1, r4, #8
 801a8f4:	4628      	mov	r0, r5
 801a8f6:	f7f1 fd17 	bl	800c328 <ucdr_deserialize_double>
 801a8fa:	f104 0110 	add.w	r1, r4, #16
 801a8fe:	4628      	mov	r0, r5
 801a900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a904:	f7f1 bd10 	b.w	800c328 <ucdr_deserialize_double>
 801a908:	4608      	mov	r0, r1
 801a90a:	bd38      	pop	{r3, r4, r5, pc}

0801a90c <_Point__cdr_serialize>:
 801a90c:	b198      	cbz	r0, 801a936 <_Point__cdr_serialize+0x2a>
 801a90e:	b538      	push	{r3, r4, r5, lr}
 801a910:	ed90 0b00 	vldr	d0, [r0]
 801a914:	460d      	mov	r5, r1
 801a916:	4604      	mov	r4, r0
 801a918:	4608      	mov	r0, r1
 801a91a:	f7f1 fb75 	bl	800c008 <ucdr_serialize_double>
 801a91e:	ed94 0b02 	vldr	d0, [r4, #8]
 801a922:	4628      	mov	r0, r5
 801a924:	f7f1 fb70 	bl	800c008 <ucdr_serialize_double>
 801a928:	ed94 0b04 	vldr	d0, [r4, #16]
 801a92c:	4628      	mov	r0, r5
 801a92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a932:	f7f1 bb69 	b.w	800c008 <ucdr_serialize_double>
 801a936:	4770      	bx	lr

0801a938 <_Point__get_serialized_size>:
 801a938:	b1a0      	cbz	r0, 801a964 <_Point__get_serialized_size+0x2c>
 801a93a:	b538      	push	{r3, r4, r5, lr}
 801a93c:	2108      	movs	r1, #8
 801a93e:	2000      	movs	r0, #0
 801a940:	f7f1 fed0 	bl	800c6e4 <ucdr_alignment>
 801a944:	f100 0508 	add.w	r5, r0, #8
 801a948:	2108      	movs	r1, #8
 801a94a:	4628      	mov	r0, r5
 801a94c:	f7f1 feca 	bl	800c6e4 <ucdr_alignment>
 801a950:	f100 0408 	add.w	r4, r0, #8
 801a954:	442c      	add	r4, r5
 801a956:	2108      	movs	r1, #8
 801a958:	4620      	mov	r0, r4
 801a95a:	f7f1 fec3 	bl	800c6e4 <ucdr_alignment>
 801a95e:	3008      	adds	r0, #8
 801a960:	4420      	add	r0, r4
 801a962:	bd38      	pop	{r3, r4, r5, pc}
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop

0801a968 <_Point__max_serialized_size>:
 801a968:	b538      	push	{r3, r4, r5, lr}
 801a96a:	2108      	movs	r1, #8
 801a96c:	2000      	movs	r0, #0
 801a96e:	f7f1 feb9 	bl	800c6e4 <ucdr_alignment>
 801a972:	f100 0508 	add.w	r5, r0, #8
 801a976:	2108      	movs	r1, #8
 801a978:	4628      	mov	r0, r5
 801a97a:	f7f1 feb3 	bl	800c6e4 <ucdr_alignment>
 801a97e:	f100 0408 	add.w	r4, r0, #8
 801a982:	442c      	add	r4, r5
 801a984:	2108      	movs	r1, #8
 801a986:	4620      	mov	r0, r4
 801a988:	f7f1 feac 	bl	800c6e4 <ucdr_alignment>
 801a98c:	3008      	adds	r0, #8
 801a98e:	4420      	add	r0, r4
 801a990:	bd38      	pop	{r3, r4, r5, pc}
 801a992:	bf00      	nop

0801a994 <max_serialized_size_geometry_msgs__msg__Point>:
 801a994:	b570      	push	{r4, r5, r6, lr}
 801a996:	2301      	movs	r3, #1
 801a998:	460c      	mov	r4, r1
 801a99a:	7003      	strb	r3, [r0, #0]
 801a99c:	2108      	movs	r1, #8
 801a99e:	4620      	mov	r0, r4
 801a9a0:	f7f1 fea0 	bl	800c6e4 <ucdr_alignment>
 801a9a4:	2108      	movs	r1, #8
 801a9a6:	1863      	adds	r3, r4, r1
 801a9a8:	18c6      	adds	r6, r0, r3
 801a9aa:	4630      	mov	r0, r6
 801a9ac:	f7f1 fe9a 	bl	800c6e4 <ucdr_alignment>
 801a9b0:	f100 0508 	add.w	r5, r0, #8
 801a9b4:	4435      	add	r5, r6
 801a9b6:	2108      	movs	r1, #8
 801a9b8:	4628      	mov	r0, r5
 801a9ba:	f7f1 fe93 	bl	800c6e4 <ucdr_alignment>
 801a9be:	f1c4 0408 	rsb	r4, r4, #8
 801a9c2:	4420      	add	r0, r4
 801a9c4:	4428      	add	r0, r5
 801a9c6:	bd70      	pop	{r4, r5, r6, pc}

0801a9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801a9c8:	4800      	ldr	r0, [pc, #0]	@ (801a9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801a9ca:	4770      	bx	lr
 801a9cc:	20003104 	.word	0x20003104

0801a9d0 <geometry_msgs__msg__Point__init>:
 801a9d0:	3800      	subs	r0, #0
 801a9d2:	bf18      	it	ne
 801a9d4:	2001      	movne	r0, #1
 801a9d6:	4770      	bx	lr

0801a9d8 <geometry_msgs__msg__Point__fini>:
 801a9d8:	4770      	bx	lr
 801a9da:	bf00      	nop

0801a9dc <calloc>:
 801a9dc:	4b02      	ldr	r3, [pc, #8]	@ (801a9e8 <calloc+0xc>)
 801a9de:	460a      	mov	r2, r1
 801a9e0:	4601      	mov	r1, r0
 801a9e2:	6818      	ldr	r0, [r3, #0]
 801a9e4:	f000 b802 	b.w	801a9ec <_calloc_r>
 801a9e8:	20003554 	.word	0x20003554

0801a9ec <_calloc_r>:
 801a9ec:	b538      	push	{r3, r4, r5, lr}
 801a9ee:	fba1 1502 	umull	r1, r5, r1, r2
 801a9f2:	b935      	cbnz	r5, 801aa02 <_calloc_r+0x16>
 801a9f4:	f000 f896 	bl	801ab24 <_malloc_r>
 801a9f8:	4604      	mov	r4, r0
 801a9fa:	b938      	cbnz	r0, 801aa0c <_calloc_r+0x20>
 801a9fc:	2400      	movs	r4, #0
 801a9fe:	4620      	mov	r0, r4
 801aa00:	bd38      	pop	{r3, r4, r5, pc}
 801aa02:	f000 ffcf 	bl	801b9a4 <__errno>
 801aa06:	230c      	movs	r3, #12
 801aa08:	6003      	str	r3, [r0, #0]
 801aa0a:	e7f7      	b.n	801a9fc <_calloc_r+0x10>
 801aa0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801aa10:	f022 0203 	bic.w	r2, r2, #3
 801aa14:	3a04      	subs	r2, #4
 801aa16:	2a24      	cmp	r2, #36	@ 0x24
 801aa18:	d819      	bhi.n	801aa4e <_calloc_r+0x62>
 801aa1a:	2a13      	cmp	r2, #19
 801aa1c:	d915      	bls.n	801aa4a <_calloc_r+0x5e>
 801aa1e:	2a1b      	cmp	r2, #27
 801aa20:	e9c0 5500 	strd	r5, r5, [r0]
 801aa24:	d806      	bhi.n	801aa34 <_calloc_r+0x48>
 801aa26:	f100 0308 	add.w	r3, r0, #8
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	e9c3 2200 	strd	r2, r2, [r3]
 801aa30:	609a      	str	r2, [r3, #8]
 801aa32:	e7e4      	b.n	801a9fe <_calloc_r+0x12>
 801aa34:	2a24      	cmp	r2, #36	@ 0x24
 801aa36:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801aa3a:	bf11      	iteee	ne
 801aa3c:	f100 0310 	addne.w	r3, r0, #16
 801aa40:	6105      	streq	r5, [r0, #16]
 801aa42:	f100 0318 	addeq.w	r3, r0, #24
 801aa46:	6145      	streq	r5, [r0, #20]
 801aa48:	e7ef      	b.n	801aa2a <_calloc_r+0x3e>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	e7ed      	b.n	801aa2a <_calloc_r+0x3e>
 801aa4e:	4629      	mov	r1, r5
 801aa50:	f000 ff02 	bl	801b858 <memset>
 801aa54:	e7d3      	b.n	801a9fe <_calloc_r+0x12>
	...

0801aa58 <exit>:
 801aa58:	b508      	push	{r3, lr}
 801aa5a:	2100      	movs	r1, #0
 801aa5c:	4604      	mov	r4, r0
 801aa5e:	f000 fffb 	bl	801ba58 <__call_exitprocs>
 801aa62:	4b03      	ldr	r3, [pc, #12]	@ (801aa70 <exit+0x18>)
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	b103      	cbz	r3, 801aa6a <exit+0x12>
 801aa68:	4798      	blx	r3
 801aa6a:	4620      	mov	r0, r4
 801aa6c:	f7e9 f92f 	bl	8003cce <_exit>
 801aa70:	20011ed0 	.word	0x20011ed0

0801aa74 <getenv>:
 801aa74:	b507      	push	{r0, r1, r2, lr}
 801aa76:	4b04      	ldr	r3, [pc, #16]	@ (801aa88 <getenv+0x14>)
 801aa78:	4601      	mov	r1, r0
 801aa7a:	aa01      	add	r2, sp, #4
 801aa7c:	6818      	ldr	r0, [r3, #0]
 801aa7e:	f000 f805 	bl	801aa8c <_findenv_r>
 801aa82:	b003      	add	sp, #12
 801aa84:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa88:	20003554 	.word	0x20003554

0801aa8c <_findenv_r>:
 801aa8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa90:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ab00 <_findenv_r+0x74>
 801aa94:	4606      	mov	r6, r0
 801aa96:	4689      	mov	r9, r1
 801aa98:	4617      	mov	r7, r2
 801aa9a:	f001 f839 	bl	801bb10 <__env_lock>
 801aa9e:	f8da 4000 	ldr.w	r4, [sl]
 801aaa2:	b134      	cbz	r4, 801aab2 <_findenv_r+0x26>
 801aaa4:	464b      	mov	r3, r9
 801aaa6:	4698      	mov	r8, r3
 801aaa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aaac:	b13a      	cbz	r2, 801aabe <_findenv_r+0x32>
 801aaae:	2a3d      	cmp	r2, #61	@ 0x3d
 801aab0:	d1f9      	bne.n	801aaa6 <_findenv_r+0x1a>
 801aab2:	4630      	mov	r0, r6
 801aab4:	f001 f832 	bl	801bb1c <__env_unlock>
 801aab8:	2000      	movs	r0, #0
 801aaba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	eba8 0809 	sub.w	r8, r8, r9
 801aac2:	46a3      	mov	fp, r4
 801aac4:	f854 0b04 	ldr.w	r0, [r4], #4
 801aac8:	2800      	cmp	r0, #0
 801aaca:	d0f2      	beq.n	801aab2 <_findenv_r+0x26>
 801aacc:	4642      	mov	r2, r8
 801aace:	4649      	mov	r1, r9
 801aad0:	f000 fed7 	bl	801b882 <strncmp>
 801aad4:	2800      	cmp	r0, #0
 801aad6:	d1f4      	bne.n	801aac2 <_findenv_r+0x36>
 801aad8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801aadc:	eb03 0508 	add.w	r5, r3, r8
 801aae0:	f813 3008 	ldrb.w	r3, [r3, r8]
 801aae4:	2b3d      	cmp	r3, #61	@ 0x3d
 801aae6:	d1ec      	bne.n	801aac2 <_findenv_r+0x36>
 801aae8:	f8da 3000 	ldr.w	r3, [sl]
 801aaec:	ebab 0303 	sub.w	r3, fp, r3
 801aaf0:	109b      	asrs	r3, r3, #2
 801aaf2:	4630      	mov	r0, r6
 801aaf4:	603b      	str	r3, [r7, #0]
 801aaf6:	f001 f811 	bl	801bb1c <__env_unlock>
 801aafa:	1c68      	adds	r0, r5, #1
 801aafc:	e7dd      	b.n	801aaba <_findenv_r+0x2e>
 801aafe:	bf00      	nop
 801ab00:	20000038 	.word	0x20000038

0801ab04 <malloc>:
 801ab04:	4b02      	ldr	r3, [pc, #8]	@ (801ab10 <malloc+0xc>)
 801ab06:	4601      	mov	r1, r0
 801ab08:	6818      	ldr	r0, [r3, #0]
 801ab0a:	f000 b80b 	b.w	801ab24 <_malloc_r>
 801ab0e:	bf00      	nop
 801ab10:	20003554 	.word	0x20003554

0801ab14 <free>:
 801ab14:	4b02      	ldr	r3, [pc, #8]	@ (801ab20 <free+0xc>)
 801ab16:	4601      	mov	r1, r0
 801ab18:	6818      	ldr	r0, [r3, #0]
 801ab1a:	f001 b85b 	b.w	801bbd4 <_free_r>
 801ab1e:	bf00      	nop
 801ab20:	20003554 	.word	0x20003554

0801ab24 <_malloc_r>:
 801ab24:	f101 030b 	add.w	r3, r1, #11
 801ab28:	2b16      	cmp	r3, #22
 801ab2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab2e:	4605      	mov	r5, r0
 801ab30:	d906      	bls.n	801ab40 <_malloc_r+0x1c>
 801ab32:	f033 0707 	bics.w	r7, r3, #7
 801ab36:	d504      	bpl.n	801ab42 <_malloc_r+0x1e>
 801ab38:	230c      	movs	r3, #12
 801ab3a:	602b      	str	r3, [r5, #0]
 801ab3c:	2400      	movs	r4, #0
 801ab3e:	e1a3      	b.n	801ae88 <_malloc_r+0x364>
 801ab40:	2710      	movs	r7, #16
 801ab42:	42b9      	cmp	r1, r7
 801ab44:	d8f8      	bhi.n	801ab38 <_malloc_r+0x14>
 801ab46:	4628      	mov	r0, r5
 801ab48:	f000 fa26 	bl	801af98 <__malloc_lock>
 801ab4c:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 801ab50:	4eaf      	ldr	r6, [pc, #700]	@ (801ae10 <_malloc_r+0x2ec>)
 801ab52:	d237      	bcs.n	801abc4 <_malloc_r+0xa0>
 801ab54:	f107 0208 	add.w	r2, r7, #8
 801ab58:	4432      	add	r2, r6
 801ab5a:	f1a2 0108 	sub.w	r1, r2, #8
 801ab5e:	6854      	ldr	r4, [r2, #4]
 801ab60:	428c      	cmp	r4, r1
 801ab62:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801ab66:	d102      	bne.n	801ab6e <_malloc_r+0x4a>
 801ab68:	68d4      	ldr	r4, [r2, #12]
 801ab6a:	42a2      	cmp	r2, r4
 801ab6c:	d010      	beq.n	801ab90 <_malloc_r+0x6c>
 801ab6e:	6863      	ldr	r3, [r4, #4]
 801ab70:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801ab74:	f023 0303 	bic.w	r3, r3, #3
 801ab78:	60ca      	str	r2, [r1, #12]
 801ab7a:	4423      	add	r3, r4
 801ab7c:	6091      	str	r1, [r2, #8]
 801ab7e:	685a      	ldr	r2, [r3, #4]
 801ab80:	f042 0201 	orr.w	r2, r2, #1
 801ab84:	605a      	str	r2, [r3, #4]
 801ab86:	4628      	mov	r0, r5
 801ab88:	f000 fa0c 	bl	801afa4 <__malloc_unlock>
 801ab8c:	3408      	adds	r4, #8
 801ab8e:	e17b      	b.n	801ae88 <_malloc_r+0x364>
 801ab90:	3302      	adds	r3, #2
 801ab92:	6934      	ldr	r4, [r6, #16]
 801ab94:	499f      	ldr	r1, [pc, #636]	@ (801ae14 <_malloc_r+0x2f0>)
 801ab96:	428c      	cmp	r4, r1
 801ab98:	d077      	beq.n	801ac8a <_malloc_r+0x166>
 801ab9a:	6862      	ldr	r2, [r4, #4]
 801ab9c:	f022 0c03 	bic.w	ip, r2, #3
 801aba0:	ebac 0007 	sub.w	r0, ip, r7
 801aba4:	280f      	cmp	r0, #15
 801aba6:	dd48      	ble.n	801ac3a <_malloc_r+0x116>
 801aba8:	19e2      	adds	r2, r4, r7
 801abaa:	f040 0301 	orr.w	r3, r0, #1
 801abae:	f047 0701 	orr.w	r7, r7, #1
 801abb2:	6067      	str	r7, [r4, #4]
 801abb4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801abb8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801abbc:	6053      	str	r3, [r2, #4]
 801abbe:	f844 000c 	str.w	r0, [r4, ip]
 801abc2:	e7e0      	b.n	801ab86 <_malloc_r+0x62>
 801abc4:	0a7b      	lsrs	r3, r7, #9
 801abc6:	d02a      	beq.n	801ac1e <_malloc_r+0xfa>
 801abc8:	2b04      	cmp	r3, #4
 801abca:	d812      	bhi.n	801abf2 <_malloc_r+0xce>
 801abcc:	09bb      	lsrs	r3, r7, #6
 801abce:	3338      	adds	r3, #56	@ 0x38
 801abd0:	1c5a      	adds	r2, r3, #1
 801abd2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801abd6:	f1a2 0c08 	sub.w	ip, r2, #8
 801abda:	6854      	ldr	r4, [r2, #4]
 801abdc:	4564      	cmp	r4, ip
 801abde:	d006      	beq.n	801abee <_malloc_r+0xca>
 801abe0:	6862      	ldr	r2, [r4, #4]
 801abe2:	f022 0203 	bic.w	r2, r2, #3
 801abe6:	1bd0      	subs	r0, r2, r7
 801abe8:	280f      	cmp	r0, #15
 801abea:	dd1c      	ble.n	801ac26 <_malloc_r+0x102>
 801abec:	3b01      	subs	r3, #1
 801abee:	3301      	adds	r3, #1
 801abf0:	e7cf      	b.n	801ab92 <_malloc_r+0x6e>
 801abf2:	2b14      	cmp	r3, #20
 801abf4:	d801      	bhi.n	801abfa <_malloc_r+0xd6>
 801abf6:	335b      	adds	r3, #91	@ 0x5b
 801abf8:	e7ea      	b.n	801abd0 <_malloc_r+0xac>
 801abfa:	2b54      	cmp	r3, #84	@ 0x54
 801abfc:	d802      	bhi.n	801ac04 <_malloc_r+0xe0>
 801abfe:	0b3b      	lsrs	r3, r7, #12
 801ac00:	336e      	adds	r3, #110	@ 0x6e
 801ac02:	e7e5      	b.n	801abd0 <_malloc_r+0xac>
 801ac04:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801ac08:	d802      	bhi.n	801ac10 <_malloc_r+0xec>
 801ac0a:	0bfb      	lsrs	r3, r7, #15
 801ac0c:	3377      	adds	r3, #119	@ 0x77
 801ac0e:	e7df      	b.n	801abd0 <_malloc_r+0xac>
 801ac10:	f240 5254 	movw	r2, #1364	@ 0x554
 801ac14:	4293      	cmp	r3, r2
 801ac16:	d804      	bhi.n	801ac22 <_malloc_r+0xfe>
 801ac18:	0cbb      	lsrs	r3, r7, #18
 801ac1a:	337c      	adds	r3, #124	@ 0x7c
 801ac1c:	e7d8      	b.n	801abd0 <_malloc_r+0xac>
 801ac1e:	233f      	movs	r3, #63	@ 0x3f
 801ac20:	e7d6      	b.n	801abd0 <_malloc_r+0xac>
 801ac22:	237e      	movs	r3, #126	@ 0x7e
 801ac24:	e7d4      	b.n	801abd0 <_malloc_r+0xac>
 801ac26:	2800      	cmp	r0, #0
 801ac28:	68e1      	ldr	r1, [r4, #12]
 801ac2a:	db04      	blt.n	801ac36 <_malloc_r+0x112>
 801ac2c:	68a3      	ldr	r3, [r4, #8]
 801ac2e:	60d9      	str	r1, [r3, #12]
 801ac30:	608b      	str	r3, [r1, #8]
 801ac32:	18a3      	adds	r3, r4, r2
 801ac34:	e7a3      	b.n	801ab7e <_malloc_r+0x5a>
 801ac36:	460c      	mov	r4, r1
 801ac38:	e7d0      	b.n	801abdc <_malloc_r+0xb8>
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801ac40:	db07      	blt.n	801ac52 <_malloc_r+0x12e>
 801ac42:	44a4      	add	ip, r4
 801ac44:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ac48:	f043 0301 	orr.w	r3, r3, #1
 801ac4c:	f8cc 3004 	str.w	r3, [ip, #4]
 801ac50:	e799      	b.n	801ab86 <_malloc_r+0x62>
 801ac52:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801ac56:	6870      	ldr	r0, [r6, #4]
 801ac58:	f080 8095 	bcs.w	801ad86 <_malloc_r+0x262>
 801ac5c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801ac60:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801ac64:	f04f 0c01 	mov.w	ip, #1
 801ac68:	3201      	adds	r2, #1
 801ac6a:	fa0c fc0e 	lsl.w	ip, ip, lr
 801ac6e:	ea4c 0000 	orr.w	r0, ip, r0
 801ac72:	6070      	str	r0, [r6, #4]
 801ac74:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801ac78:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801ac7c:	3808      	subs	r0, #8
 801ac7e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801ac82:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801ac86:	f8cc 400c 	str.w	r4, [ip, #12]
 801ac8a:	1098      	asrs	r0, r3, #2
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	4082      	lsls	r2, r0
 801ac90:	6870      	ldr	r0, [r6, #4]
 801ac92:	4290      	cmp	r0, r2
 801ac94:	d326      	bcc.n	801ace4 <_malloc_r+0x1c0>
 801ac96:	4210      	tst	r0, r2
 801ac98:	d106      	bne.n	801aca8 <_malloc_r+0x184>
 801ac9a:	f023 0303 	bic.w	r3, r3, #3
 801ac9e:	0052      	lsls	r2, r2, #1
 801aca0:	4210      	tst	r0, r2
 801aca2:	f103 0304 	add.w	r3, r3, #4
 801aca6:	d0fa      	beq.n	801ac9e <_malloc_r+0x17a>
 801aca8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801acac:	46c1      	mov	r9, r8
 801acae:	469e      	mov	lr, r3
 801acb0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801acb4:	454c      	cmp	r4, r9
 801acb6:	f040 80b9 	bne.w	801ae2c <_malloc_r+0x308>
 801acba:	f10e 0e01 	add.w	lr, lr, #1
 801acbe:	f01e 0f03 	tst.w	lr, #3
 801acc2:	f109 0908 	add.w	r9, r9, #8
 801acc6:	d1f3      	bne.n	801acb0 <_malloc_r+0x18c>
 801acc8:	0798      	lsls	r0, r3, #30
 801acca:	f040 80e3 	bne.w	801ae94 <_malloc_r+0x370>
 801acce:	6873      	ldr	r3, [r6, #4]
 801acd0:	ea23 0302 	bic.w	r3, r3, r2
 801acd4:	6073      	str	r3, [r6, #4]
 801acd6:	6870      	ldr	r0, [r6, #4]
 801acd8:	0052      	lsls	r2, r2, #1
 801acda:	4290      	cmp	r0, r2
 801acdc:	d302      	bcc.n	801ace4 <_malloc_r+0x1c0>
 801acde:	2a00      	cmp	r2, #0
 801ace0:	f040 80e5 	bne.w	801aeae <_malloc_r+0x38a>
 801ace4:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801ace8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801acec:	f023 0903 	bic.w	r9, r3, #3
 801acf0:	45b9      	cmp	r9, r7
 801acf2:	d304      	bcc.n	801acfe <_malloc_r+0x1da>
 801acf4:	eba9 0207 	sub.w	r2, r9, r7
 801acf8:	2a0f      	cmp	r2, #15
 801acfa:	f300 8141 	bgt.w	801af80 <_malloc_r+0x45c>
 801acfe:	4b46      	ldr	r3, [pc, #280]	@ (801ae18 <_malloc_r+0x2f4>)
 801ad00:	6819      	ldr	r1, [r3, #0]
 801ad02:	3110      	adds	r1, #16
 801ad04:	4439      	add	r1, r7
 801ad06:	2008      	movs	r0, #8
 801ad08:	9101      	str	r1, [sp, #4]
 801ad0a:	f000 fe79 	bl	801ba00 <sysconf>
 801ad0e:	4a43      	ldr	r2, [pc, #268]	@ (801ae1c <_malloc_r+0x2f8>)
 801ad10:	9901      	ldr	r1, [sp, #4]
 801ad12:	6813      	ldr	r3, [r2, #0]
 801ad14:	3301      	adds	r3, #1
 801ad16:	bf1f      	itttt	ne
 801ad18:	f101 31ff 	addne.w	r1, r1, #4294967295
 801ad1c:	1809      	addne	r1, r1, r0
 801ad1e:	4243      	negne	r3, r0
 801ad20:	4019      	andne	r1, r3
 801ad22:	4680      	mov	r8, r0
 801ad24:	4628      	mov	r0, r5
 801ad26:	9101      	str	r1, [sp, #4]
 801ad28:	f000 fe1a 	bl	801b960 <_sbrk_r>
 801ad2c:	1c42      	adds	r2, r0, #1
 801ad2e:	eb0a 0b09 	add.w	fp, sl, r9
 801ad32:	4604      	mov	r4, r0
 801ad34:	f000 80f7 	beq.w	801af26 <_malloc_r+0x402>
 801ad38:	4583      	cmp	fp, r0
 801ad3a:	9901      	ldr	r1, [sp, #4]
 801ad3c:	4a37      	ldr	r2, [pc, #220]	@ (801ae1c <_malloc_r+0x2f8>)
 801ad3e:	d902      	bls.n	801ad46 <_malloc_r+0x222>
 801ad40:	45b2      	cmp	sl, r6
 801ad42:	f040 80f0 	bne.w	801af26 <_malloc_r+0x402>
 801ad46:	4b36      	ldr	r3, [pc, #216]	@ (801ae20 <_malloc_r+0x2fc>)
 801ad48:	6818      	ldr	r0, [r3, #0]
 801ad4a:	45a3      	cmp	fp, r4
 801ad4c:	eb00 0e01 	add.w	lr, r0, r1
 801ad50:	f8c3 e000 	str.w	lr, [r3]
 801ad54:	f108 3cff 	add.w	ip, r8, #4294967295
 801ad58:	f040 80ab 	bne.w	801aeb2 <_malloc_r+0x38e>
 801ad5c:	ea1b 0f0c 	tst.w	fp, ip
 801ad60:	f040 80a7 	bne.w	801aeb2 <_malloc_r+0x38e>
 801ad64:	68b2      	ldr	r2, [r6, #8]
 801ad66:	4449      	add	r1, r9
 801ad68:	f041 0101 	orr.w	r1, r1, #1
 801ad6c:	6051      	str	r1, [r2, #4]
 801ad6e:	4a2d      	ldr	r2, [pc, #180]	@ (801ae24 <_malloc_r+0x300>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	6811      	ldr	r1, [r2, #0]
 801ad74:	428b      	cmp	r3, r1
 801ad76:	bf88      	it	hi
 801ad78:	6013      	strhi	r3, [r2, #0]
 801ad7a:	4a2b      	ldr	r2, [pc, #172]	@ (801ae28 <_malloc_r+0x304>)
 801ad7c:	6811      	ldr	r1, [r2, #0]
 801ad7e:	428b      	cmp	r3, r1
 801ad80:	bf88      	it	hi
 801ad82:	6013      	strhi	r3, [r2, #0]
 801ad84:	e0cf      	b.n	801af26 <_malloc_r+0x402>
 801ad86:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801ad8a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801ad8e:	d218      	bcs.n	801adc2 <_malloc_r+0x29e>
 801ad90:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801ad94:	3238      	adds	r2, #56	@ 0x38
 801ad96:	f102 0e01 	add.w	lr, r2, #1
 801ad9a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801ad9e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801ada2:	45f0      	cmp	r8, lr
 801ada4:	d12b      	bne.n	801adfe <_malloc_r+0x2da>
 801ada6:	1092      	asrs	r2, r2, #2
 801ada8:	f04f 0c01 	mov.w	ip, #1
 801adac:	fa0c f202 	lsl.w	r2, ip, r2
 801adb0:	4302      	orrs	r2, r0
 801adb2:	6072      	str	r2, [r6, #4]
 801adb4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801adb8:	f8c8 4008 	str.w	r4, [r8, #8]
 801adbc:	f8ce 400c 	str.w	r4, [lr, #12]
 801adc0:	e763      	b.n	801ac8a <_malloc_r+0x166>
 801adc2:	2a14      	cmp	r2, #20
 801adc4:	d801      	bhi.n	801adca <_malloc_r+0x2a6>
 801adc6:	325b      	adds	r2, #91	@ 0x5b
 801adc8:	e7e5      	b.n	801ad96 <_malloc_r+0x272>
 801adca:	2a54      	cmp	r2, #84	@ 0x54
 801adcc:	d803      	bhi.n	801add6 <_malloc_r+0x2b2>
 801adce:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801add2:	326e      	adds	r2, #110	@ 0x6e
 801add4:	e7df      	b.n	801ad96 <_malloc_r+0x272>
 801add6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801adda:	d803      	bhi.n	801ade4 <_malloc_r+0x2c0>
 801addc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801ade0:	3277      	adds	r2, #119	@ 0x77
 801ade2:	e7d8      	b.n	801ad96 <_malloc_r+0x272>
 801ade4:	f240 5e54 	movw	lr, #1364	@ 0x554
 801ade8:	4572      	cmp	r2, lr
 801adea:	bf9a      	itte	ls
 801adec:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801adf0:	327c      	addls	r2, #124	@ 0x7c
 801adf2:	227e      	movhi	r2, #126	@ 0x7e
 801adf4:	e7cf      	b.n	801ad96 <_malloc_r+0x272>
 801adf6:	f8de e008 	ldr.w	lr, [lr, #8]
 801adfa:	45f0      	cmp	r8, lr
 801adfc:	d005      	beq.n	801ae0a <_malloc_r+0x2e6>
 801adfe:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ae02:	f022 0203 	bic.w	r2, r2, #3
 801ae06:	4562      	cmp	r2, ip
 801ae08:	d8f5      	bhi.n	801adf6 <_malloc_r+0x2d2>
 801ae0a:	f8de 800c 	ldr.w	r8, [lr, #12]
 801ae0e:	e7d1      	b.n	801adb4 <_malloc_r+0x290>
 801ae10:	20003140 	.word	0x20003140
 801ae14:	20003148 	.word	0x20003148
 801ae18:	20011d94 	.word	0x20011d94
 801ae1c:	20003138 	.word	0x20003138
 801ae20:	20011d64 	.word	0x20011d64
 801ae24:	20011d90 	.word	0x20011d90
 801ae28:	20011d8c 	.word	0x20011d8c
 801ae2c:	6860      	ldr	r0, [r4, #4]
 801ae2e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801ae32:	f020 0003 	bic.w	r0, r0, #3
 801ae36:	eba0 0a07 	sub.w	sl, r0, r7
 801ae3a:	f1ba 0f0f 	cmp.w	sl, #15
 801ae3e:	dd12      	ble.n	801ae66 <_malloc_r+0x342>
 801ae40:	68a3      	ldr	r3, [r4, #8]
 801ae42:	19e2      	adds	r2, r4, r7
 801ae44:	f047 0701 	orr.w	r7, r7, #1
 801ae48:	6067      	str	r7, [r4, #4]
 801ae4a:	f8c3 c00c 	str.w	ip, [r3, #12]
 801ae4e:	f8cc 3008 	str.w	r3, [ip, #8]
 801ae52:	f04a 0301 	orr.w	r3, sl, #1
 801ae56:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801ae5a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801ae5e:	6053      	str	r3, [r2, #4]
 801ae60:	f844 a000 	str.w	sl, [r4, r0]
 801ae64:	e68f      	b.n	801ab86 <_malloc_r+0x62>
 801ae66:	f1ba 0f00 	cmp.w	sl, #0
 801ae6a:	db11      	blt.n	801ae90 <_malloc_r+0x36c>
 801ae6c:	4420      	add	r0, r4
 801ae6e:	6843      	ldr	r3, [r0, #4]
 801ae70:	f043 0301 	orr.w	r3, r3, #1
 801ae74:	6043      	str	r3, [r0, #4]
 801ae76:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	f8c3 c00c 	str.w	ip, [r3, #12]
 801ae80:	f8cc 3008 	str.w	r3, [ip, #8]
 801ae84:	f000 f88e 	bl	801afa4 <__malloc_unlock>
 801ae88:	4620      	mov	r0, r4
 801ae8a:	b003      	add	sp, #12
 801ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae90:	4664      	mov	r4, ip
 801ae92:	e70f      	b.n	801acb4 <_malloc_r+0x190>
 801ae94:	f858 0908 	ldr.w	r0, [r8], #-8
 801ae98:	4540      	cmp	r0, r8
 801ae9a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ae9e:	f43f af13 	beq.w	801acc8 <_malloc_r+0x1a4>
 801aea2:	e718      	b.n	801acd6 <_malloc_r+0x1b2>
 801aea4:	3304      	adds	r3, #4
 801aea6:	0052      	lsls	r2, r2, #1
 801aea8:	4210      	tst	r0, r2
 801aeaa:	d0fb      	beq.n	801aea4 <_malloc_r+0x380>
 801aeac:	e6fc      	b.n	801aca8 <_malloc_r+0x184>
 801aeae:	4673      	mov	r3, lr
 801aeb0:	e7fa      	b.n	801aea8 <_malloc_r+0x384>
 801aeb2:	6810      	ldr	r0, [r2, #0]
 801aeb4:	3001      	adds	r0, #1
 801aeb6:	bf1b      	ittet	ne
 801aeb8:	eba4 0b0b 	subne.w	fp, r4, fp
 801aebc:	eb0b 020e 	addne.w	r2, fp, lr
 801aec0:	6014      	streq	r4, [r2, #0]
 801aec2:	601a      	strne	r2, [r3, #0]
 801aec4:	f014 0b07 	ands.w	fp, r4, #7
 801aec8:	bf1a      	itte	ne
 801aeca:	f1cb 0008 	rsbne	r0, fp, #8
 801aece:	1824      	addne	r4, r4, r0
 801aed0:	4658      	moveq	r0, fp
 801aed2:	1862      	adds	r2, r4, r1
 801aed4:	ea02 010c 	and.w	r1, r2, ip
 801aed8:	4480      	add	r8, r0
 801aeda:	eba8 0801 	sub.w	r8, r8, r1
 801aede:	ea08 080c 	and.w	r8, r8, ip
 801aee2:	4641      	mov	r1, r8
 801aee4:	4628      	mov	r0, r5
 801aee6:	9201      	str	r2, [sp, #4]
 801aee8:	f000 fd3a 	bl	801b960 <_sbrk_r>
 801aeec:	1c43      	adds	r3, r0, #1
 801aeee:	9a01      	ldr	r2, [sp, #4]
 801aef0:	4b28      	ldr	r3, [pc, #160]	@ (801af94 <_malloc_r+0x470>)
 801aef2:	d107      	bne.n	801af04 <_malloc_r+0x3e0>
 801aef4:	f1bb 0f00 	cmp.w	fp, #0
 801aef8:	d023      	beq.n	801af42 <_malloc_r+0x41e>
 801aefa:	f1ab 0008 	sub.w	r0, fp, #8
 801aefe:	4410      	add	r0, r2
 801af00:	f04f 0800 	mov.w	r8, #0
 801af04:	681a      	ldr	r2, [r3, #0]
 801af06:	60b4      	str	r4, [r6, #8]
 801af08:	1b00      	subs	r0, r0, r4
 801af0a:	4440      	add	r0, r8
 801af0c:	4442      	add	r2, r8
 801af0e:	f040 0001 	orr.w	r0, r0, #1
 801af12:	45b2      	cmp	sl, r6
 801af14:	601a      	str	r2, [r3, #0]
 801af16:	6060      	str	r0, [r4, #4]
 801af18:	f43f af29 	beq.w	801ad6e <_malloc_r+0x24a>
 801af1c:	f1b9 0f0f 	cmp.w	r9, #15
 801af20:	d812      	bhi.n	801af48 <_malloc_r+0x424>
 801af22:	2301      	movs	r3, #1
 801af24:	6063      	str	r3, [r4, #4]
 801af26:	68b3      	ldr	r3, [r6, #8]
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	f023 0303 	bic.w	r3, r3, #3
 801af2e:	42bb      	cmp	r3, r7
 801af30:	eba3 0207 	sub.w	r2, r3, r7
 801af34:	d301      	bcc.n	801af3a <_malloc_r+0x416>
 801af36:	2a0f      	cmp	r2, #15
 801af38:	dc22      	bgt.n	801af80 <_malloc_r+0x45c>
 801af3a:	4628      	mov	r0, r5
 801af3c:	f000 f832 	bl	801afa4 <__malloc_unlock>
 801af40:	e5fc      	b.n	801ab3c <_malloc_r+0x18>
 801af42:	4610      	mov	r0, r2
 801af44:	46d8      	mov	r8, fp
 801af46:	e7dd      	b.n	801af04 <_malloc_r+0x3e0>
 801af48:	f8da 2004 	ldr.w	r2, [sl, #4]
 801af4c:	f1a9 090c 	sub.w	r9, r9, #12
 801af50:	f029 0907 	bic.w	r9, r9, #7
 801af54:	f002 0201 	and.w	r2, r2, #1
 801af58:	ea42 0209 	orr.w	r2, r2, r9
 801af5c:	f8ca 2004 	str.w	r2, [sl, #4]
 801af60:	2105      	movs	r1, #5
 801af62:	eb0a 0209 	add.w	r2, sl, r9
 801af66:	f1b9 0f0f 	cmp.w	r9, #15
 801af6a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801af6e:	f67f aefe 	bls.w	801ad6e <_malloc_r+0x24a>
 801af72:	f10a 0108 	add.w	r1, sl, #8
 801af76:	4628      	mov	r0, r5
 801af78:	f000 fe2c 	bl	801bbd4 <_free_r>
 801af7c:	4b05      	ldr	r3, [pc, #20]	@ (801af94 <_malloc_r+0x470>)
 801af7e:	e6f6      	b.n	801ad6e <_malloc_r+0x24a>
 801af80:	68b4      	ldr	r4, [r6, #8]
 801af82:	f047 0301 	orr.w	r3, r7, #1
 801af86:	4427      	add	r7, r4
 801af88:	f042 0201 	orr.w	r2, r2, #1
 801af8c:	6063      	str	r3, [r4, #4]
 801af8e:	60b7      	str	r7, [r6, #8]
 801af90:	607a      	str	r2, [r7, #4]
 801af92:	e5f8      	b.n	801ab86 <_malloc_r+0x62>
 801af94:	20011d64 	.word	0x20011d64

0801af98 <__malloc_lock>:
 801af98:	4801      	ldr	r0, [pc, #4]	@ (801afa0 <__malloc_lock+0x8>)
 801af9a:	f000 bd2f 	b.w	801b9fc <__retarget_lock_acquire_recursive>
 801af9e:	bf00      	nop
 801afa0:	20011ed9 	.word	0x20011ed9

0801afa4 <__malloc_unlock>:
 801afa4:	4801      	ldr	r0, [pc, #4]	@ (801afac <__malloc_unlock+0x8>)
 801afa6:	f000 bd2a 	b.w	801b9fe <__retarget_lock_release_recursive>
 801afaa:	bf00      	nop
 801afac:	20011ed9 	.word	0x20011ed9

0801afb0 <srand>:
 801afb0:	4b03      	ldr	r3, [pc, #12]	@ (801afc0 <srand+0x10>)
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	2200      	movs	r2, #0
 801afb6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 801afba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 801afbe:	4770      	bx	lr
 801afc0:	20003554 	.word	0x20003554

0801afc4 <rand>:
 801afc4:	4b0a      	ldr	r3, [pc, #40]	@ (801aff0 <rand+0x2c>)
 801afc6:	480b      	ldr	r0, [pc, #44]	@ (801aff4 <rand+0x30>)
 801afc8:	6819      	ldr	r1, [r3, #0]
 801afca:	4a0b      	ldr	r2, [pc, #44]	@ (801aff8 <rand+0x34>)
 801afcc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 801afd0:	b510      	push	{r4, lr}
 801afd2:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 801afd6:	4358      	muls	r0, r3
 801afd8:	fb02 0004 	mla	r0, r2, r4, r0
 801afdc:	fba3 3202 	umull	r3, r2, r3, r2
 801afe0:	3301      	adds	r3, #1
 801afe2:	eb40 0002 	adc.w	r0, r0, r2
 801afe6:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 801afea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801afee:	bd10      	pop	{r4, pc}
 801aff0:	20003554 	.word	0x20003554
 801aff4:	5851f42d 	.word	0x5851f42d
 801aff8:	4c957f2d 	.word	0x4c957f2d

0801affc <realloc>:
 801affc:	4b02      	ldr	r3, [pc, #8]	@ (801b008 <realloc+0xc>)
 801affe:	460a      	mov	r2, r1
 801b000:	4601      	mov	r1, r0
 801b002:	6818      	ldr	r0, [r3, #0]
 801b004:	f000 b802 	b.w	801b00c <_realloc_r>
 801b008:	20003554 	.word	0x20003554

0801b00c <_realloc_r>:
 801b00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b010:	4682      	mov	sl, r0
 801b012:	4693      	mov	fp, r2
 801b014:	460c      	mov	r4, r1
 801b016:	b929      	cbnz	r1, 801b024 <_realloc_r+0x18>
 801b018:	4611      	mov	r1, r2
 801b01a:	b003      	add	sp, #12
 801b01c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b020:	f7ff bd80 	b.w	801ab24 <_malloc_r>
 801b024:	f7ff ffb8 	bl	801af98 <__malloc_lock>
 801b028:	f10b 080b 	add.w	r8, fp, #11
 801b02c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801b030:	f1b8 0f16 	cmp.w	r8, #22
 801b034:	f1a4 0908 	sub.w	r9, r4, #8
 801b038:	f025 0603 	bic.w	r6, r5, #3
 801b03c:	d908      	bls.n	801b050 <_realloc_r+0x44>
 801b03e:	f038 0807 	bics.w	r8, r8, #7
 801b042:	d507      	bpl.n	801b054 <_realloc_r+0x48>
 801b044:	230c      	movs	r3, #12
 801b046:	f8ca 3000 	str.w	r3, [sl]
 801b04a:	f04f 0b00 	mov.w	fp, #0
 801b04e:	e032      	b.n	801b0b6 <_realloc_r+0xaa>
 801b050:	f04f 0810 	mov.w	r8, #16
 801b054:	45c3      	cmp	fp, r8
 801b056:	d8f5      	bhi.n	801b044 <_realloc_r+0x38>
 801b058:	4546      	cmp	r6, r8
 801b05a:	f280 8174 	bge.w	801b346 <_realloc_r+0x33a>
 801b05e:	4b9e      	ldr	r3, [pc, #632]	@ (801b2d8 <_realloc_r+0x2cc>)
 801b060:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801b064:	eb09 0106 	add.w	r1, r9, r6
 801b068:	458c      	cmp	ip, r1
 801b06a:	6848      	ldr	r0, [r1, #4]
 801b06c:	d005      	beq.n	801b07a <_realloc_r+0x6e>
 801b06e:	f020 0201 	bic.w	r2, r0, #1
 801b072:	440a      	add	r2, r1
 801b074:	6852      	ldr	r2, [r2, #4]
 801b076:	07d7      	lsls	r7, r2, #31
 801b078:	d449      	bmi.n	801b10e <_realloc_r+0x102>
 801b07a:	f020 0003 	bic.w	r0, r0, #3
 801b07e:	458c      	cmp	ip, r1
 801b080:	eb06 0700 	add.w	r7, r6, r0
 801b084:	d11b      	bne.n	801b0be <_realloc_r+0xb2>
 801b086:	f108 0210 	add.w	r2, r8, #16
 801b08a:	42ba      	cmp	r2, r7
 801b08c:	dc41      	bgt.n	801b112 <_realloc_r+0x106>
 801b08e:	eb09 0208 	add.w	r2, r9, r8
 801b092:	eba7 0708 	sub.w	r7, r7, r8
 801b096:	f047 0701 	orr.w	r7, r7, #1
 801b09a:	609a      	str	r2, [r3, #8]
 801b09c:	6057      	str	r7, [r2, #4]
 801b09e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b0a2:	f003 0301 	and.w	r3, r3, #1
 801b0a6:	ea43 0308 	orr.w	r3, r3, r8
 801b0aa:	f844 3c04 	str.w	r3, [r4, #-4]
 801b0ae:	4650      	mov	r0, sl
 801b0b0:	f7ff ff78 	bl	801afa4 <__malloc_unlock>
 801b0b4:	46a3      	mov	fp, r4
 801b0b6:	4658      	mov	r0, fp
 801b0b8:	b003      	add	sp, #12
 801b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0be:	45b8      	cmp	r8, r7
 801b0c0:	dc27      	bgt.n	801b112 <_realloc_r+0x106>
 801b0c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801b0c6:	60d3      	str	r3, [r2, #12]
 801b0c8:	609a      	str	r2, [r3, #8]
 801b0ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b0ce:	eba7 0008 	sub.w	r0, r7, r8
 801b0d2:	280f      	cmp	r0, #15
 801b0d4:	f003 0301 	and.w	r3, r3, #1
 801b0d8:	eb09 0207 	add.w	r2, r9, r7
 801b0dc:	f240 8135 	bls.w	801b34a <_realloc_r+0x33e>
 801b0e0:	eb09 0108 	add.w	r1, r9, r8
 801b0e4:	ea48 0303 	orr.w	r3, r8, r3
 801b0e8:	f040 0001 	orr.w	r0, r0, #1
 801b0ec:	f8c9 3004 	str.w	r3, [r9, #4]
 801b0f0:	6048      	str	r0, [r1, #4]
 801b0f2:	6853      	ldr	r3, [r2, #4]
 801b0f4:	f043 0301 	orr.w	r3, r3, #1
 801b0f8:	6053      	str	r3, [r2, #4]
 801b0fa:	3108      	adds	r1, #8
 801b0fc:	4650      	mov	r0, sl
 801b0fe:	f000 fd69 	bl	801bbd4 <_free_r>
 801b102:	4650      	mov	r0, sl
 801b104:	f7ff ff4e 	bl	801afa4 <__malloc_unlock>
 801b108:	f109 0b08 	add.w	fp, r9, #8
 801b10c:	e7d3      	b.n	801b0b6 <_realloc_r+0xaa>
 801b10e:	2000      	movs	r0, #0
 801b110:	4601      	mov	r1, r0
 801b112:	07ea      	lsls	r2, r5, #31
 801b114:	f100 80c7 	bmi.w	801b2a6 <_realloc_r+0x29a>
 801b118:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801b11c:	eba9 0505 	sub.w	r5, r9, r5
 801b120:	686a      	ldr	r2, [r5, #4]
 801b122:	f022 0203 	bic.w	r2, r2, #3
 801b126:	4432      	add	r2, r6
 801b128:	9201      	str	r2, [sp, #4]
 801b12a:	2900      	cmp	r1, #0
 801b12c:	f000 8086 	beq.w	801b23c <_realloc_r+0x230>
 801b130:	458c      	cmp	ip, r1
 801b132:	eb00 0702 	add.w	r7, r0, r2
 801b136:	d149      	bne.n	801b1cc <_realloc_r+0x1c0>
 801b138:	f108 0210 	add.w	r2, r8, #16
 801b13c:	42ba      	cmp	r2, r7
 801b13e:	dc7d      	bgt.n	801b23c <_realloc_r+0x230>
 801b140:	46ab      	mov	fp, r5
 801b142:	68ea      	ldr	r2, [r5, #12]
 801b144:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 801b148:	60ca      	str	r2, [r1, #12]
 801b14a:	6091      	str	r1, [r2, #8]
 801b14c:	1f32      	subs	r2, r6, #4
 801b14e:	2a24      	cmp	r2, #36	@ 0x24
 801b150:	d836      	bhi.n	801b1c0 <_realloc_r+0x1b4>
 801b152:	2a13      	cmp	r2, #19
 801b154:	d932      	bls.n	801b1bc <_realloc_r+0x1b0>
 801b156:	6821      	ldr	r1, [r4, #0]
 801b158:	60a9      	str	r1, [r5, #8]
 801b15a:	6861      	ldr	r1, [r4, #4]
 801b15c:	60e9      	str	r1, [r5, #12]
 801b15e:	2a1b      	cmp	r2, #27
 801b160:	d81a      	bhi.n	801b198 <_realloc_r+0x18c>
 801b162:	3408      	adds	r4, #8
 801b164:	f105 0210 	add.w	r2, r5, #16
 801b168:	6821      	ldr	r1, [r4, #0]
 801b16a:	6011      	str	r1, [r2, #0]
 801b16c:	6861      	ldr	r1, [r4, #4]
 801b16e:	6051      	str	r1, [r2, #4]
 801b170:	68a1      	ldr	r1, [r4, #8]
 801b172:	6091      	str	r1, [r2, #8]
 801b174:	eb05 0208 	add.w	r2, r5, r8
 801b178:	eba7 0708 	sub.w	r7, r7, r8
 801b17c:	f047 0701 	orr.w	r7, r7, #1
 801b180:	609a      	str	r2, [r3, #8]
 801b182:	6057      	str	r7, [r2, #4]
 801b184:	686b      	ldr	r3, [r5, #4]
 801b186:	f003 0301 	and.w	r3, r3, #1
 801b18a:	ea43 0308 	orr.w	r3, r3, r8
 801b18e:	606b      	str	r3, [r5, #4]
 801b190:	4650      	mov	r0, sl
 801b192:	f7ff ff07 	bl	801afa4 <__malloc_unlock>
 801b196:	e78e      	b.n	801b0b6 <_realloc_r+0xaa>
 801b198:	68a1      	ldr	r1, [r4, #8]
 801b19a:	6129      	str	r1, [r5, #16]
 801b19c:	68e1      	ldr	r1, [r4, #12]
 801b19e:	6169      	str	r1, [r5, #20]
 801b1a0:	2a24      	cmp	r2, #36	@ 0x24
 801b1a2:	bf01      	itttt	eq
 801b1a4:	6922      	ldreq	r2, [r4, #16]
 801b1a6:	61aa      	streq	r2, [r5, #24]
 801b1a8:	6961      	ldreq	r1, [r4, #20]
 801b1aa:	61e9      	streq	r1, [r5, #28]
 801b1ac:	bf19      	ittee	ne
 801b1ae:	3410      	addne	r4, #16
 801b1b0:	f105 0218 	addne.w	r2, r5, #24
 801b1b4:	f105 0220 	addeq.w	r2, r5, #32
 801b1b8:	3418      	addeq	r4, #24
 801b1ba:	e7d5      	b.n	801b168 <_realloc_r+0x15c>
 801b1bc:	465a      	mov	r2, fp
 801b1be:	e7d3      	b.n	801b168 <_realloc_r+0x15c>
 801b1c0:	4621      	mov	r1, r4
 801b1c2:	4658      	mov	r0, fp
 801b1c4:	f000 fb2e 	bl	801b824 <memmove>
 801b1c8:	4b43      	ldr	r3, [pc, #268]	@ (801b2d8 <_realloc_r+0x2cc>)
 801b1ca:	e7d3      	b.n	801b174 <_realloc_r+0x168>
 801b1cc:	45b8      	cmp	r8, r7
 801b1ce:	dc35      	bgt.n	801b23c <_realloc_r+0x230>
 801b1d0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801b1d4:	4628      	mov	r0, r5
 801b1d6:	60d3      	str	r3, [r2, #12]
 801b1d8:	609a      	str	r2, [r3, #8]
 801b1da:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801b1de:	68eb      	ldr	r3, [r5, #12]
 801b1e0:	60d3      	str	r3, [r2, #12]
 801b1e2:	609a      	str	r2, [r3, #8]
 801b1e4:	1f32      	subs	r2, r6, #4
 801b1e6:	2a24      	cmp	r2, #36	@ 0x24
 801b1e8:	d824      	bhi.n	801b234 <_realloc_r+0x228>
 801b1ea:	2a13      	cmp	r2, #19
 801b1ec:	d908      	bls.n	801b200 <_realloc_r+0x1f4>
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	60ab      	str	r3, [r5, #8]
 801b1f2:	6863      	ldr	r3, [r4, #4]
 801b1f4:	60eb      	str	r3, [r5, #12]
 801b1f6:	2a1b      	cmp	r2, #27
 801b1f8:	d80a      	bhi.n	801b210 <_realloc_r+0x204>
 801b1fa:	3408      	adds	r4, #8
 801b1fc:	f105 0010 	add.w	r0, r5, #16
 801b200:	6823      	ldr	r3, [r4, #0]
 801b202:	6003      	str	r3, [r0, #0]
 801b204:	6863      	ldr	r3, [r4, #4]
 801b206:	6043      	str	r3, [r0, #4]
 801b208:	68a3      	ldr	r3, [r4, #8]
 801b20a:	6083      	str	r3, [r0, #8]
 801b20c:	46a9      	mov	r9, r5
 801b20e:	e75c      	b.n	801b0ca <_realloc_r+0xbe>
 801b210:	68a3      	ldr	r3, [r4, #8]
 801b212:	612b      	str	r3, [r5, #16]
 801b214:	68e3      	ldr	r3, [r4, #12]
 801b216:	616b      	str	r3, [r5, #20]
 801b218:	2a24      	cmp	r2, #36	@ 0x24
 801b21a:	bf01      	itttt	eq
 801b21c:	6923      	ldreq	r3, [r4, #16]
 801b21e:	61ab      	streq	r3, [r5, #24]
 801b220:	6963      	ldreq	r3, [r4, #20]
 801b222:	61eb      	streq	r3, [r5, #28]
 801b224:	bf19      	ittee	ne
 801b226:	3410      	addne	r4, #16
 801b228:	f105 0018 	addne.w	r0, r5, #24
 801b22c:	f105 0020 	addeq.w	r0, r5, #32
 801b230:	3418      	addeq	r4, #24
 801b232:	e7e5      	b.n	801b200 <_realloc_r+0x1f4>
 801b234:	4621      	mov	r1, r4
 801b236:	f000 faf5 	bl	801b824 <memmove>
 801b23a:	e7e7      	b.n	801b20c <_realloc_r+0x200>
 801b23c:	9b01      	ldr	r3, [sp, #4]
 801b23e:	4598      	cmp	r8, r3
 801b240:	dc31      	bgt.n	801b2a6 <_realloc_r+0x29a>
 801b242:	4628      	mov	r0, r5
 801b244:	68eb      	ldr	r3, [r5, #12]
 801b246:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801b24a:	60d3      	str	r3, [r2, #12]
 801b24c:	609a      	str	r2, [r3, #8]
 801b24e:	1f32      	subs	r2, r6, #4
 801b250:	2a24      	cmp	r2, #36	@ 0x24
 801b252:	d824      	bhi.n	801b29e <_realloc_r+0x292>
 801b254:	2a13      	cmp	r2, #19
 801b256:	d908      	bls.n	801b26a <_realloc_r+0x25e>
 801b258:	6823      	ldr	r3, [r4, #0]
 801b25a:	60ab      	str	r3, [r5, #8]
 801b25c:	6863      	ldr	r3, [r4, #4]
 801b25e:	60eb      	str	r3, [r5, #12]
 801b260:	2a1b      	cmp	r2, #27
 801b262:	d80a      	bhi.n	801b27a <_realloc_r+0x26e>
 801b264:	3408      	adds	r4, #8
 801b266:	f105 0010 	add.w	r0, r5, #16
 801b26a:	6823      	ldr	r3, [r4, #0]
 801b26c:	6003      	str	r3, [r0, #0]
 801b26e:	6863      	ldr	r3, [r4, #4]
 801b270:	6043      	str	r3, [r0, #4]
 801b272:	68a3      	ldr	r3, [r4, #8]
 801b274:	6083      	str	r3, [r0, #8]
 801b276:	9f01      	ldr	r7, [sp, #4]
 801b278:	e7c8      	b.n	801b20c <_realloc_r+0x200>
 801b27a:	68a3      	ldr	r3, [r4, #8]
 801b27c:	612b      	str	r3, [r5, #16]
 801b27e:	68e3      	ldr	r3, [r4, #12]
 801b280:	616b      	str	r3, [r5, #20]
 801b282:	2a24      	cmp	r2, #36	@ 0x24
 801b284:	bf01      	itttt	eq
 801b286:	6923      	ldreq	r3, [r4, #16]
 801b288:	61ab      	streq	r3, [r5, #24]
 801b28a:	6963      	ldreq	r3, [r4, #20]
 801b28c:	61eb      	streq	r3, [r5, #28]
 801b28e:	bf19      	ittee	ne
 801b290:	3410      	addne	r4, #16
 801b292:	f105 0018 	addne.w	r0, r5, #24
 801b296:	f105 0020 	addeq.w	r0, r5, #32
 801b29a:	3418      	addeq	r4, #24
 801b29c:	e7e5      	b.n	801b26a <_realloc_r+0x25e>
 801b29e:	4621      	mov	r1, r4
 801b2a0:	f000 fac0 	bl	801b824 <memmove>
 801b2a4:	e7e7      	b.n	801b276 <_realloc_r+0x26a>
 801b2a6:	4659      	mov	r1, fp
 801b2a8:	4650      	mov	r0, sl
 801b2aa:	f7ff fc3b 	bl	801ab24 <_malloc_r>
 801b2ae:	4683      	mov	fp, r0
 801b2b0:	b918      	cbnz	r0, 801b2ba <_realloc_r+0x2ae>
 801b2b2:	4650      	mov	r0, sl
 801b2b4:	f7ff fe76 	bl	801afa4 <__malloc_unlock>
 801b2b8:	e6c7      	b.n	801b04a <_realloc_r+0x3e>
 801b2ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b2be:	f023 0301 	bic.w	r3, r3, #1
 801b2c2:	444b      	add	r3, r9
 801b2c4:	f1a0 0208 	sub.w	r2, r0, #8
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	d107      	bne.n	801b2dc <_realloc_r+0x2d0>
 801b2cc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801b2d0:	f027 0703 	bic.w	r7, r7, #3
 801b2d4:	4437      	add	r7, r6
 801b2d6:	e6f8      	b.n	801b0ca <_realloc_r+0xbe>
 801b2d8:	20003140 	.word	0x20003140
 801b2dc:	1f32      	subs	r2, r6, #4
 801b2de:	2a24      	cmp	r2, #36	@ 0x24
 801b2e0:	d82d      	bhi.n	801b33e <_realloc_r+0x332>
 801b2e2:	2a13      	cmp	r2, #19
 801b2e4:	d928      	bls.n	801b338 <_realloc_r+0x32c>
 801b2e6:	6823      	ldr	r3, [r4, #0]
 801b2e8:	6003      	str	r3, [r0, #0]
 801b2ea:	6863      	ldr	r3, [r4, #4]
 801b2ec:	6043      	str	r3, [r0, #4]
 801b2ee:	2a1b      	cmp	r2, #27
 801b2f0:	d80e      	bhi.n	801b310 <_realloc_r+0x304>
 801b2f2:	f104 0208 	add.w	r2, r4, #8
 801b2f6:	f100 0308 	add.w	r3, r0, #8
 801b2fa:	6811      	ldr	r1, [r2, #0]
 801b2fc:	6019      	str	r1, [r3, #0]
 801b2fe:	6851      	ldr	r1, [r2, #4]
 801b300:	6059      	str	r1, [r3, #4]
 801b302:	6892      	ldr	r2, [r2, #8]
 801b304:	609a      	str	r2, [r3, #8]
 801b306:	4621      	mov	r1, r4
 801b308:	4650      	mov	r0, sl
 801b30a:	f000 fc63 	bl	801bbd4 <_free_r>
 801b30e:	e73f      	b.n	801b190 <_realloc_r+0x184>
 801b310:	68a3      	ldr	r3, [r4, #8]
 801b312:	6083      	str	r3, [r0, #8]
 801b314:	68e3      	ldr	r3, [r4, #12]
 801b316:	60c3      	str	r3, [r0, #12]
 801b318:	2a24      	cmp	r2, #36	@ 0x24
 801b31a:	bf01      	itttt	eq
 801b31c:	6923      	ldreq	r3, [r4, #16]
 801b31e:	6103      	streq	r3, [r0, #16]
 801b320:	6961      	ldreq	r1, [r4, #20]
 801b322:	6141      	streq	r1, [r0, #20]
 801b324:	bf19      	ittee	ne
 801b326:	f104 0210 	addne.w	r2, r4, #16
 801b32a:	f100 0310 	addne.w	r3, r0, #16
 801b32e:	f104 0218 	addeq.w	r2, r4, #24
 801b332:	f100 0318 	addeq.w	r3, r0, #24
 801b336:	e7e0      	b.n	801b2fa <_realloc_r+0x2ee>
 801b338:	4603      	mov	r3, r0
 801b33a:	4622      	mov	r2, r4
 801b33c:	e7dd      	b.n	801b2fa <_realloc_r+0x2ee>
 801b33e:	4621      	mov	r1, r4
 801b340:	f000 fa70 	bl	801b824 <memmove>
 801b344:	e7df      	b.n	801b306 <_realloc_r+0x2fa>
 801b346:	4637      	mov	r7, r6
 801b348:	e6bf      	b.n	801b0ca <_realloc_r+0xbe>
 801b34a:	431f      	orrs	r7, r3
 801b34c:	f8c9 7004 	str.w	r7, [r9, #4]
 801b350:	6853      	ldr	r3, [r2, #4]
 801b352:	f043 0301 	orr.w	r3, r3, #1
 801b356:	6053      	str	r3, [r2, #4]
 801b358:	e6d3      	b.n	801b102 <_realloc_r+0xf6>
 801b35a:	bf00      	nop

0801b35c <_strtoul_l.isra.0>:
 801b35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b360:	4e34      	ldr	r6, [pc, #208]	@ (801b434 <_strtoul_l.isra.0+0xd8>)
 801b362:	4686      	mov	lr, r0
 801b364:	460d      	mov	r5, r1
 801b366:	4628      	mov	r0, r5
 801b368:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b36c:	5d37      	ldrb	r7, [r6, r4]
 801b36e:	f017 0708 	ands.w	r7, r7, #8
 801b372:	d1f8      	bne.n	801b366 <_strtoul_l.isra.0+0xa>
 801b374:	2c2d      	cmp	r4, #45	@ 0x2d
 801b376:	d110      	bne.n	801b39a <_strtoul_l.isra.0+0x3e>
 801b378:	782c      	ldrb	r4, [r5, #0]
 801b37a:	2701      	movs	r7, #1
 801b37c:	1c85      	adds	r5, r0, #2
 801b37e:	f033 0010 	bics.w	r0, r3, #16
 801b382:	d115      	bne.n	801b3b0 <_strtoul_l.isra.0+0x54>
 801b384:	2c30      	cmp	r4, #48	@ 0x30
 801b386:	d10d      	bne.n	801b3a4 <_strtoul_l.isra.0+0x48>
 801b388:	7828      	ldrb	r0, [r5, #0]
 801b38a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b38e:	2858      	cmp	r0, #88	@ 0x58
 801b390:	d108      	bne.n	801b3a4 <_strtoul_l.isra.0+0x48>
 801b392:	786c      	ldrb	r4, [r5, #1]
 801b394:	3502      	adds	r5, #2
 801b396:	2310      	movs	r3, #16
 801b398:	e00a      	b.n	801b3b0 <_strtoul_l.isra.0+0x54>
 801b39a:	2c2b      	cmp	r4, #43	@ 0x2b
 801b39c:	bf04      	itt	eq
 801b39e:	782c      	ldrbeq	r4, [r5, #0]
 801b3a0:	1c85      	addeq	r5, r0, #2
 801b3a2:	e7ec      	b.n	801b37e <_strtoul_l.isra.0+0x22>
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d1f6      	bne.n	801b396 <_strtoul_l.isra.0+0x3a>
 801b3a8:	2c30      	cmp	r4, #48	@ 0x30
 801b3aa:	bf14      	ite	ne
 801b3ac:	230a      	movne	r3, #10
 801b3ae:	2308      	moveq	r3, #8
 801b3b0:	f04f 38ff 	mov.w	r8, #4294967295
 801b3b4:	2600      	movs	r6, #0
 801b3b6:	fbb8 f8f3 	udiv	r8, r8, r3
 801b3ba:	fb03 f908 	mul.w	r9, r3, r8
 801b3be:	ea6f 0909 	mvn.w	r9, r9
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b3c8:	f1bc 0f09 	cmp.w	ip, #9
 801b3cc:	d810      	bhi.n	801b3f0 <_strtoul_l.isra.0+0x94>
 801b3ce:	4664      	mov	r4, ip
 801b3d0:	42a3      	cmp	r3, r4
 801b3d2:	dd1e      	ble.n	801b412 <_strtoul_l.isra.0+0xb6>
 801b3d4:	f1b6 3fff 	cmp.w	r6, #4294967295
 801b3d8:	d007      	beq.n	801b3ea <_strtoul_l.isra.0+0x8e>
 801b3da:	4580      	cmp	r8, r0
 801b3dc:	d316      	bcc.n	801b40c <_strtoul_l.isra.0+0xb0>
 801b3de:	d101      	bne.n	801b3e4 <_strtoul_l.isra.0+0x88>
 801b3e0:	45a1      	cmp	r9, r4
 801b3e2:	db13      	blt.n	801b40c <_strtoul_l.isra.0+0xb0>
 801b3e4:	fb00 4003 	mla	r0, r0, r3, r4
 801b3e8:	2601      	movs	r6, #1
 801b3ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b3ee:	e7e9      	b.n	801b3c4 <_strtoul_l.isra.0+0x68>
 801b3f0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b3f4:	f1bc 0f19 	cmp.w	ip, #25
 801b3f8:	d801      	bhi.n	801b3fe <_strtoul_l.isra.0+0xa2>
 801b3fa:	3c37      	subs	r4, #55	@ 0x37
 801b3fc:	e7e8      	b.n	801b3d0 <_strtoul_l.isra.0+0x74>
 801b3fe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b402:	f1bc 0f19 	cmp.w	ip, #25
 801b406:	d804      	bhi.n	801b412 <_strtoul_l.isra.0+0xb6>
 801b408:	3c57      	subs	r4, #87	@ 0x57
 801b40a:	e7e1      	b.n	801b3d0 <_strtoul_l.isra.0+0x74>
 801b40c:	f04f 36ff 	mov.w	r6, #4294967295
 801b410:	e7eb      	b.n	801b3ea <_strtoul_l.isra.0+0x8e>
 801b412:	1c73      	adds	r3, r6, #1
 801b414:	d106      	bne.n	801b424 <_strtoul_l.isra.0+0xc8>
 801b416:	2322      	movs	r3, #34	@ 0x22
 801b418:	f8ce 3000 	str.w	r3, [lr]
 801b41c:	4630      	mov	r0, r6
 801b41e:	b932      	cbnz	r2, 801b42e <_strtoul_l.isra.0+0xd2>
 801b420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b424:	b107      	cbz	r7, 801b428 <_strtoul_l.isra.0+0xcc>
 801b426:	4240      	negs	r0, r0
 801b428:	2a00      	cmp	r2, #0
 801b42a:	d0f9      	beq.n	801b420 <_strtoul_l.isra.0+0xc4>
 801b42c:	b106      	cbz	r6, 801b430 <_strtoul_l.isra.0+0xd4>
 801b42e:	1e69      	subs	r1, r5, #1
 801b430:	6011      	str	r1, [r2, #0]
 801b432:	e7f5      	b.n	801b420 <_strtoul_l.isra.0+0xc4>
 801b434:	08022149 	.word	0x08022149

0801b438 <strtoul>:
 801b438:	4613      	mov	r3, r2
 801b43a:	460a      	mov	r2, r1
 801b43c:	4601      	mov	r1, r0
 801b43e:	4802      	ldr	r0, [pc, #8]	@ (801b448 <strtoul+0x10>)
 801b440:	6800      	ldr	r0, [r0, #0]
 801b442:	f7ff bf8b 	b.w	801b35c <_strtoul_l.isra.0>
 801b446:	bf00      	nop
 801b448:	20003554 	.word	0x20003554

0801b44c <std>:
 801b44c:	2300      	movs	r3, #0
 801b44e:	b510      	push	{r4, lr}
 801b450:	4604      	mov	r4, r0
 801b452:	e9c0 3300 	strd	r3, r3, [r0]
 801b456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b45a:	6083      	str	r3, [r0, #8]
 801b45c:	8181      	strh	r1, [r0, #12]
 801b45e:	6643      	str	r3, [r0, #100]	@ 0x64
 801b460:	81c2      	strh	r2, [r0, #14]
 801b462:	6183      	str	r3, [r0, #24]
 801b464:	4619      	mov	r1, r3
 801b466:	2208      	movs	r2, #8
 801b468:	305c      	adds	r0, #92	@ 0x5c
 801b46a:	f000 f9f5 	bl	801b858 <memset>
 801b46e:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a4 <std+0x58>)
 801b470:	6223      	str	r3, [r4, #32]
 801b472:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a8 <std+0x5c>)
 801b474:	6263      	str	r3, [r4, #36]	@ 0x24
 801b476:	4b0d      	ldr	r3, [pc, #52]	@ (801b4ac <std+0x60>)
 801b478:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b47a:	4b0d      	ldr	r3, [pc, #52]	@ (801b4b0 <std+0x64>)
 801b47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b47e:	4b0d      	ldr	r3, [pc, #52]	@ (801b4b4 <std+0x68>)
 801b480:	61e4      	str	r4, [r4, #28]
 801b482:	429c      	cmp	r4, r3
 801b484:	d006      	beq.n	801b494 <std+0x48>
 801b486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b48a:	4294      	cmp	r4, r2
 801b48c:	d002      	beq.n	801b494 <std+0x48>
 801b48e:	33d0      	adds	r3, #208	@ 0xd0
 801b490:	429c      	cmp	r4, r3
 801b492:	d105      	bne.n	801b4a0 <std+0x54>
 801b494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b49c:	f000 baac 	b.w	801b9f8 <__retarget_lock_init_recursive>
 801b4a0:	bd10      	pop	{r4, pc}
 801b4a2:	bf00      	nop
 801b4a4:	0801b705 	.word	0x0801b705
 801b4a8:	0801b727 	.word	0x0801b727
 801b4ac:	0801b75f 	.word	0x0801b75f
 801b4b0:	0801b783 	.word	0x0801b783
 801b4b4:	20011d98 	.word	0x20011d98

0801b4b8 <stdio_exit_handler>:
 801b4b8:	4a02      	ldr	r2, [pc, #8]	@ (801b4c4 <stdio_exit_handler+0xc>)
 801b4ba:	4903      	ldr	r1, [pc, #12]	@ (801b4c8 <stdio_exit_handler+0x10>)
 801b4bc:	4803      	ldr	r0, [pc, #12]	@ (801b4cc <stdio_exit_handler+0x14>)
 801b4be:	f000 b869 	b.w	801b594 <_fwalk_sglue>
 801b4c2:	bf00      	nop
 801b4c4:	20003548 	.word	0x20003548
 801b4c8:	0801d153 	.word	0x0801d153
 801b4cc:	20003558 	.word	0x20003558

0801b4d0 <cleanup_stdio>:
 801b4d0:	6841      	ldr	r1, [r0, #4]
 801b4d2:	4b0c      	ldr	r3, [pc, #48]	@ (801b504 <cleanup_stdio+0x34>)
 801b4d4:	4299      	cmp	r1, r3
 801b4d6:	b510      	push	{r4, lr}
 801b4d8:	4604      	mov	r4, r0
 801b4da:	d001      	beq.n	801b4e0 <cleanup_stdio+0x10>
 801b4dc:	f001 fe39 	bl	801d152 <_fclose_r>
 801b4e0:	68a1      	ldr	r1, [r4, #8]
 801b4e2:	4b09      	ldr	r3, [pc, #36]	@ (801b508 <cleanup_stdio+0x38>)
 801b4e4:	4299      	cmp	r1, r3
 801b4e6:	d002      	beq.n	801b4ee <cleanup_stdio+0x1e>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	f001 fe32 	bl	801d152 <_fclose_r>
 801b4ee:	68e1      	ldr	r1, [r4, #12]
 801b4f0:	4b06      	ldr	r3, [pc, #24]	@ (801b50c <cleanup_stdio+0x3c>)
 801b4f2:	4299      	cmp	r1, r3
 801b4f4:	d004      	beq.n	801b500 <cleanup_stdio+0x30>
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4fc:	f001 be29 	b.w	801d152 <_fclose_r>
 801b500:	bd10      	pop	{r4, pc}
 801b502:	bf00      	nop
 801b504:	20011d98 	.word	0x20011d98
 801b508:	20011e00 	.word	0x20011e00
 801b50c:	20011e68 	.word	0x20011e68

0801b510 <global_stdio_init.part.0>:
 801b510:	b510      	push	{r4, lr}
 801b512:	4b0b      	ldr	r3, [pc, #44]	@ (801b540 <global_stdio_init.part.0+0x30>)
 801b514:	4c0b      	ldr	r4, [pc, #44]	@ (801b544 <global_stdio_init.part.0+0x34>)
 801b516:	4a0c      	ldr	r2, [pc, #48]	@ (801b548 <global_stdio_init.part.0+0x38>)
 801b518:	601a      	str	r2, [r3, #0]
 801b51a:	4620      	mov	r0, r4
 801b51c:	2200      	movs	r2, #0
 801b51e:	2104      	movs	r1, #4
 801b520:	f7ff ff94 	bl	801b44c <std>
 801b524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b528:	2201      	movs	r2, #1
 801b52a:	2109      	movs	r1, #9
 801b52c:	f7ff ff8e 	bl	801b44c <std>
 801b530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b534:	2202      	movs	r2, #2
 801b536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b53a:	2112      	movs	r1, #18
 801b53c:	f7ff bf86 	b.w	801b44c <std>
 801b540:	20011ed0 	.word	0x20011ed0
 801b544:	20011d98 	.word	0x20011d98
 801b548:	0801b4b9 	.word	0x0801b4b9

0801b54c <__sfp_lock_acquire>:
 801b54c:	4801      	ldr	r0, [pc, #4]	@ (801b554 <__sfp_lock_acquire+0x8>)
 801b54e:	f000 ba55 	b.w	801b9fc <__retarget_lock_acquire_recursive>
 801b552:	bf00      	nop
 801b554:	20011edb 	.word	0x20011edb

0801b558 <__sfp_lock_release>:
 801b558:	4801      	ldr	r0, [pc, #4]	@ (801b560 <__sfp_lock_release+0x8>)
 801b55a:	f000 ba50 	b.w	801b9fe <__retarget_lock_release_recursive>
 801b55e:	bf00      	nop
 801b560:	20011edb 	.word	0x20011edb

0801b564 <__sinit>:
 801b564:	b510      	push	{r4, lr}
 801b566:	4604      	mov	r4, r0
 801b568:	f7ff fff0 	bl	801b54c <__sfp_lock_acquire>
 801b56c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b56e:	b11b      	cbz	r3, 801b578 <__sinit+0x14>
 801b570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b574:	f7ff bff0 	b.w	801b558 <__sfp_lock_release>
 801b578:	4b04      	ldr	r3, [pc, #16]	@ (801b58c <__sinit+0x28>)
 801b57a:	6363      	str	r3, [r4, #52]	@ 0x34
 801b57c:	4b04      	ldr	r3, [pc, #16]	@ (801b590 <__sinit+0x2c>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d1f5      	bne.n	801b570 <__sinit+0xc>
 801b584:	f7ff ffc4 	bl	801b510 <global_stdio_init.part.0>
 801b588:	e7f2      	b.n	801b570 <__sinit+0xc>
 801b58a:	bf00      	nop
 801b58c:	0801b4d1 	.word	0x0801b4d1
 801b590:	20011ed0 	.word	0x20011ed0

0801b594 <_fwalk_sglue>:
 801b594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b598:	4607      	mov	r7, r0
 801b59a:	4688      	mov	r8, r1
 801b59c:	4614      	mov	r4, r2
 801b59e:	2600      	movs	r6, #0
 801b5a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b5a4:	f1b9 0901 	subs.w	r9, r9, #1
 801b5a8:	d505      	bpl.n	801b5b6 <_fwalk_sglue+0x22>
 801b5aa:	6824      	ldr	r4, [r4, #0]
 801b5ac:	2c00      	cmp	r4, #0
 801b5ae:	d1f7      	bne.n	801b5a0 <_fwalk_sglue+0xc>
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5b6:	89ab      	ldrh	r3, [r5, #12]
 801b5b8:	2b01      	cmp	r3, #1
 801b5ba:	d907      	bls.n	801b5cc <_fwalk_sglue+0x38>
 801b5bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b5c0:	3301      	adds	r3, #1
 801b5c2:	d003      	beq.n	801b5cc <_fwalk_sglue+0x38>
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	4638      	mov	r0, r7
 801b5c8:	47c0      	blx	r8
 801b5ca:	4306      	orrs	r6, r0
 801b5cc:	3568      	adds	r5, #104	@ 0x68
 801b5ce:	e7e9      	b.n	801b5a4 <_fwalk_sglue+0x10>

0801b5d0 <_fwrite_r>:
 801b5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5d4:	b086      	sub	sp, #24
 801b5d6:	fb02 f603 	mul.w	r6, r2, r3
 801b5da:	461d      	mov	r5, r3
 801b5dc:	ab01      	add	r3, sp, #4
 801b5de:	9303      	str	r3, [sp, #12]
 801b5e0:	2301      	movs	r3, #1
 801b5e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b5e4:	9101      	str	r1, [sp, #4]
 801b5e6:	4690      	mov	r8, r2
 801b5e8:	9602      	str	r6, [sp, #8]
 801b5ea:	9605      	str	r6, [sp, #20]
 801b5ec:	9304      	str	r3, [sp, #16]
 801b5ee:	4607      	mov	r7, r0
 801b5f0:	b118      	cbz	r0, 801b5fa <_fwrite_r+0x2a>
 801b5f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801b5f4:	b90b      	cbnz	r3, 801b5fa <_fwrite_r+0x2a>
 801b5f6:	f7ff ffb5 	bl	801b564 <__sinit>
 801b5fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b5fc:	07db      	lsls	r3, r3, #31
 801b5fe:	d405      	bmi.n	801b60c <_fwrite_r+0x3c>
 801b600:	89a3      	ldrh	r3, [r4, #12]
 801b602:	0598      	lsls	r0, r3, #22
 801b604:	d402      	bmi.n	801b60c <_fwrite_r+0x3c>
 801b606:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b608:	f000 f9f8 	bl	801b9fc <__retarget_lock_acquire_recursive>
 801b60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b610:	0499      	lsls	r1, r3, #18
 801b612:	d406      	bmi.n	801b622 <_fwrite_r+0x52>
 801b614:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b616:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801b61a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801b61e:	81a3      	strh	r3, [r4, #12]
 801b620:	6662      	str	r2, [r4, #100]	@ 0x64
 801b622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b624:	049a      	lsls	r2, r3, #18
 801b626:	d50c      	bpl.n	801b642 <_fwrite_r+0x72>
 801b628:	07de      	lsls	r6, r3, #31
 801b62a:	d405      	bmi.n	801b638 <_fwrite_r+0x68>
 801b62c:	89a3      	ldrh	r3, [r4, #12]
 801b62e:	059d      	lsls	r5, r3, #22
 801b630:	d402      	bmi.n	801b638 <_fwrite_r+0x68>
 801b632:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b634:	f000 f9e3 	bl	801b9fe <__retarget_lock_release_recursive>
 801b638:	2500      	movs	r5, #0
 801b63a:	4628      	mov	r0, r5
 801b63c:	b006      	add	sp, #24
 801b63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b642:	aa03      	add	r2, sp, #12
 801b644:	4621      	mov	r1, r4
 801b646:	4638      	mov	r0, r7
 801b648:	f001 fe88 	bl	801d35c <__sfvwrite_r>
 801b64c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b64e:	b940      	cbnz	r0, 801b662 <_fwrite_r+0x92>
 801b650:	07d8      	lsls	r0, r3, #31
 801b652:	d4f2      	bmi.n	801b63a <_fwrite_r+0x6a>
 801b654:	89a3      	ldrh	r3, [r4, #12]
 801b656:	0599      	lsls	r1, r3, #22
 801b658:	d4ef      	bmi.n	801b63a <_fwrite_r+0x6a>
 801b65a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b65c:	f000 f9cf 	bl	801b9fe <__retarget_lock_release_recursive>
 801b660:	e7eb      	b.n	801b63a <_fwrite_r+0x6a>
 801b662:	07da      	lsls	r2, r3, #31
 801b664:	d405      	bmi.n	801b672 <_fwrite_r+0xa2>
 801b666:	89a3      	ldrh	r3, [r4, #12]
 801b668:	059b      	lsls	r3, r3, #22
 801b66a:	d402      	bmi.n	801b672 <_fwrite_r+0xa2>
 801b66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b66e:	f000 f9c6 	bl	801b9fe <__retarget_lock_release_recursive>
 801b672:	9b05      	ldr	r3, [sp, #20]
 801b674:	1af6      	subs	r6, r6, r3
 801b676:	fbb6 f5f8 	udiv	r5, r6, r8
 801b67a:	e7de      	b.n	801b63a <_fwrite_r+0x6a>

0801b67c <fwrite>:
 801b67c:	b507      	push	{r0, r1, r2, lr}
 801b67e:	9300      	str	r3, [sp, #0]
 801b680:	4613      	mov	r3, r2
 801b682:	460a      	mov	r2, r1
 801b684:	4601      	mov	r1, r0
 801b686:	4803      	ldr	r0, [pc, #12]	@ (801b694 <fwrite+0x18>)
 801b688:	6800      	ldr	r0, [r0, #0]
 801b68a:	f7ff ffa1 	bl	801b5d0 <_fwrite_r>
 801b68e:	b003      	add	sp, #12
 801b690:	f85d fb04 	ldr.w	pc, [sp], #4
 801b694:	20003554 	.word	0x20003554

0801b698 <snprintf>:
 801b698:	b40c      	push	{r2, r3}
 801b69a:	b530      	push	{r4, r5, lr}
 801b69c:	4b18      	ldr	r3, [pc, #96]	@ (801b700 <snprintf+0x68>)
 801b69e:	1e0c      	subs	r4, r1, #0
 801b6a0:	681d      	ldr	r5, [r3, #0]
 801b6a2:	b09d      	sub	sp, #116	@ 0x74
 801b6a4:	da08      	bge.n	801b6b8 <snprintf+0x20>
 801b6a6:	238b      	movs	r3, #139	@ 0x8b
 801b6a8:	602b      	str	r3, [r5, #0]
 801b6aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b6ae:	b01d      	add	sp, #116	@ 0x74
 801b6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6b4:	b002      	add	sp, #8
 801b6b6:	4770      	bx	lr
 801b6b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b6bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b6c0:	f04f 0300 	mov.w	r3, #0
 801b6c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b6c6:	bf14      	ite	ne
 801b6c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b6cc:	4623      	moveq	r3, r4
 801b6ce:	9304      	str	r3, [sp, #16]
 801b6d0:	9307      	str	r3, [sp, #28]
 801b6d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b6d6:	9002      	str	r0, [sp, #8]
 801b6d8:	9006      	str	r0, [sp, #24]
 801b6da:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b6e0:	ab21      	add	r3, sp, #132	@ 0x84
 801b6e2:	a902      	add	r1, sp, #8
 801b6e4:	4628      	mov	r0, r5
 801b6e6:	9301      	str	r3, [sp, #4]
 801b6e8:	f000 fb36 	bl	801bd58 <_svfprintf_r>
 801b6ec:	1c43      	adds	r3, r0, #1
 801b6ee:	bfbc      	itt	lt
 801b6f0:	238b      	movlt	r3, #139	@ 0x8b
 801b6f2:	602b      	strlt	r3, [r5, #0]
 801b6f4:	2c00      	cmp	r4, #0
 801b6f6:	d0da      	beq.n	801b6ae <snprintf+0x16>
 801b6f8:	9b02      	ldr	r3, [sp, #8]
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	701a      	strb	r2, [r3, #0]
 801b6fe:	e7d6      	b.n	801b6ae <snprintf+0x16>
 801b700:	20003554 	.word	0x20003554

0801b704 <__sread>:
 801b704:	b510      	push	{r4, lr}
 801b706:	460c      	mov	r4, r1
 801b708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b70c:	f000 f916 	bl	801b93c <_read_r>
 801b710:	2800      	cmp	r0, #0
 801b712:	bfab      	itete	ge
 801b714:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 801b716:	89a3      	ldrhlt	r3, [r4, #12]
 801b718:	181b      	addge	r3, r3, r0
 801b71a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b71e:	bfac      	ite	ge
 801b720:	6523      	strge	r3, [r4, #80]	@ 0x50
 801b722:	81a3      	strhlt	r3, [r4, #12]
 801b724:	bd10      	pop	{r4, pc}

0801b726 <__swrite>:
 801b726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b72a:	461f      	mov	r7, r3
 801b72c:	898b      	ldrh	r3, [r1, #12]
 801b72e:	05db      	lsls	r3, r3, #23
 801b730:	4605      	mov	r5, r0
 801b732:	460c      	mov	r4, r1
 801b734:	4616      	mov	r6, r2
 801b736:	d505      	bpl.n	801b744 <__swrite+0x1e>
 801b738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b73c:	2302      	movs	r3, #2
 801b73e:	2200      	movs	r2, #0
 801b740:	f000 f8ea 	bl	801b918 <_lseek_r>
 801b744:	89a3      	ldrh	r3, [r4, #12]
 801b746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b74a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b74e:	81a3      	strh	r3, [r4, #12]
 801b750:	4632      	mov	r2, r6
 801b752:	463b      	mov	r3, r7
 801b754:	4628      	mov	r0, r5
 801b756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b75a:	f000 b911 	b.w	801b980 <_write_r>

0801b75e <__sseek>:
 801b75e:	b510      	push	{r4, lr}
 801b760:	460c      	mov	r4, r1
 801b762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b766:	f000 f8d7 	bl	801b918 <_lseek_r>
 801b76a:	1c43      	adds	r3, r0, #1
 801b76c:	89a3      	ldrh	r3, [r4, #12]
 801b76e:	bf15      	itete	ne
 801b770:	6520      	strne	r0, [r4, #80]	@ 0x50
 801b772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b77a:	81a3      	strheq	r3, [r4, #12]
 801b77c:	bf18      	it	ne
 801b77e:	81a3      	strhne	r3, [r4, #12]
 801b780:	bd10      	pop	{r4, pc}

0801b782 <__sclose>:
 801b782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b786:	f000 b8b7 	b.w	801b8f8 <_close_r>

0801b78a <_vsnprintf_r>:
 801b78a:	b530      	push	{r4, r5, lr}
 801b78c:	4614      	mov	r4, r2
 801b78e:	2c00      	cmp	r4, #0
 801b790:	b09b      	sub	sp, #108	@ 0x6c
 801b792:	4605      	mov	r5, r0
 801b794:	461a      	mov	r2, r3
 801b796:	da05      	bge.n	801b7a4 <_vsnprintf_r+0x1a>
 801b798:	238b      	movs	r3, #139	@ 0x8b
 801b79a:	6003      	str	r3, [r0, #0]
 801b79c:	f04f 30ff 	mov.w	r0, #4294967295
 801b7a0:	b01b      	add	sp, #108	@ 0x6c
 801b7a2:	bd30      	pop	{r4, r5, pc}
 801b7a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b7a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b7ac:	f04f 0300 	mov.w	r3, #0
 801b7b0:	9319      	str	r3, [sp, #100]	@ 0x64
 801b7b2:	bf14      	ite	ne
 801b7b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b7b8:	4623      	moveq	r3, r4
 801b7ba:	9302      	str	r3, [sp, #8]
 801b7bc:	9305      	str	r3, [sp, #20]
 801b7be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b7c2:	9100      	str	r1, [sp, #0]
 801b7c4:	9104      	str	r1, [sp, #16]
 801b7c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b7ca:	4669      	mov	r1, sp
 801b7cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b7ce:	f000 fac3 	bl	801bd58 <_svfprintf_r>
 801b7d2:	1c43      	adds	r3, r0, #1
 801b7d4:	bfbc      	itt	lt
 801b7d6:	238b      	movlt	r3, #139	@ 0x8b
 801b7d8:	602b      	strlt	r3, [r5, #0]
 801b7da:	2c00      	cmp	r4, #0
 801b7dc:	d0e0      	beq.n	801b7a0 <_vsnprintf_r+0x16>
 801b7de:	9b00      	ldr	r3, [sp, #0]
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	701a      	strb	r2, [r3, #0]
 801b7e4:	e7dc      	b.n	801b7a0 <_vsnprintf_r+0x16>
	...

0801b7e8 <vsnprintf>:
 801b7e8:	b507      	push	{r0, r1, r2, lr}
 801b7ea:	9300      	str	r3, [sp, #0]
 801b7ec:	4613      	mov	r3, r2
 801b7ee:	460a      	mov	r2, r1
 801b7f0:	4601      	mov	r1, r0
 801b7f2:	4803      	ldr	r0, [pc, #12]	@ (801b800 <vsnprintf+0x18>)
 801b7f4:	6800      	ldr	r0, [r0, #0]
 801b7f6:	f7ff ffc8 	bl	801b78a <_vsnprintf_r>
 801b7fa:	b003      	add	sp, #12
 801b7fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b800:	20003554 	.word	0x20003554

0801b804 <memcmp>:
 801b804:	b510      	push	{r4, lr}
 801b806:	3901      	subs	r1, #1
 801b808:	4402      	add	r2, r0
 801b80a:	4290      	cmp	r0, r2
 801b80c:	d101      	bne.n	801b812 <memcmp+0xe>
 801b80e:	2000      	movs	r0, #0
 801b810:	e005      	b.n	801b81e <memcmp+0x1a>
 801b812:	7803      	ldrb	r3, [r0, #0]
 801b814:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b818:	42a3      	cmp	r3, r4
 801b81a:	d001      	beq.n	801b820 <memcmp+0x1c>
 801b81c:	1b18      	subs	r0, r3, r4
 801b81e:	bd10      	pop	{r4, pc}
 801b820:	3001      	adds	r0, #1
 801b822:	e7f2      	b.n	801b80a <memcmp+0x6>

0801b824 <memmove>:
 801b824:	4288      	cmp	r0, r1
 801b826:	b510      	push	{r4, lr}
 801b828:	eb01 0402 	add.w	r4, r1, r2
 801b82c:	d902      	bls.n	801b834 <memmove+0x10>
 801b82e:	4284      	cmp	r4, r0
 801b830:	4623      	mov	r3, r4
 801b832:	d807      	bhi.n	801b844 <memmove+0x20>
 801b834:	1e43      	subs	r3, r0, #1
 801b836:	42a1      	cmp	r1, r4
 801b838:	d008      	beq.n	801b84c <memmove+0x28>
 801b83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b842:	e7f8      	b.n	801b836 <memmove+0x12>
 801b844:	4402      	add	r2, r0
 801b846:	4601      	mov	r1, r0
 801b848:	428a      	cmp	r2, r1
 801b84a:	d100      	bne.n	801b84e <memmove+0x2a>
 801b84c:	bd10      	pop	{r4, pc}
 801b84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b856:	e7f7      	b.n	801b848 <memmove+0x24>

0801b858 <memset>:
 801b858:	4402      	add	r2, r0
 801b85a:	4603      	mov	r3, r0
 801b85c:	4293      	cmp	r3, r2
 801b85e:	d100      	bne.n	801b862 <memset+0xa>
 801b860:	4770      	bx	lr
 801b862:	f803 1b01 	strb.w	r1, [r3], #1
 801b866:	e7f9      	b.n	801b85c <memset+0x4>

0801b868 <strchr>:
 801b868:	b2c9      	uxtb	r1, r1
 801b86a:	4603      	mov	r3, r0
 801b86c:	4618      	mov	r0, r3
 801b86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b872:	b112      	cbz	r2, 801b87a <strchr+0x12>
 801b874:	428a      	cmp	r2, r1
 801b876:	d1f9      	bne.n	801b86c <strchr+0x4>
 801b878:	4770      	bx	lr
 801b87a:	2900      	cmp	r1, #0
 801b87c:	bf18      	it	ne
 801b87e:	2000      	movne	r0, #0
 801b880:	4770      	bx	lr

0801b882 <strncmp>:
 801b882:	b510      	push	{r4, lr}
 801b884:	b16a      	cbz	r2, 801b8a2 <strncmp+0x20>
 801b886:	3901      	subs	r1, #1
 801b888:	1884      	adds	r4, r0, r2
 801b88a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b88e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b892:	429a      	cmp	r2, r3
 801b894:	d103      	bne.n	801b89e <strncmp+0x1c>
 801b896:	42a0      	cmp	r0, r4
 801b898:	d001      	beq.n	801b89e <strncmp+0x1c>
 801b89a:	2a00      	cmp	r2, #0
 801b89c:	d1f5      	bne.n	801b88a <strncmp+0x8>
 801b89e:	1ad0      	subs	r0, r2, r3
 801b8a0:	bd10      	pop	{r4, pc}
 801b8a2:	4610      	mov	r0, r2
 801b8a4:	e7fc      	b.n	801b8a0 <strncmp+0x1e>

0801b8a6 <strncpy>:
 801b8a6:	b510      	push	{r4, lr}
 801b8a8:	3901      	subs	r1, #1
 801b8aa:	4603      	mov	r3, r0
 801b8ac:	b132      	cbz	r2, 801b8bc <strncpy+0x16>
 801b8ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b8b2:	f803 4b01 	strb.w	r4, [r3], #1
 801b8b6:	3a01      	subs	r2, #1
 801b8b8:	2c00      	cmp	r4, #0
 801b8ba:	d1f7      	bne.n	801b8ac <strncpy+0x6>
 801b8bc:	441a      	add	r2, r3
 801b8be:	2100      	movs	r1, #0
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d100      	bne.n	801b8c6 <strncpy+0x20>
 801b8c4:	bd10      	pop	{r4, pc}
 801b8c6:	f803 1b01 	strb.w	r1, [r3], #1
 801b8ca:	e7f9      	b.n	801b8c0 <strncpy+0x1a>

0801b8cc <strstr>:
 801b8cc:	780a      	ldrb	r2, [r1, #0]
 801b8ce:	b570      	push	{r4, r5, r6, lr}
 801b8d0:	b96a      	cbnz	r2, 801b8ee <strstr+0x22>
 801b8d2:	bd70      	pop	{r4, r5, r6, pc}
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	d109      	bne.n	801b8ec <strstr+0x20>
 801b8d8:	460c      	mov	r4, r1
 801b8da:	4605      	mov	r5, r0
 801b8dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d0f6      	beq.n	801b8d2 <strstr+0x6>
 801b8e4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b8e8:	429e      	cmp	r6, r3
 801b8ea:	d0f7      	beq.n	801b8dc <strstr+0x10>
 801b8ec:	3001      	adds	r0, #1
 801b8ee:	7803      	ldrb	r3, [r0, #0]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d1ef      	bne.n	801b8d4 <strstr+0x8>
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	e7ec      	b.n	801b8d2 <strstr+0x6>

0801b8f8 <_close_r>:
 801b8f8:	b538      	push	{r3, r4, r5, lr}
 801b8fa:	4d06      	ldr	r5, [pc, #24]	@ (801b914 <_close_r+0x1c>)
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	4604      	mov	r4, r0
 801b900:	4608      	mov	r0, r1
 801b902:	602b      	str	r3, [r5, #0]
 801b904:	f7e8 fa27 	bl	8003d56 <_close>
 801b908:	1c43      	adds	r3, r0, #1
 801b90a:	d102      	bne.n	801b912 <_close_r+0x1a>
 801b90c:	682b      	ldr	r3, [r5, #0]
 801b90e:	b103      	cbz	r3, 801b912 <_close_r+0x1a>
 801b910:	6023      	str	r3, [r4, #0]
 801b912:	bd38      	pop	{r3, r4, r5, pc}
 801b914:	20011ed4 	.word	0x20011ed4

0801b918 <_lseek_r>:
 801b918:	b538      	push	{r3, r4, r5, lr}
 801b91a:	4d07      	ldr	r5, [pc, #28]	@ (801b938 <_lseek_r+0x20>)
 801b91c:	4604      	mov	r4, r0
 801b91e:	4608      	mov	r0, r1
 801b920:	4611      	mov	r1, r2
 801b922:	2200      	movs	r2, #0
 801b924:	602a      	str	r2, [r5, #0]
 801b926:	461a      	mov	r2, r3
 801b928:	f7e8 fa3c 	bl	8003da4 <_lseek>
 801b92c:	1c43      	adds	r3, r0, #1
 801b92e:	d102      	bne.n	801b936 <_lseek_r+0x1e>
 801b930:	682b      	ldr	r3, [r5, #0]
 801b932:	b103      	cbz	r3, 801b936 <_lseek_r+0x1e>
 801b934:	6023      	str	r3, [r4, #0]
 801b936:	bd38      	pop	{r3, r4, r5, pc}
 801b938:	20011ed4 	.word	0x20011ed4

0801b93c <_read_r>:
 801b93c:	b538      	push	{r3, r4, r5, lr}
 801b93e:	4d07      	ldr	r5, [pc, #28]	@ (801b95c <_read_r+0x20>)
 801b940:	4604      	mov	r4, r0
 801b942:	4608      	mov	r0, r1
 801b944:	4611      	mov	r1, r2
 801b946:	2200      	movs	r2, #0
 801b948:	602a      	str	r2, [r5, #0]
 801b94a:	461a      	mov	r2, r3
 801b94c:	f7e8 f9ca 	bl	8003ce4 <_read>
 801b950:	1c43      	adds	r3, r0, #1
 801b952:	d102      	bne.n	801b95a <_read_r+0x1e>
 801b954:	682b      	ldr	r3, [r5, #0]
 801b956:	b103      	cbz	r3, 801b95a <_read_r+0x1e>
 801b958:	6023      	str	r3, [r4, #0]
 801b95a:	bd38      	pop	{r3, r4, r5, pc}
 801b95c:	20011ed4 	.word	0x20011ed4

0801b960 <_sbrk_r>:
 801b960:	b538      	push	{r3, r4, r5, lr}
 801b962:	4d06      	ldr	r5, [pc, #24]	@ (801b97c <_sbrk_r+0x1c>)
 801b964:	2300      	movs	r3, #0
 801b966:	4604      	mov	r4, r0
 801b968:	4608      	mov	r0, r1
 801b96a:	602b      	str	r3, [r5, #0]
 801b96c:	f7e8 fa28 	bl	8003dc0 <_sbrk>
 801b970:	1c43      	adds	r3, r0, #1
 801b972:	d102      	bne.n	801b97a <_sbrk_r+0x1a>
 801b974:	682b      	ldr	r3, [r5, #0]
 801b976:	b103      	cbz	r3, 801b97a <_sbrk_r+0x1a>
 801b978:	6023      	str	r3, [r4, #0]
 801b97a:	bd38      	pop	{r3, r4, r5, pc}
 801b97c:	20011ed4 	.word	0x20011ed4

0801b980 <_write_r>:
 801b980:	b538      	push	{r3, r4, r5, lr}
 801b982:	4d07      	ldr	r5, [pc, #28]	@ (801b9a0 <_write_r+0x20>)
 801b984:	4604      	mov	r4, r0
 801b986:	4608      	mov	r0, r1
 801b988:	4611      	mov	r1, r2
 801b98a:	2200      	movs	r2, #0
 801b98c:	602a      	str	r2, [r5, #0]
 801b98e:	461a      	mov	r2, r3
 801b990:	f7e8 f9c5 	bl	8003d1e <_write>
 801b994:	1c43      	adds	r3, r0, #1
 801b996:	d102      	bne.n	801b99e <_write_r+0x1e>
 801b998:	682b      	ldr	r3, [r5, #0]
 801b99a:	b103      	cbz	r3, 801b99e <_write_r+0x1e>
 801b99c:	6023      	str	r3, [r4, #0]
 801b99e:	bd38      	pop	{r3, r4, r5, pc}
 801b9a0:	20011ed4 	.word	0x20011ed4

0801b9a4 <__errno>:
 801b9a4:	4b01      	ldr	r3, [pc, #4]	@ (801b9ac <__errno+0x8>)
 801b9a6:	6818      	ldr	r0, [r3, #0]
 801b9a8:	4770      	bx	lr
 801b9aa:	bf00      	nop
 801b9ac:	20003554 	.word	0x20003554

0801b9b0 <__libc_init_array>:
 801b9b0:	b570      	push	{r4, r5, r6, lr}
 801b9b2:	4d0d      	ldr	r5, [pc, #52]	@ (801b9e8 <__libc_init_array+0x38>)
 801b9b4:	4c0d      	ldr	r4, [pc, #52]	@ (801b9ec <__libc_init_array+0x3c>)
 801b9b6:	1b64      	subs	r4, r4, r5
 801b9b8:	10a4      	asrs	r4, r4, #2
 801b9ba:	2600      	movs	r6, #0
 801b9bc:	42a6      	cmp	r6, r4
 801b9be:	d109      	bne.n	801b9d4 <__libc_init_array+0x24>
 801b9c0:	4d0b      	ldr	r5, [pc, #44]	@ (801b9f0 <__libc_init_array+0x40>)
 801b9c2:	4c0c      	ldr	r4, [pc, #48]	@ (801b9f4 <__libc_init_array+0x44>)
 801b9c4:	f004 ffa8 	bl	8020918 <_init>
 801b9c8:	1b64      	subs	r4, r4, r5
 801b9ca:	10a4      	asrs	r4, r4, #2
 801b9cc:	2600      	movs	r6, #0
 801b9ce:	42a6      	cmp	r6, r4
 801b9d0:	d105      	bne.n	801b9de <__libc_init_array+0x2e>
 801b9d2:	bd70      	pop	{r4, r5, r6, pc}
 801b9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b9d8:	4798      	blx	r3
 801b9da:	3601      	adds	r6, #1
 801b9dc:	e7ee      	b.n	801b9bc <__libc_init_array+0xc>
 801b9de:	f855 3b04 	ldr.w	r3, [r5], #4
 801b9e2:	4798      	blx	r3
 801b9e4:	3601      	adds	r6, #1
 801b9e6:	e7f2      	b.n	801b9ce <__libc_init_array+0x1e>
 801b9e8:	080226b0 	.word	0x080226b0
 801b9ec:	080226b0 	.word	0x080226b0
 801b9f0:	080226b0 	.word	0x080226b0
 801b9f4:	080226c4 	.word	0x080226c4

0801b9f8 <__retarget_lock_init_recursive>:
 801b9f8:	4770      	bx	lr

0801b9fa <__retarget_lock_close_recursive>:
 801b9fa:	4770      	bx	lr

0801b9fc <__retarget_lock_acquire_recursive>:
 801b9fc:	4770      	bx	lr

0801b9fe <__retarget_lock_release_recursive>:
 801b9fe:	4770      	bx	lr

0801ba00 <sysconf>:
 801ba00:	2808      	cmp	r0, #8
 801ba02:	b508      	push	{r3, lr}
 801ba04:	d006      	beq.n	801ba14 <sysconf+0x14>
 801ba06:	f7ff ffcd 	bl	801b9a4 <__errno>
 801ba0a:	2316      	movs	r3, #22
 801ba0c:	6003      	str	r3, [r0, #0]
 801ba0e:	f04f 30ff 	mov.w	r0, #4294967295
 801ba12:	bd08      	pop	{r3, pc}
 801ba14:	2080      	movs	r0, #128	@ 0x80
 801ba16:	e7fc      	b.n	801ba12 <sysconf+0x12>

0801ba18 <strcpy>:
 801ba18:	4603      	mov	r3, r0
 801ba1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba1e:	f803 2b01 	strb.w	r2, [r3], #1
 801ba22:	2a00      	cmp	r2, #0
 801ba24:	d1f9      	bne.n	801ba1a <strcpy+0x2>
 801ba26:	4770      	bx	lr

0801ba28 <memcpy>:
 801ba28:	440a      	add	r2, r1
 801ba2a:	4291      	cmp	r1, r2
 801ba2c:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba30:	d100      	bne.n	801ba34 <memcpy+0xc>
 801ba32:	4770      	bx	lr
 801ba34:	b510      	push	{r4, lr}
 801ba36:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba3e:	4291      	cmp	r1, r2
 801ba40:	d1f9      	bne.n	801ba36 <memcpy+0xe>
 801ba42:	bd10      	pop	{r4, pc}

0801ba44 <register_fini>:
 801ba44:	4b02      	ldr	r3, [pc, #8]	@ (801ba50 <register_fini+0xc>)
 801ba46:	b113      	cbz	r3, 801ba4e <register_fini+0xa>
 801ba48:	4802      	ldr	r0, [pc, #8]	@ (801ba54 <register_fini+0x10>)
 801ba4a:	f000 b85b 	b.w	801bb04 <atexit>
 801ba4e:	4770      	bx	lr
 801ba50:	00000000 	.word	0x00000000
 801ba54:	0801d6a9 	.word	0x0801d6a9

0801ba58 <__call_exitprocs>:
 801ba58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba5c:	4f27      	ldr	r7, [pc, #156]	@ (801bafc <__call_exitprocs+0xa4>)
 801ba5e:	9001      	str	r0, [sp, #4]
 801ba60:	6838      	ldr	r0, [r7, #0]
 801ba62:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 801bb00 <__call_exitprocs+0xa8>
 801ba66:	460e      	mov	r6, r1
 801ba68:	f7ff ffc8 	bl	801b9fc <__retarget_lock_acquire_recursive>
 801ba6c:	f04f 0a01 	mov.w	sl, #1
 801ba70:	f8d8 5000 	ldr.w	r5, [r8]
 801ba74:	b92d      	cbnz	r5, 801ba82 <__call_exitprocs+0x2a>
 801ba76:	6838      	ldr	r0, [r7, #0]
 801ba78:	b003      	add	sp, #12
 801ba7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba7e:	f7ff bfbe 	b.w	801b9fe <__retarget_lock_release_recursive>
 801ba82:	686c      	ldr	r4, [r5, #4]
 801ba84:	f104 39ff 	add.w	r9, r4, #4294967295
 801ba88:	3401      	adds	r4, #1
 801ba8a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801ba8e:	f1b9 0f00 	cmp.w	r9, #0
 801ba92:	dbf0      	blt.n	801ba76 <__call_exitprocs+0x1e>
 801ba94:	b13e      	cbz	r6, 801baa6 <__call_exitprocs+0x4e>
 801ba96:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
 801ba9a:	42b2      	cmp	r2, r6
 801ba9c:	d003      	beq.n	801baa6 <__call_exitprocs+0x4e>
 801ba9e:	f109 39ff 	add.w	r9, r9, #4294967295
 801baa2:	3c04      	subs	r4, #4
 801baa4:	e7f3      	b.n	801ba8e <__call_exitprocs+0x36>
 801baa6:	6869      	ldr	r1, [r5, #4]
 801baa8:	6822      	ldr	r2, [r4, #0]
 801baaa:	3901      	subs	r1, #1
 801baac:	4549      	cmp	r1, r9
 801baae:	bf16      	itet	ne
 801bab0:	2300      	movne	r3, #0
 801bab2:	f8c5 9004 	streq.w	r9, [r5, #4]
 801bab6:	6023      	strne	r3, [r4, #0]
 801bab8:	2a00      	cmp	r2, #0
 801baba:	d0f0      	beq.n	801ba9e <__call_exitprocs+0x46>
 801babc:	f8d5 1188 	ldr.w	r1, [r5, #392]	@ 0x188
 801bac0:	f8d5 b004 	ldr.w	fp, [r5, #4]
 801bac4:	fa0a fc09 	lsl.w	ip, sl, r9
 801bac8:	ea1c 0f01 	tst.w	ip, r1
 801bacc:	d108      	bne.n	801bae0 <__call_exitprocs+0x88>
 801bace:	4790      	blx	r2
 801bad0:	6869      	ldr	r1, [r5, #4]
 801bad2:	f8d8 2000 	ldr.w	r2, [r8]
 801bad6:	4559      	cmp	r1, fp
 801bad8:	d1ca      	bne.n	801ba70 <__call_exitprocs+0x18>
 801bada:	4295      	cmp	r5, r2
 801badc:	d0df      	beq.n	801ba9e <__call_exitprocs+0x46>
 801bade:	e7c7      	b.n	801ba70 <__call_exitprocs+0x18>
 801bae0:	f8d5 018c 	ldr.w	r0, [r5, #396]	@ 0x18c
 801bae4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 801bae8:	ea1c 0f00 	tst.w	ip, r0
 801baec:	d102      	bne.n	801baf4 <__call_exitprocs+0x9c>
 801baee:	9801      	ldr	r0, [sp, #4]
 801baf0:	4790      	blx	r2
 801baf2:	e7ed      	b.n	801bad0 <__call_exitprocs+0x78>
 801baf4:	4608      	mov	r0, r1
 801baf6:	4790      	blx	r2
 801baf8:	e7ea      	b.n	801bad0 <__call_exitprocs+0x78>
 801bafa:	bf00      	nop
 801bafc:	20003698 	.word	0x20003698
 801bb00:	20011edc 	.word	0x20011edc

0801bb04 <atexit>:
 801bb04:	2300      	movs	r3, #0
 801bb06:	4601      	mov	r1, r0
 801bb08:	461a      	mov	r2, r3
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	f001 be14 	b.w	801d738 <__register_exitproc>

0801bb10 <__env_lock>:
 801bb10:	4801      	ldr	r0, [pc, #4]	@ (801bb18 <__env_lock+0x8>)
 801bb12:	f7ff bf73 	b.w	801b9fc <__retarget_lock_acquire_recursive>
 801bb16:	bf00      	nop
 801bb18:	20011ed8 	.word	0x20011ed8

0801bb1c <__env_unlock>:
 801bb1c:	4801      	ldr	r0, [pc, #4]	@ (801bb24 <__env_unlock+0x8>)
 801bb1e:	f7ff bf6e 	b.w	801b9fe <__retarget_lock_release_recursive>
 801bb22:	bf00      	nop
 801bb24:	20011ed8 	.word	0x20011ed8

0801bb28 <_malloc_trim_r>:
 801bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb2c:	4606      	mov	r6, r0
 801bb2e:	2008      	movs	r0, #8
 801bb30:	4689      	mov	r9, r1
 801bb32:	f7ff ff65 	bl	801ba00 <sysconf>
 801bb36:	4f24      	ldr	r7, [pc, #144]	@ (801bbc8 <_malloc_trim_r+0xa0>)
 801bb38:	4680      	mov	r8, r0
 801bb3a:	4630      	mov	r0, r6
 801bb3c:	f7ff fa2c 	bl	801af98 <__malloc_lock>
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	685d      	ldr	r5, [r3, #4]
 801bb44:	f025 0503 	bic.w	r5, r5, #3
 801bb48:	f1a5 0411 	sub.w	r4, r5, #17
 801bb4c:	eba4 0409 	sub.w	r4, r4, r9
 801bb50:	4444      	add	r4, r8
 801bb52:	fbb4 f4f8 	udiv	r4, r4, r8
 801bb56:	3c01      	subs	r4, #1
 801bb58:	fb08 f404 	mul.w	r4, r8, r4
 801bb5c:	45a0      	cmp	r8, r4
 801bb5e:	dd05      	ble.n	801bb6c <_malloc_trim_r+0x44>
 801bb60:	4630      	mov	r0, r6
 801bb62:	f7ff fa1f 	bl	801afa4 <__malloc_unlock>
 801bb66:	2000      	movs	r0, #0
 801bb68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb6c:	2100      	movs	r1, #0
 801bb6e:	4630      	mov	r0, r6
 801bb70:	f7ff fef6 	bl	801b960 <_sbrk_r>
 801bb74:	68bb      	ldr	r3, [r7, #8]
 801bb76:	442b      	add	r3, r5
 801bb78:	4298      	cmp	r0, r3
 801bb7a:	d1f1      	bne.n	801bb60 <_malloc_trim_r+0x38>
 801bb7c:	4261      	negs	r1, r4
 801bb7e:	4630      	mov	r0, r6
 801bb80:	f7ff feee 	bl	801b960 <_sbrk_r>
 801bb84:	3001      	adds	r0, #1
 801bb86:	d110      	bne.n	801bbaa <_malloc_trim_r+0x82>
 801bb88:	2100      	movs	r1, #0
 801bb8a:	4630      	mov	r0, r6
 801bb8c:	f7ff fee8 	bl	801b960 <_sbrk_r>
 801bb90:	68ba      	ldr	r2, [r7, #8]
 801bb92:	1a83      	subs	r3, r0, r2
 801bb94:	2b0f      	cmp	r3, #15
 801bb96:	dde3      	ble.n	801bb60 <_malloc_trim_r+0x38>
 801bb98:	490c      	ldr	r1, [pc, #48]	@ (801bbcc <_malloc_trim_r+0xa4>)
 801bb9a:	6809      	ldr	r1, [r1, #0]
 801bb9c:	1a40      	subs	r0, r0, r1
 801bb9e:	490c      	ldr	r1, [pc, #48]	@ (801bbd0 <_malloc_trim_r+0xa8>)
 801bba0:	f043 0301 	orr.w	r3, r3, #1
 801bba4:	6008      	str	r0, [r1, #0]
 801bba6:	6053      	str	r3, [r2, #4]
 801bba8:	e7da      	b.n	801bb60 <_malloc_trim_r+0x38>
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	4a08      	ldr	r2, [pc, #32]	@ (801bbd0 <_malloc_trim_r+0xa8>)
 801bbae:	1b2d      	subs	r5, r5, r4
 801bbb0:	f045 0501 	orr.w	r5, r5, #1
 801bbb4:	605d      	str	r5, [r3, #4]
 801bbb6:	6813      	ldr	r3, [r2, #0]
 801bbb8:	4630      	mov	r0, r6
 801bbba:	1b1b      	subs	r3, r3, r4
 801bbbc:	6013      	str	r3, [r2, #0]
 801bbbe:	f7ff f9f1 	bl	801afa4 <__malloc_unlock>
 801bbc2:	2001      	movs	r0, #1
 801bbc4:	e7d0      	b.n	801bb68 <_malloc_trim_r+0x40>
 801bbc6:	bf00      	nop
 801bbc8:	20003140 	.word	0x20003140
 801bbcc:	20003138 	.word	0x20003138
 801bbd0:	20011d64 	.word	0x20011d64

0801bbd4 <_free_r>:
 801bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbd6:	4604      	mov	r4, r0
 801bbd8:	460f      	mov	r7, r1
 801bbda:	2900      	cmp	r1, #0
 801bbdc:	f000 80b1 	beq.w	801bd42 <_free_r+0x16e>
 801bbe0:	f7ff f9da 	bl	801af98 <__malloc_lock>
 801bbe4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801bbe8:	4d56      	ldr	r5, [pc, #344]	@ (801bd44 <_free_r+0x170>)
 801bbea:	f022 0001 	bic.w	r0, r2, #1
 801bbee:	f1a7 0308 	sub.w	r3, r7, #8
 801bbf2:	eb03 0c00 	add.w	ip, r3, r0
 801bbf6:	68a9      	ldr	r1, [r5, #8]
 801bbf8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801bbfc:	4561      	cmp	r1, ip
 801bbfe:	f026 0603 	bic.w	r6, r6, #3
 801bc02:	f002 0201 	and.w	r2, r2, #1
 801bc06:	d11b      	bne.n	801bc40 <_free_r+0x6c>
 801bc08:	4406      	add	r6, r0
 801bc0a:	b93a      	cbnz	r2, 801bc1c <_free_r+0x48>
 801bc0c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801bc10:	1a9b      	subs	r3, r3, r2
 801bc12:	4416      	add	r6, r2
 801bc14:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801bc18:	60ca      	str	r2, [r1, #12]
 801bc1a:	6091      	str	r1, [r2, #8]
 801bc1c:	f046 0201 	orr.w	r2, r6, #1
 801bc20:	605a      	str	r2, [r3, #4]
 801bc22:	60ab      	str	r3, [r5, #8]
 801bc24:	4b48      	ldr	r3, [pc, #288]	@ (801bd48 <_free_r+0x174>)
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	42b3      	cmp	r3, r6
 801bc2a:	d804      	bhi.n	801bc36 <_free_r+0x62>
 801bc2c:	4b47      	ldr	r3, [pc, #284]	@ (801bd4c <_free_r+0x178>)
 801bc2e:	4620      	mov	r0, r4
 801bc30:	6819      	ldr	r1, [r3, #0]
 801bc32:	f7ff ff79 	bl	801bb28 <_malloc_trim_r>
 801bc36:	4620      	mov	r0, r4
 801bc38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bc3c:	f7ff b9b2 	b.w	801afa4 <__malloc_unlock>
 801bc40:	f8cc 6004 	str.w	r6, [ip, #4]
 801bc44:	2a00      	cmp	r2, #0
 801bc46:	d138      	bne.n	801bcba <_free_r+0xe6>
 801bc48:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801bc4c:	1a5b      	subs	r3, r3, r1
 801bc4e:	4408      	add	r0, r1
 801bc50:	6899      	ldr	r1, [r3, #8]
 801bc52:	f105 0708 	add.w	r7, r5, #8
 801bc56:	42b9      	cmp	r1, r7
 801bc58:	d031      	beq.n	801bcbe <_free_r+0xea>
 801bc5a:	68df      	ldr	r7, [r3, #12]
 801bc5c:	60cf      	str	r7, [r1, #12]
 801bc5e:	60b9      	str	r1, [r7, #8]
 801bc60:	eb0c 0106 	add.w	r1, ip, r6
 801bc64:	6849      	ldr	r1, [r1, #4]
 801bc66:	07c9      	lsls	r1, r1, #31
 801bc68:	d40b      	bmi.n	801bc82 <_free_r+0xae>
 801bc6a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801bc6e:	4430      	add	r0, r6
 801bc70:	bb3a      	cbnz	r2, 801bcc2 <_free_r+0xee>
 801bc72:	4e37      	ldr	r6, [pc, #220]	@ (801bd50 <_free_r+0x17c>)
 801bc74:	42b1      	cmp	r1, r6
 801bc76:	d124      	bne.n	801bcc2 <_free_r+0xee>
 801bc78:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801bc7c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801bc80:	2201      	movs	r2, #1
 801bc82:	f040 0101 	orr.w	r1, r0, #1
 801bc86:	6059      	str	r1, [r3, #4]
 801bc88:	5018      	str	r0, [r3, r0]
 801bc8a:	2a00      	cmp	r2, #0
 801bc8c:	d1d3      	bne.n	801bc36 <_free_r+0x62>
 801bc8e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801bc92:	d21b      	bcs.n	801bccc <_free_r+0xf8>
 801bc94:	08c2      	lsrs	r2, r0, #3
 801bc96:	2101      	movs	r1, #1
 801bc98:	0940      	lsrs	r0, r0, #5
 801bc9a:	4081      	lsls	r1, r0
 801bc9c:	6868      	ldr	r0, [r5, #4]
 801bc9e:	3201      	adds	r2, #1
 801bca0:	4301      	orrs	r1, r0
 801bca2:	6069      	str	r1, [r5, #4]
 801bca4:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 801bca8:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 801bcac:	3908      	subs	r1, #8
 801bcae:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bcb2:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 801bcb6:	60c3      	str	r3, [r0, #12]
 801bcb8:	e7bd      	b.n	801bc36 <_free_r+0x62>
 801bcba:	2200      	movs	r2, #0
 801bcbc:	e7d0      	b.n	801bc60 <_free_r+0x8c>
 801bcbe:	2201      	movs	r2, #1
 801bcc0:	e7ce      	b.n	801bc60 <_free_r+0x8c>
 801bcc2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801bcc6:	60ce      	str	r6, [r1, #12]
 801bcc8:	60b1      	str	r1, [r6, #8]
 801bcca:	e7da      	b.n	801bc82 <_free_r+0xae>
 801bccc:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 801bcd0:	ea4f 2250 	mov.w	r2, r0, lsr #9
 801bcd4:	d214      	bcs.n	801bd00 <_free_r+0x12c>
 801bcd6:	0982      	lsrs	r2, r0, #6
 801bcd8:	3238      	adds	r2, #56	@ 0x38
 801bcda:	1c51      	adds	r1, r2, #1
 801bcdc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801bce0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801bce4:	428e      	cmp	r6, r1
 801bce6:	d125      	bne.n	801bd34 <_free_r+0x160>
 801bce8:	2001      	movs	r0, #1
 801bcea:	1092      	asrs	r2, r2, #2
 801bcec:	fa00 f202 	lsl.w	r2, r0, r2
 801bcf0:	6868      	ldr	r0, [r5, #4]
 801bcf2:	4302      	orrs	r2, r0
 801bcf4:	606a      	str	r2, [r5, #4]
 801bcf6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801bcfa:	60b3      	str	r3, [r6, #8]
 801bcfc:	60cb      	str	r3, [r1, #12]
 801bcfe:	e79a      	b.n	801bc36 <_free_r+0x62>
 801bd00:	2a14      	cmp	r2, #20
 801bd02:	d801      	bhi.n	801bd08 <_free_r+0x134>
 801bd04:	325b      	adds	r2, #91	@ 0x5b
 801bd06:	e7e8      	b.n	801bcda <_free_r+0x106>
 801bd08:	2a54      	cmp	r2, #84	@ 0x54
 801bd0a:	d802      	bhi.n	801bd12 <_free_r+0x13e>
 801bd0c:	0b02      	lsrs	r2, r0, #12
 801bd0e:	326e      	adds	r2, #110	@ 0x6e
 801bd10:	e7e3      	b.n	801bcda <_free_r+0x106>
 801bd12:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801bd16:	d802      	bhi.n	801bd1e <_free_r+0x14a>
 801bd18:	0bc2      	lsrs	r2, r0, #15
 801bd1a:	3277      	adds	r2, #119	@ 0x77
 801bd1c:	e7dd      	b.n	801bcda <_free_r+0x106>
 801bd1e:	f240 5154 	movw	r1, #1364	@ 0x554
 801bd22:	428a      	cmp	r2, r1
 801bd24:	bf9a      	itte	ls
 801bd26:	0c82      	lsrls	r2, r0, #18
 801bd28:	327c      	addls	r2, #124	@ 0x7c
 801bd2a:	227e      	movhi	r2, #126	@ 0x7e
 801bd2c:	e7d5      	b.n	801bcda <_free_r+0x106>
 801bd2e:	6889      	ldr	r1, [r1, #8]
 801bd30:	428e      	cmp	r6, r1
 801bd32:	d004      	beq.n	801bd3e <_free_r+0x16a>
 801bd34:	684a      	ldr	r2, [r1, #4]
 801bd36:	f022 0203 	bic.w	r2, r2, #3
 801bd3a:	4282      	cmp	r2, r0
 801bd3c:	d8f7      	bhi.n	801bd2e <_free_r+0x15a>
 801bd3e:	68ce      	ldr	r6, [r1, #12]
 801bd40:	e7d9      	b.n	801bcf6 <_free_r+0x122>
 801bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd44:	20003140 	.word	0x20003140
 801bd48:	2000313c 	.word	0x2000313c
 801bd4c:	20011d94 	.word	0x20011d94
 801bd50:	20003148 	.word	0x20003148
 801bd54:	00000000 	.word	0x00000000

0801bd58 <_svfprintf_r>:
 801bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd5c:	b0d3      	sub	sp, #332	@ 0x14c
 801bd5e:	4693      	mov	fp, r2
 801bd60:	9106      	str	r1, [sp, #24]
 801bd62:	461f      	mov	r7, r3
 801bd64:	9003      	str	r0, [sp, #12]
 801bd66:	f001 fc9b 	bl	801d6a0 <_localeconv_r>
 801bd6a:	6803      	ldr	r3, [r0, #0]
 801bd6c:	9315      	str	r3, [sp, #84]	@ 0x54
 801bd6e:	4618      	mov	r0, r3
 801bd70:	f7e4 faae 	bl	80002d0 <strlen>
 801bd74:	9b06      	ldr	r3, [sp, #24]
 801bd76:	900e      	str	r0, [sp, #56]	@ 0x38
 801bd78:	899b      	ldrh	r3, [r3, #12]
 801bd7a:	061a      	lsls	r2, r3, #24
 801bd7c:	d514      	bpl.n	801bda8 <_svfprintf_r+0x50>
 801bd7e:	9b06      	ldr	r3, [sp, #24]
 801bd80:	691b      	ldr	r3, [r3, #16]
 801bd82:	b98b      	cbnz	r3, 801bda8 <_svfprintf_r+0x50>
 801bd84:	9803      	ldr	r0, [sp, #12]
 801bd86:	2140      	movs	r1, #64	@ 0x40
 801bd88:	f7fe fecc 	bl	801ab24 <_malloc_r>
 801bd8c:	9b06      	ldr	r3, [sp, #24]
 801bd8e:	6018      	str	r0, [r3, #0]
 801bd90:	6118      	str	r0, [r3, #16]
 801bd92:	b930      	cbnz	r0, 801bda2 <_svfprintf_r+0x4a>
 801bd94:	9a03      	ldr	r2, [sp, #12]
 801bd96:	230c      	movs	r3, #12
 801bd98:	6013      	str	r3, [r2, #0]
 801bd9a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd9e:	9310      	str	r3, [sp, #64]	@ 0x40
 801bda0:	e1f5      	b.n	801c18e <_svfprintf_r+0x436>
 801bda2:	9a06      	ldr	r2, [sp, #24]
 801bda4:	2340      	movs	r3, #64	@ 0x40
 801bda6:	6153      	str	r3, [r2, #20]
 801bda8:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 801bff8 <_svfprintf_r+0x2a0>
 801bdac:	2300      	movs	r3, #0
 801bdae:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801bdb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801bdb6:	ac29      	add	r4, sp, #164	@ 0xa4
 801bdb8:	9426      	str	r4, [sp, #152]	@ 0x98
 801bdba:	9304      	str	r3, [sp, #16]
 801bdbc:	931a      	str	r3, [sp, #104]	@ 0x68
 801bdbe:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bdc0:	930a      	str	r3, [sp, #40]	@ 0x28
 801bdc2:	9314      	str	r3, [sp, #80]	@ 0x50
 801bdc4:	9316      	str	r3, [sp, #88]	@ 0x58
 801bdc6:	9310      	str	r3, [sp, #64]	@ 0x40
 801bdc8:	465b      	mov	r3, fp
 801bdca:	461d      	mov	r5, r3
 801bdcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bdd0:	b10a      	cbz	r2, 801bdd6 <_svfprintf_r+0x7e>
 801bdd2:	2a25      	cmp	r2, #37	@ 0x25
 801bdd4:	d1f9      	bne.n	801bdca <_svfprintf_r+0x72>
 801bdd6:	ebb5 060b 	subs.w	r6, r5, fp
 801bdda:	d00d      	beq.n	801bdf8 <_svfprintf_r+0xa0>
 801bddc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bdde:	4433      	add	r3, r6
 801bde0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bde2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bde4:	3301      	adds	r3, #1
 801bde6:	2b07      	cmp	r3, #7
 801bde8:	e9c4 b600 	strd	fp, r6, [r4]
 801bdec:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bdee:	dc75      	bgt.n	801bedc <_svfprintf_r+0x184>
 801bdf0:	3408      	adds	r4, #8
 801bdf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bdf4:	4433      	add	r3, r6
 801bdf6:	9310      	str	r3, [sp, #64]	@ 0x40
 801bdf8:	782b      	ldrb	r3, [r5, #0]
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	f001 8140 	beq.w	801d080 <_svfprintf_r+0x1328>
 801be00:	2200      	movs	r2, #0
 801be02:	1c6b      	adds	r3, r5, #1
 801be04:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801be08:	f04f 36ff 	mov.w	r6, #4294967295
 801be0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801be0e:	4615      	mov	r5, r2
 801be10:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be14:	9207      	str	r2, [sp, #28]
 801be16:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be18:	9b07      	ldr	r3, [sp, #28]
 801be1a:	3b20      	subs	r3, #32
 801be1c:	2b5a      	cmp	r3, #90	@ 0x5a
 801be1e:	f200 859d 	bhi.w	801c95c <_svfprintf_r+0xc04>
 801be22:	e8df f013 	tbh	[pc, r3, lsl #1]
 801be26:	009e      	.short	0x009e
 801be28:	059b059b 	.word	0x059b059b
 801be2c:	059b00a6 	.word	0x059b00a6
 801be30:	059b059b 	.word	0x059b059b
 801be34:	059b0086 	.word	0x059b0086
 801be38:	00a9059b 	.word	0x00a9059b
 801be3c:	059b00b3 	.word	0x059b00b3
 801be40:	00b500b0 	.word	0x00b500b0
 801be44:	00d0059b 	.word	0x00d0059b
 801be48:	00d300d3 	.word	0x00d300d3
 801be4c:	00d300d3 	.word	0x00d300d3
 801be50:	00d300d3 	.word	0x00d300d3
 801be54:	00d300d3 	.word	0x00d300d3
 801be58:	059b00d3 	.word	0x059b00d3
 801be5c:	059b059b 	.word	0x059b059b
 801be60:	059b059b 	.word	0x059b059b
 801be64:	059b059b 	.word	0x059b059b
 801be68:	059b014a 	.word	0x059b014a
 801be6c:	011b0109 	.word	0x011b0109
 801be70:	014a014a 	.word	0x014a014a
 801be74:	059b014a 	.word	0x059b014a
 801be78:	059b059b 	.word	0x059b059b
 801be7c:	00e6059b 	.word	0x00e6059b
 801be80:	059b059b 	.word	0x059b059b
 801be84:	059b0494 	.word	0x059b0494
 801be88:	059b059b 	.word	0x059b059b
 801be8c:	059b04de 	.word	0x059b04de
 801be90:	059b04fd 	.word	0x059b04fd
 801be94:	0520059b 	.word	0x0520059b
 801be98:	059b059b 	.word	0x059b059b
 801be9c:	059b059b 	.word	0x059b059b
 801bea0:	059b059b 	.word	0x059b059b
 801bea4:	059b059b 	.word	0x059b059b
 801bea8:	059b014a 	.word	0x059b014a
 801beac:	011d0109 	.word	0x011d0109
 801beb0:	014a014a 	.word	0x014a014a
 801beb4:	00ef014a 	.word	0x00ef014a
 801beb8:	0103011d 	.word	0x0103011d
 801bebc:	00fc059b 	.word	0x00fc059b
 801bec0:	0475059b 	.word	0x0475059b
 801bec4:	04cc0496 	.word	0x04cc0496
 801bec8:	059b0103 	.word	0x059b0103
 801becc:	009c04de 	.word	0x009c04de
 801bed0:	059b04ff 	.word	0x059b04ff
 801bed4:	0065059b 	.word	0x0065059b
 801bed8:	009c059b 	.word	0x009c059b
 801bedc:	9906      	ldr	r1, [sp, #24]
 801bede:	9803      	ldr	r0, [sp, #12]
 801bee0:	aa26      	add	r2, sp, #152	@ 0x98
 801bee2:	f001 f90f 	bl	801d104 <__ssprint_r>
 801bee6:	2800      	cmp	r0, #0
 801bee8:	f040 814c 	bne.w	801c184 <_svfprintf_r+0x42c>
 801beec:	ac29      	add	r4, sp, #164	@ 0xa4
 801beee:	e780      	b.n	801bdf2 <_svfprintf_r+0x9a>
 801bef0:	4b43      	ldr	r3, [pc, #268]	@ (801c000 <_svfprintf_r+0x2a8>)
 801bef2:	931a      	str	r3, [sp, #104]	@ 0x68
 801bef4:	f015 0320 	ands.w	r3, r5, #32
 801bef8:	f000 84b8 	beq.w	801c86c <_svfprintf_r+0xb14>
 801befc:	3707      	adds	r7, #7
 801befe:	f027 0307 	bic.w	r3, r7, #7
 801bf02:	461a      	mov	r2, r3
 801bf04:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801bf08:	f852 7b08 	ldr.w	r7, [r2], #8
 801bf0c:	9208      	str	r2, [sp, #32]
 801bf0e:	07e8      	lsls	r0, r5, #31
 801bf10:	d50a      	bpl.n	801bf28 <_svfprintf_r+0x1d0>
 801bf12:	ea57 0308 	orrs.w	r3, r7, r8
 801bf16:	d007      	beq.n	801bf28 <_svfprintf_r+0x1d0>
 801bf18:	2330      	movs	r3, #48	@ 0x30
 801bf1a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801bf1e:	9b07      	ldr	r3, [sp, #28]
 801bf20:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801bf24:	f045 0502 	orr.w	r5, r5, #2
 801bf28:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801bf2c:	2302      	movs	r3, #2
 801bf2e:	f000 bc1f 	b.w	801c770 <_svfprintf_r+0xa18>
 801bf32:	9803      	ldr	r0, [sp, #12]
 801bf34:	f001 fbb4 	bl	801d6a0 <_localeconv_r>
 801bf38:	6843      	ldr	r3, [r0, #4]
 801bf3a:	9316      	str	r3, [sp, #88]	@ 0x58
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f7e4 f9c7 	bl	80002d0 <strlen>
 801bf42:	9014      	str	r0, [sp, #80]	@ 0x50
 801bf44:	9803      	ldr	r0, [sp, #12]
 801bf46:	f001 fbab 	bl	801d6a0 <_localeconv_r>
 801bf4a:	6883      	ldr	r3, [r0, #8]
 801bf4c:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bf50:	b12b      	cbz	r3, 801bf5e <_svfprintf_r+0x206>
 801bf52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf54:	b11b      	cbz	r3, 801bf5e <_svfprintf_r+0x206>
 801bf56:	781b      	ldrb	r3, [r3, #0]
 801bf58:	b10b      	cbz	r3, 801bf5e <_svfprintf_r+0x206>
 801bf5a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf60:	e756      	b.n	801be10 <_svfprintf_r+0xb8>
 801bf62:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d1f9      	bne.n	801bf5e <_svfprintf_r+0x206>
 801bf6a:	2320      	movs	r3, #32
 801bf6c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801bf70:	e7f5      	b.n	801bf5e <_svfprintf_r+0x206>
 801bf72:	f045 0501 	orr.w	r5, r5, #1
 801bf76:	e7f2      	b.n	801bf5e <_svfprintf_r+0x206>
 801bf78:	f857 3b04 	ldr.w	r3, [r7], #4
 801bf7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	daed      	bge.n	801bf5e <_svfprintf_r+0x206>
 801bf82:	425b      	negs	r3, r3
 801bf84:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bf86:	f045 0504 	orr.w	r5, r5, #4
 801bf8a:	e7e8      	b.n	801bf5e <_svfprintf_r+0x206>
 801bf8c:	232b      	movs	r3, #43	@ 0x2b
 801bf8e:	e7ed      	b.n	801bf6c <_svfprintf_r+0x214>
 801bf90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf96:	9207      	str	r2, [sp, #28]
 801bf98:	2a2a      	cmp	r2, #42	@ 0x2a
 801bf9a:	d111      	bne.n	801bfc0 <_svfprintf_r+0x268>
 801bf9c:	f857 6b04 	ldr.w	r6, [r7], #4
 801bfa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bfa2:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 801bfa6:	e7da      	b.n	801bf5e <_svfprintf_r+0x206>
 801bfa8:	fb01 2606 	mla	r6, r1, r6, r2
 801bfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfb0:	9207      	str	r2, [sp, #28]
 801bfb2:	9a07      	ldr	r2, [sp, #28]
 801bfb4:	3a30      	subs	r2, #48	@ 0x30
 801bfb6:	2a09      	cmp	r2, #9
 801bfb8:	d9f6      	bls.n	801bfa8 <_svfprintf_r+0x250>
 801bfba:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 801bfbe:	e72a      	b.n	801be16 <_svfprintf_r+0xbe>
 801bfc0:	2600      	movs	r6, #0
 801bfc2:	210a      	movs	r1, #10
 801bfc4:	e7f5      	b.n	801bfb2 <_svfprintf_r+0x25a>
 801bfc6:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801bfca:	e7c8      	b.n	801bf5e <_svfprintf_r+0x206>
 801bfcc:	2300      	movs	r3, #0
 801bfce:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bfd0:	220a      	movs	r2, #10
 801bfd2:	9b07      	ldr	r3, [sp, #28]
 801bfd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801bfd6:	3b30      	subs	r3, #48	@ 0x30
 801bfd8:	fb02 3301 	mla	r3, r2, r1, r3
 801bfdc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bfde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bfe0:	f813 1b01 	ldrb.w	r1, [r3], #1
 801bfe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bfe6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801bfea:	2b09      	cmp	r3, #9
 801bfec:	9107      	str	r1, [sp, #28]
 801bfee:	d9f0      	bls.n	801bfd2 <_svfprintf_r+0x27a>
 801bff0:	e712      	b.n	801be18 <_svfprintf_r+0xc0>
 801bff2:	f045 0508 	orr.w	r5, r5, #8
 801bff6:	e7b2      	b.n	801bf5e <_svfprintf_r+0x206>
	...
 801c000:	08022259 	.word	0x08022259
 801c004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c006:	781b      	ldrb	r3, [r3, #0]
 801c008:	2b68      	cmp	r3, #104	@ 0x68
 801c00a:	bf01      	itttt	eq
 801c00c:	9b0b      	ldreq	r3, [sp, #44]	@ 0x2c
 801c00e:	3301      	addeq	r3, #1
 801c010:	930b      	streq	r3, [sp, #44]	@ 0x2c
 801c012:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801c016:	bf18      	it	ne
 801c018:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801c01c:	e79f      	b.n	801bf5e <_svfprintf_r+0x206>
 801c01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c020:	781b      	ldrb	r3, [r3, #0]
 801c022:	2b6c      	cmp	r3, #108	@ 0x6c
 801c024:	d105      	bne.n	801c032 <_svfprintf_r+0x2da>
 801c026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c028:	3301      	adds	r3, #1
 801c02a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c02c:	f045 0520 	orr.w	r5, r5, #32
 801c030:	e795      	b.n	801bf5e <_svfprintf_r+0x206>
 801c032:	f045 0510 	orr.w	r5, r5, #16
 801c036:	e792      	b.n	801bf5e <_svfprintf_r+0x206>
 801c038:	463a      	mov	r2, r7
 801c03a:	f852 3b04 	ldr.w	r3, [r2], #4
 801c03e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801c042:	2300      	movs	r3, #0
 801c044:	9208      	str	r2, [sp, #32]
 801c046:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c04a:	469a      	mov	sl, r3
 801c04c:	2601      	movs	r6, #1
 801c04e:	4699      	mov	r9, r3
 801c050:	4698      	mov	r8, r3
 801c052:	9309      	str	r3, [sp, #36]	@ 0x24
 801c054:	461f      	mov	r7, r3
 801c056:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 801c05a:	e1b4      	b.n	801c3c6 <_svfprintf_r+0x66e>
 801c05c:	f045 0510 	orr.w	r5, r5, #16
 801c060:	06ab      	lsls	r3, r5, #26
 801c062:	d514      	bpl.n	801c08e <_svfprintf_r+0x336>
 801c064:	3707      	adds	r7, #7
 801c066:	f027 0307 	bic.w	r3, r7, #7
 801c06a:	461a      	mov	r2, r3
 801c06c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801c070:	f852 7b08 	ldr.w	r7, [r2], #8
 801c074:	9208      	str	r2, [sp, #32]
 801c076:	f1b8 0f00 	cmp.w	r8, #0
 801c07a:	da06      	bge.n	801c08a <_svfprintf_r+0x332>
 801c07c:	427f      	negs	r7, r7
 801c07e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801c082:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 801c086:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c08a:	2301      	movs	r3, #1
 801c08c:	e373      	b.n	801c776 <_svfprintf_r+0xa1e>
 801c08e:	463a      	mov	r2, r7
 801c090:	06ef      	lsls	r7, r5, #27
 801c092:	f852 3b04 	ldr.w	r3, [r2], #4
 801c096:	9208      	str	r2, [sp, #32]
 801c098:	d503      	bpl.n	801c0a2 <_svfprintf_r+0x34a>
 801c09a:	461f      	mov	r7, r3
 801c09c:	ea4f 78e3 	mov.w	r8, r3, asr #31
 801c0a0:	e7e9      	b.n	801c076 <_svfprintf_r+0x31e>
 801c0a2:	0668      	lsls	r0, r5, #25
 801c0a4:	d503      	bpl.n	801c0ae <_svfprintf_r+0x356>
 801c0a6:	b21f      	sxth	r7, r3
 801c0a8:	f343 38c0 	sbfx	r8, r3, #15, #1
 801c0ac:	e7e3      	b.n	801c076 <_svfprintf_r+0x31e>
 801c0ae:	05a9      	lsls	r1, r5, #22
 801c0b0:	d5f3      	bpl.n	801c09a <_svfprintf_r+0x342>
 801c0b2:	b25f      	sxtb	r7, r3
 801c0b4:	f343 18c0 	sbfx	r8, r3, #7, #1
 801c0b8:	e7dd      	b.n	801c076 <_svfprintf_r+0x31e>
 801c0ba:	3707      	adds	r7, #7
 801c0bc:	f027 0307 	bic.w	r3, r7, #7
 801c0c0:	ecb3 7b02 	vldmia	r3!, {d7}
 801c0c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801c0c8:	9308      	str	r3, [sp, #32]
 801c0ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c0cc:	9318      	str	r3, [sp, #96]	@ 0x60
 801c0ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c0d4:	9319      	str	r3, [sp, #100]	@ 0x64
 801c0d6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 801c0da:	4b6e      	ldr	r3, [pc, #440]	@ (801c294 <_svfprintf_r+0x53c>)
 801c0dc:	f04f 32ff 	mov.w	r2, #4294967295
 801c0e0:	f7e4 fd54 	bl	8000b8c <__aeabi_dcmpun>
 801c0e4:	bb00      	cbnz	r0, 801c128 <_svfprintf_r+0x3d0>
 801c0e6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 801c0ea:	4b6a      	ldr	r3, [pc, #424]	@ (801c294 <_svfprintf_r+0x53c>)
 801c0ec:	f04f 32ff 	mov.w	r2, #4294967295
 801c0f0:	f7e4 fd2e 	bl	8000b50 <__aeabi_dcmple>
 801c0f4:	b9c0      	cbnz	r0, 801c128 <_svfprintf_r+0x3d0>
 801c0f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	f7e4 fd1d 	bl	8000b3c <__aeabi_dcmplt>
 801c102:	b110      	cbz	r0, 801c10a <_svfprintf_r+0x3b2>
 801c104:	232d      	movs	r3, #45	@ 0x2d
 801c106:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c10a:	4a63      	ldr	r2, [pc, #396]	@ (801c298 <_svfprintf_r+0x540>)
 801c10c:	4b63      	ldr	r3, [pc, #396]	@ (801c29c <_svfprintf_r+0x544>)
 801c10e:	9907      	ldr	r1, [sp, #28]
 801c110:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801c114:	2947      	cmp	r1, #71	@ 0x47
 801c116:	bfcc      	ite	gt
 801c118:	4693      	movgt	fp, r2
 801c11a:	469b      	movle	fp, r3
 801c11c:	f04f 0a00 	mov.w	sl, #0
 801c120:	2603      	movs	r6, #3
 801c122:	46d1      	mov	r9, sl
 801c124:	f000 bfe3 	b.w	801d0ee <_svfprintf_r+0x1396>
 801c128:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c12c:	4610      	mov	r0, r2
 801c12e:	4619      	mov	r1, r3
 801c130:	f7e4 fd2c 	bl	8000b8c <__aeabi_dcmpun>
 801c134:	4682      	mov	sl, r0
 801c136:	b140      	cbz	r0, 801c14a <_svfprintf_r+0x3f2>
 801c138:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c13a:	4a59      	ldr	r2, [pc, #356]	@ (801c2a0 <_svfprintf_r+0x548>)
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	bfbc      	itt	lt
 801c140:	232d      	movlt	r3, #45	@ 0x2d
 801c142:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801c146:	4b57      	ldr	r3, [pc, #348]	@ (801c2a4 <_svfprintf_r+0x54c>)
 801c148:	e7e1      	b.n	801c10e <_svfprintf_r+0x3b6>
 801c14a:	9b07      	ldr	r3, [sp, #28]
 801c14c:	2b61      	cmp	r3, #97	@ 0x61
 801c14e:	d022      	beq.n	801c196 <_svfprintf_r+0x43e>
 801c150:	2b41      	cmp	r3, #65	@ 0x41
 801c152:	d122      	bne.n	801c19a <_svfprintf_r+0x442>
 801c154:	2358      	movs	r3, #88	@ 0x58
 801c156:	2230      	movs	r2, #48	@ 0x30
 801c158:	2e63      	cmp	r6, #99	@ 0x63
 801c15a:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801c15e:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801c162:	f045 0502 	orr.w	r5, r5, #2
 801c166:	f340 8081 	ble.w	801c26c <_svfprintf_r+0x514>
 801c16a:	9803      	ldr	r0, [sp, #12]
 801c16c:	1c71      	adds	r1, r6, #1
 801c16e:	f7fe fcd9 	bl	801ab24 <_malloc_r>
 801c172:	4683      	mov	fp, r0
 801c174:	2800      	cmp	r0, #0
 801c176:	d17e      	bne.n	801c276 <_svfprintf_r+0x51e>
 801c178:	9b06      	ldr	r3, [sp, #24]
 801c17a:	9a06      	ldr	r2, [sp, #24]
 801c17c:	899b      	ldrh	r3, [r3, #12]
 801c17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c182:	8193      	strh	r3, [r2, #12]
 801c184:	9b06      	ldr	r3, [sp, #24]
 801c186:	899b      	ldrh	r3, [r3, #12]
 801c188:	065b      	lsls	r3, r3, #25
 801c18a:	f53f ae06 	bmi.w	801bd9a <_svfprintf_r+0x42>
 801c18e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c190:	b053      	add	sp, #332	@ 0x14c
 801c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c196:	2378      	movs	r3, #120	@ 0x78
 801c198:	e7dd      	b.n	801c156 <_svfprintf_r+0x3fe>
 801c19a:	1c72      	adds	r2, r6, #1
 801c19c:	d06d      	beq.n	801c27a <_svfprintf_r+0x522>
 801c19e:	9b07      	ldr	r3, [sp, #28]
 801c1a0:	f023 0320 	bic.w	r3, r3, #32
 801c1a4:	2b47      	cmp	r3, #71	@ 0x47
 801c1a6:	d101      	bne.n	801c1ac <_svfprintf_r+0x454>
 801c1a8:	2e00      	cmp	r6, #0
 801c1aa:	d068      	beq.n	801c27e <_svfprintf_r+0x526>
 801c1ac:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801c1b0:	9311      	str	r3, [sp, #68]	@ 0x44
 801c1b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	da65      	bge.n	801c284 <_svfprintf_r+0x52c>
 801c1b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c1ba:	9312      	str	r3, [sp, #72]	@ 0x48
 801c1bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c1be:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801c1c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c1c4:	232d      	movs	r3, #45	@ 0x2d
 801c1c6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c1c8:	9b07      	ldr	r3, [sp, #28]
 801c1ca:	f023 0820 	bic.w	r8, r3, #32
 801c1ce:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 801c1d2:	f040 81d9 	bne.w	801c588 <_svfprintf_r+0x830>
 801c1d6:	a820      	add	r0, sp, #128	@ 0x80
 801c1d8:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801c1dc:	f001 fa78 	bl	801d6d0 <frexp>
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801c1e6:	ec51 0b10 	vmov	r0, r1, d0
 801c1ea:	f7e4 fa35 	bl	8000658 <__aeabi_dmul>
 801c1ee:	4602      	mov	r2, r0
 801c1f0:	460b      	mov	r3, r1
 801c1f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c1f6:	2200      	movs	r2, #0
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	f7e4 fc95 	bl	8000b28 <__aeabi_dcmpeq>
 801c1fe:	b108      	cbz	r0, 801c204 <_svfprintf_r+0x4ac>
 801c200:	2301      	movs	r3, #1
 801c202:	9320      	str	r3, [sp, #128]	@ 0x80
 801c204:	4a28      	ldr	r2, [pc, #160]	@ (801c2a8 <_svfprintf_r+0x550>)
 801c206:	4b29      	ldr	r3, [pc, #164]	@ (801c2ac <_svfprintf_r+0x554>)
 801c208:	9907      	ldr	r1, [sp, #28]
 801c20a:	2961      	cmp	r1, #97	@ 0x61
 801c20c:	bf08      	it	eq
 801c20e:	461a      	moveq	r2, r3
 801c210:	9209      	str	r2, [sp, #36]	@ 0x24
 801c212:	3e01      	subs	r6, #1
 801c214:	465f      	mov	r7, fp
 801c216:	4b26      	ldr	r3, [pc, #152]	@ (801c2b0 <_svfprintf_r+0x558>)
 801c218:	2200      	movs	r2, #0
 801c21a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c21e:	f7e4 fa1b 	bl	8000658 <__aeabi_dmul>
 801c222:	4680      	mov	r8, r0
 801c224:	4689      	mov	r9, r1
 801c226:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801c22a:	f7e4 fcc5 	bl	8000bb8 <__aeabi_d2iz>
 801c22e:	4680      	mov	r8, r0
 801c230:	f7e4 f9a8 	bl	8000584 <__aeabi_i2d>
 801c234:	4602      	mov	r2, r0
 801c236:	460b      	mov	r3, r1
 801c238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c23c:	f7e4 f854 	bl	80002e8 <__aeabi_dsub>
 801c240:	460b      	mov	r3, r1
 801c242:	4602      	mov	r2, r0
 801c244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c24a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c24e:	f807 3b01 	strb.w	r3, [r7], #1
 801c252:	1c73      	adds	r3, r6, #1
 801c254:	d02e      	beq.n	801c2b4 <_svfprintf_r+0x55c>
 801c256:	2200      	movs	r2, #0
 801c258:	2300      	movs	r3, #0
 801c25a:	f106 38ff 	add.w	r8, r6, #4294967295
 801c25e:	f7e4 fc63 	bl	8000b28 <__aeabi_dcmpeq>
 801c262:	b1a8      	cbz	r0, 801c290 <_svfprintf_r+0x538>
 801c264:	463b      	mov	r3, r7
 801c266:	19b9      	adds	r1, r7, r6
 801c268:	2030      	movs	r0, #48	@ 0x30
 801c26a:	e184      	b.n	801c576 <_svfprintf_r+0x81e>
 801c26c:	f04f 0a00 	mov.w	sl, #0
 801c270:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 801c274:	e79a      	b.n	801c1ac <_svfprintf_r+0x454>
 801c276:	4682      	mov	sl, r0
 801c278:	e798      	b.n	801c1ac <_svfprintf_r+0x454>
 801c27a:	2606      	movs	r6, #6
 801c27c:	e796      	b.n	801c1ac <_svfprintf_r+0x454>
 801c27e:	46b2      	mov	sl, r6
 801c280:	2601      	movs	r6, #1
 801c282:	e793      	b.n	801c1ac <_svfprintf_r+0x454>
 801c284:	ed9d 7b0c 	vldr	d7, [sp, #48]	@ 0x30
 801c288:	2300      	movs	r3, #0
 801c28a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 801c28e:	e79a      	b.n	801c1c6 <_svfprintf_r+0x46e>
 801c290:	4646      	mov	r6, r8
 801c292:	e7c0      	b.n	801c216 <_svfprintf_r+0x4be>
 801c294:	7fefffff 	.word	0x7fefffff
 801c298:	0802224d 	.word	0x0802224d
 801c29c:	08022249 	.word	0x08022249
 801c2a0:	08022255 	.word	0x08022255
 801c2a4:	08022251 	.word	0x08022251
 801c2a8:	0802226a 	.word	0x0802226a
 801c2ac:	08022259 	.word	0x08022259
 801c2b0:	40300000 	.word	0x40300000
 801c2b4:	4baa      	ldr	r3, [pc, #680]	@ (801c560 <_svfprintf_r+0x808>)
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	f7e4 fc5e 	bl	8000b78 <__aeabi_dcmpgt>
 801c2bc:	b950      	cbnz	r0, 801c2d4 <_svfprintf_r+0x57c>
 801c2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c2c2:	4ba7      	ldr	r3, [pc, #668]	@ (801c560 <_svfprintf_r+0x808>)
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	f7e4 fc2f 	bl	8000b28 <__aeabi_dcmpeq>
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	d0ca      	beq.n	801c264 <_svfprintf_r+0x50c>
 801c2ce:	f018 0f01 	tst.w	r8, #1
 801c2d2:	d0c7      	beq.n	801c264 <_svfprintf_r+0x50c>
 801c2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2d6:	9724      	str	r7, [sp, #144]	@ 0x90
 801c2d8:	7bd9      	ldrb	r1, [r3, #15]
 801c2da:	2030      	movs	r0, #48	@ 0x30
 801c2dc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c2de:	1e53      	subs	r3, r2, #1
 801c2e0:	9324      	str	r3, [sp, #144]	@ 0x90
 801c2e2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801c2e6:	428b      	cmp	r3, r1
 801c2e8:	f000 8140 	beq.w	801c56c <_svfprintf_r+0x814>
 801c2ec:	2b39      	cmp	r3, #57	@ 0x39
 801c2ee:	bf0b      	itete	eq
 801c2f0:	9b09      	ldreq	r3, [sp, #36]	@ 0x24
 801c2f2:	3301      	addne	r3, #1
 801c2f4:	7a9b      	ldrbeq	r3, [r3, #10]
 801c2f6:	b2db      	uxtbne	r3, r3
 801c2f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c2fc:	eba7 030b 	sub.w	r3, r7, fp
 801c300:	9304      	str	r3, [sp, #16]
 801c302:	9907      	ldr	r1, [sp, #28]
 801c304:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801c308:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801c30a:	f021 0120 	bic.w	r1, r1, #32
 801c30e:	2941      	cmp	r1, #65	@ 0x41
 801c310:	bf08      	it	eq
 801c312:	320f      	addeq	r2, #15
 801c314:	f100 33ff 	add.w	r3, r0, #4294967295
 801c318:	bf06      	itte	eq
 801c31a:	b2d2      	uxtbeq	r2, r2
 801c31c:	2101      	moveq	r1, #1
 801c31e:	2100      	movne	r1, #0
 801c320:	2b00      	cmp	r3, #0
 801c322:	9320      	str	r3, [sp, #128]	@ 0x80
 801c324:	bfb8      	it	lt
 801c326:	f1c0 0301 	rsblt	r3, r0, #1
 801c32a:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801c32e:	bfb4      	ite	lt
 801c330:	222d      	movlt	r2, #45	@ 0x2d
 801c332:	222b      	movge	r2, #43	@ 0x2b
 801c334:	2b09      	cmp	r3, #9
 801c336:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801c33a:	f340 8192 	ble.w	801c662 <_svfprintf_r+0x90a>
 801c33e:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801c342:	270a      	movs	r7, #10
 801c344:	4602      	mov	r2, r0
 801c346:	fbb3 f6f7 	udiv	r6, r3, r7
 801c34a:	fb07 3116 	mls	r1, r7, r6, r3
 801c34e:	3130      	adds	r1, #48	@ 0x30
 801c350:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c354:	4619      	mov	r1, r3
 801c356:	2963      	cmp	r1, #99	@ 0x63
 801c358:	f100 30ff 	add.w	r0, r0, #4294967295
 801c35c:	4633      	mov	r3, r6
 801c35e:	dcf1      	bgt.n	801c344 <_svfprintf_r+0x5ec>
 801c360:	3330      	adds	r3, #48	@ 0x30
 801c362:	1e91      	subs	r1, r2, #2
 801c364:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c368:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801c36c:	460b      	mov	r3, r1
 801c36e:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801c372:	4283      	cmp	r3, r0
 801c374:	f0c0 8170 	bcc.w	801c658 <_svfprintf_r+0x900>
 801c378:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801c37c:	1a9b      	subs	r3, r3, r2
 801c37e:	4281      	cmp	r1, r0
 801c380:	bf88      	it	hi
 801c382:	2300      	movhi	r3, #0
 801c384:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801c388:	441a      	add	r2, r3
 801c38a:	ab22      	add	r3, sp, #136	@ 0x88
 801c38c:	1ad3      	subs	r3, r2, r3
 801c38e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c390:	9b04      	ldr	r3, [sp, #16]
 801c392:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801c394:	2b01      	cmp	r3, #1
 801c396:	eb03 0602 	add.w	r6, r3, r2
 801c39a:	dc01      	bgt.n	801c3a0 <_svfprintf_r+0x648>
 801c39c:	07e8      	lsls	r0, r5, #31
 801c39e:	d501      	bpl.n	801c3a4 <_svfprintf_r+0x64c>
 801c3a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3a2:	441e      	add	r6, r3
 801c3a4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801c3a8:	f04f 0800 	mov.w	r8, #0
 801c3ac:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801c3b0:	9311      	str	r3, [sp, #68]	@ 0x44
 801c3b2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801c3b6:	4647      	mov	r7, r8
 801c3b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	f040 81a4 	bne.w	801c708 <_svfprintf_r+0x9b0>
 801c3c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c3c2:	f04f 0900 	mov.w	r9, #0
 801c3c6:	45b1      	cmp	r9, r6
 801c3c8:	464b      	mov	r3, r9
 801c3ca:	bfb8      	it	lt
 801c3cc:	4633      	movlt	r3, r6
 801c3ce:	9311      	str	r3, [sp, #68]	@ 0x44
 801c3d0:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801c3d4:	b113      	cbz	r3, 801c3dc <_svfprintf_r+0x684>
 801c3d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c3d8:	3301      	adds	r3, #1
 801c3da:	9311      	str	r3, [sp, #68]	@ 0x44
 801c3dc:	f015 0302 	ands.w	r3, r5, #2
 801c3e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c3e2:	bf1e      	ittt	ne
 801c3e4:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801c3e6:	3302      	addne	r3, #2
 801c3e8:	9311      	strne	r3, [sp, #68]	@ 0x44
 801c3ea:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801c3ee:	931c      	str	r3, [sp, #112]	@ 0x70
 801c3f0:	d120      	bne.n	801c434 <_svfprintf_r+0x6dc>
 801c3f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c3f6:	1a9b      	subs	r3, r3, r2
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	dd1b      	ble.n	801c434 <_svfprintf_r+0x6dc>
 801c3fc:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 801c400:	4958      	ldr	r1, [pc, #352]	@ (801c564 <_svfprintf_r+0x80c>)
 801c402:	6021      	str	r1, [r4, #0]
 801c404:	2b10      	cmp	r3, #16
 801c406:	f102 0201 	add.w	r2, r2, #1
 801c40a:	f104 0008 	add.w	r0, r4, #8
 801c40e:	f300 82b1 	bgt.w	801c974 <_svfprintf_r+0xc1c>
 801c412:	eb0c 0103 	add.w	r1, ip, r3
 801c416:	2a07      	cmp	r2, #7
 801c418:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 801c41c:	6063      	str	r3, [r4, #4]
 801c41e:	f340 82be 	ble.w	801c99e <_svfprintf_r+0xc46>
 801c422:	9906      	ldr	r1, [sp, #24]
 801c424:	9803      	ldr	r0, [sp, #12]
 801c426:	aa26      	add	r2, sp, #152	@ 0x98
 801c428:	f000 fe6c 	bl	801d104 <__ssprint_r>
 801c42c:	2800      	cmp	r0, #0
 801c42e:	f040 8605 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c432:	ac29      	add	r4, sp, #164	@ 0xa4
 801c434:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801c438:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c43a:	b16a      	cbz	r2, 801c458 <_svfprintf_r+0x700>
 801c43c:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801c440:	6022      	str	r2, [r4, #0]
 801c442:	2201      	movs	r2, #1
 801c444:	4413      	add	r3, r2
 801c446:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c448:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c44a:	6062      	str	r2, [r4, #4]
 801c44c:	4413      	add	r3, r2
 801c44e:	2b07      	cmp	r3, #7
 801c450:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c452:	f300 82a6 	bgt.w	801c9a2 <_svfprintf_r+0xc4a>
 801c456:	3408      	adds	r4, #8
 801c458:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c45a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c45c:	b162      	cbz	r2, 801c478 <_svfprintf_r+0x720>
 801c45e:	aa1f      	add	r2, sp, #124	@ 0x7c
 801c460:	6022      	str	r2, [r4, #0]
 801c462:	2202      	movs	r2, #2
 801c464:	4413      	add	r3, r2
 801c466:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c468:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c46a:	6062      	str	r2, [r4, #4]
 801c46c:	3301      	adds	r3, #1
 801c46e:	2b07      	cmp	r3, #7
 801c470:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c472:	f300 82a0 	bgt.w	801c9b6 <_svfprintf_r+0xc5e>
 801c476:	3408      	adds	r4, #8
 801c478:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c47a:	2b80      	cmp	r3, #128	@ 0x80
 801c47c:	d120      	bne.n	801c4c0 <_svfprintf_r+0x768>
 801c47e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c480:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c482:	1a9b      	subs	r3, r3, r2
 801c484:	2b00      	cmp	r3, #0
 801c486:	dd1b      	ble.n	801c4c0 <_svfprintf_r+0x768>
 801c488:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 801c48c:	4936      	ldr	r1, [pc, #216]	@ (801c568 <_svfprintf_r+0x810>)
 801c48e:	6021      	str	r1, [r4, #0]
 801c490:	2b10      	cmp	r3, #16
 801c492:	f102 0201 	add.w	r2, r2, #1
 801c496:	f104 0008 	add.w	r0, r4, #8
 801c49a:	f300 8296 	bgt.w	801c9ca <_svfprintf_r+0xc72>
 801c49e:	eb0c 0103 	add.w	r1, ip, r3
 801c4a2:	2a07      	cmp	r2, #7
 801c4a4:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 801c4a8:	6063      	str	r3, [r4, #4]
 801c4aa:	f340 82a3 	ble.w	801c9f4 <_svfprintf_r+0xc9c>
 801c4ae:	9906      	ldr	r1, [sp, #24]
 801c4b0:	9803      	ldr	r0, [sp, #12]
 801c4b2:	aa26      	add	r2, sp, #152	@ 0x98
 801c4b4:	f000 fe26 	bl	801d104 <__ssprint_r>
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	f040 85bf 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c4be:	ac29      	add	r4, sp, #164	@ 0xa4
 801c4c0:	eba9 0906 	sub.w	r9, r9, r6
 801c4c4:	f1b9 0f00 	cmp.w	r9, #0
 801c4c8:	dd1c      	ble.n	801c504 <_svfprintf_r+0x7ac>
 801c4ca:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c4ce:	4826      	ldr	r0, [pc, #152]	@ (801c568 <_svfprintf_r+0x810>)
 801c4d0:	6020      	str	r0, [r4, #0]
 801c4d2:	f1b9 0f10 	cmp.w	r9, #16
 801c4d6:	f102 0201 	add.w	r2, r2, #1
 801c4da:	f104 0108 	add.w	r1, r4, #8
 801c4de:	f300 828b 	bgt.w	801c9f8 <_svfprintf_r+0xca0>
 801c4e2:	444b      	add	r3, r9
 801c4e4:	2a07      	cmp	r2, #7
 801c4e6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c4ea:	f8c4 9004 	str.w	r9, [r4, #4]
 801c4ee:	f340 8297 	ble.w	801ca20 <_svfprintf_r+0xcc8>
 801c4f2:	9906      	ldr	r1, [sp, #24]
 801c4f4:	9803      	ldr	r0, [sp, #12]
 801c4f6:	aa26      	add	r2, sp, #152	@ 0x98
 801c4f8:	f000 fe04 	bl	801d104 <__ssprint_r>
 801c4fc:	2800      	cmp	r0, #0
 801c4fe:	f040 859d 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c502:	ac29      	add	r4, sp, #164	@ 0xa4
 801c504:	05eb      	lsls	r3, r5, #23
 801c506:	f8dd 90a0 	ldr.w	r9, [sp, #160]	@ 0xa0
 801c50a:	f100 828f 	bmi.w	801ca2c <_svfprintf_r+0xcd4>
 801c50e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c510:	3301      	adds	r3, #1
 801c512:	e9c4 b600 	strd	fp, r6, [r4]
 801c516:	2b07      	cmp	r3, #7
 801c518:	444e      	add	r6, r9
 801c51a:	9628      	str	r6, [sp, #160]	@ 0xa0
 801c51c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c51e:	f300 82ca 	bgt.w	801cab6 <_svfprintf_r+0xd5e>
 801c522:	3408      	adds	r4, #8
 801c524:	076a      	lsls	r2, r5, #29
 801c526:	f100 856b 	bmi.w	801d000 <_svfprintf_r+0x12a8>
 801c52a:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	@ 0x3c
 801c52e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c530:	428a      	cmp	r2, r1
 801c532:	bfac      	ite	ge
 801c534:	189b      	addge	r3, r3, r2
 801c536:	185b      	addlt	r3, r3, r1
 801c538:	9310      	str	r3, [sp, #64]	@ 0x40
 801c53a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c53c:	b13b      	cbz	r3, 801c54e <_svfprintf_r+0x7f6>
 801c53e:	9906      	ldr	r1, [sp, #24]
 801c540:	9803      	ldr	r0, [sp, #12]
 801c542:	aa26      	add	r2, sp, #152	@ 0x98
 801c544:	f000 fdde 	bl	801d104 <__ssprint_r>
 801c548:	2800      	cmp	r0, #0
 801c54a:	f040 8577 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c54e:	2300      	movs	r3, #0
 801c550:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c552:	f1ba 0f00 	cmp.w	sl, #0
 801c556:	f040 858d 	bne.w	801d074 <_svfprintf_r+0x131c>
 801c55a:	9f08      	ldr	r7, [sp, #32]
 801c55c:	ac29      	add	r4, sp, #164	@ 0xa4
 801c55e:	e0e0      	b.n	801c722 <_svfprintf_r+0x9ca>
 801c560:	3fe00000 	.word	0x3fe00000
 801c564:	080223a2 	.word	0x080223a2
 801c568:	08022392 	.word	0x08022392
 801c56c:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c570:	e6b4      	b.n	801c2dc <_svfprintf_r+0x584>
 801c572:	f803 0b01 	strb.w	r0, [r3], #1
 801c576:	1aca      	subs	r2, r1, r3
 801c578:	2a00      	cmp	r2, #0
 801c57a:	dafa      	bge.n	801c572 <_svfprintf_r+0x81a>
 801c57c:	1c73      	adds	r3, r6, #1
 801c57e:	3601      	adds	r6, #1
 801c580:	bfb8      	it	lt
 801c582:	2300      	movlt	r3, #0
 801c584:	441f      	add	r7, r3
 801c586:	e6b9      	b.n	801c2fc <_svfprintf_r+0x5a4>
 801c588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c58c:	d005      	beq.n	801c59a <_svfprintf_r+0x842>
 801c58e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c592:	d12f      	bne.n	801c5f4 <_svfprintf_r+0x89c>
 801c594:	1c77      	adds	r7, r6, #1
 801c596:	2102      	movs	r1, #2
 801c598:	e001      	b.n	801c59e <_svfprintf_r+0x846>
 801c59a:	4637      	mov	r7, r6
 801c59c:	2103      	movs	r1, #3
 801c59e:	ab24      	add	r3, sp, #144	@ 0x90
 801c5a0:	9301      	str	r3, [sp, #4]
 801c5a2:	ab21      	add	r3, sp, #132	@ 0x84
 801c5a4:	9300      	str	r3, [sp, #0]
 801c5a6:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 801c5aa:	9803      	ldr	r0, [sp, #12]
 801c5ac:	ab20      	add	r3, sp, #128	@ 0x80
 801c5ae:	463a      	mov	r2, r7
 801c5b0:	f001 f98a 	bl	801d8c8 <_dtoa_r>
 801c5b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c5b8:	4683      	mov	fp, r0
 801c5ba:	d130      	bne.n	801c61e <_svfprintf_r+0x8c6>
 801c5bc:	07ea      	lsls	r2, r5, #31
 801c5be:	d41b      	bmi.n	801c5f8 <_svfprintf_r+0x8a0>
 801c5c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c5c2:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801c5c4:	eba3 030b 	sub.w	r3, r3, fp
 801c5c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c5cc:	9304      	str	r3, [sp, #16]
 801c5ce:	d03b      	beq.n	801c648 <_svfprintf_r+0x8f0>
 801c5d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c5d4:	f47f ae95 	bne.w	801c302 <_svfprintf_r+0x5aa>
 801c5d8:	f005 0301 	and.w	r3, r5, #1
 801c5dc:	2f00      	cmp	r7, #0
 801c5de:	ea43 0306 	orr.w	r3, r3, r6
 801c5e2:	dd58      	ble.n	801c696 <_svfprintf_r+0x93e>
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d060      	beq.n	801c6aa <_svfprintf_r+0x952>
 801c5e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c5ea:	18fb      	adds	r3, r7, r3
 801c5ec:	441e      	add	r6, r3
 801c5ee:	2366      	movs	r3, #102	@ 0x66
 801c5f0:	9307      	str	r3, [sp, #28]
 801c5f2:	e05f      	b.n	801c6b4 <_svfprintf_r+0x95c>
 801c5f4:	4637      	mov	r7, r6
 801c5f6:	e7ce      	b.n	801c596 <_svfprintf_r+0x83e>
 801c5f8:	eb00 0907 	add.w	r9, r0, r7
 801c5fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 801c600:	2200      	movs	r2, #0
 801c602:	2300      	movs	r3, #0
 801c604:	f7e4 fa90 	bl	8000b28 <__aeabi_dcmpeq>
 801c608:	b108      	cbz	r0, 801c60e <_svfprintf_r+0x8b6>
 801c60a:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 801c60e:	2230      	movs	r2, #48	@ 0x30
 801c610:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c612:	4599      	cmp	r9, r3
 801c614:	d9d4      	bls.n	801c5c0 <_svfprintf_r+0x868>
 801c616:	1c59      	adds	r1, r3, #1
 801c618:	9124      	str	r1, [sp, #144]	@ 0x90
 801c61a:	701a      	strb	r2, [r3, #0]
 801c61c:	e7f8      	b.n	801c610 <_svfprintf_r+0x8b8>
 801c61e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c622:	eb00 0907 	add.w	r9, r0, r7
 801c626:	d1e9      	bne.n	801c5fc <_svfprintf_r+0x8a4>
 801c628:	7803      	ldrb	r3, [r0, #0]
 801c62a:	2b30      	cmp	r3, #48	@ 0x30
 801c62c:	d109      	bne.n	801c642 <_svfprintf_r+0x8ea>
 801c62e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 801c632:	2200      	movs	r2, #0
 801c634:	2300      	movs	r3, #0
 801c636:	f7e4 fa77 	bl	8000b28 <__aeabi_dcmpeq>
 801c63a:	b910      	cbnz	r0, 801c642 <_svfprintf_r+0x8ea>
 801c63c:	f1c7 0701 	rsb	r7, r7, #1
 801c640:	9720      	str	r7, [sp, #128]	@ 0x80
 801c642:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c644:	4499      	add	r9, r3
 801c646:	e7d9      	b.n	801c5fc <_svfprintf_r+0x8a4>
 801c648:	1cfb      	adds	r3, r7, #3
 801c64a:	db01      	blt.n	801c650 <_svfprintf_r+0x8f8>
 801c64c:	42be      	cmp	r6, r7
 801c64e:	da15      	bge.n	801c67c <_svfprintf_r+0x924>
 801c650:	9b07      	ldr	r3, [sp, #28]
 801c652:	3b02      	subs	r3, #2
 801c654:	9307      	str	r3, [sp, #28]
 801c656:	e654      	b.n	801c302 <_svfprintf_r+0x5aa>
 801c658:	f813 7b01 	ldrb.w	r7, [r3], #1
 801c65c:	f806 7f01 	strb.w	r7, [r6, #1]!
 801c660:	e687      	b.n	801c372 <_svfprintf_r+0x61a>
 801c662:	b941      	cbnz	r1, 801c676 <_svfprintf_r+0x91e>
 801c664:	2230      	movs	r2, #48	@ 0x30
 801c666:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801c66a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801c66e:	3330      	adds	r3, #48	@ 0x30
 801c670:	f802 3b01 	strb.w	r3, [r2], #1
 801c674:	e689      	b.n	801c38a <_svfprintf_r+0x632>
 801c676:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801c67a:	e7f8      	b.n	801c66e <_svfprintf_r+0x916>
 801c67c:	9b04      	ldr	r3, [sp, #16]
 801c67e:	42bb      	cmp	r3, r7
 801c680:	dd0d      	ble.n	801c69e <_svfprintf_r+0x946>
 801c682:	9b04      	ldr	r3, [sp, #16]
 801c684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c686:	2f00      	cmp	r7, #0
 801c688:	eb03 0602 	add.w	r6, r3, r2
 801c68c:	dc0b      	bgt.n	801c6a6 <_svfprintf_r+0x94e>
 801c68e:	f1c7 0301 	rsb	r3, r7, #1
 801c692:	441e      	add	r6, r3
 801c694:	e007      	b.n	801c6a6 <_svfprintf_r+0x94e>
 801c696:	b153      	cbz	r3, 801c6ae <_svfprintf_r+0x956>
 801c698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c69a:	3301      	adds	r3, #1
 801c69c:	e7a6      	b.n	801c5ec <_svfprintf_r+0x894>
 801c69e:	07e9      	lsls	r1, r5, #31
 801c6a0:	d51d      	bpl.n	801c6de <_svfprintf_r+0x986>
 801c6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c6a4:	18fe      	adds	r6, r7, r3
 801c6a6:	2367      	movs	r3, #103	@ 0x67
 801c6a8:	e7a2      	b.n	801c5f0 <_svfprintf_r+0x898>
 801c6aa:	463e      	mov	r6, r7
 801c6ac:	e79f      	b.n	801c5ee <_svfprintf_r+0x896>
 801c6ae:	2366      	movs	r3, #102	@ 0x66
 801c6b0:	9307      	str	r3, [sp, #28]
 801c6b2:	2601      	movs	r6, #1
 801c6b4:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801c6b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801c6ba:	d022      	beq.n	801c702 <_svfprintf_r+0x9aa>
 801c6bc:	f04f 0800 	mov.w	r8, #0
 801c6c0:	2f00      	cmp	r7, #0
 801c6c2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801c6c6:	f77f ae77 	ble.w	801c3b8 <_svfprintf_r+0x660>
 801c6ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6cc:	781b      	ldrb	r3, [r3, #0]
 801c6ce:	2bff      	cmp	r3, #255	@ 0xff
 801c6d0:	d107      	bne.n	801c6e2 <_svfprintf_r+0x98a>
 801c6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c6d6:	4443      	add	r3, r8
 801c6d8:	fb02 6603 	mla	r6, r2, r3, r6
 801c6dc:	e66c      	b.n	801c3b8 <_svfprintf_r+0x660>
 801c6de:	463e      	mov	r6, r7
 801c6e0:	e7e1      	b.n	801c6a6 <_svfprintf_r+0x94e>
 801c6e2:	42bb      	cmp	r3, r7
 801c6e4:	daf5      	bge.n	801c6d2 <_svfprintf_r+0x97a>
 801c6e6:	1aff      	subs	r7, r7, r3
 801c6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6ea:	785b      	ldrb	r3, [r3, #1]
 801c6ec:	b133      	cbz	r3, 801c6fc <_svfprintf_r+0x9a4>
 801c6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6f0:	3301      	adds	r3, #1
 801c6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6f6:	3301      	adds	r3, #1
 801c6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801c6fa:	e7e6      	b.n	801c6ca <_svfprintf_r+0x972>
 801c6fc:	f108 0801 	add.w	r8, r8, #1
 801c700:	e7e3      	b.n	801c6ca <_svfprintf_r+0x972>
 801c702:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801c706:	e657      	b.n	801c3b8 <_svfprintf_r+0x660>
 801c708:	232d      	movs	r3, #45	@ 0x2d
 801c70a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c70e:	e657      	b.n	801c3c0 <_svfprintf_r+0x668>
 801c710:	06aa      	lsls	r2, r5, #26
 801c712:	d50a      	bpl.n	801c72a <_svfprintf_r+0x9d2>
 801c714:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c716:	683b      	ldr	r3, [r7, #0]
 801c718:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c71a:	17d2      	asrs	r2, r2, #31
 801c71c:	e9c3 1200 	strd	r1, r2, [r3]
 801c720:	3704      	adds	r7, #4
 801c722:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 801c726:	f7ff bb4f 	b.w	801bdc8 <_svfprintf_r+0x70>
 801c72a:	06eb      	lsls	r3, r5, #27
 801c72c:	d503      	bpl.n	801c736 <_svfprintf_r+0x9de>
 801c72e:	683b      	ldr	r3, [r7, #0]
 801c730:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c732:	601a      	str	r2, [r3, #0]
 801c734:	e7f4      	b.n	801c720 <_svfprintf_r+0x9c8>
 801c736:	066e      	lsls	r6, r5, #25
 801c738:	d503      	bpl.n	801c742 <_svfprintf_r+0x9ea>
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c73e:	801a      	strh	r2, [r3, #0]
 801c740:	e7ee      	b.n	801c720 <_svfprintf_r+0x9c8>
 801c742:	05ad      	lsls	r5, r5, #22
 801c744:	d5f3      	bpl.n	801c72e <_svfprintf_r+0x9d6>
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c74a:	701a      	strb	r2, [r3, #0]
 801c74c:	e7e8      	b.n	801c720 <_svfprintf_r+0x9c8>
 801c74e:	f045 0510 	orr.w	r5, r5, #16
 801c752:	f015 0320 	ands.w	r3, r5, #32
 801c756:	d01f      	beq.n	801c798 <_svfprintf_r+0xa40>
 801c758:	3707      	adds	r7, #7
 801c75a:	f027 0307 	bic.w	r3, r7, #7
 801c75e:	461a      	mov	r2, r3
 801c760:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801c764:	f852 7b08 	ldr.w	r7, [r2], #8
 801c768:	9208      	str	r2, [sp, #32]
 801c76a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801c76e:	2300      	movs	r3, #0
 801c770:	2200      	movs	r2, #0
 801c772:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801c776:	2e00      	cmp	r6, #0
 801c778:	f2c0 848d 	blt.w	801d096 <_svfprintf_r+0x133e>
 801c77c:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801c780:	9209      	str	r2, [sp, #36]	@ 0x24
 801c782:	ea57 0208 	orrs.w	r2, r7, r8
 801c786:	f040 848b 	bne.w	801d0a0 <_svfprintf_r+0x1348>
 801c78a:	2e00      	cmp	r6, #0
 801c78c:	f000 80de 	beq.w	801c94c <_svfprintf_r+0xbf4>
 801c790:	2b01      	cmp	r3, #1
 801c792:	f040 8488 	bne.w	801d0a6 <_svfprintf_r+0x134e>
 801c796:	e083      	b.n	801c8a0 <_svfprintf_r+0xb48>
 801c798:	463a      	mov	r2, r7
 801c79a:	f015 0810 	ands.w	r8, r5, #16
 801c79e:	f852 7b04 	ldr.w	r7, [r2], #4
 801c7a2:	9208      	str	r2, [sp, #32]
 801c7a4:	d001      	beq.n	801c7aa <_svfprintf_r+0xa52>
 801c7a6:	4698      	mov	r8, r3
 801c7a8:	e7df      	b.n	801c76a <_svfprintf_r+0xa12>
 801c7aa:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801c7ae:	d001      	beq.n	801c7b4 <_svfprintf_r+0xa5c>
 801c7b0:	b2bf      	uxth	r7, r7
 801c7b2:	e7da      	b.n	801c76a <_svfprintf_r+0xa12>
 801c7b4:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 801c7b8:	d0d7      	beq.n	801c76a <_svfprintf_r+0xa12>
 801c7ba:	b2ff      	uxtb	r7, r7
 801c7bc:	e7f3      	b.n	801c7a6 <_svfprintf_r+0xa4e>
 801c7be:	463b      	mov	r3, r7
 801c7c0:	2278      	movs	r2, #120	@ 0x78
 801c7c2:	f853 7b04 	ldr.w	r7, [r3], #4
 801c7c6:	9308      	str	r3, [sp, #32]
 801c7c8:	f647 0330 	movw	r3, #30768	@ 0x7830
 801c7cc:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801c7d0:	4b94      	ldr	r3, [pc, #592]	@ (801ca24 <_svfprintf_r+0xccc>)
 801c7d2:	931a      	str	r3, [sp, #104]	@ 0x68
 801c7d4:	f04f 0800 	mov.w	r8, #0
 801c7d8:	f045 0502 	orr.w	r5, r5, #2
 801c7dc:	2302      	movs	r3, #2
 801c7de:	9207      	str	r2, [sp, #28]
 801c7e0:	e7c6      	b.n	801c770 <_svfprintf_r+0xa18>
 801c7e2:	463b      	mov	r3, r7
 801c7e4:	2700      	movs	r7, #0
 801c7e6:	f853 bb04 	ldr.w	fp, [r3], #4
 801c7ea:	9308      	str	r3, [sp, #32]
 801c7ec:	42be      	cmp	r6, r7
 801c7ee:	f88d 707b 	strb.w	r7, [sp, #123]	@ 0x7b
 801c7f2:	db0f      	blt.n	801c814 <_svfprintf_r+0xabc>
 801c7f4:	4632      	mov	r2, r6
 801c7f6:	4639      	mov	r1, r7
 801c7f8:	4658      	mov	r0, fp
 801c7fa:	f7e3 fd19 	bl	8000230 <memchr>
 801c7fe:	4682      	mov	sl, r0
 801c800:	2800      	cmp	r0, #0
 801c802:	f43f ac8e 	beq.w	801c122 <_svfprintf_r+0x3ca>
 801c806:	eba0 060b 	sub.w	r6, r0, fp
 801c80a:	46ba      	mov	sl, r7
 801c80c:	46b9      	mov	r9, r7
 801c80e:	46b8      	mov	r8, r7
 801c810:	9709      	str	r7, [sp, #36]	@ 0x24
 801c812:	e5d8      	b.n	801c3c6 <_svfprintf_r+0x66e>
 801c814:	4658      	mov	r0, fp
 801c816:	f7e3 fd5b 	bl	80002d0 <strlen>
 801c81a:	46ba      	mov	sl, r7
 801c81c:	4606      	mov	r6, r0
 801c81e:	e480      	b.n	801c122 <_svfprintf_r+0x3ca>
 801c820:	f045 0510 	orr.w	r5, r5, #16
 801c824:	f015 0320 	ands.w	r3, r5, #32
 801c828:	d00a      	beq.n	801c840 <_svfprintf_r+0xae8>
 801c82a:	3707      	adds	r7, #7
 801c82c:	f027 0307 	bic.w	r3, r7, #7
 801c830:	461a      	mov	r2, r3
 801c832:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801c836:	f852 7b08 	ldr.w	r7, [r2], #8
 801c83a:	9208      	str	r2, [sp, #32]
 801c83c:	2301      	movs	r3, #1
 801c83e:	e797      	b.n	801c770 <_svfprintf_r+0xa18>
 801c840:	463a      	mov	r2, r7
 801c842:	f015 0810 	ands.w	r8, r5, #16
 801c846:	f852 7b04 	ldr.w	r7, [r2], #4
 801c84a:	9208      	str	r2, [sp, #32]
 801c84c:	d001      	beq.n	801c852 <_svfprintf_r+0xafa>
 801c84e:	4698      	mov	r8, r3
 801c850:	e7f4      	b.n	801c83c <_svfprintf_r+0xae4>
 801c852:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801c856:	d001      	beq.n	801c85c <_svfprintf_r+0xb04>
 801c858:	b2bf      	uxth	r7, r7
 801c85a:	e7ef      	b.n	801c83c <_svfprintf_r+0xae4>
 801c85c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 801c860:	d0ec      	beq.n	801c83c <_svfprintf_r+0xae4>
 801c862:	b2ff      	uxtb	r7, r7
 801c864:	e7f3      	b.n	801c84e <_svfprintf_r+0xaf6>
 801c866:	4b70      	ldr	r3, [pc, #448]	@ (801ca28 <_svfprintf_r+0xcd0>)
 801c868:	f7ff bb43 	b.w	801bef2 <_svfprintf_r+0x19a>
 801c86c:	463a      	mov	r2, r7
 801c86e:	f015 0810 	ands.w	r8, r5, #16
 801c872:	f852 7b04 	ldr.w	r7, [r2], #4
 801c876:	9208      	str	r2, [sp, #32]
 801c878:	d002      	beq.n	801c880 <_svfprintf_r+0xb28>
 801c87a:	4698      	mov	r8, r3
 801c87c:	f7ff bb47 	b.w	801bf0e <_svfprintf_r+0x1b6>
 801c880:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801c884:	d002      	beq.n	801c88c <_svfprintf_r+0xb34>
 801c886:	b2bf      	uxth	r7, r7
 801c888:	f7ff bb41 	b.w	801bf0e <_svfprintf_r+0x1b6>
 801c88c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 801c890:	f43f ab3d 	beq.w	801bf0e <_svfprintf_r+0x1b6>
 801c894:	b2ff      	uxtb	r7, r7
 801c896:	e7f0      	b.n	801c87a <_svfprintf_r+0xb22>
 801c898:	2f0a      	cmp	r7, #10
 801c89a:	f178 0300 	sbcs.w	r3, r8, #0
 801c89e:	d207      	bcs.n	801c8b0 <_svfprintf_r+0xb58>
 801c8a0:	3730      	adds	r7, #48	@ 0x30
 801c8a2:	b2ff      	uxtb	r7, r7
 801c8a4:	f88d 7147 	strb.w	r7, [sp, #327]	@ 0x147
 801c8a8:	f20d 1b47 	addw	fp, sp, #327	@ 0x147
 801c8ac:	f000 bc18 	b.w	801d0e0 <_svfprintf_r+0x1388>
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	9304      	str	r3, [sp, #16]
 801c8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c8ba:	ad52      	add	r5, sp, #328	@ 0x148
 801c8bc:	9311      	str	r3, [sp, #68]	@ 0x44
 801c8be:	220a      	movs	r2, #10
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	4638      	mov	r0, r7
 801c8c4:	4641      	mov	r1, r8
 801c8c6:	f7e4 fa3f 	bl	8000d48 <__aeabi_uldivmod>
 801c8ca:	9b04      	ldr	r3, [sp, #16]
 801c8cc:	3301      	adds	r3, #1
 801c8ce:	9304      	str	r3, [sp, #16]
 801c8d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c8d2:	3230      	adds	r2, #48	@ 0x30
 801c8d4:	4682      	mov	sl, r0
 801c8d6:	4689      	mov	r9, r1
 801c8d8:	f105 3bff 	add.w	fp, r5, #4294967295
 801c8dc:	f805 2c01 	strb.w	r2, [r5, #-1]
 801c8e0:	b303      	cbz	r3, 801c924 <_svfprintf_r+0xbcc>
 801c8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c8e4:	781a      	ldrb	r2, [r3, #0]
 801c8e6:	9b04      	ldr	r3, [sp, #16]
 801c8e8:	4293      	cmp	r3, r2
 801c8ea:	d11b      	bne.n	801c924 <_svfprintf_r+0xbcc>
 801c8ec:	2bff      	cmp	r3, #255	@ 0xff
 801c8ee:	d019      	beq.n	801c924 <_svfprintf_r+0xbcc>
 801c8f0:	2f0a      	cmp	r7, #10
 801c8f2:	f178 0800 	sbcs.w	r8, r8, #0
 801c8f6:	f0c0 83f3 	bcc.w	801d0e0 <_svfprintf_r+0x1388>
 801c8fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c8fc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801c8fe:	ebab 0b03 	sub.w	fp, fp, r3
 801c902:	461a      	mov	r2, r3
 801c904:	4658      	mov	r0, fp
 801c906:	f7fe ffce 	bl	801b8a6 <strncpy>
 801c90a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c90c:	785a      	ldrb	r2, [r3, #1]
 801c90e:	b13a      	cbz	r2, 801c920 <_svfprintf_r+0xbc8>
 801c910:	3301      	adds	r3, #1
 801c912:	930a      	str	r3, [sp, #40]	@ 0x28
 801c914:	2300      	movs	r3, #0
 801c916:	9304      	str	r3, [sp, #16]
 801c918:	4657      	mov	r7, sl
 801c91a:	46c8      	mov	r8, r9
 801c91c:	465d      	mov	r5, fp
 801c91e:	e7ce      	b.n	801c8be <_svfprintf_r+0xb66>
 801c920:	9204      	str	r2, [sp, #16]
 801c922:	e7f9      	b.n	801c918 <_svfprintf_r+0xbc0>
 801c924:	2f0a      	cmp	r7, #10
 801c926:	f178 0800 	sbcs.w	r8, r8, #0
 801c92a:	d2f5      	bcs.n	801c918 <_svfprintf_r+0xbc0>
 801c92c:	e3d8      	b.n	801d0e0 <_svfprintf_r+0x1388>
 801c92e:	f007 030f 	and.w	r3, r7, #15
 801c932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c934:	093f      	lsrs	r7, r7, #4
 801c936:	5cd3      	ldrb	r3, [r2, r3]
 801c938:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801c93c:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 801c940:	ea4f 1818 	mov.w	r8, r8, lsr #4
 801c944:	ea57 0308 	orrs.w	r3, r7, r8
 801c948:	d1f1      	bne.n	801c92e <_svfprintf_r+0xbd6>
 801c94a:	e3c9      	b.n	801d0e0 <_svfprintf_r+0x1388>
 801c94c:	b91b      	cbnz	r3, 801c956 <_svfprintf_r+0xbfe>
 801c94e:	07ea      	lsls	r2, r5, #31
 801c950:	d501      	bpl.n	801c956 <_svfprintf_r+0xbfe>
 801c952:	2730      	movs	r7, #48	@ 0x30
 801c954:	e7a6      	b.n	801c8a4 <_svfprintf_r+0xb4c>
 801c956:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 801c95a:	e3c1      	b.n	801d0e0 <_svfprintf_r+0x1388>
 801c95c:	9b07      	ldr	r3, [sp, #28]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	f000 838e 	beq.w	801d080 <_svfprintf_r+0x1328>
 801c964:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801c968:	2300      	movs	r3, #0
 801c96a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c96e:	9708      	str	r7, [sp, #32]
 801c970:	f7ff bb6b 	b.w	801c04a <_svfprintf_r+0x2f2>
 801c974:	2110      	movs	r1, #16
 801c976:	6061      	str	r1, [r4, #4]
 801c978:	2a07      	cmp	r2, #7
 801c97a:	4461      	add	r1, ip
 801c97c:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 801c980:	dd0a      	ble.n	801c998 <_svfprintf_r+0xc40>
 801c982:	9906      	ldr	r1, [sp, #24]
 801c984:	9803      	ldr	r0, [sp, #12]
 801c986:	931d      	str	r3, [sp, #116]	@ 0x74
 801c988:	aa26      	add	r2, sp, #152	@ 0x98
 801c98a:	f000 fbbb 	bl	801d104 <__ssprint_r>
 801c98e:	2800      	cmp	r0, #0
 801c990:	f040 8354 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c994:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c996:	a829      	add	r0, sp, #164	@ 0xa4
 801c998:	3b10      	subs	r3, #16
 801c99a:	4604      	mov	r4, r0
 801c99c:	e52e      	b.n	801c3fc <_svfprintf_r+0x6a4>
 801c99e:	4604      	mov	r4, r0
 801c9a0:	e548      	b.n	801c434 <_svfprintf_r+0x6dc>
 801c9a2:	9906      	ldr	r1, [sp, #24]
 801c9a4:	9803      	ldr	r0, [sp, #12]
 801c9a6:	aa26      	add	r2, sp, #152	@ 0x98
 801c9a8:	f000 fbac 	bl	801d104 <__ssprint_r>
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	f040 8345 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c9b2:	ac29      	add	r4, sp, #164	@ 0xa4
 801c9b4:	e550      	b.n	801c458 <_svfprintf_r+0x700>
 801c9b6:	9906      	ldr	r1, [sp, #24]
 801c9b8:	9803      	ldr	r0, [sp, #12]
 801c9ba:	aa26      	add	r2, sp, #152	@ 0x98
 801c9bc:	f000 fba2 	bl	801d104 <__ssprint_r>
 801c9c0:	2800      	cmp	r0, #0
 801c9c2:	f040 833b 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c9c6:	ac29      	add	r4, sp, #164	@ 0xa4
 801c9c8:	e556      	b.n	801c478 <_svfprintf_r+0x720>
 801c9ca:	2110      	movs	r1, #16
 801c9cc:	6061      	str	r1, [r4, #4]
 801c9ce:	2a07      	cmp	r2, #7
 801c9d0:	4461      	add	r1, ip
 801c9d2:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 801c9d6:	dd0a      	ble.n	801c9ee <_svfprintf_r+0xc96>
 801c9d8:	9906      	ldr	r1, [sp, #24]
 801c9da:	9803      	ldr	r0, [sp, #12]
 801c9dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c9de:	aa26      	add	r2, sp, #152	@ 0x98
 801c9e0:	f000 fb90 	bl	801d104 <__ssprint_r>
 801c9e4:	2800      	cmp	r0, #0
 801c9e6:	f040 8329 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801c9ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c9ec:	a829      	add	r0, sp, #164	@ 0xa4
 801c9ee:	3b10      	subs	r3, #16
 801c9f0:	4604      	mov	r4, r0
 801c9f2:	e549      	b.n	801c488 <_svfprintf_r+0x730>
 801c9f4:	4604      	mov	r4, r0
 801c9f6:	e563      	b.n	801c4c0 <_svfprintf_r+0x768>
 801c9f8:	2010      	movs	r0, #16
 801c9fa:	4403      	add	r3, r0
 801c9fc:	2a07      	cmp	r2, #7
 801c9fe:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ca02:	6060      	str	r0, [r4, #4]
 801ca04:	dd08      	ble.n	801ca18 <_svfprintf_r+0xcc0>
 801ca06:	9906      	ldr	r1, [sp, #24]
 801ca08:	9803      	ldr	r0, [sp, #12]
 801ca0a:	aa26      	add	r2, sp, #152	@ 0x98
 801ca0c:	f000 fb7a 	bl	801d104 <__ssprint_r>
 801ca10:	2800      	cmp	r0, #0
 801ca12:	f040 8313 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801ca16:	a929      	add	r1, sp, #164	@ 0xa4
 801ca18:	f1a9 0910 	sub.w	r9, r9, #16
 801ca1c:	460c      	mov	r4, r1
 801ca1e:	e554      	b.n	801c4ca <_svfprintf_r+0x772>
 801ca20:	460c      	mov	r4, r1
 801ca22:	e56f      	b.n	801c504 <_svfprintf_r+0x7ac>
 801ca24:	08022259 	.word	0x08022259
 801ca28:	0802226a 	.word	0x0802226a
 801ca2c:	9b07      	ldr	r3, [sp, #28]
 801ca2e:	2b65      	cmp	r3, #101	@ 0x65
 801ca30:	f340 8245 	ble.w	801cebe <_svfprintf_r+0x1166>
 801ca34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca38:	2200      	movs	r2, #0
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	f7e4 f874 	bl	8000b28 <__aeabi_dcmpeq>
 801ca40:	2800      	cmp	r0, #0
 801ca42:	d069      	beq.n	801cb18 <_svfprintf_r+0xdc0>
 801ca44:	4b72      	ldr	r3, [pc, #456]	@ (801cc10 <_svfprintf_r+0xeb8>)
 801ca46:	6023      	str	r3, [r4, #0]
 801ca48:	2301      	movs	r3, #1
 801ca4a:	6063      	str	r3, [r4, #4]
 801ca4c:	444b      	add	r3, r9
 801ca4e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ca50:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ca52:	3301      	adds	r3, #1
 801ca54:	2b07      	cmp	r3, #7
 801ca56:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ca58:	dc37      	bgt.n	801caca <_svfprintf_r+0xd72>
 801ca5a:	3408      	adds	r4, #8
 801ca5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca5e:	9a04      	ldr	r2, [sp, #16]
 801ca60:	4293      	cmp	r3, r2
 801ca62:	db02      	blt.n	801ca6a <_svfprintf_r+0xd12>
 801ca64:	07ef      	lsls	r7, r5, #31
 801ca66:	f57f ad5d 	bpl.w	801c524 <_svfprintf_r+0x7cc>
 801ca6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ca6c:	6023      	str	r3, [r4, #0]
 801ca6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca72:	6063      	str	r3, [r4, #4]
 801ca74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ca76:	4413      	add	r3, r2
 801ca78:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ca7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ca7c:	3301      	adds	r3, #1
 801ca7e:	2b07      	cmp	r3, #7
 801ca80:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ca82:	dc2c      	bgt.n	801cade <_svfprintf_r+0xd86>
 801ca84:	3408      	adds	r4, #8
 801ca86:	9b04      	ldr	r3, [sp, #16]
 801ca88:	1e5e      	subs	r6, r3, #1
 801ca8a:	2e00      	cmp	r6, #0
 801ca8c:	f77f ad4a 	ble.w	801c524 <_svfprintf_r+0x7cc>
 801ca90:	4f60      	ldr	r7, [pc, #384]	@ (801cc14 <_svfprintf_r+0xebc>)
 801ca92:	f04f 0810 	mov.w	r8, #16
 801ca96:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ca9a:	2e10      	cmp	r6, #16
 801ca9c:	f103 0301 	add.w	r3, r3, #1
 801caa0:	f104 0108 	add.w	r1, r4, #8
 801caa4:	6027      	str	r7, [r4, #0]
 801caa6:	dc24      	bgt.n	801caf2 <_svfprintf_r+0xd9a>
 801caa8:	6066      	str	r6, [r4, #4]
 801caaa:	2b07      	cmp	r3, #7
 801caac:	4416      	add	r6, r2
 801caae:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801cab2:	f340 82a2 	ble.w	801cffa <_svfprintf_r+0x12a2>
 801cab6:	9906      	ldr	r1, [sp, #24]
 801cab8:	9803      	ldr	r0, [sp, #12]
 801caba:	aa26      	add	r2, sp, #152	@ 0x98
 801cabc:	f000 fb22 	bl	801d104 <__ssprint_r>
 801cac0:	2800      	cmp	r0, #0
 801cac2:	f040 82bb 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cac6:	ac29      	add	r4, sp, #164	@ 0xa4
 801cac8:	e52c      	b.n	801c524 <_svfprintf_r+0x7cc>
 801caca:	9906      	ldr	r1, [sp, #24]
 801cacc:	9803      	ldr	r0, [sp, #12]
 801cace:	aa26      	add	r2, sp, #152	@ 0x98
 801cad0:	f000 fb18 	bl	801d104 <__ssprint_r>
 801cad4:	2800      	cmp	r0, #0
 801cad6:	f040 82b1 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cada:	ac29      	add	r4, sp, #164	@ 0xa4
 801cadc:	e7be      	b.n	801ca5c <_svfprintf_r+0xd04>
 801cade:	9906      	ldr	r1, [sp, #24]
 801cae0:	9803      	ldr	r0, [sp, #12]
 801cae2:	aa26      	add	r2, sp, #152	@ 0x98
 801cae4:	f000 fb0e 	bl	801d104 <__ssprint_r>
 801cae8:	2800      	cmp	r0, #0
 801caea:	f040 82a7 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801caee:	ac29      	add	r4, sp, #164	@ 0xa4
 801caf0:	e7c9      	b.n	801ca86 <_svfprintf_r+0xd2e>
 801caf2:	3210      	adds	r2, #16
 801caf4:	2b07      	cmp	r3, #7
 801caf6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801cafa:	f8c4 8004 	str.w	r8, [r4, #4]
 801cafe:	dd08      	ble.n	801cb12 <_svfprintf_r+0xdba>
 801cb00:	9906      	ldr	r1, [sp, #24]
 801cb02:	9803      	ldr	r0, [sp, #12]
 801cb04:	aa26      	add	r2, sp, #152	@ 0x98
 801cb06:	f000 fafd 	bl	801d104 <__ssprint_r>
 801cb0a:	2800      	cmp	r0, #0
 801cb0c:	f040 8296 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cb10:	a929      	add	r1, sp, #164	@ 0xa4
 801cb12:	3e10      	subs	r6, #16
 801cb14:	460c      	mov	r4, r1
 801cb16:	e7be      	b.n	801ca96 <_svfprintf_r+0xd3e>
 801cb18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	dc7c      	bgt.n	801cc18 <_svfprintf_r+0xec0>
 801cb1e:	4b3c      	ldr	r3, [pc, #240]	@ (801cc10 <_svfprintf_r+0xeb8>)
 801cb20:	6023      	str	r3, [r4, #0]
 801cb22:	2301      	movs	r3, #1
 801cb24:	6063      	str	r3, [r4, #4]
 801cb26:	444b      	add	r3, r9
 801cb28:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cb2a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cb2c:	3301      	adds	r3, #1
 801cb2e:	2b07      	cmp	r3, #7
 801cb30:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cb32:	dc46      	bgt.n	801cbc2 <_svfprintf_r+0xe6a>
 801cb34:	3408      	adds	r4, #8
 801cb36:	9904      	ldr	r1, [sp, #16]
 801cb38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cb3a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801cb3c:	430b      	orrs	r3, r1
 801cb3e:	f005 0101 	and.w	r1, r5, #1
 801cb42:	430b      	orrs	r3, r1
 801cb44:	f43f acee 	beq.w	801c524 <_svfprintf_r+0x7cc>
 801cb48:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cb4a:	6023      	str	r3, [r4, #0]
 801cb4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb4e:	6063      	str	r3, [r4, #4]
 801cb50:	441a      	add	r2, r3
 801cb52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cb54:	9228      	str	r2, [sp, #160]	@ 0xa0
 801cb56:	3301      	adds	r3, #1
 801cb58:	2b07      	cmp	r3, #7
 801cb5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cb5c:	dc3b      	bgt.n	801cbd6 <_svfprintf_r+0xe7e>
 801cb5e:	f104 0308 	add.w	r3, r4, #8
 801cb62:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cb64:	2e00      	cmp	r6, #0
 801cb66:	da1b      	bge.n	801cba0 <_svfprintf_r+0xe48>
 801cb68:	4f2a      	ldr	r7, [pc, #168]	@ (801cc14 <_svfprintf_r+0xebc>)
 801cb6a:	4276      	negs	r6, r6
 801cb6c:	461a      	mov	r2, r3
 801cb6e:	2410      	movs	r4, #16
 801cb70:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801cb74:	2e10      	cmp	r6, #16
 801cb76:	f101 0101 	add.w	r1, r1, #1
 801cb7a:	f103 0308 	add.w	r3, r3, #8
 801cb7e:	6017      	str	r7, [r2, #0]
 801cb80:	dc33      	bgt.n	801cbea <_svfprintf_r+0xe92>
 801cb82:	6056      	str	r6, [r2, #4]
 801cb84:	2907      	cmp	r1, #7
 801cb86:	4406      	add	r6, r0
 801cb88:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801cb8c:	dd08      	ble.n	801cba0 <_svfprintf_r+0xe48>
 801cb8e:	9906      	ldr	r1, [sp, #24]
 801cb90:	9803      	ldr	r0, [sp, #12]
 801cb92:	aa26      	add	r2, sp, #152	@ 0x98
 801cb94:	f000 fab6 	bl	801d104 <__ssprint_r>
 801cb98:	2800      	cmp	r0, #0
 801cb9a:	f040 824f 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cb9e:	ab29      	add	r3, sp, #164	@ 0xa4
 801cba0:	9a04      	ldr	r2, [sp, #16]
 801cba2:	9904      	ldr	r1, [sp, #16]
 801cba4:	605a      	str	r2, [r3, #4]
 801cba6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801cba8:	f8c3 b000 	str.w	fp, [r3]
 801cbac:	440a      	add	r2, r1
 801cbae:	9228      	str	r2, [sp, #160]	@ 0xa0
 801cbb0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801cbb2:	3201      	adds	r2, #1
 801cbb4:	2a07      	cmp	r2, #7
 801cbb6:	9227      	str	r2, [sp, #156]	@ 0x9c
 801cbb8:	f73f af7d 	bgt.w	801cab6 <_svfprintf_r+0xd5e>
 801cbbc:	f103 0408 	add.w	r4, r3, #8
 801cbc0:	e4b0      	b.n	801c524 <_svfprintf_r+0x7cc>
 801cbc2:	9906      	ldr	r1, [sp, #24]
 801cbc4:	9803      	ldr	r0, [sp, #12]
 801cbc6:	aa26      	add	r2, sp, #152	@ 0x98
 801cbc8:	f000 fa9c 	bl	801d104 <__ssprint_r>
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	f040 8235 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cbd2:	ac29      	add	r4, sp, #164	@ 0xa4
 801cbd4:	e7af      	b.n	801cb36 <_svfprintf_r+0xdde>
 801cbd6:	9906      	ldr	r1, [sp, #24]
 801cbd8:	9803      	ldr	r0, [sp, #12]
 801cbda:	aa26      	add	r2, sp, #152	@ 0x98
 801cbdc:	f000 fa92 	bl	801d104 <__ssprint_r>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	f040 822b 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cbe6:	ab29      	add	r3, sp, #164	@ 0xa4
 801cbe8:	e7bb      	b.n	801cb62 <_svfprintf_r+0xe0a>
 801cbea:	3010      	adds	r0, #16
 801cbec:	2907      	cmp	r1, #7
 801cbee:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801cbf2:	6054      	str	r4, [r2, #4]
 801cbf4:	dd08      	ble.n	801cc08 <_svfprintf_r+0xeb0>
 801cbf6:	9906      	ldr	r1, [sp, #24]
 801cbf8:	9803      	ldr	r0, [sp, #12]
 801cbfa:	aa26      	add	r2, sp, #152	@ 0x98
 801cbfc:	f000 fa82 	bl	801d104 <__ssprint_r>
 801cc00:	2800      	cmp	r0, #0
 801cc02:	f040 821b 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cc06:	ab29      	add	r3, sp, #164	@ 0xa4
 801cc08:	3e10      	subs	r6, #16
 801cc0a:	461a      	mov	r2, r3
 801cc0c:	e7b0      	b.n	801cb70 <_svfprintf_r+0xe18>
 801cc0e:	bf00      	nop
 801cc10:	0802227b 	.word	0x0802227b
 801cc14:	08022392 	.word	0x08022392
 801cc18:	9b04      	ldr	r3, [sp, #16]
 801cc1a:	42bb      	cmp	r3, r7
 801cc1c:	bfa8      	it	ge
 801cc1e:	463b      	movge	r3, r7
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	461e      	mov	r6, r3
 801cc24:	dd0a      	ble.n	801cc3c <_svfprintf_r+0xee4>
 801cc26:	e9c4 b300 	strd	fp, r3, [r4]
 801cc2a:	444b      	add	r3, r9
 801cc2c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cc2e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cc30:	3301      	adds	r3, #1
 801cc32:	2b07      	cmp	r3, #7
 801cc34:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cc36:	f300 808e 	bgt.w	801cd56 <_svfprintf_r+0xffe>
 801cc3a:	3408      	adds	r4, #8
 801cc3c:	2e00      	cmp	r6, #0
 801cc3e:	bfac      	ite	ge
 801cc40:	1bbe      	subge	r6, r7, r6
 801cc42:	463e      	movlt	r6, r7
 801cc44:	2e00      	cmp	r6, #0
 801cc46:	dd1c      	ble.n	801cc82 <_svfprintf_r+0xf2a>
 801cc48:	f8df 9344 	ldr.w	r9, [pc, #836]	@ 801cf90 <_svfprintf_r+0x1238>
 801cc4c:	f8c4 9000 	str.w	r9, [r4]
 801cc50:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801cc54:	2e10      	cmp	r6, #16
 801cc56:	f103 0301 	add.w	r3, r3, #1
 801cc5a:	f104 0108 	add.w	r1, r4, #8
 801cc5e:	f300 8084 	bgt.w	801cd6a <_svfprintf_r+0x1012>
 801cc62:	6066      	str	r6, [r4, #4]
 801cc64:	2b07      	cmp	r3, #7
 801cc66:	4416      	add	r6, r2
 801cc68:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801cc6c:	f340 8090 	ble.w	801cd90 <_svfprintf_r+0x1038>
 801cc70:	9906      	ldr	r1, [sp, #24]
 801cc72:	9803      	ldr	r0, [sp, #12]
 801cc74:	aa26      	add	r2, sp, #152	@ 0x98
 801cc76:	f000 fa45 	bl	801d104 <__ssprint_r>
 801cc7a:	2800      	cmp	r0, #0
 801cc7c:	f040 81de 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cc80:	ac29      	add	r4, sp, #164	@ 0xa4
 801cc82:	056e      	lsls	r6, r5, #21
 801cc84:	445f      	add	r7, fp
 801cc86:	d50c      	bpl.n	801cca2 <_svfprintf_r+0xf4a>
 801cc88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	f300 8082 	bgt.w	801cd94 <_svfprintf_r+0x103c>
 801cc90:	f1b8 0f00 	cmp.w	r8, #0
 801cc94:	f300 8081 	bgt.w	801cd9a <_svfprintf_r+0x1042>
 801cc98:	9b04      	ldr	r3, [sp, #16]
 801cc9a:	445b      	add	r3, fp
 801cc9c:	429f      	cmp	r7, r3
 801cc9e:	bf28      	it	cs
 801cca0:	461f      	movcs	r7, r3
 801cca2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cca4:	9a04      	ldr	r2, [sp, #16]
 801cca6:	4293      	cmp	r3, r2
 801cca8:	db01      	blt.n	801ccae <_svfprintf_r+0xf56>
 801ccaa:	07e8      	lsls	r0, r5, #31
 801ccac:	d50e      	bpl.n	801cccc <_svfprintf_r+0xf74>
 801ccae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ccb0:	6023      	str	r3, [r4, #0]
 801ccb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ccb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ccb6:	6063      	str	r3, [r4, #4]
 801ccb8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ccba:	4413      	add	r3, r2
 801ccbc:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ccbe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ccc0:	3301      	adds	r3, #1
 801ccc2:	2b07      	cmp	r3, #7
 801ccc4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ccc6:	f300 80e6 	bgt.w	801ce96 <_svfprintf_r+0x113e>
 801ccca:	3408      	adds	r4, #8
 801cccc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ccce:	9a04      	ldr	r2, [sp, #16]
 801ccd0:	eba2 0803 	sub.w	r8, r2, r3
 801ccd4:	eb0b 0302 	add.w	r3, fp, r2
 801ccd8:	1bdb      	subs	r3, r3, r7
 801ccda:	4598      	cmp	r8, r3
 801ccdc:	bfa8      	it	ge
 801ccde:	4698      	movge	r8, r3
 801cce0:	f1b8 0f00 	cmp.w	r8, #0
 801cce4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cce6:	dd0a      	ble.n	801ccfe <_svfprintf_r+0xfa6>
 801cce8:	4443      	add	r3, r8
 801ccea:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ccec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ccee:	3301      	adds	r3, #1
 801ccf0:	2b07      	cmp	r3, #7
 801ccf2:	e9c4 7800 	strd	r7, r8, [r4]
 801ccf6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ccf8:	f300 80d7 	bgt.w	801ceaa <_svfprintf_r+0x1152>
 801ccfc:	3408      	adds	r4, #8
 801ccfe:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cd00:	9b04      	ldr	r3, [sp, #16]
 801cd02:	f1b8 0f00 	cmp.w	r8, #0
 801cd06:	eba3 0606 	sub.w	r6, r3, r6
 801cd0a:	bfa8      	it	ge
 801cd0c:	eba6 0608 	subge.w	r6, r6, r8
 801cd10:	2e00      	cmp	r6, #0
 801cd12:	f77f ac07 	ble.w	801c524 <_svfprintf_r+0x7cc>
 801cd16:	4f9e      	ldr	r7, [pc, #632]	@ (801cf90 <_svfprintf_r+0x1238>)
 801cd18:	f04f 0810 	mov.w	r8, #16
 801cd1c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801cd20:	2e10      	cmp	r6, #16
 801cd22:	f103 0301 	add.w	r3, r3, #1
 801cd26:	f104 0108 	add.w	r1, r4, #8
 801cd2a:	6027      	str	r7, [r4, #0]
 801cd2c:	f77f aebc 	ble.w	801caa8 <_svfprintf_r+0xd50>
 801cd30:	3210      	adds	r2, #16
 801cd32:	2b07      	cmp	r3, #7
 801cd34:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801cd38:	f8c4 8004 	str.w	r8, [r4, #4]
 801cd3c:	dd08      	ble.n	801cd50 <_svfprintf_r+0xff8>
 801cd3e:	9906      	ldr	r1, [sp, #24]
 801cd40:	9803      	ldr	r0, [sp, #12]
 801cd42:	aa26      	add	r2, sp, #152	@ 0x98
 801cd44:	f000 f9de 	bl	801d104 <__ssprint_r>
 801cd48:	2800      	cmp	r0, #0
 801cd4a:	f040 8177 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cd4e:	a929      	add	r1, sp, #164	@ 0xa4
 801cd50:	3e10      	subs	r6, #16
 801cd52:	460c      	mov	r4, r1
 801cd54:	e7e2      	b.n	801cd1c <_svfprintf_r+0xfc4>
 801cd56:	9906      	ldr	r1, [sp, #24]
 801cd58:	9803      	ldr	r0, [sp, #12]
 801cd5a:	aa26      	add	r2, sp, #152	@ 0x98
 801cd5c:	f000 f9d2 	bl	801d104 <__ssprint_r>
 801cd60:	2800      	cmp	r0, #0
 801cd62:	f040 816b 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cd66:	ac29      	add	r4, sp, #164	@ 0xa4
 801cd68:	e768      	b.n	801cc3c <_svfprintf_r+0xee4>
 801cd6a:	2010      	movs	r0, #16
 801cd6c:	4402      	add	r2, r0
 801cd6e:	2b07      	cmp	r3, #7
 801cd70:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801cd74:	6060      	str	r0, [r4, #4]
 801cd76:	dd08      	ble.n	801cd8a <_svfprintf_r+0x1032>
 801cd78:	9906      	ldr	r1, [sp, #24]
 801cd7a:	9803      	ldr	r0, [sp, #12]
 801cd7c:	aa26      	add	r2, sp, #152	@ 0x98
 801cd7e:	f000 f9c1 	bl	801d104 <__ssprint_r>
 801cd82:	2800      	cmp	r0, #0
 801cd84:	f040 815a 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cd88:	a929      	add	r1, sp, #164	@ 0xa4
 801cd8a:	3e10      	subs	r6, #16
 801cd8c:	460c      	mov	r4, r1
 801cd8e:	e75d      	b.n	801cc4c <_svfprintf_r+0xef4>
 801cd90:	460c      	mov	r4, r1
 801cd92:	e776      	b.n	801cc82 <_svfprintf_r+0xf2a>
 801cd94:	f1b8 0f00 	cmp.w	r8, #0
 801cd98:	dd4d      	ble.n	801ce36 <_svfprintf_r+0x10de>
 801cd9a:	f108 38ff 	add.w	r8, r8, #4294967295
 801cd9e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cda0:	6023      	str	r3, [r4, #0]
 801cda2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cda4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cda6:	6063      	str	r3, [r4, #4]
 801cda8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cdaa:	4413      	add	r3, r2
 801cdac:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cdae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cdb0:	3301      	adds	r3, #1
 801cdb2:	2b07      	cmp	r3, #7
 801cdb4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cdb6:	dc45      	bgt.n	801ce44 <_svfprintf_r+0x10ec>
 801cdb8:	3408      	adds	r4, #8
 801cdba:	9b04      	ldr	r3, [sp, #16]
 801cdbc:	eb0b 0903 	add.w	r9, fp, r3
 801cdc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdc2:	781b      	ldrb	r3, [r3, #0]
 801cdc4:	eba9 0907 	sub.w	r9, r9, r7
 801cdc8:	4599      	cmp	r9, r3
 801cdca:	bfa8      	it	ge
 801cdcc:	4699      	movge	r9, r3
 801cdce:	f1b9 0f00 	cmp.w	r9, #0
 801cdd2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cdd4:	dd09      	ble.n	801cdea <_svfprintf_r+0x1092>
 801cdd6:	444b      	add	r3, r9
 801cdd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cdda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cddc:	3301      	adds	r3, #1
 801cdde:	2b07      	cmp	r3, #7
 801cde0:	e9c4 7900 	strd	r7, r9, [r4]
 801cde4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cde6:	dc37      	bgt.n	801ce58 <_svfprintf_r+0x1100>
 801cde8:	3408      	adds	r4, #8
 801cdea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdec:	781e      	ldrb	r6, [r3, #0]
 801cdee:	f1b9 0f00 	cmp.w	r9, #0
 801cdf2:	bfa8      	it	ge
 801cdf4:	eba6 0609 	subge.w	r6, r6, r9
 801cdf8:	2e00      	cmp	r6, #0
 801cdfa:	dd18      	ble.n	801ce2e <_svfprintf_r+0x10d6>
 801cdfc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ce00:	4863      	ldr	r0, [pc, #396]	@ (801cf90 <_svfprintf_r+0x1238>)
 801ce02:	6020      	str	r0, [r4, #0]
 801ce04:	2e10      	cmp	r6, #16
 801ce06:	f103 0301 	add.w	r3, r3, #1
 801ce0a:	f104 0108 	add.w	r1, r4, #8
 801ce0e:	dc2d      	bgt.n	801ce6c <_svfprintf_r+0x1114>
 801ce10:	6066      	str	r6, [r4, #4]
 801ce12:	2b07      	cmp	r3, #7
 801ce14:	4416      	add	r6, r2
 801ce16:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801ce1a:	dd3a      	ble.n	801ce92 <_svfprintf_r+0x113a>
 801ce1c:	9906      	ldr	r1, [sp, #24]
 801ce1e:	9803      	ldr	r0, [sp, #12]
 801ce20:	aa26      	add	r2, sp, #152	@ 0x98
 801ce22:	f000 f96f 	bl	801d104 <__ssprint_r>
 801ce26:	2800      	cmp	r0, #0
 801ce28:	f040 8108 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801ce2c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ce2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce30:	781b      	ldrb	r3, [r3, #0]
 801ce32:	441f      	add	r7, r3
 801ce34:	e728      	b.n	801cc88 <_svfprintf_r+0xf30>
 801ce36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce38:	3b01      	subs	r3, #1
 801ce3a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce3e:	3b01      	subs	r3, #1
 801ce40:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce42:	e7ac      	b.n	801cd9e <_svfprintf_r+0x1046>
 801ce44:	9906      	ldr	r1, [sp, #24]
 801ce46:	9803      	ldr	r0, [sp, #12]
 801ce48:	aa26      	add	r2, sp, #152	@ 0x98
 801ce4a:	f000 f95b 	bl	801d104 <__ssprint_r>
 801ce4e:	2800      	cmp	r0, #0
 801ce50:	f040 80f4 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801ce54:	ac29      	add	r4, sp, #164	@ 0xa4
 801ce56:	e7b0      	b.n	801cdba <_svfprintf_r+0x1062>
 801ce58:	9906      	ldr	r1, [sp, #24]
 801ce5a:	9803      	ldr	r0, [sp, #12]
 801ce5c:	aa26      	add	r2, sp, #152	@ 0x98
 801ce5e:	f000 f951 	bl	801d104 <__ssprint_r>
 801ce62:	2800      	cmp	r0, #0
 801ce64:	f040 80ea 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801ce68:	ac29      	add	r4, sp, #164	@ 0xa4
 801ce6a:	e7be      	b.n	801cdea <_svfprintf_r+0x1092>
 801ce6c:	2010      	movs	r0, #16
 801ce6e:	4402      	add	r2, r0
 801ce70:	2b07      	cmp	r3, #7
 801ce72:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ce76:	6060      	str	r0, [r4, #4]
 801ce78:	dd08      	ble.n	801ce8c <_svfprintf_r+0x1134>
 801ce7a:	9906      	ldr	r1, [sp, #24]
 801ce7c:	9803      	ldr	r0, [sp, #12]
 801ce7e:	aa26      	add	r2, sp, #152	@ 0x98
 801ce80:	f000 f940 	bl	801d104 <__ssprint_r>
 801ce84:	2800      	cmp	r0, #0
 801ce86:	f040 80d9 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801ce8a:	a929      	add	r1, sp, #164	@ 0xa4
 801ce8c:	3e10      	subs	r6, #16
 801ce8e:	460c      	mov	r4, r1
 801ce90:	e7b4      	b.n	801cdfc <_svfprintf_r+0x10a4>
 801ce92:	460c      	mov	r4, r1
 801ce94:	e7cb      	b.n	801ce2e <_svfprintf_r+0x10d6>
 801ce96:	9906      	ldr	r1, [sp, #24]
 801ce98:	9803      	ldr	r0, [sp, #12]
 801ce9a:	aa26      	add	r2, sp, #152	@ 0x98
 801ce9c:	f000 f932 	bl	801d104 <__ssprint_r>
 801cea0:	2800      	cmp	r0, #0
 801cea2:	f040 80cb 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cea6:	ac29      	add	r4, sp, #164	@ 0xa4
 801cea8:	e710      	b.n	801cccc <_svfprintf_r+0xf74>
 801ceaa:	9906      	ldr	r1, [sp, #24]
 801ceac:	9803      	ldr	r0, [sp, #12]
 801ceae:	aa26      	add	r2, sp, #152	@ 0x98
 801ceb0:	f000 f928 	bl	801d104 <__ssprint_r>
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	f040 80c1 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801ceba:	ac29      	add	r4, sp, #164	@ 0xa4
 801cebc:	e71f      	b.n	801ccfe <_svfprintf_r+0xfa6>
 801cebe:	9904      	ldr	r1, [sp, #16]
 801cec0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801cec2:	2901      	cmp	r1, #1
 801cec4:	f109 0301 	add.w	r3, r9, #1
 801cec8:	f102 0201 	add.w	r2, r2, #1
 801cecc:	f104 0608 	add.w	r6, r4, #8
 801ced0:	dc02      	bgt.n	801ced8 <_svfprintf_r+0x1180>
 801ced2:	07e9      	lsls	r1, r5, #31
 801ced4:	f140 8086 	bpl.w	801cfe4 <_svfprintf_r+0x128c>
 801ced8:	2101      	movs	r1, #1
 801ceda:	2a07      	cmp	r2, #7
 801cedc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cee0:	f8c4 b000 	str.w	fp, [r4]
 801cee4:	6061      	str	r1, [r4, #4]
 801cee6:	dd08      	ble.n	801cefa <_svfprintf_r+0x11a2>
 801cee8:	9906      	ldr	r1, [sp, #24]
 801ceea:	9803      	ldr	r0, [sp, #12]
 801ceec:	aa26      	add	r2, sp, #152	@ 0x98
 801ceee:	f000 f909 	bl	801d104 <__ssprint_r>
 801cef2:	2800      	cmp	r0, #0
 801cef4:	f040 80a2 	bne.w	801d03c <_svfprintf_r+0x12e4>
 801cef8:	ae29      	add	r6, sp, #164	@ 0xa4
 801cefa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cefc:	6033      	str	r3, [r6, #0]
 801cefe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cf00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf02:	6073      	str	r3, [r6, #4]
 801cf04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cf06:	4413      	add	r3, r2
 801cf08:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cf0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cf0c:	3301      	adds	r3, #1
 801cf0e:	2b07      	cmp	r3, #7
 801cf10:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cf12:	dc33      	bgt.n	801cf7c <_svfprintf_r+0x1224>
 801cf14:	3608      	adds	r6, #8
 801cf16:	9b04      	ldr	r3, [sp, #16]
 801cf18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cf1c:	1e5c      	subs	r4, r3, #1
 801cf1e:	2200      	movs	r2, #0
 801cf20:	2300      	movs	r3, #0
 801cf22:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801cf26:	f7e3 fdff 	bl	8000b28 <__aeabi_dcmpeq>
 801cf2a:	2800      	cmp	r0, #0
 801cf2c:	d132      	bne.n	801cf94 <_svfprintf_r+0x123c>
 801cf2e:	f10b 0201 	add.w	r2, fp, #1
 801cf32:	e9c6 2400 	strd	r2, r4, [r6]
 801cf36:	9a04      	ldr	r2, [sp, #16]
 801cf38:	f108 0301 	add.w	r3, r8, #1
 801cf3c:	3f01      	subs	r7, #1
 801cf3e:	4417      	add	r7, r2
 801cf40:	2b07      	cmp	r3, #7
 801cf42:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801cf46:	dd56      	ble.n	801cff6 <_svfprintf_r+0x129e>
 801cf48:	9906      	ldr	r1, [sp, #24]
 801cf4a:	9803      	ldr	r0, [sp, #12]
 801cf4c:	aa26      	add	r2, sp, #152	@ 0x98
 801cf4e:	f000 f8d9 	bl	801d104 <__ssprint_r>
 801cf52:	2800      	cmp	r0, #0
 801cf54:	d172      	bne.n	801d03c <_svfprintf_r+0x12e4>
 801cf56:	ae29      	add	r6, sp, #164	@ 0xa4
 801cf58:	ab22      	add	r3, sp, #136	@ 0x88
 801cf5a:	6033      	str	r3, [r6, #0]
 801cf5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cf60:	6073      	str	r3, [r6, #4]
 801cf62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cf64:	4413      	add	r3, r2
 801cf66:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cf68:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	2b07      	cmp	r3, #7
 801cf6e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cf70:	f73f ada1 	bgt.w	801cab6 <_svfprintf_r+0xd5e>
 801cf74:	f106 0408 	add.w	r4, r6, #8
 801cf78:	f7ff bad4 	b.w	801c524 <_svfprintf_r+0x7cc>
 801cf7c:	9906      	ldr	r1, [sp, #24]
 801cf7e:	9803      	ldr	r0, [sp, #12]
 801cf80:	aa26      	add	r2, sp, #152	@ 0x98
 801cf82:	f000 f8bf 	bl	801d104 <__ssprint_r>
 801cf86:	2800      	cmp	r0, #0
 801cf88:	d158      	bne.n	801d03c <_svfprintf_r+0x12e4>
 801cf8a:	ae29      	add	r6, sp, #164	@ 0xa4
 801cf8c:	e7c3      	b.n	801cf16 <_svfprintf_r+0x11be>
 801cf8e:	bf00      	nop
 801cf90:	08022392 	.word	0x08022392
 801cf94:	9b04      	ldr	r3, [sp, #16]
 801cf96:	2b01      	cmp	r3, #1
 801cf98:	ddde      	ble.n	801cf58 <_svfprintf_r+0x1200>
 801cf9a:	4f58      	ldr	r7, [pc, #352]	@ (801d0fc <_svfprintf_r+0x13a4>)
 801cf9c:	f04f 0810 	mov.w	r8, #16
 801cfa0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801cfa4:	2c10      	cmp	r4, #16
 801cfa6:	f103 0301 	add.w	r3, r3, #1
 801cfaa:	f106 0108 	add.w	r1, r6, #8
 801cfae:	6037      	str	r7, [r6, #0]
 801cfb0:	dc07      	bgt.n	801cfc2 <_svfprintf_r+0x126a>
 801cfb2:	6074      	str	r4, [r6, #4]
 801cfb4:	2b07      	cmp	r3, #7
 801cfb6:	4414      	add	r4, r2
 801cfb8:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801cfbc:	dcc4      	bgt.n	801cf48 <_svfprintf_r+0x11f0>
 801cfbe:	460e      	mov	r6, r1
 801cfc0:	e7ca      	b.n	801cf58 <_svfprintf_r+0x1200>
 801cfc2:	3210      	adds	r2, #16
 801cfc4:	2b07      	cmp	r3, #7
 801cfc6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801cfca:	f8c6 8004 	str.w	r8, [r6, #4]
 801cfce:	dd06      	ble.n	801cfde <_svfprintf_r+0x1286>
 801cfd0:	9906      	ldr	r1, [sp, #24]
 801cfd2:	9803      	ldr	r0, [sp, #12]
 801cfd4:	aa26      	add	r2, sp, #152	@ 0x98
 801cfd6:	f000 f895 	bl	801d104 <__ssprint_r>
 801cfda:	bb78      	cbnz	r0, 801d03c <_svfprintf_r+0x12e4>
 801cfdc:	a929      	add	r1, sp, #164	@ 0xa4
 801cfde:	3c10      	subs	r4, #16
 801cfe0:	460e      	mov	r6, r1
 801cfe2:	e7dd      	b.n	801cfa0 <_svfprintf_r+0x1248>
 801cfe4:	2101      	movs	r1, #1
 801cfe6:	2a07      	cmp	r2, #7
 801cfe8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cfec:	f8c4 b000 	str.w	fp, [r4]
 801cff0:	6061      	str	r1, [r4, #4]
 801cff2:	ddb1      	ble.n	801cf58 <_svfprintf_r+0x1200>
 801cff4:	e7a8      	b.n	801cf48 <_svfprintf_r+0x11f0>
 801cff6:	3608      	adds	r6, #8
 801cff8:	e7ae      	b.n	801cf58 <_svfprintf_r+0x1200>
 801cffa:	460c      	mov	r4, r1
 801cffc:	f7ff ba92 	b.w	801c524 <_svfprintf_r+0x7cc>
 801d000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d002:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d004:	1a9d      	subs	r5, r3, r2
 801d006:	2d00      	cmp	r5, #0
 801d008:	f77f aa8f 	ble.w	801c52a <_svfprintf_r+0x7d2>
 801d00c:	4e3c      	ldr	r6, [pc, #240]	@ (801d100 <_svfprintf_r+0x13a8>)
 801d00e:	2710      	movs	r7, #16
 801d010:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801d014:	2d10      	cmp	r5, #16
 801d016:	f103 0301 	add.w	r3, r3, #1
 801d01a:	6026      	str	r6, [r4, #0]
 801d01c:	dc18      	bgt.n	801d050 <_svfprintf_r+0x12f8>
 801d01e:	6065      	str	r5, [r4, #4]
 801d020:	2b07      	cmp	r3, #7
 801d022:	4415      	add	r5, r2
 801d024:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 801d028:	f77f aa7f 	ble.w	801c52a <_svfprintf_r+0x7d2>
 801d02c:	9906      	ldr	r1, [sp, #24]
 801d02e:	9803      	ldr	r0, [sp, #12]
 801d030:	aa26      	add	r2, sp, #152	@ 0x98
 801d032:	f000 f867 	bl	801d104 <__ssprint_r>
 801d036:	2800      	cmp	r0, #0
 801d038:	f43f aa77 	beq.w	801c52a <_svfprintf_r+0x7d2>
 801d03c:	f1ba 0f00 	cmp.w	sl, #0
 801d040:	f43f a8a0 	beq.w	801c184 <_svfprintf_r+0x42c>
 801d044:	9803      	ldr	r0, [sp, #12]
 801d046:	4651      	mov	r1, sl
 801d048:	f7fe fdc4 	bl	801bbd4 <_free_r>
 801d04c:	f7ff b89a 	b.w	801c184 <_svfprintf_r+0x42c>
 801d050:	3210      	adds	r2, #16
 801d052:	2b07      	cmp	r3, #7
 801d054:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801d058:	6067      	str	r7, [r4, #4]
 801d05a:	dc02      	bgt.n	801d062 <_svfprintf_r+0x130a>
 801d05c:	3408      	adds	r4, #8
 801d05e:	3d10      	subs	r5, #16
 801d060:	e7d6      	b.n	801d010 <_svfprintf_r+0x12b8>
 801d062:	9906      	ldr	r1, [sp, #24]
 801d064:	9803      	ldr	r0, [sp, #12]
 801d066:	aa26      	add	r2, sp, #152	@ 0x98
 801d068:	f000 f84c 	bl	801d104 <__ssprint_r>
 801d06c:	2800      	cmp	r0, #0
 801d06e:	d1e5      	bne.n	801d03c <_svfprintf_r+0x12e4>
 801d070:	ac29      	add	r4, sp, #164	@ 0xa4
 801d072:	e7f4      	b.n	801d05e <_svfprintf_r+0x1306>
 801d074:	9803      	ldr	r0, [sp, #12]
 801d076:	4651      	mov	r1, sl
 801d078:	f7fe fdac 	bl	801bbd4 <_free_r>
 801d07c:	f7ff ba6d 	b.w	801c55a <_svfprintf_r+0x802>
 801d080:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d082:	2b00      	cmp	r3, #0
 801d084:	f43f a87e 	beq.w	801c184 <_svfprintf_r+0x42c>
 801d088:	9906      	ldr	r1, [sp, #24]
 801d08a:	9803      	ldr	r0, [sp, #12]
 801d08c:	aa26      	add	r2, sp, #152	@ 0x98
 801d08e:	f000 f839 	bl	801d104 <__ssprint_r>
 801d092:	f7ff b877 	b.w	801c184 <_svfprintf_r+0x42c>
 801d096:	ea57 0208 	orrs.w	r2, r7, r8
 801d09a:	9509      	str	r5, [sp, #36]	@ 0x24
 801d09c:	f43f ab78 	beq.w	801c790 <_svfprintf_r+0xa38>
 801d0a0:	2b01      	cmp	r3, #1
 801d0a2:	f43f abf9 	beq.w	801c898 <_svfprintf_r+0xb40>
 801d0a6:	2b02      	cmp	r3, #2
 801d0a8:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 801d0ac:	f43f ac3f 	beq.w	801c92e <_svfprintf_r+0xbd6>
 801d0b0:	f007 0307 	and.w	r3, r7, #7
 801d0b4:	08ff      	lsrs	r7, r7, #3
 801d0b6:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 801d0ba:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 801d0be:	3330      	adds	r3, #48	@ 0x30
 801d0c0:	ea57 0108 	orrs.w	r1, r7, r8
 801d0c4:	465a      	mov	r2, fp
 801d0c6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801d0ca:	d1f1      	bne.n	801d0b0 <_svfprintf_r+0x1358>
 801d0cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d0ce:	07c9      	lsls	r1, r1, #31
 801d0d0:	d506      	bpl.n	801d0e0 <_svfprintf_r+0x1388>
 801d0d2:	2b30      	cmp	r3, #48	@ 0x30
 801d0d4:	d004      	beq.n	801d0e0 <_svfprintf_r+0x1388>
 801d0d6:	2330      	movs	r3, #48	@ 0x30
 801d0d8:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801d0dc:	f1a2 0b02 	sub.w	fp, r2, #2
 801d0e0:	ab52      	add	r3, sp, #328	@ 0x148
 801d0e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801d0e4:	46b1      	mov	r9, r6
 801d0e6:	f04f 0a00 	mov.w	sl, #0
 801d0ea:	eba3 060b 	sub.w	r6, r3, fp
 801d0ee:	46d0      	mov	r8, sl
 801d0f0:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 801d0f4:	4657      	mov	r7, sl
 801d0f6:	f7ff b966 	b.w	801c3c6 <_svfprintf_r+0x66e>
 801d0fa:	bf00      	nop
 801d0fc:	08022392 	.word	0x08022392
 801d100:	080223a2 	.word	0x080223a2

0801d104 <__ssprint_r>:
 801d104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d108:	6815      	ldr	r5, [r2, #0]
 801d10a:	4606      	mov	r6, r0
 801d10c:	460f      	mov	r7, r1
 801d10e:	4614      	mov	r4, r2
 801d110:	68a3      	ldr	r3, [r4, #8]
 801d112:	3508      	adds	r5, #8
 801d114:	b92b      	cbnz	r3, 801d122 <__ssprint_r+0x1e>
 801d116:	2000      	movs	r0, #0
 801d118:	2300      	movs	r3, #0
 801d11a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801d11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d122:	6863      	ldr	r3, [r4, #4]
 801d124:	1e5a      	subs	r2, r3, #1
 801d126:	2b00      	cmp	r3, #0
 801d128:	6062      	str	r2, [r4, #4]
 801d12a:	ddf4      	ble.n	801d116 <__ssprint_r+0x12>
 801d12c:	f855 8c04 	ldr.w	r8, [r5, #-4]
 801d130:	f1b8 0f00 	cmp.w	r8, #0
 801d134:	d0ec      	beq.n	801d110 <__ssprint_r+0xc>
 801d136:	4643      	mov	r3, r8
 801d138:	f855 2c08 	ldr.w	r2, [r5, #-8]
 801d13c:	4639      	mov	r1, r7
 801d13e:	4630      	mov	r0, r6
 801d140:	f001 fca4 	bl	801ea8c <__ssputs_r>
 801d144:	1c43      	adds	r3, r0, #1
 801d146:	d0e7      	beq.n	801d118 <__ssprint_r+0x14>
 801d148:	68a2      	ldr	r2, [r4, #8]
 801d14a:	eba2 0208 	sub.w	r2, r2, r8
 801d14e:	60a2      	str	r2, [r4, #8]
 801d150:	e7de      	b.n	801d110 <__ssprint_r+0xc>

0801d152 <_fclose_r>:
 801d152:	b570      	push	{r4, r5, r6, lr}
 801d154:	4605      	mov	r5, r0
 801d156:	460c      	mov	r4, r1
 801d158:	b1b9      	cbz	r1, 801d18a <_fclose_r+0x38>
 801d15a:	b118      	cbz	r0, 801d164 <_fclose_r+0x12>
 801d15c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d15e:	b90b      	cbnz	r3, 801d164 <_fclose_r+0x12>
 801d160:	f7fe fa00 	bl	801b564 <__sinit>
 801d164:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d16a:	07d6      	lsls	r6, r2, #31
 801d16c:	d404      	bmi.n	801d178 <_fclose_r+0x26>
 801d16e:	0598      	lsls	r0, r3, #22
 801d170:	d40e      	bmi.n	801d190 <_fclose_r+0x3e>
 801d172:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d174:	f7fe fc42 	bl	801b9fc <__retarget_lock_acquire_recursive>
 801d178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d17c:	b943      	cbnz	r3, 801d190 <_fclose_r+0x3e>
 801d17e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d180:	07d9      	lsls	r1, r3, #31
 801d182:	d402      	bmi.n	801d18a <_fclose_r+0x38>
 801d184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d186:	f7fe fc3a 	bl	801b9fe <__retarget_lock_release_recursive>
 801d18a:	2600      	movs	r6, #0
 801d18c:	4630      	mov	r0, r6
 801d18e:	bd70      	pop	{r4, r5, r6, pc}
 801d190:	4621      	mov	r1, r4
 801d192:	4628      	mov	r0, r5
 801d194:	f000 f834 	bl	801d200 <__sflush_r>
 801d198:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d19a:	4606      	mov	r6, r0
 801d19c:	b133      	cbz	r3, 801d1ac <_fclose_r+0x5a>
 801d19e:	69e1      	ldr	r1, [r4, #28]
 801d1a0:	4628      	mov	r0, r5
 801d1a2:	4798      	blx	r3
 801d1a4:	2800      	cmp	r0, #0
 801d1a6:	bfb8      	it	lt
 801d1a8:	f04f 36ff 	movlt.w	r6, #4294967295
 801d1ac:	89a3      	ldrh	r3, [r4, #12]
 801d1ae:	061a      	lsls	r2, r3, #24
 801d1b0:	d503      	bpl.n	801d1ba <_fclose_r+0x68>
 801d1b2:	6921      	ldr	r1, [r4, #16]
 801d1b4:	4628      	mov	r0, r5
 801d1b6:	f7fe fd0d 	bl	801bbd4 <_free_r>
 801d1ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d1bc:	b141      	cbz	r1, 801d1d0 <_fclose_r+0x7e>
 801d1be:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801d1c2:	4299      	cmp	r1, r3
 801d1c4:	d002      	beq.n	801d1cc <_fclose_r+0x7a>
 801d1c6:	4628      	mov	r0, r5
 801d1c8:	f7fe fd04 	bl	801bbd4 <_free_r>
 801d1cc:	2300      	movs	r3, #0
 801d1ce:	6323      	str	r3, [r4, #48]	@ 0x30
 801d1d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d1d2:	b121      	cbz	r1, 801d1de <_fclose_r+0x8c>
 801d1d4:	4628      	mov	r0, r5
 801d1d6:	f7fe fcfd 	bl	801bbd4 <_free_r>
 801d1da:	2300      	movs	r3, #0
 801d1dc:	6463      	str	r3, [r4, #68]	@ 0x44
 801d1de:	f7fe f9b5 	bl	801b54c <__sfp_lock_acquire>
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	81a3      	strh	r3, [r4, #12]
 801d1e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d1e8:	07db      	lsls	r3, r3, #31
 801d1ea:	d402      	bmi.n	801d1f2 <_fclose_r+0xa0>
 801d1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d1ee:	f7fe fc06 	bl	801b9fe <__retarget_lock_release_recursive>
 801d1f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d1f4:	f7fe fc01 	bl	801b9fa <__retarget_lock_close_recursive>
 801d1f8:	f7fe f9ae 	bl	801b558 <__sfp_lock_release>
 801d1fc:	e7c6      	b.n	801d18c <_fclose_r+0x3a>
	...

0801d200 <__sflush_r>:
 801d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d204:	4605      	mov	r5, r0
 801d206:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801d20a:	0706      	lsls	r6, r0, #28
 801d20c:	460c      	mov	r4, r1
 801d20e:	d457      	bmi.n	801d2c0 <__sflush_r+0xc0>
 801d210:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801d214:	818b      	strh	r3, [r1, #12]
 801d216:	684b      	ldr	r3, [r1, #4]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	dc02      	bgt.n	801d222 <__sflush_r+0x22>
 801d21c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801d21e:	2b00      	cmp	r3, #0
 801d220:	dd4c      	ble.n	801d2bc <__sflush_r+0xbc>
 801d222:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d224:	2e00      	cmp	r6, #0
 801d226:	d049      	beq.n	801d2bc <__sflush_r+0xbc>
 801d228:	2300      	movs	r3, #0
 801d22a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801d22e:	682f      	ldr	r7, [r5, #0]
 801d230:	69e1      	ldr	r1, [r4, #28]
 801d232:	602b      	str	r3, [r5, #0]
 801d234:	d034      	beq.n	801d2a0 <__sflush_r+0xa0>
 801d236:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801d238:	89a3      	ldrh	r3, [r4, #12]
 801d23a:	0759      	lsls	r1, r3, #29
 801d23c:	d505      	bpl.n	801d24a <__sflush_r+0x4a>
 801d23e:	6863      	ldr	r3, [r4, #4]
 801d240:	1ad2      	subs	r2, r2, r3
 801d242:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d244:	b10b      	cbz	r3, 801d24a <__sflush_r+0x4a>
 801d246:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d248:	1ad2      	subs	r2, r2, r3
 801d24a:	2300      	movs	r3, #0
 801d24c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d24e:	69e1      	ldr	r1, [r4, #28]
 801d250:	4628      	mov	r0, r5
 801d252:	47b0      	blx	r6
 801d254:	1c43      	adds	r3, r0, #1
 801d256:	d106      	bne.n	801d266 <__sflush_r+0x66>
 801d258:	682a      	ldr	r2, [r5, #0]
 801d25a:	2a1d      	cmp	r2, #29
 801d25c:	d848      	bhi.n	801d2f0 <__sflush_r+0xf0>
 801d25e:	4b2b      	ldr	r3, [pc, #172]	@ (801d30c <__sflush_r+0x10c>)
 801d260:	40d3      	lsrs	r3, r2
 801d262:	07de      	lsls	r6, r3, #31
 801d264:	d544      	bpl.n	801d2f0 <__sflush_r+0xf0>
 801d266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d26a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801d26e:	81a2      	strh	r2, [r4, #12]
 801d270:	2200      	movs	r2, #0
 801d272:	6062      	str	r2, [r4, #4]
 801d274:	04d9      	lsls	r1, r3, #19
 801d276:	6922      	ldr	r2, [r4, #16]
 801d278:	6022      	str	r2, [r4, #0]
 801d27a:	d504      	bpl.n	801d286 <__sflush_r+0x86>
 801d27c:	1c42      	adds	r2, r0, #1
 801d27e:	d101      	bne.n	801d284 <__sflush_r+0x84>
 801d280:	682b      	ldr	r3, [r5, #0]
 801d282:	b903      	cbnz	r3, 801d286 <__sflush_r+0x86>
 801d284:	6520      	str	r0, [r4, #80]	@ 0x50
 801d286:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d288:	602f      	str	r7, [r5, #0]
 801d28a:	b1b9      	cbz	r1, 801d2bc <__sflush_r+0xbc>
 801d28c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801d290:	4299      	cmp	r1, r3
 801d292:	d002      	beq.n	801d29a <__sflush_r+0x9a>
 801d294:	4628      	mov	r0, r5
 801d296:	f7fe fc9d 	bl	801bbd4 <_free_r>
 801d29a:	2300      	movs	r3, #0
 801d29c:	6323      	str	r3, [r4, #48]	@ 0x30
 801d29e:	e00d      	b.n	801d2bc <__sflush_r+0xbc>
 801d2a0:	2301      	movs	r3, #1
 801d2a2:	4628      	mov	r0, r5
 801d2a4:	47b0      	blx	r6
 801d2a6:	4602      	mov	r2, r0
 801d2a8:	1c50      	adds	r0, r2, #1
 801d2aa:	d1c5      	bne.n	801d238 <__sflush_r+0x38>
 801d2ac:	682b      	ldr	r3, [r5, #0]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d0c2      	beq.n	801d238 <__sflush_r+0x38>
 801d2b2:	2b1d      	cmp	r3, #29
 801d2b4:	d001      	beq.n	801d2ba <__sflush_r+0xba>
 801d2b6:	2b16      	cmp	r3, #22
 801d2b8:	d11a      	bne.n	801d2f0 <__sflush_r+0xf0>
 801d2ba:	602f      	str	r7, [r5, #0]
 801d2bc:	2000      	movs	r0, #0
 801d2be:	e01e      	b.n	801d2fe <__sflush_r+0xfe>
 801d2c0:	690f      	ldr	r7, [r1, #16]
 801d2c2:	2f00      	cmp	r7, #0
 801d2c4:	d0fa      	beq.n	801d2bc <__sflush_r+0xbc>
 801d2c6:	0783      	lsls	r3, r0, #30
 801d2c8:	680e      	ldr	r6, [r1, #0]
 801d2ca:	bf08      	it	eq
 801d2cc:	694b      	ldreq	r3, [r1, #20]
 801d2ce:	600f      	str	r7, [r1, #0]
 801d2d0:	bf18      	it	ne
 801d2d2:	2300      	movne	r3, #0
 801d2d4:	eba6 0807 	sub.w	r8, r6, r7
 801d2d8:	608b      	str	r3, [r1, #8]
 801d2da:	f1b8 0f00 	cmp.w	r8, #0
 801d2de:	dded      	ble.n	801d2bc <__sflush_r+0xbc>
 801d2e0:	69e1      	ldr	r1, [r4, #28]
 801d2e2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801d2e4:	4643      	mov	r3, r8
 801d2e6:	463a      	mov	r2, r7
 801d2e8:	4628      	mov	r0, r5
 801d2ea:	47b0      	blx	r6
 801d2ec:	2800      	cmp	r0, #0
 801d2ee:	dc08      	bgt.n	801d302 <__sflush_r+0x102>
 801d2f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d2f8:	81a3      	strh	r3, [r4, #12]
 801d2fa:	f04f 30ff 	mov.w	r0, #4294967295
 801d2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d302:	4407      	add	r7, r0
 801d304:	eba8 0800 	sub.w	r8, r8, r0
 801d308:	e7e7      	b.n	801d2da <__sflush_r+0xda>
 801d30a:	bf00      	nop
 801d30c:	20400001 	.word	0x20400001

0801d310 <_fflush_r>:
 801d310:	b538      	push	{r3, r4, r5, lr}
 801d312:	460c      	mov	r4, r1
 801d314:	4605      	mov	r5, r0
 801d316:	b118      	cbz	r0, 801d320 <_fflush_r+0x10>
 801d318:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d31a:	b90b      	cbnz	r3, 801d320 <_fflush_r+0x10>
 801d31c:	f7fe f922 	bl	801b564 <__sinit>
 801d320:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801d324:	b1b8      	cbz	r0, 801d356 <_fflush_r+0x46>
 801d326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d328:	07db      	lsls	r3, r3, #31
 801d32a:	d404      	bmi.n	801d336 <_fflush_r+0x26>
 801d32c:	0581      	lsls	r1, r0, #22
 801d32e:	d402      	bmi.n	801d336 <_fflush_r+0x26>
 801d330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d332:	f7fe fb63 	bl	801b9fc <__retarget_lock_acquire_recursive>
 801d336:	4628      	mov	r0, r5
 801d338:	4621      	mov	r1, r4
 801d33a:	f7ff ff61 	bl	801d200 <__sflush_r>
 801d33e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d340:	07da      	lsls	r2, r3, #31
 801d342:	4605      	mov	r5, r0
 801d344:	d405      	bmi.n	801d352 <_fflush_r+0x42>
 801d346:	89a3      	ldrh	r3, [r4, #12]
 801d348:	059b      	lsls	r3, r3, #22
 801d34a:	d402      	bmi.n	801d352 <_fflush_r+0x42>
 801d34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d34e:	f7fe fb56 	bl	801b9fe <__retarget_lock_release_recursive>
 801d352:	4628      	mov	r0, r5
 801d354:	bd38      	pop	{r3, r4, r5, pc}
 801d356:	4605      	mov	r5, r0
 801d358:	e7fb      	b.n	801d352 <_fflush_r+0x42>
	...

0801d35c <__sfvwrite_r>:
 801d35c:	6893      	ldr	r3, [r2, #8]
 801d35e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d362:	4606      	mov	r6, r0
 801d364:	460c      	mov	r4, r1
 801d366:	4691      	mov	r9, r2
 801d368:	b91b      	cbnz	r3, 801d372 <__sfvwrite_r+0x16>
 801d36a:	2000      	movs	r0, #0
 801d36c:	b003      	add	sp, #12
 801d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d372:	898b      	ldrh	r3, [r1, #12]
 801d374:	0718      	lsls	r0, r3, #28
 801d376:	d550      	bpl.n	801d41a <__sfvwrite_r+0xbe>
 801d378:	690b      	ldr	r3, [r1, #16]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d04d      	beq.n	801d41a <__sfvwrite_r+0xbe>
 801d37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d382:	f8d9 8000 	ldr.w	r8, [r9]
 801d386:	f013 0702 	ands.w	r7, r3, #2
 801d38a:	d16b      	bne.n	801d464 <__sfvwrite_r+0x108>
 801d38c:	f013 0301 	ands.w	r3, r3, #1
 801d390:	f000 809c 	beq.w	801d4cc <__sfvwrite_r+0x170>
 801d394:	4638      	mov	r0, r7
 801d396:	46ba      	mov	sl, r7
 801d398:	46bb      	mov	fp, r7
 801d39a:	f1bb 0f00 	cmp.w	fp, #0
 801d39e:	f000 8103 	beq.w	801d5a8 <__sfvwrite_r+0x24c>
 801d3a2:	b950      	cbnz	r0, 801d3ba <__sfvwrite_r+0x5e>
 801d3a4:	465a      	mov	r2, fp
 801d3a6:	210a      	movs	r1, #10
 801d3a8:	4650      	mov	r0, sl
 801d3aa:	f7e2 ff41 	bl	8000230 <memchr>
 801d3ae:	2800      	cmp	r0, #0
 801d3b0:	f000 8100 	beq.w	801d5b4 <__sfvwrite_r+0x258>
 801d3b4:	3001      	adds	r0, #1
 801d3b6:	eba0 070a 	sub.w	r7, r0, sl
 801d3ba:	6820      	ldr	r0, [r4, #0]
 801d3bc:	6921      	ldr	r1, [r4, #16]
 801d3be:	68a5      	ldr	r5, [r4, #8]
 801d3c0:	6963      	ldr	r3, [r4, #20]
 801d3c2:	455f      	cmp	r7, fp
 801d3c4:	463a      	mov	r2, r7
 801d3c6:	bf28      	it	cs
 801d3c8:	465a      	movcs	r2, fp
 801d3ca:	4288      	cmp	r0, r1
 801d3cc:	f240 80f5 	bls.w	801d5ba <__sfvwrite_r+0x25e>
 801d3d0:	441d      	add	r5, r3
 801d3d2:	42aa      	cmp	r2, r5
 801d3d4:	f340 80f1 	ble.w	801d5ba <__sfvwrite_r+0x25e>
 801d3d8:	4651      	mov	r1, sl
 801d3da:	462a      	mov	r2, r5
 801d3dc:	f7fe fa22 	bl	801b824 <memmove>
 801d3e0:	6823      	ldr	r3, [r4, #0]
 801d3e2:	442b      	add	r3, r5
 801d3e4:	6023      	str	r3, [r4, #0]
 801d3e6:	4621      	mov	r1, r4
 801d3e8:	4630      	mov	r0, r6
 801d3ea:	f7ff ff91 	bl	801d310 <_fflush_r>
 801d3ee:	2800      	cmp	r0, #0
 801d3f0:	d167      	bne.n	801d4c2 <__sfvwrite_r+0x166>
 801d3f2:	1b7f      	subs	r7, r7, r5
 801d3f4:	f040 80f9 	bne.w	801d5ea <__sfvwrite_r+0x28e>
 801d3f8:	4621      	mov	r1, r4
 801d3fa:	4630      	mov	r0, r6
 801d3fc:	f7ff ff88 	bl	801d310 <_fflush_r>
 801d400:	2800      	cmp	r0, #0
 801d402:	d15e      	bne.n	801d4c2 <__sfvwrite_r+0x166>
 801d404:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d408:	1b5b      	subs	r3, r3, r5
 801d40a:	44aa      	add	sl, r5
 801d40c:	ebab 0b05 	sub.w	fp, fp, r5
 801d410:	f8c9 3008 	str.w	r3, [r9, #8]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d1c0      	bne.n	801d39a <__sfvwrite_r+0x3e>
 801d418:	e7a7      	b.n	801d36a <__sfvwrite_r+0xe>
 801d41a:	4621      	mov	r1, r4
 801d41c:	4630      	mov	r0, r6
 801d41e:	f000 f8e9 	bl	801d5f4 <__swsetup_r>
 801d422:	2800      	cmp	r0, #0
 801d424:	d0ab      	beq.n	801d37e <__sfvwrite_r+0x22>
 801d426:	f04f 30ff 	mov.w	r0, #4294967295
 801d42a:	e79f      	b.n	801d36c <__sfvwrite_r+0x10>
 801d42c:	e9d8 a500 	ldrd	sl, r5, [r8]
 801d430:	f108 0808 	add.w	r8, r8, #8
 801d434:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801d438:	69e1      	ldr	r1, [r4, #28]
 801d43a:	2d00      	cmp	r5, #0
 801d43c:	d0f6      	beq.n	801d42c <__sfvwrite_r+0xd0>
 801d43e:	42bd      	cmp	r5, r7
 801d440:	462b      	mov	r3, r5
 801d442:	4652      	mov	r2, sl
 801d444:	bf28      	it	cs
 801d446:	463b      	movcs	r3, r7
 801d448:	4630      	mov	r0, r6
 801d44a:	47d8      	blx	fp
 801d44c:	2800      	cmp	r0, #0
 801d44e:	dd38      	ble.n	801d4c2 <__sfvwrite_r+0x166>
 801d450:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d454:	1a1b      	subs	r3, r3, r0
 801d456:	4482      	add	sl, r0
 801d458:	1a2d      	subs	r5, r5, r0
 801d45a:	f8c9 3008 	str.w	r3, [r9, #8]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d1e8      	bne.n	801d434 <__sfvwrite_r+0xd8>
 801d462:	e782      	b.n	801d36a <__sfvwrite_r+0xe>
 801d464:	f04f 0a00 	mov.w	sl, #0
 801d468:	4f61      	ldr	r7, [pc, #388]	@ (801d5f0 <__sfvwrite_r+0x294>)
 801d46a:	4655      	mov	r5, sl
 801d46c:	e7e2      	b.n	801d434 <__sfvwrite_r+0xd8>
 801d46e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801d472:	f108 0808 	add.w	r8, r8, #8
 801d476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d47a:	6820      	ldr	r0, [r4, #0]
 801d47c:	68a2      	ldr	r2, [r4, #8]
 801d47e:	f1ba 0f00 	cmp.w	sl, #0
 801d482:	d0f4      	beq.n	801d46e <__sfvwrite_r+0x112>
 801d484:	0599      	lsls	r1, r3, #22
 801d486:	d563      	bpl.n	801d550 <__sfvwrite_r+0x1f4>
 801d488:	4552      	cmp	r2, sl
 801d48a:	d836      	bhi.n	801d4fa <__sfvwrite_r+0x19e>
 801d48c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 801d490:	d033      	beq.n	801d4fa <__sfvwrite_r+0x19e>
 801d492:	6921      	ldr	r1, [r4, #16]
 801d494:	6965      	ldr	r5, [r4, #20]
 801d496:	eba0 0b01 	sub.w	fp, r0, r1
 801d49a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d49e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d4a2:	f10b 0201 	add.w	r2, fp, #1
 801d4a6:	106d      	asrs	r5, r5, #1
 801d4a8:	4452      	add	r2, sl
 801d4aa:	4295      	cmp	r5, r2
 801d4ac:	bf38      	it	cc
 801d4ae:	4615      	movcc	r5, r2
 801d4b0:	055b      	lsls	r3, r3, #21
 801d4b2:	d53d      	bpl.n	801d530 <__sfvwrite_r+0x1d4>
 801d4b4:	4629      	mov	r1, r5
 801d4b6:	4630      	mov	r0, r6
 801d4b8:	f7fd fb34 	bl	801ab24 <_malloc_r>
 801d4bc:	b948      	cbnz	r0, 801d4d2 <__sfvwrite_r+0x176>
 801d4be:	230c      	movs	r3, #12
 801d4c0:	6033      	str	r3, [r6, #0]
 801d4c2:	89a3      	ldrh	r3, [r4, #12]
 801d4c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4c8:	81a3      	strh	r3, [r4, #12]
 801d4ca:	e7ac      	b.n	801d426 <__sfvwrite_r+0xca>
 801d4cc:	461f      	mov	r7, r3
 801d4ce:	469a      	mov	sl, r3
 801d4d0:	e7d1      	b.n	801d476 <__sfvwrite_r+0x11a>
 801d4d2:	465a      	mov	r2, fp
 801d4d4:	6921      	ldr	r1, [r4, #16]
 801d4d6:	9001      	str	r0, [sp, #4]
 801d4d8:	f7fe faa6 	bl	801ba28 <memcpy>
 801d4dc:	89a2      	ldrh	r2, [r4, #12]
 801d4de:	9b01      	ldr	r3, [sp, #4]
 801d4e0:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801d4e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801d4e8:	81a2      	strh	r2, [r4, #12]
 801d4ea:	6123      	str	r3, [r4, #16]
 801d4ec:	6165      	str	r5, [r4, #20]
 801d4ee:	445b      	add	r3, fp
 801d4f0:	eba5 050b 	sub.w	r5, r5, fp
 801d4f4:	6023      	str	r3, [r4, #0]
 801d4f6:	4652      	mov	r2, sl
 801d4f8:	60a5      	str	r5, [r4, #8]
 801d4fa:	4552      	cmp	r2, sl
 801d4fc:	bf28      	it	cs
 801d4fe:	4652      	movcs	r2, sl
 801d500:	6820      	ldr	r0, [r4, #0]
 801d502:	9201      	str	r2, [sp, #4]
 801d504:	4639      	mov	r1, r7
 801d506:	f7fe f98d 	bl	801b824 <memmove>
 801d50a:	68a3      	ldr	r3, [r4, #8]
 801d50c:	9a01      	ldr	r2, [sp, #4]
 801d50e:	1a9b      	subs	r3, r3, r2
 801d510:	60a3      	str	r3, [r4, #8]
 801d512:	6823      	ldr	r3, [r4, #0]
 801d514:	4413      	add	r3, r2
 801d516:	4655      	mov	r5, sl
 801d518:	6023      	str	r3, [r4, #0]
 801d51a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d51e:	1b5b      	subs	r3, r3, r5
 801d520:	442f      	add	r7, r5
 801d522:	ebaa 0a05 	sub.w	sl, sl, r5
 801d526:	f8c9 3008 	str.w	r3, [r9, #8]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d1a3      	bne.n	801d476 <__sfvwrite_r+0x11a>
 801d52e:	e71c      	b.n	801d36a <__sfvwrite_r+0xe>
 801d530:	462a      	mov	r2, r5
 801d532:	4630      	mov	r0, r6
 801d534:	f7fd fd6a 	bl	801b00c <_realloc_r>
 801d538:	4603      	mov	r3, r0
 801d53a:	2800      	cmp	r0, #0
 801d53c:	d1d5      	bne.n	801d4ea <__sfvwrite_r+0x18e>
 801d53e:	6921      	ldr	r1, [r4, #16]
 801d540:	4630      	mov	r0, r6
 801d542:	f7fe fb47 	bl	801bbd4 <_free_r>
 801d546:	89a3      	ldrh	r3, [r4, #12]
 801d548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d54c:	81a3      	strh	r3, [r4, #12]
 801d54e:	e7b6      	b.n	801d4be <__sfvwrite_r+0x162>
 801d550:	6923      	ldr	r3, [r4, #16]
 801d552:	4283      	cmp	r3, r0
 801d554:	d302      	bcc.n	801d55c <__sfvwrite_r+0x200>
 801d556:	6961      	ldr	r1, [r4, #20]
 801d558:	4551      	cmp	r1, sl
 801d55a:	d915      	bls.n	801d588 <__sfvwrite_r+0x22c>
 801d55c:	4552      	cmp	r2, sl
 801d55e:	bf28      	it	cs
 801d560:	4652      	movcs	r2, sl
 801d562:	4639      	mov	r1, r7
 801d564:	4615      	mov	r5, r2
 801d566:	f7fe f95d 	bl	801b824 <memmove>
 801d56a:	68a3      	ldr	r3, [r4, #8]
 801d56c:	6822      	ldr	r2, [r4, #0]
 801d56e:	1b5b      	subs	r3, r3, r5
 801d570:	442a      	add	r2, r5
 801d572:	60a3      	str	r3, [r4, #8]
 801d574:	6022      	str	r2, [r4, #0]
 801d576:	2b00      	cmp	r3, #0
 801d578:	d1cf      	bne.n	801d51a <__sfvwrite_r+0x1be>
 801d57a:	4621      	mov	r1, r4
 801d57c:	4630      	mov	r0, r6
 801d57e:	f7ff fec7 	bl	801d310 <_fflush_r>
 801d582:	2800      	cmp	r0, #0
 801d584:	d0c9      	beq.n	801d51a <__sfvwrite_r+0x1be>
 801d586:	e79c      	b.n	801d4c2 <__sfvwrite_r+0x166>
 801d588:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d58c:	4553      	cmp	r3, sl
 801d58e:	bf28      	it	cs
 801d590:	4653      	movcs	r3, sl
 801d592:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801d594:	fb93 f3f1 	sdiv	r3, r3, r1
 801d598:	463a      	mov	r2, r7
 801d59a:	434b      	muls	r3, r1
 801d59c:	4630      	mov	r0, r6
 801d59e:	69e1      	ldr	r1, [r4, #28]
 801d5a0:	47a8      	blx	r5
 801d5a2:	1e05      	subs	r5, r0, #0
 801d5a4:	dcb9      	bgt.n	801d51a <__sfvwrite_r+0x1be>
 801d5a6:	e78c      	b.n	801d4c2 <__sfvwrite_r+0x166>
 801d5a8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801d5ac:	2000      	movs	r0, #0
 801d5ae:	f108 0808 	add.w	r8, r8, #8
 801d5b2:	e6f2      	b.n	801d39a <__sfvwrite_r+0x3e>
 801d5b4:	f10b 0701 	add.w	r7, fp, #1
 801d5b8:	e6ff      	b.n	801d3ba <__sfvwrite_r+0x5e>
 801d5ba:	4293      	cmp	r3, r2
 801d5bc:	dc08      	bgt.n	801d5d0 <__sfvwrite_r+0x274>
 801d5be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801d5c0:	69e1      	ldr	r1, [r4, #28]
 801d5c2:	4652      	mov	r2, sl
 801d5c4:	4630      	mov	r0, r6
 801d5c6:	47a8      	blx	r5
 801d5c8:	1e05      	subs	r5, r0, #0
 801d5ca:	f73f af12 	bgt.w	801d3f2 <__sfvwrite_r+0x96>
 801d5ce:	e778      	b.n	801d4c2 <__sfvwrite_r+0x166>
 801d5d0:	4651      	mov	r1, sl
 801d5d2:	9201      	str	r2, [sp, #4]
 801d5d4:	f7fe f926 	bl	801b824 <memmove>
 801d5d8:	9a01      	ldr	r2, [sp, #4]
 801d5da:	68a3      	ldr	r3, [r4, #8]
 801d5dc:	1a9b      	subs	r3, r3, r2
 801d5de:	60a3      	str	r3, [r4, #8]
 801d5e0:	6823      	ldr	r3, [r4, #0]
 801d5e2:	4413      	add	r3, r2
 801d5e4:	6023      	str	r3, [r4, #0]
 801d5e6:	4615      	mov	r5, r2
 801d5e8:	e703      	b.n	801d3f2 <__sfvwrite_r+0x96>
 801d5ea:	2001      	movs	r0, #1
 801d5ec:	e70a      	b.n	801d404 <__sfvwrite_r+0xa8>
 801d5ee:	bf00      	nop
 801d5f0:	7ffffc00 	.word	0x7ffffc00

0801d5f4 <__swsetup_r>:
 801d5f4:	b538      	push	{r3, r4, r5, lr}
 801d5f6:	4b29      	ldr	r3, [pc, #164]	@ (801d69c <__swsetup_r+0xa8>)
 801d5f8:	4605      	mov	r5, r0
 801d5fa:	6818      	ldr	r0, [r3, #0]
 801d5fc:	460c      	mov	r4, r1
 801d5fe:	b118      	cbz	r0, 801d608 <__swsetup_r+0x14>
 801d600:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d602:	b90b      	cbnz	r3, 801d608 <__swsetup_r+0x14>
 801d604:	f7fd ffae 	bl	801b564 <__sinit>
 801d608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d60c:	0719      	lsls	r1, r3, #28
 801d60e:	d422      	bmi.n	801d656 <__swsetup_r+0x62>
 801d610:	06da      	lsls	r2, r3, #27
 801d612:	d407      	bmi.n	801d624 <__swsetup_r+0x30>
 801d614:	2209      	movs	r2, #9
 801d616:	602a      	str	r2, [r5, #0]
 801d618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d61c:	81a3      	strh	r3, [r4, #12]
 801d61e:	f04f 30ff 	mov.w	r0, #4294967295
 801d622:	e033      	b.n	801d68c <__swsetup_r+0x98>
 801d624:	0758      	lsls	r0, r3, #29
 801d626:	d512      	bpl.n	801d64e <__swsetup_r+0x5a>
 801d628:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d62a:	b141      	cbz	r1, 801d63e <__swsetup_r+0x4a>
 801d62c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801d630:	4299      	cmp	r1, r3
 801d632:	d002      	beq.n	801d63a <__swsetup_r+0x46>
 801d634:	4628      	mov	r0, r5
 801d636:	f7fe facd 	bl	801bbd4 <_free_r>
 801d63a:	2300      	movs	r3, #0
 801d63c:	6323      	str	r3, [r4, #48]	@ 0x30
 801d63e:	89a3      	ldrh	r3, [r4, #12]
 801d640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d644:	81a3      	strh	r3, [r4, #12]
 801d646:	2300      	movs	r3, #0
 801d648:	6063      	str	r3, [r4, #4]
 801d64a:	6923      	ldr	r3, [r4, #16]
 801d64c:	6023      	str	r3, [r4, #0]
 801d64e:	89a3      	ldrh	r3, [r4, #12]
 801d650:	f043 0308 	orr.w	r3, r3, #8
 801d654:	81a3      	strh	r3, [r4, #12]
 801d656:	6923      	ldr	r3, [r4, #16]
 801d658:	b94b      	cbnz	r3, 801d66e <__swsetup_r+0x7a>
 801d65a:	89a3      	ldrh	r3, [r4, #12]
 801d65c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d664:	d003      	beq.n	801d66e <__swsetup_r+0x7a>
 801d666:	4621      	mov	r1, r4
 801d668:	4628      	mov	r0, r5
 801d66a:	f001 fa92 	bl	801eb92 <__smakebuf_r>
 801d66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d672:	f013 0201 	ands.w	r2, r3, #1
 801d676:	d00a      	beq.n	801d68e <__swsetup_r+0x9a>
 801d678:	2200      	movs	r2, #0
 801d67a:	60a2      	str	r2, [r4, #8]
 801d67c:	6962      	ldr	r2, [r4, #20]
 801d67e:	4252      	negs	r2, r2
 801d680:	61a2      	str	r2, [r4, #24]
 801d682:	6922      	ldr	r2, [r4, #16]
 801d684:	b942      	cbnz	r2, 801d698 <__swsetup_r+0xa4>
 801d686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d68a:	d1c5      	bne.n	801d618 <__swsetup_r+0x24>
 801d68c:	bd38      	pop	{r3, r4, r5, pc}
 801d68e:	0799      	lsls	r1, r3, #30
 801d690:	bf58      	it	pl
 801d692:	6962      	ldrpl	r2, [r4, #20]
 801d694:	60a2      	str	r2, [r4, #8]
 801d696:	e7f4      	b.n	801d682 <__swsetup_r+0x8e>
 801d698:	2000      	movs	r0, #0
 801d69a:	e7f7      	b.n	801d68c <__swsetup_r+0x98>
 801d69c:	20003554 	.word	0x20003554

0801d6a0 <_localeconv_r>:
 801d6a0:	4800      	ldr	r0, [pc, #0]	@ (801d6a4 <_localeconv_r+0x4>)
 801d6a2:	4770      	bx	lr
 801d6a4:	2000378c 	.word	0x2000378c

0801d6a8 <__libc_fini_array>:
 801d6a8:	b538      	push	{r3, r4, r5, lr}
 801d6aa:	4d07      	ldr	r5, [pc, #28]	@ (801d6c8 <__libc_fini_array+0x20>)
 801d6ac:	4c07      	ldr	r4, [pc, #28]	@ (801d6cc <__libc_fini_array+0x24>)
 801d6ae:	1b64      	subs	r4, r4, r5
 801d6b0:	10a4      	asrs	r4, r4, #2
 801d6b2:	b91c      	cbnz	r4, 801d6bc <__libc_fini_array+0x14>
 801d6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6b8:	f003 b934 	b.w	8020924 <_fini>
 801d6bc:	3c01      	subs	r4, #1
 801d6be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d6c2:	4798      	blx	r3
 801d6c4:	e7f5      	b.n	801d6b2 <__libc_fini_array+0xa>
 801d6c6:	bf00      	nop
 801d6c8:	080226c4 	.word	0x080226c4
 801d6cc:	080226c8 	.word	0x080226c8

0801d6d0 <frexp>:
 801d6d0:	b570      	push	{r4, r5, r6, lr}
 801d6d2:	2100      	movs	r1, #0
 801d6d4:	ec55 4b10 	vmov	r4, r5, d0
 801d6d8:	6001      	str	r1, [r0, #0]
 801d6da:	4914      	ldr	r1, [pc, #80]	@ (801d72c <frexp+0x5c>)
 801d6dc:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801d6e0:	428b      	cmp	r3, r1
 801d6e2:	4606      	mov	r6, r0
 801d6e4:	462a      	mov	r2, r5
 801d6e6:	d81e      	bhi.n	801d726 <frexp+0x56>
 801d6e8:	4621      	mov	r1, r4
 801d6ea:	4319      	orrs	r1, r3
 801d6ec:	d01b      	beq.n	801d726 <frexp+0x56>
 801d6ee:	4910      	ldr	r1, [pc, #64]	@ (801d730 <frexp+0x60>)
 801d6f0:	4029      	ands	r1, r5
 801d6f2:	b961      	cbnz	r1, 801d70e <frexp+0x3e>
 801d6f4:	4b0f      	ldr	r3, [pc, #60]	@ (801d734 <frexp+0x64>)
 801d6f6:	2200      	movs	r2, #0
 801d6f8:	4620      	mov	r0, r4
 801d6fa:	4629      	mov	r1, r5
 801d6fc:	f7e2 ffac 	bl	8000658 <__aeabi_dmul>
 801d700:	460a      	mov	r2, r1
 801d702:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d706:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801d70a:	4604      	mov	r4, r0
 801d70c:	6031      	str	r1, [r6, #0]
 801d70e:	6831      	ldr	r1, [r6, #0]
 801d710:	151b      	asrs	r3, r3, #20
 801d712:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801d716:	f36f 521e 	bfc	r2, #20, #11
 801d71a:	4419      	add	r1, r3
 801d71c:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d720:	6031      	str	r1, [r6, #0]
 801d722:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801d726:	ec45 4b10 	vmov	d0, r4, r5
 801d72a:	bd70      	pop	{r4, r5, r6, pc}
 801d72c:	7fefffff 	.word	0x7fefffff
 801d730:	7ff00000 	.word	0x7ff00000
 801d734:	43500000 	.word	0x43500000

0801d738 <__register_exitproc>:
 801d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d73c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801d7b4 <__register_exitproc+0x7c>
 801d740:	4606      	mov	r6, r0
 801d742:	f8da 0000 	ldr.w	r0, [sl]
 801d746:	4698      	mov	r8, r3
 801d748:	460f      	mov	r7, r1
 801d74a:	4691      	mov	r9, r2
 801d74c:	f7fe f956 	bl	801b9fc <__retarget_lock_acquire_recursive>
 801d750:	4b16      	ldr	r3, [pc, #88]	@ (801d7ac <__register_exitproc+0x74>)
 801d752:	681c      	ldr	r4, [r3, #0]
 801d754:	b90c      	cbnz	r4, 801d75a <__register_exitproc+0x22>
 801d756:	4c16      	ldr	r4, [pc, #88]	@ (801d7b0 <__register_exitproc+0x78>)
 801d758:	601c      	str	r4, [r3, #0]
 801d75a:	6865      	ldr	r5, [r4, #4]
 801d75c:	f8da 0000 	ldr.w	r0, [sl]
 801d760:	2d1f      	cmp	r5, #31
 801d762:	dd05      	ble.n	801d770 <__register_exitproc+0x38>
 801d764:	f7fe f94b 	bl	801b9fe <__retarget_lock_release_recursive>
 801d768:	f04f 30ff 	mov.w	r0, #4294967295
 801d76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d770:	b19e      	cbz	r6, 801d79a <__register_exitproc+0x62>
 801d772:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801d776:	2201      	movs	r2, #1
 801d778:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801d77c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801d780:	40aa      	lsls	r2, r5
 801d782:	4313      	orrs	r3, r2
 801d784:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 801d788:	2e02      	cmp	r6, #2
 801d78a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801d78e:	bf02      	ittt	eq
 801d790:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801d794:	4313      	orreq	r3, r2
 801d796:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801d79a:	1c6b      	adds	r3, r5, #1
 801d79c:	3502      	adds	r5, #2
 801d79e:	6063      	str	r3, [r4, #4]
 801d7a0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801d7a4:	f7fe f92b 	bl	801b9fe <__retarget_lock_release_recursive>
 801d7a8:	2000      	movs	r0, #0
 801d7aa:	e7df      	b.n	801d76c <__register_exitproc+0x34>
 801d7ac:	20011edc 	.word	0x20011edc
 801d7b0:	20011ee0 	.word	0x20011ee0
 801d7b4:	20003698 	.word	0x20003698

0801d7b8 <quorem>:
 801d7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7bc:	6903      	ldr	r3, [r0, #16]
 801d7be:	690c      	ldr	r4, [r1, #16]
 801d7c0:	42a3      	cmp	r3, r4
 801d7c2:	4607      	mov	r7, r0
 801d7c4:	db7e      	blt.n	801d8c4 <quorem+0x10c>
 801d7c6:	3c01      	subs	r4, #1
 801d7c8:	f101 0814 	add.w	r8, r1, #20
 801d7cc:	00a3      	lsls	r3, r4, #2
 801d7ce:	f100 0514 	add.w	r5, r0, #20
 801d7d2:	9300      	str	r3, [sp, #0]
 801d7d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d7d8:	9301      	str	r3, [sp, #4]
 801d7da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d7de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d7e2:	3301      	adds	r3, #1
 801d7e4:	429a      	cmp	r2, r3
 801d7e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d7ea:	fbb2 f6f3 	udiv	r6, r2, r3
 801d7ee:	d32e      	bcc.n	801d84e <quorem+0x96>
 801d7f0:	f04f 0a00 	mov.w	sl, #0
 801d7f4:	46c4      	mov	ip, r8
 801d7f6:	46ae      	mov	lr, r5
 801d7f8:	46d3      	mov	fp, sl
 801d7fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d7fe:	b298      	uxth	r0, r3
 801d800:	fb06 a000 	mla	r0, r6, r0, sl
 801d804:	0c02      	lsrs	r2, r0, #16
 801d806:	0c1b      	lsrs	r3, r3, #16
 801d808:	fb06 2303 	mla	r3, r6, r3, r2
 801d80c:	f8de 2000 	ldr.w	r2, [lr]
 801d810:	b280      	uxth	r0, r0
 801d812:	b292      	uxth	r2, r2
 801d814:	1a12      	subs	r2, r2, r0
 801d816:	445a      	add	r2, fp
 801d818:	f8de 0000 	ldr.w	r0, [lr]
 801d81c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d820:	b29b      	uxth	r3, r3
 801d822:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d826:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d82a:	b292      	uxth	r2, r2
 801d82c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d830:	45e1      	cmp	r9, ip
 801d832:	f84e 2b04 	str.w	r2, [lr], #4
 801d836:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d83a:	d2de      	bcs.n	801d7fa <quorem+0x42>
 801d83c:	9b00      	ldr	r3, [sp, #0]
 801d83e:	58eb      	ldr	r3, [r5, r3]
 801d840:	b92b      	cbnz	r3, 801d84e <quorem+0x96>
 801d842:	9b01      	ldr	r3, [sp, #4]
 801d844:	3b04      	subs	r3, #4
 801d846:	429d      	cmp	r5, r3
 801d848:	461a      	mov	r2, r3
 801d84a:	d32f      	bcc.n	801d8ac <quorem+0xf4>
 801d84c:	613c      	str	r4, [r7, #16]
 801d84e:	4638      	mov	r0, r7
 801d850:	f001 f814 	bl	801e87c <__mcmp>
 801d854:	2800      	cmp	r0, #0
 801d856:	db25      	blt.n	801d8a4 <quorem+0xec>
 801d858:	4629      	mov	r1, r5
 801d85a:	2000      	movs	r0, #0
 801d85c:	f858 2b04 	ldr.w	r2, [r8], #4
 801d860:	f8d1 c000 	ldr.w	ip, [r1]
 801d864:	fa1f fe82 	uxth.w	lr, r2
 801d868:	fa1f f38c 	uxth.w	r3, ip
 801d86c:	eba3 030e 	sub.w	r3, r3, lr
 801d870:	4403      	add	r3, r0
 801d872:	0c12      	lsrs	r2, r2, #16
 801d874:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d878:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d87c:	b29b      	uxth	r3, r3
 801d87e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d882:	45c1      	cmp	r9, r8
 801d884:	f841 3b04 	str.w	r3, [r1], #4
 801d888:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d88c:	d2e6      	bcs.n	801d85c <quorem+0xa4>
 801d88e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d896:	b922      	cbnz	r2, 801d8a2 <quorem+0xea>
 801d898:	3b04      	subs	r3, #4
 801d89a:	429d      	cmp	r5, r3
 801d89c:	461a      	mov	r2, r3
 801d89e:	d30b      	bcc.n	801d8b8 <quorem+0x100>
 801d8a0:	613c      	str	r4, [r7, #16]
 801d8a2:	3601      	adds	r6, #1
 801d8a4:	4630      	mov	r0, r6
 801d8a6:	b003      	add	sp, #12
 801d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8ac:	6812      	ldr	r2, [r2, #0]
 801d8ae:	3b04      	subs	r3, #4
 801d8b0:	2a00      	cmp	r2, #0
 801d8b2:	d1cb      	bne.n	801d84c <quorem+0x94>
 801d8b4:	3c01      	subs	r4, #1
 801d8b6:	e7c6      	b.n	801d846 <quorem+0x8e>
 801d8b8:	6812      	ldr	r2, [r2, #0]
 801d8ba:	3b04      	subs	r3, #4
 801d8bc:	2a00      	cmp	r2, #0
 801d8be:	d1ef      	bne.n	801d8a0 <quorem+0xe8>
 801d8c0:	3c01      	subs	r4, #1
 801d8c2:	e7ea      	b.n	801d89a <quorem+0xe2>
 801d8c4:	2000      	movs	r0, #0
 801d8c6:	e7ee      	b.n	801d8a6 <quorem+0xee>

0801d8c8 <_dtoa_r>:
 801d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8cc:	b097      	sub	sp, #92	@ 0x5c
 801d8ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d8d2:	9107      	str	r1, [sp, #28]
 801d8d4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801d8d6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d8d8:	920c      	str	r2, [sp, #48]	@ 0x30
 801d8da:	ec55 4b10 	vmov	r4, r5, d0
 801d8de:	4681      	mov	r9, r0
 801d8e0:	9311      	str	r3, [sp, #68]	@ 0x44
 801d8e2:	b149      	cbz	r1, 801d8f8 <_dtoa_r+0x30>
 801d8e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d8e6:	604a      	str	r2, [r1, #4]
 801d8e8:	2301      	movs	r3, #1
 801d8ea:	4093      	lsls	r3, r2
 801d8ec:	608b      	str	r3, [r1, #8]
 801d8ee:	f000 fdc6 	bl	801e47e <_Bfree>
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 801d8f8:	1e2b      	subs	r3, r5, #0
 801d8fa:	bfb9      	ittee	lt
 801d8fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d900:	9305      	strlt	r3, [sp, #20]
 801d902:	2300      	movge	r3, #0
 801d904:	6033      	strge	r3, [r6, #0]
 801d906:	9f05      	ldr	r7, [sp, #20]
 801d908:	4b99      	ldr	r3, [pc, #612]	@ (801db70 <_dtoa_r+0x2a8>)
 801d90a:	bfbc      	itt	lt
 801d90c:	2201      	movlt	r2, #1
 801d90e:	6032      	strlt	r2, [r6, #0]
 801d910:	43bb      	bics	r3, r7
 801d912:	d114      	bne.n	801d93e <_dtoa_r+0x76>
 801d914:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d916:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d91a:	6013      	str	r3, [r2, #0]
 801d91c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d920:	4323      	orrs	r3, r4
 801d922:	f000 8557 	beq.w	801e3d4 <_dtoa_r+0xb0c>
 801d926:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d928:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801db88 <_dtoa_r+0x2c0>
 801d92c:	b11b      	cbz	r3, 801d936 <_dtoa_r+0x6e>
 801d92e:	f10a 0303 	add.w	r3, sl, #3
 801d932:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d934:	6013      	str	r3, [r2, #0]
 801d936:	4650      	mov	r0, sl
 801d938:	b017      	add	sp, #92	@ 0x5c
 801d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d93e:	ed9d 7b04 	vldr	d7, [sp, #16]
 801d942:	2200      	movs	r2, #0
 801d944:	ec51 0b17 	vmov	r0, r1, d7
 801d948:	2300      	movs	r3, #0
 801d94a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801d94e:	f7e3 f8eb 	bl	8000b28 <__aeabi_dcmpeq>
 801d952:	4680      	mov	r8, r0
 801d954:	b150      	cbz	r0, 801d96c <_dtoa_r+0xa4>
 801d956:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d958:	2301      	movs	r3, #1
 801d95a:	6013      	str	r3, [r2, #0]
 801d95c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d95e:	b113      	cbz	r3, 801d966 <_dtoa_r+0x9e>
 801d960:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d962:	4b84      	ldr	r3, [pc, #528]	@ (801db74 <_dtoa_r+0x2ac>)
 801d964:	6013      	str	r3, [r2, #0]
 801d966:	f8df a224 	ldr.w	sl, [pc, #548]	@ 801db8c <_dtoa_r+0x2c4>
 801d96a:	e7e4      	b.n	801d936 <_dtoa_r+0x6e>
 801d96c:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801d970:	aa14      	add	r2, sp, #80	@ 0x50
 801d972:	a915      	add	r1, sp, #84	@ 0x54
 801d974:	4648      	mov	r0, r9
 801d976:	f001 f831 	bl	801e9dc <__d2b>
 801d97a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d97e:	9002      	str	r0, [sp, #8]
 801d980:	2e00      	cmp	r6, #0
 801d982:	d078      	beq.n	801da76 <_dtoa_r+0x1ae>
 801d984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d986:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801d98a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d98e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d992:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d996:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d99a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d99e:	4619      	mov	r1, r3
 801d9a0:	2200      	movs	r2, #0
 801d9a2:	4b75      	ldr	r3, [pc, #468]	@ (801db78 <_dtoa_r+0x2b0>)
 801d9a4:	f7e2 fca0 	bl	80002e8 <__aeabi_dsub>
 801d9a8:	a36b      	add	r3, pc, #428	@ (adr r3, 801db58 <_dtoa_r+0x290>)
 801d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ae:	f7e2 fe53 	bl	8000658 <__aeabi_dmul>
 801d9b2:	a36b      	add	r3, pc, #428	@ (adr r3, 801db60 <_dtoa_r+0x298>)
 801d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9b8:	f7e2 fc98 	bl	80002ec <__adddf3>
 801d9bc:	4604      	mov	r4, r0
 801d9be:	4630      	mov	r0, r6
 801d9c0:	460d      	mov	r5, r1
 801d9c2:	f7e2 fddf 	bl	8000584 <__aeabi_i2d>
 801d9c6:	a368      	add	r3, pc, #416	@ (adr r3, 801db68 <_dtoa_r+0x2a0>)
 801d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9cc:	f7e2 fe44 	bl	8000658 <__aeabi_dmul>
 801d9d0:	4602      	mov	r2, r0
 801d9d2:	460b      	mov	r3, r1
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	4629      	mov	r1, r5
 801d9d8:	f7e2 fc88 	bl	80002ec <__adddf3>
 801d9dc:	4604      	mov	r4, r0
 801d9de:	460d      	mov	r5, r1
 801d9e0:	f7e3 f8ea 	bl	8000bb8 <__aeabi_d2iz>
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	4607      	mov	r7, r0
 801d9e8:	2300      	movs	r3, #0
 801d9ea:	4620      	mov	r0, r4
 801d9ec:	4629      	mov	r1, r5
 801d9ee:	f7e3 f8a5 	bl	8000b3c <__aeabi_dcmplt>
 801d9f2:	b140      	cbz	r0, 801da06 <_dtoa_r+0x13e>
 801d9f4:	4638      	mov	r0, r7
 801d9f6:	f7e2 fdc5 	bl	8000584 <__aeabi_i2d>
 801d9fa:	4622      	mov	r2, r4
 801d9fc:	462b      	mov	r3, r5
 801d9fe:	f7e3 f893 	bl	8000b28 <__aeabi_dcmpeq>
 801da02:	b900      	cbnz	r0, 801da06 <_dtoa_r+0x13e>
 801da04:	3f01      	subs	r7, #1
 801da06:	2f16      	cmp	r7, #22
 801da08:	d852      	bhi.n	801dab0 <_dtoa_r+0x1e8>
 801da0a:	4b5c      	ldr	r3, [pc, #368]	@ (801db7c <_dtoa_r+0x2b4>)
 801da0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801da18:	f7e3 f890 	bl	8000b3c <__aeabi_dcmplt>
 801da1c:	2800      	cmp	r0, #0
 801da1e:	d049      	beq.n	801dab4 <_dtoa_r+0x1ec>
 801da20:	3f01      	subs	r7, #1
 801da22:	2300      	movs	r3, #0
 801da24:	9310      	str	r3, [sp, #64]	@ 0x40
 801da26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801da28:	1b9b      	subs	r3, r3, r6
 801da2a:	1e5a      	subs	r2, r3, #1
 801da2c:	bf45      	ittet	mi
 801da2e:	f1c3 0301 	rsbmi	r3, r3, #1
 801da32:	9300      	strmi	r3, [sp, #0]
 801da34:	2300      	movpl	r3, #0
 801da36:	2300      	movmi	r3, #0
 801da38:	9206      	str	r2, [sp, #24]
 801da3a:	bf54      	ite	pl
 801da3c:	9300      	strpl	r3, [sp, #0]
 801da3e:	9306      	strmi	r3, [sp, #24]
 801da40:	2f00      	cmp	r7, #0
 801da42:	db39      	blt.n	801dab8 <_dtoa_r+0x1f0>
 801da44:	9b06      	ldr	r3, [sp, #24]
 801da46:	970d      	str	r7, [sp, #52]	@ 0x34
 801da48:	443b      	add	r3, r7
 801da4a:	9306      	str	r3, [sp, #24]
 801da4c:	2300      	movs	r3, #0
 801da4e:	9308      	str	r3, [sp, #32]
 801da50:	9b07      	ldr	r3, [sp, #28]
 801da52:	2b09      	cmp	r3, #9
 801da54:	d864      	bhi.n	801db20 <_dtoa_r+0x258>
 801da56:	2b05      	cmp	r3, #5
 801da58:	bfc4      	itt	gt
 801da5a:	3b04      	subgt	r3, #4
 801da5c:	9307      	strgt	r3, [sp, #28]
 801da5e:	9b07      	ldr	r3, [sp, #28]
 801da60:	f1a3 0302 	sub.w	r3, r3, #2
 801da64:	bfcc      	ite	gt
 801da66:	2400      	movgt	r4, #0
 801da68:	2401      	movle	r4, #1
 801da6a:	2b03      	cmp	r3, #3
 801da6c:	d864      	bhi.n	801db38 <_dtoa_r+0x270>
 801da6e:	e8df f003 	tbb	[pc, r3]
 801da72:	5553      	.short	0x5553
 801da74:	2b37      	.short	0x2b37
 801da76:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801da7a:	441e      	add	r6, r3
 801da7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801da80:	2b20      	cmp	r3, #32
 801da82:	bfc1      	itttt	gt
 801da84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801da88:	409f      	lslgt	r7, r3
 801da8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801da8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801da92:	bfd6      	itet	le
 801da94:	f1c3 0320 	rsble	r3, r3, #32
 801da98:	ea47 0003 	orrgt.w	r0, r7, r3
 801da9c:	fa04 f003 	lslle.w	r0, r4, r3
 801daa0:	f7e2 fd60 	bl	8000564 <__aeabi_ui2d>
 801daa4:	2201      	movs	r2, #1
 801daa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801daaa:	3e01      	subs	r6, #1
 801daac:	9212      	str	r2, [sp, #72]	@ 0x48
 801daae:	e776      	b.n	801d99e <_dtoa_r+0xd6>
 801dab0:	2301      	movs	r3, #1
 801dab2:	e7b7      	b.n	801da24 <_dtoa_r+0x15c>
 801dab4:	9010      	str	r0, [sp, #64]	@ 0x40
 801dab6:	e7b6      	b.n	801da26 <_dtoa_r+0x15e>
 801dab8:	9b00      	ldr	r3, [sp, #0]
 801daba:	1bdb      	subs	r3, r3, r7
 801dabc:	9300      	str	r3, [sp, #0]
 801dabe:	427b      	negs	r3, r7
 801dac0:	9308      	str	r3, [sp, #32]
 801dac2:	2300      	movs	r3, #0
 801dac4:	930d      	str	r3, [sp, #52]	@ 0x34
 801dac6:	e7c3      	b.n	801da50 <_dtoa_r+0x188>
 801dac8:	2301      	movs	r3, #1
 801daca:	9309      	str	r3, [sp, #36]	@ 0x24
 801dacc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dace:	eb07 0b03 	add.w	fp, r7, r3
 801dad2:	f10b 0301 	add.w	r3, fp, #1
 801dad6:	2b01      	cmp	r3, #1
 801dad8:	9303      	str	r3, [sp, #12]
 801dada:	bfb8      	it	lt
 801dadc:	2301      	movlt	r3, #1
 801dade:	e006      	b.n	801daee <_dtoa_r+0x226>
 801dae0:	2301      	movs	r3, #1
 801dae2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	dd29      	ble.n	801db3e <_dtoa_r+0x276>
 801daea:	469b      	mov	fp, r3
 801daec:	9303      	str	r3, [sp, #12]
 801daee:	2100      	movs	r1, #0
 801daf0:	2204      	movs	r2, #4
 801daf2:	f102 0014 	add.w	r0, r2, #20
 801daf6:	4298      	cmp	r0, r3
 801daf8:	d929      	bls.n	801db4e <_dtoa_r+0x286>
 801dafa:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 801dafe:	4648      	mov	r0, r9
 801db00:	f000 fc98 	bl	801e434 <_Balloc>
 801db04:	4682      	mov	sl, r0
 801db06:	2800      	cmp	r0, #0
 801db08:	d142      	bne.n	801db90 <_dtoa_r+0x2c8>
 801db0a:	4b1d      	ldr	r3, [pc, #116]	@ (801db80 <_dtoa_r+0x2b8>)
 801db0c:	4602      	mov	r2, r0
 801db0e:	f240 11af 	movw	r1, #431	@ 0x1af
 801db12:	481c      	ldr	r0, [pc, #112]	@ (801db84 <_dtoa_r+0x2bc>)
 801db14:	f001 f89c 	bl	801ec50 <__assert_func>
 801db18:	2300      	movs	r3, #0
 801db1a:	e7e2      	b.n	801dae2 <_dtoa_r+0x21a>
 801db1c:	2300      	movs	r3, #0
 801db1e:	e7d4      	b.n	801daca <_dtoa_r+0x202>
 801db20:	2401      	movs	r4, #1
 801db22:	2300      	movs	r3, #0
 801db24:	9307      	str	r3, [sp, #28]
 801db26:	9409      	str	r4, [sp, #36]	@ 0x24
 801db28:	f04f 3bff 	mov.w	fp, #4294967295
 801db2c:	2200      	movs	r2, #0
 801db2e:	f8cd b00c 	str.w	fp, [sp, #12]
 801db32:	2312      	movs	r3, #18
 801db34:	920c      	str	r2, [sp, #48]	@ 0x30
 801db36:	e7da      	b.n	801daee <_dtoa_r+0x226>
 801db38:	2301      	movs	r3, #1
 801db3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801db3c:	e7f4      	b.n	801db28 <_dtoa_r+0x260>
 801db3e:	f04f 0b01 	mov.w	fp, #1
 801db42:	f8cd b00c 	str.w	fp, [sp, #12]
 801db46:	465b      	mov	r3, fp
 801db48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801db4c:	e7cf      	b.n	801daee <_dtoa_r+0x226>
 801db4e:	3101      	adds	r1, #1
 801db50:	0052      	lsls	r2, r2, #1
 801db52:	e7ce      	b.n	801daf2 <_dtoa_r+0x22a>
 801db54:	f3af 8000 	nop.w
 801db58:	636f4361 	.word	0x636f4361
 801db5c:	3fd287a7 	.word	0x3fd287a7
 801db60:	8b60c8b3 	.word	0x8b60c8b3
 801db64:	3fc68a28 	.word	0x3fc68a28
 801db68:	509f79fb 	.word	0x509f79fb
 801db6c:	3fd34413 	.word	0x3fd34413
 801db70:	7ff00000 	.word	0x7ff00000
 801db74:	0802227c 	.word	0x0802227c
 801db78:	3ff80000 	.word	0x3ff80000
 801db7c:	080223e8 	.word	0x080223e8
 801db80:	0802228a 	.word	0x0802228a
 801db84:	0802229b 	.word	0x0802229b
 801db88:	08022286 	.word	0x08022286
 801db8c:	0802227b 	.word	0x0802227b
 801db90:	9b03      	ldr	r3, [sp, #12]
 801db92:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 801db96:	2b0e      	cmp	r3, #14
 801db98:	f200 80a1 	bhi.w	801dcde <_dtoa_r+0x416>
 801db9c:	2c00      	cmp	r4, #0
 801db9e:	f000 809e 	beq.w	801dcde <_dtoa_r+0x416>
 801dba2:	2f00      	cmp	r7, #0
 801dba4:	dd33      	ble.n	801dc0e <_dtoa_r+0x346>
 801dba6:	4b9c      	ldr	r3, [pc, #624]	@ (801de18 <_dtoa_r+0x550>)
 801dba8:	f007 020f 	and.w	r2, r7, #15
 801dbac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dbb0:	ed93 7b00 	vldr	d7, [r3]
 801dbb4:	05f8      	lsls	r0, r7, #23
 801dbb6:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801dbba:	ea4f 1427 	mov.w	r4, r7, asr #4
 801dbbe:	d516      	bpl.n	801dbee <_dtoa_r+0x326>
 801dbc0:	4b96      	ldr	r3, [pc, #600]	@ (801de1c <_dtoa_r+0x554>)
 801dbc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801dbc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dbca:	f7e2 fe6f 	bl	80008ac <__aeabi_ddiv>
 801dbce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dbd2:	f004 040f 	and.w	r4, r4, #15
 801dbd6:	2603      	movs	r6, #3
 801dbd8:	4d90      	ldr	r5, [pc, #576]	@ (801de1c <_dtoa_r+0x554>)
 801dbda:	b954      	cbnz	r4, 801dbf2 <_dtoa_r+0x32a>
 801dbdc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801dbe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dbe4:	f7e2 fe62 	bl	80008ac <__aeabi_ddiv>
 801dbe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dbec:	e028      	b.n	801dc40 <_dtoa_r+0x378>
 801dbee:	2602      	movs	r6, #2
 801dbf0:	e7f2      	b.n	801dbd8 <_dtoa_r+0x310>
 801dbf2:	07e1      	lsls	r1, r4, #31
 801dbf4:	d508      	bpl.n	801dc08 <_dtoa_r+0x340>
 801dbf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801dbfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dbfe:	f7e2 fd2b 	bl	8000658 <__aeabi_dmul>
 801dc02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801dc06:	3601      	adds	r6, #1
 801dc08:	1064      	asrs	r4, r4, #1
 801dc0a:	3508      	adds	r5, #8
 801dc0c:	e7e5      	b.n	801dbda <_dtoa_r+0x312>
 801dc0e:	f000 80af 	beq.w	801dd70 <_dtoa_r+0x4a8>
 801dc12:	427c      	negs	r4, r7
 801dc14:	4b80      	ldr	r3, [pc, #512]	@ (801de18 <_dtoa_r+0x550>)
 801dc16:	4d81      	ldr	r5, [pc, #516]	@ (801de1c <_dtoa_r+0x554>)
 801dc18:	f004 020f 	and.w	r2, r4, #15
 801dc1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801dc28:	f7e2 fd16 	bl	8000658 <__aeabi_dmul>
 801dc2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dc30:	1124      	asrs	r4, r4, #4
 801dc32:	2300      	movs	r3, #0
 801dc34:	2602      	movs	r6, #2
 801dc36:	2c00      	cmp	r4, #0
 801dc38:	f040 808f 	bne.w	801dd5a <_dtoa_r+0x492>
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d1d3      	bne.n	801dbe8 <_dtoa_r+0x320>
 801dc40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	f000 8094 	beq.w	801dd74 <_dtoa_r+0x4ac>
 801dc4c:	4b74      	ldr	r3, [pc, #464]	@ (801de20 <_dtoa_r+0x558>)
 801dc4e:	2200      	movs	r2, #0
 801dc50:	4620      	mov	r0, r4
 801dc52:	4629      	mov	r1, r5
 801dc54:	f7e2 ff72 	bl	8000b3c <__aeabi_dcmplt>
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	f000 808b 	beq.w	801dd74 <_dtoa_r+0x4ac>
 801dc5e:	9b03      	ldr	r3, [sp, #12]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	f000 8087 	beq.w	801dd74 <_dtoa_r+0x4ac>
 801dc66:	f1bb 0f00 	cmp.w	fp, #0
 801dc6a:	dd34      	ble.n	801dcd6 <_dtoa_r+0x40e>
 801dc6c:	4620      	mov	r0, r4
 801dc6e:	4b6d      	ldr	r3, [pc, #436]	@ (801de24 <_dtoa_r+0x55c>)
 801dc70:	2200      	movs	r2, #0
 801dc72:	4629      	mov	r1, r5
 801dc74:	f7e2 fcf0 	bl	8000658 <__aeabi_dmul>
 801dc78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dc7c:	f107 38ff 	add.w	r8, r7, #4294967295
 801dc80:	3601      	adds	r6, #1
 801dc82:	465c      	mov	r4, fp
 801dc84:	4630      	mov	r0, r6
 801dc86:	f7e2 fc7d 	bl	8000584 <__aeabi_i2d>
 801dc8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dc8e:	f7e2 fce3 	bl	8000658 <__aeabi_dmul>
 801dc92:	4b65      	ldr	r3, [pc, #404]	@ (801de28 <_dtoa_r+0x560>)
 801dc94:	2200      	movs	r2, #0
 801dc96:	f7e2 fb29 	bl	80002ec <__adddf3>
 801dc9a:	4605      	mov	r5, r0
 801dc9c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dca0:	2c00      	cmp	r4, #0
 801dca2:	d16a      	bne.n	801dd7a <_dtoa_r+0x4b2>
 801dca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dca8:	4b60      	ldr	r3, [pc, #384]	@ (801de2c <_dtoa_r+0x564>)
 801dcaa:	2200      	movs	r2, #0
 801dcac:	f7e2 fb1c 	bl	80002e8 <__aeabi_dsub>
 801dcb0:	4602      	mov	r2, r0
 801dcb2:	460b      	mov	r3, r1
 801dcb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801dcb8:	462a      	mov	r2, r5
 801dcba:	4633      	mov	r3, r6
 801dcbc:	f7e2 ff5c 	bl	8000b78 <__aeabi_dcmpgt>
 801dcc0:	2800      	cmp	r0, #0
 801dcc2:	f040 8297 	bne.w	801e1f4 <_dtoa_r+0x92c>
 801dcc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dcca:	462a      	mov	r2, r5
 801dccc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dcd0:	f7e2 ff34 	bl	8000b3c <__aeabi_dcmplt>
 801dcd4:	bb38      	cbnz	r0, 801dd26 <_dtoa_r+0x45e>
 801dcd6:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801dcda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801dcde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	f2c0 8156 	blt.w	801df92 <_dtoa_r+0x6ca>
 801dce6:	2f0e      	cmp	r7, #14
 801dce8:	f300 8153 	bgt.w	801df92 <_dtoa_r+0x6ca>
 801dcec:	4b4a      	ldr	r3, [pc, #296]	@ (801de18 <_dtoa_r+0x550>)
 801dcee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dcf2:	ed93 7b00 	vldr	d7, [r3]
 801dcf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	ed8d 7b00 	vstr	d7, [sp]
 801dcfe:	f280 80e4 	bge.w	801deca <_dtoa_r+0x602>
 801dd02:	9b03      	ldr	r3, [sp, #12]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	f300 80e0 	bgt.w	801deca <_dtoa_r+0x602>
 801dd0a:	d10c      	bne.n	801dd26 <_dtoa_r+0x45e>
 801dd0c:	4b47      	ldr	r3, [pc, #284]	@ (801de2c <_dtoa_r+0x564>)
 801dd0e:	2200      	movs	r2, #0
 801dd10:	ec51 0b17 	vmov	r0, r1, d7
 801dd14:	f7e2 fca0 	bl	8000658 <__aeabi_dmul>
 801dd18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd1c:	f7e2 ff22 	bl	8000b64 <__aeabi_dcmpge>
 801dd20:	2800      	cmp	r0, #0
 801dd22:	f000 8265 	beq.w	801e1f0 <_dtoa_r+0x928>
 801dd26:	2400      	movs	r4, #0
 801dd28:	4625      	mov	r5, r4
 801dd2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd2c:	4656      	mov	r6, sl
 801dd2e:	ea6f 0803 	mvn.w	r8, r3
 801dd32:	2700      	movs	r7, #0
 801dd34:	4621      	mov	r1, r4
 801dd36:	4648      	mov	r0, r9
 801dd38:	f000 fba1 	bl	801e47e <_Bfree>
 801dd3c:	2d00      	cmp	r5, #0
 801dd3e:	f000 80bc 	beq.w	801deba <_dtoa_r+0x5f2>
 801dd42:	b12f      	cbz	r7, 801dd50 <_dtoa_r+0x488>
 801dd44:	42af      	cmp	r7, r5
 801dd46:	d003      	beq.n	801dd50 <_dtoa_r+0x488>
 801dd48:	4639      	mov	r1, r7
 801dd4a:	4648      	mov	r0, r9
 801dd4c:	f000 fb97 	bl	801e47e <_Bfree>
 801dd50:	4629      	mov	r1, r5
 801dd52:	4648      	mov	r0, r9
 801dd54:	f000 fb93 	bl	801e47e <_Bfree>
 801dd58:	e0af      	b.n	801deba <_dtoa_r+0x5f2>
 801dd5a:	07e2      	lsls	r2, r4, #31
 801dd5c:	d505      	bpl.n	801dd6a <_dtoa_r+0x4a2>
 801dd5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dd62:	f7e2 fc79 	bl	8000658 <__aeabi_dmul>
 801dd66:	3601      	adds	r6, #1
 801dd68:	2301      	movs	r3, #1
 801dd6a:	1064      	asrs	r4, r4, #1
 801dd6c:	3508      	adds	r5, #8
 801dd6e:	e762      	b.n	801dc36 <_dtoa_r+0x36e>
 801dd70:	2602      	movs	r6, #2
 801dd72:	e765      	b.n	801dc40 <_dtoa_r+0x378>
 801dd74:	9c03      	ldr	r4, [sp, #12]
 801dd76:	46b8      	mov	r8, r7
 801dd78:	e784      	b.n	801dc84 <_dtoa_r+0x3bc>
 801dd7a:	4b27      	ldr	r3, [pc, #156]	@ (801de18 <_dtoa_r+0x550>)
 801dd7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dd7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dd82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dd86:	4454      	add	r4, sl
 801dd88:	2900      	cmp	r1, #0
 801dd8a:	d053      	beq.n	801de34 <_dtoa_r+0x56c>
 801dd8c:	4928      	ldr	r1, [pc, #160]	@ (801de30 <_dtoa_r+0x568>)
 801dd8e:	2000      	movs	r0, #0
 801dd90:	f7e2 fd8c 	bl	80008ac <__aeabi_ddiv>
 801dd94:	4633      	mov	r3, r6
 801dd96:	462a      	mov	r2, r5
 801dd98:	f7e2 faa6 	bl	80002e8 <__aeabi_dsub>
 801dd9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801dda0:	4656      	mov	r6, sl
 801dda2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dda6:	f7e2 ff07 	bl	8000bb8 <__aeabi_d2iz>
 801ddaa:	4605      	mov	r5, r0
 801ddac:	f7e2 fbea 	bl	8000584 <__aeabi_i2d>
 801ddb0:	4602      	mov	r2, r0
 801ddb2:	460b      	mov	r3, r1
 801ddb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ddb8:	f7e2 fa96 	bl	80002e8 <__aeabi_dsub>
 801ddbc:	3530      	adds	r5, #48	@ 0x30
 801ddbe:	4602      	mov	r2, r0
 801ddc0:	460b      	mov	r3, r1
 801ddc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ddc6:	f806 5b01 	strb.w	r5, [r6], #1
 801ddca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ddce:	f7e2 feb5 	bl	8000b3c <__aeabi_dcmplt>
 801ddd2:	2800      	cmp	r0, #0
 801ddd4:	d171      	bne.n	801deba <_dtoa_r+0x5f2>
 801ddd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ddda:	4911      	ldr	r1, [pc, #68]	@ (801de20 <_dtoa_r+0x558>)
 801dddc:	2000      	movs	r0, #0
 801ddde:	f7e2 fa83 	bl	80002e8 <__aeabi_dsub>
 801dde2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801dde6:	f7e2 fea9 	bl	8000b3c <__aeabi_dcmplt>
 801ddea:	2800      	cmp	r0, #0
 801ddec:	f040 80b3 	bne.w	801df56 <_dtoa_r+0x68e>
 801ddf0:	42a6      	cmp	r6, r4
 801ddf2:	f43f af70 	beq.w	801dcd6 <_dtoa_r+0x40e>
 801ddf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ddfa:	4b0a      	ldr	r3, [pc, #40]	@ (801de24 <_dtoa_r+0x55c>)
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	f7e2 fc2b 	bl	8000658 <__aeabi_dmul>
 801de02:	4b08      	ldr	r3, [pc, #32]	@ (801de24 <_dtoa_r+0x55c>)
 801de04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801de08:	2200      	movs	r2, #0
 801de0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801de0e:	f7e2 fc23 	bl	8000658 <__aeabi_dmul>
 801de12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801de16:	e7c4      	b.n	801dda2 <_dtoa_r+0x4da>
 801de18:	080223e8 	.word	0x080223e8
 801de1c:	080223c0 	.word	0x080223c0
 801de20:	3ff00000 	.word	0x3ff00000
 801de24:	40240000 	.word	0x40240000
 801de28:	401c0000 	.word	0x401c0000
 801de2c:	40140000 	.word	0x40140000
 801de30:	3fe00000 	.word	0x3fe00000
 801de34:	4631      	mov	r1, r6
 801de36:	4628      	mov	r0, r5
 801de38:	f7e2 fc0e 	bl	8000658 <__aeabi_dmul>
 801de3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801de40:	9413      	str	r4, [sp, #76]	@ 0x4c
 801de42:	4656      	mov	r6, sl
 801de44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801de48:	f7e2 feb6 	bl	8000bb8 <__aeabi_d2iz>
 801de4c:	4605      	mov	r5, r0
 801de4e:	f7e2 fb99 	bl	8000584 <__aeabi_i2d>
 801de52:	4602      	mov	r2, r0
 801de54:	460b      	mov	r3, r1
 801de56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801de5a:	f7e2 fa45 	bl	80002e8 <__aeabi_dsub>
 801de5e:	3530      	adds	r5, #48	@ 0x30
 801de60:	f806 5b01 	strb.w	r5, [r6], #1
 801de64:	4602      	mov	r2, r0
 801de66:	460b      	mov	r3, r1
 801de68:	42a6      	cmp	r6, r4
 801de6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801de6e:	f04f 0200 	mov.w	r2, #0
 801de72:	d124      	bne.n	801debe <_dtoa_r+0x5f6>
 801de74:	4baf      	ldr	r3, [pc, #700]	@ (801e134 <_dtoa_r+0x86c>)
 801de76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801de7a:	f7e2 fa37 	bl	80002ec <__adddf3>
 801de7e:	4602      	mov	r2, r0
 801de80:	460b      	mov	r3, r1
 801de82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801de86:	f7e2 fe77 	bl	8000b78 <__aeabi_dcmpgt>
 801de8a:	2800      	cmp	r0, #0
 801de8c:	d163      	bne.n	801df56 <_dtoa_r+0x68e>
 801de8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801de92:	49a8      	ldr	r1, [pc, #672]	@ (801e134 <_dtoa_r+0x86c>)
 801de94:	2000      	movs	r0, #0
 801de96:	f7e2 fa27 	bl	80002e8 <__aeabi_dsub>
 801de9a:	4602      	mov	r2, r0
 801de9c:	460b      	mov	r3, r1
 801de9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dea2:	f7e2 fe4b 	bl	8000b3c <__aeabi_dcmplt>
 801dea6:	2800      	cmp	r0, #0
 801dea8:	f43f af15 	beq.w	801dcd6 <_dtoa_r+0x40e>
 801deac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801deae:	1e73      	subs	r3, r6, #1
 801deb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801deb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801deb6:	2b30      	cmp	r3, #48	@ 0x30
 801deb8:	d0f8      	beq.n	801deac <_dtoa_r+0x5e4>
 801deba:	4647      	mov	r7, r8
 801debc:	e03b      	b.n	801df36 <_dtoa_r+0x66e>
 801debe:	4b9e      	ldr	r3, [pc, #632]	@ (801e138 <_dtoa_r+0x870>)
 801dec0:	f7e2 fbca 	bl	8000658 <__aeabi_dmul>
 801dec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dec8:	e7bc      	b.n	801de44 <_dtoa_r+0x57c>
 801deca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801dece:	4656      	mov	r6, sl
 801ded0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ded4:	4620      	mov	r0, r4
 801ded6:	4629      	mov	r1, r5
 801ded8:	f7e2 fce8 	bl	80008ac <__aeabi_ddiv>
 801dedc:	f7e2 fe6c 	bl	8000bb8 <__aeabi_d2iz>
 801dee0:	4680      	mov	r8, r0
 801dee2:	f7e2 fb4f 	bl	8000584 <__aeabi_i2d>
 801dee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801deea:	f7e2 fbb5 	bl	8000658 <__aeabi_dmul>
 801deee:	4602      	mov	r2, r0
 801def0:	460b      	mov	r3, r1
 801def2:	4620      	mov	r0, r4
 801def4:	4629      	mov	r1, r5
 801def6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801defa:	f7e2 f9f5 	bl	80002e8 <__aeabi_dsub>
 801defe:	f806 4b01 	strb.w	r4, [r6], #1
 801df02:	9d03      	ldr	r5, [sp, #12]
 801df04:	eba6 040a 	sub.w	r4, r6, sl
 801df08:	42a5      	cmp	r5, r4
 801df0a:	4602      	mov	r2, r0
 801df0c:	460b      	mov	r3, r1
 801df0e:	d133      	bne.n	801df78 <_dtoa_r+0x6b0>
 801df10:	f7e2 f9ec 	bl	80002ec <__adddf3>
 801df14:	e9dd 2300 	ldrd	r2, r3, [sp]
 801df18:	4604      	mov	r4, r0
 801df1a:	460d      	mov	r5, r1
 801df1c:	f7e2 fe2c 	bl	8000b78 <__aeabi_dcmpgt>
 801df20:	b9c0      	cbnz	r0, 801df54 <_dtoa_r+0x68c>
 801df22:	e9dd 2300 	ldrd	r2, r3, [sp]
 801df26:	4620      	mov	r0, r4
 801df28:	4629      	mov	r1, r5
 801df2a:	f7e2 fdfd 	bl	8000b28 <__aeabi_dcmpeq>
 801df2e:	b110      	cbz	r0, 801df36 <_dtoa_r+0x66e>
 801df30:	f018 0f01 	tst.w	r8, #1
 801df34:	d10e      	bne.n	801df54 <_dtoa_r+0x68c>
 801df36:	9902      	ldr	r1, [sp, #8]
 801df38:	4648      	mov	r0, r9
 801df3a:	f000 faa0 	bl	801e47e <_Bfree>
 801df3e:	2300      	movs	r3, #0
 801df40:	7033      	strb	r3, [r6, #0]
 801df42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df44:	3701      	adds	r7, #1
 801df46:	601f      	str	r7, [r3, #0]
 801df48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	f43f acf3 	beq.w	801d936 <_dtoa_r+0x6e>
 801df50:	601e      	str	r6, [r3, #0]
 801df52:	e4f0      	b.n	801d936 <_dtoa_r+0x6e>
 801df54:	46b8      	mov	r8, r7
 801df56:	4633      	mov	r3, r6
 801df58:	461e      	mov	r6, r3
 801df5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801df5e:	2a39      	cmp	r2, #57	@ 0x39
 801df60:	d106      	bne.n	801df70 <_dtoa_r+0x6a8>
 801df62:	459a      	cmp	sl, r3
 801df64:	d1f8      	bne.n	801df58 <_dtoa_r+0x690>
 801df66:	2230      	movs	r2, #48	@ 0x30
 801df68:	f108 0801 	add.w	r8, r8, #1
 801df6c:	f88a 2000 	strb.w	r2, [sl]
 801df70:	781a      	ldrb	r2, [r3, #0]
 801df72:	3201      	adds	r2, #1
 801df74:	701a      	strb	r2, [r3, #0]
 801df76:	e7a0      	b.n	801deba <_dtoa_r+0x5f2>
 801df78:	4b6f      	ldr	r3, [pc, #444]	@ (801e138 <_dtoa_r+0x870>)
 801df7a:	2200      	movs	r2, #0
 801df7c:	f7e2 fb6c 	bl	8000658 <__aeabi_dmul>
 801df80:	2200      	movs	r2, #0
 801df82:	2300      	movs	r3, #0
 801df84:	4604      	mov	r4, r0
 801df86:	460d      	mov	r5, r1
 801df88:	f7e2 fdce 	bl	8000b28 <__aeabi_dcmpeq>
 801df8c:	2800      	cmp	r0, #0
 801df8e:	d09f      	beq.n	801ded0 <_dtoa_r+0x608>
 801df90:	e7d1      	b.n	801df36 <_dtoa_r+0x66e>
 801df92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df94:	2a00      	cmp	r2, #0
 801df96:	f000 80ea 	beq.w	801e16e <_dtoa_r+0x8a6>
 801df9a:	9a07      	ldr	r2, [sp, #28]
 801df9c:	2a01      	cmp	r2, #1
 801df9e:	f300 80cd 	bgt.w	801e13c <_dtoa_r+0x874>
 801dfa2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dfa4:	2a00      	cmp	r2, #0
 801dfa6:	f000 80c1 	beq.w	801e12c <_dtoa_r+0x864>
 801dfaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801dfae:	9c08      	ldr	r4, [sp, #32]
 801dfb0:	9e00      	ldr	r6, [sp, #0]
 801dfb2:	9a00      	ldr	r2, [sp, #0]
 801dfb4:	441a      	add	r2, r3
 801dfb6:	9200      	str	r2, [sp, #0]
 801dfb8:	9a06      	ldr	r2, [sp, #24]
 801dfba:	2101      	movs	r1, #1
 801dfbc:	441a      	add	r2, r3
 801dfbe:	4648      	mov	r0, r9
 801dfc0:	9206      	str	r2, [sp, #24]
 801dfc2:	f000 faf7 	bl	801e5b4 <__i2b>
 801dfc6:	4605      	mov	r5, r0
 801dfc8:	b166      	cbz	r6, 801dfe4 <_dtoa_r+0x71c>
 801dfca:	9b06      	ldr	r3, [sp, #24]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	dd09      	ble.n	801dfe4 <_dtoa_r+0x71c>
 801dfd0:	42b3      	cmp	r3, r6
 801dfd2:	9a00      	ldr	r2, [sp, #0]
 801dfd4:	bfa8      	it	ge
 801dfd6:	4633      	movge	r3, r6
 801dfd8:	1ad2      	subs	r2, r2, r3
 801dfda:	9200      	str	r2, [sp, #0]
 801dfdc:	9a06      	ldr	r2, [sp, #24]
 801dfde:	1af6      	subs	r6, r6, r3
 801dfe0:	1ad3      	subs	r3, r2, r3
 801dfe2:	9306      	str	r3, [sp, #24]
 801dfe4:	9b08      	ldr	r3, [sp, #32]
 801dfe6:	b30b      	cbz	r3, 801e02c <_dtoa_r+0x764>
 801dfe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	f000 80c6 	beq.w	801e17c <_dtoa_r+0x8b4>
 801dff0:	2c00      	cmp	r4, #0
 801dff2:	f000 80c0 	beq.w	801e176 <_dtoa_r+0x8ae>
 801dff6:	4629      	mov	r1, r5
 801dff8:	4622      	mov	r2, r4
 801dffa:	4648      	mov	r0, r9
 801dffc:	f000 fb92 	bl	801e724 <__pow5mult>
 801e000:	9a02      	ldr	r2, [sp, #8]
 801e002:	4601      	mov	r1, r0
 801e004:	4605      	mov	r5, r0
 801e006:	4648      	mov	r0, r9
 801e008:	f000 faea 	bl	801e5e0 <__multiply>
 801e00c:	9902      	ldr	r1, [sp, #8]
 801e00e:	4680      	mov	r8, r0
 801e010:	4648      	mov	r0, r9
 801e012:	f000 fa34 	bl	801e47e <_Bfree>
 801e016:	9b08      	ldr	r3, [sp, #32]
 801e018:	1b1b      	subs	r3, r3, r4
 801e01a:	9308      	str	r3, [sp, #32]
 801e01c:	f000 80b1 	beq.w	801e182 <_dtoa_r+0x8ba>
 801e020:	9a08      	ldr	r2, [sp, #32]
 801e022:	4641      	mov	r1, r8
 801e024:	4648      	mov	r0, r9
 801e026:	f000 fb7d 	bl	801e724 <__pow5mult>
 801e02a:	9002      	str	r0, [sp, #8]
 801e02c:	2101      	movs	r1, #1
 801e02e:	4648      	mov	r0, r9
 801e030:	f000 fac0 	bl	801e5b4 <__i2b>
 801e034:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e036:	4604      	mov	r4, r0
 801e038:	2b00      	cmp	r3, #0
 801e03a:	f000 81d5 	beq.w	801e3e8 <_dtoa_r+0xb20>
 801e03e:	461a      	mov	r2, r3
 801e040:	4601      	mov	r1, r0
 801e042:	4648      	mov	r0, r9
 801e044:	f000 fb6e 	bl	801e724 <__pow5mult>
 801e048:	9b07      	ldr	r3, [sp, #28]
 801e04a:	2b01      	cmp	r3, #1
 801e04c:	4604      	mov	r4, r0
 801e04e:	f300 809f 	bgt.w	801e190 <_dtoa_r+0x8c8>
 801e052:	9b04      	ldr	r3, [sp, #16]
 801e054:	2b00      	cmp	r3, #0
 801e056:	f040 8097 	bne.w	801e188 <_dtoa_r+0x8c0>
 801e05a:	9b05      	ldr	r3, [sp, #20]
 801e05c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e060:	2b00      	cmp	r3, #0
 801e062:	f040 8093 	bne.w	801e18c <_dtoa_r+0x8c4>
 801e066:	9b05      	ldr	r3, [sp, #20]
 801e068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e06c:	0d1b      	lsrs	r3, r3, #20
 801e06e:	051b      	lsls	r3, r3, #20
 801e070:	b133      	cbz	r3, 801e080 <_dtoa_r+0x7b8>
 801e072:	9b00      	ldr	r3, [sp, #0]
 801e074:	3301      	adds	r3, #1
 801e076:	9300      	str	r3, [sp, #0]
 801e078:	9b06      	ldr	r3, [sp, #24]
 801e07a:	3301      	adds	r3, #1
 801e07c:	9306      	str	r3, [sp, #24]
 801e07e:	2301      	movs	r3, #1
 801e080:	9308      	str	r3, [sp, #32]
 801e082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e084:	2b00      	cmp	r3, #0
 801e086:	f000 81b5 	beq.w	801e3f4 <_dtoa_r+0xb2c>
 801e08a:	6923      	ldr	r3, [r4, #16]
 801e08c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e090:	6918      	ldr	r0, [r3, #16]
 801e092:	f000 fa43 	bl	801e51c <__hi0bits>
 801e096:	f1c0 0020 	rsb	r0, r0, #32
 801e09a:	9b06      	ldr	r3, [sp, #24]
 801e09c:	4418      	add	r0, r3
 801e09e:	f010 001f 	ands.w	r0, r0, #31
 801e0a2:	f000 8082 	beq.w	801e1aa <_dtoa_r+0x8e2>
 801e0a6:	f1c0 0320 	rsb	r3, r0, #32
 801e0aa:	2b04      	cmp	r3, #4
 801e0ac:	dd73      	ble.n	801e196 <_dtoa_r+0x8ce>
 801e0ae:	9b00      	ldr	r3, [sp, #0]
 801e0b0:	f1c0 001c 	rsb	r0, r0, #28
 801e0b4:	4403      	add	r3, r0
 801e0b6:	9300      	str	r3, [sp, #0]
 801e0b8:	9b06      	ldr	r3, [sp, #24]
 801e0ba:	4403      	add	r3, r0
 801e0bc:	4406      	add	r6, r0
 801e0be:	9306      	str	r3, [sp, #24]
 801e0c0:	9b00      	ldr	r3, [sp, #0]
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	dd05      	ble.n	801e0d2 <_dtoa_r+0x80a>
 801e0c6:	9902      	ldr	r1, [sp, #8]
 801e0c8:	461a      	mov	r2, r3
 801e0ca:	4648      	mov	r0, r9
 801e0cc:	f000 fb6a 	bl	801e7a4 <__lshift>
 801e0d0:	9002      	str	r0, [sp, #8]
 801e0d2:	9b06      	ldr	r3, [sp, #24]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	dd05      	ble.n	801e0e4 <_dtoa_r+0x81c>
 801e0d8:	4621      	mov	r1, r4
 801e0da:	461a      	mov	r2, r3
 801e0dc:	4648      	mov	r0, r9
 801e0de:	f000 fb61 	bl	801e7a4 <__lshift>
 801e0e2:	4604      	mov	r4, r0
 801e0e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d061      	beq.n	801e1ae <_dtoa_r+0x8e6>
 801e0ea:	9802      	ldr	r0, [sp, #8]
 801e0ec:	4621      	mov	r1, r4
 801e0ee:	f000 fbc5 	bl	801e87c <__mcmp>
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	da5b      	bge.n	801e1ae <_dtoa_r+0x8e6>
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	9902      	ldr	r1, [sp, #8]
 801e0fa:	220a      	movs	r2, #10
 801e0fc:	4648      	mov	r0, r9
 801e0fe:	f000 f9c7 	bl	801e490 <__multadd>
 801e102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e104:	9002      	str	r0, [sp, #8]
 801e106:	f107 38ff 	add.w	r8, r7, #4294967295
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	f000 8174 	beq.w	801e3f8 <_dtoa_r+0xb30>
 801e110:	4629      	mov	r1, r5
 801e112:	2300      	movs	r3, #0
 801e114:	220a      	movs	r2, #10
 801e116:	4648      	mov	r0, r9
 801e118:	f000 f9ba 	bl	801e490 <__multadd>
 801e11c:	f1bb 0f00 	cmp.w	fp, #0
 801e120:	4605      	mov	r5, r0
 801e122:	dc6f      	bgt.n	801e204 <_dtoa_r+0x93c>
 801e124:	9b07      	ldr	r3, [sp, #28]
 801e126:	2b02      	cmp	r3, #2
 801e128:	dc49      	bgt.n	801e1be <_dtoa_r+0x8f6>
 801e12a:	e06b      	b.n	801e204 <_dtoa_r+0x93c>
 801e12c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e12e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e132:	e73c      	b.n	801dfae <_dtoa_r+0x6e6>
 801e134:	3fe00000 	.word	0x3fe00000
 801e138:	40240000 	.word	0x40240000
 801e13c:	9b03      	ldr	r3, [sp, #12]
 801e13e:	1e5c      	subs	r4, r3, #1
 801e140:	9b08      	ldr	r3, [sp, #32]
 801e142:	42a3      	cmp	r3, r4
 801e144:	db09      	blt.n	801e15a <_dtoa_r+0x892>
 801e146:	1b1c      	subs	r4, r3, r4
 801e148:	9b03      	ldr	r3, [sp, #12]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	f6bf af30 	bge.w	801dfb0 <_dtoa_r+0x6e8>
 801e150:	9b00      	ldr	r3, [sp, #0]
 801e152:	9a03      	ldr	r2, [sp, #12]
 801e154:	1a9e      	subs	r6, r3, r2
 801e156:	2300      	movs	r3, #0
 801e158:	e72b      	b.n	801dfb2 <_dtoa_r+0x6ea>
 801e15a:	9b08      	ldr	r3, [sp, #32]
 801e15c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e15e:	9408      	str	r4, [sp, #32]
 801e160:	1ae3      	subs	r3, r4, r3
 801e162:	441a      	add	r2, r3
 801e164:	9e00      	ldr	r6, [sp, #0]
 801e166:	9b03      	ldr	r3, [sp, #12]
 801e168:	920d      	str	r2, [sp, #52]	@ 0x34
 801e16a:	2400      	movs	r4, #0
 801e16c:	e721      	b.n	801dfb2 <_dtoa_r+0x6ea>
 801e16e:	9c08      	ldr	r4, [sp, #32]
 801e170:	9e00      	ldr	r6, [sp, #0]
 801e172:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801e174:	e728      	b.n	801dfc8 <_dtoa_r+0x700>
 801e176:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e17a:	e751      	b.n	801e020 <_dtoa_r+0x758>
 801e17c:	9a08      	ldr	r2, [sp, #32]
 801e17e:	9902      	ldr	r1, [sp, #8]
 801e180:	e750      	b.n	801e024 <_dtoa_r+0x75c>
 801e182:	f8cd 8008 	str.w	r8, [sp, #8]
 801e186:	e751      	b.n	801e02c <_dtoa_r+0x764>
 801e188:	2300      	movs	r3, #0
 801e18a:	e779      	b.n	801e080 <_dtoa_r+0x7b8>
 801e18c:	9b04      	ldr	r3, [sp, #16]
 801e18e:	e777      	b.n	801e080 <_dtoa_r+0x7b8>
 801e190:	2300      	movs	r3, #0
 801e192:	9308      	str	r3, [sp, #32]
 801e194:	e779      	b.n	801e08a <_dtoa_r+0x7c2>
 801e196:	d093      	beq.n	801e0c0 <_dtoa_r+0x7f8>
 801e198:	9a00      	ldr	r2, [sp, #0]
 801e19a:	331c      	adds	r3, #28
 801e19c:	441a      	add	r2, r3
 801e19e:	9200      	str	r2, [sp, #0]
 801e1a0:	9a06      	ldr	r2, [sp, #24]
 801e1a2:	441a      	add	r2, r3
 801e1a4:	441e      	add	r6, r3
 801e1a6:	9206      	str	r2, [sp, #24]
 801e1a8:	e78a      	b.n	801e0c0 <_dtoa_r+0x7f8>
 801e1aa:	4603      	mov	r3, r0
 801e1ac:	e7f4      	b.n	801e198 <_dtoa_r+0x8d0>
 801e1ae:	9b03      	ldr	r3, [sp, #12]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	46b8      	mov	r8, r7
 801e1b4:	dc20      	bgt.n	801e1f8 <_dtoa_r+0x930>
 801e1b6:	469b      	mov	fp, r3
 801e1b8:	9b07      	ldr	r3, [sp, #28]
 801e1ba:	2b02      	cmp	r3, #2
 801e1bc:	dd1e      	ble.n	801e1fc <_dtoa_r+0x934>
 801e1be:	f1bb 0f00 	cmp.w	fp, #0
 801e1c2:	f47f adb2 	bne.w	801dd2a <_dtoa_r+0x462>
 801e1c6:	4621      	mov	r1, r4
 801e1c8:	465b      	mov	r3, fp
 801e1ca:	2205      	movs	r2, #5
 801e1cc:	4648      	mov	r0, r9
 801e1ce:	f000 f95f 	bl	801e490 <__multadd>
 801e1d2:	4601      	mov	r1, r0
 801e1d4:	4604      	mov	r4, r0
 801e1d6:	9802      	ldr	r0, [sp, #8]
 801e1d8:	f000 fb50 	bl	801e87c <__mcmp>
 801e1dc:	2800      	cmp	r0, #0
 801e1de:	f77f ada4 	ble.w	801dd2a <_dtoa_r+0x462>
 801e1e2:	4656      	mov	r6, sl
 801e1e4:	2331      	movs	r3, #49	@ 0x31
 801e1e6:	f806 3b01 	strb.w	r3, [r6], #1
 801e1ea:	f108 0801 	add.w	r8, r8, #1
 801e1ee:	e5a0      	b.n	801dd32 <_dtoa_r+0x46a>
 801e1f0:	9c03      	ldr	r4, [sp, #12]
 801e1f2:	46b8      	mov	r8, r7
 801e1f4:	4625      	mov	r5, r4
 801e1f6:	e7f4      	b.n	801e1e2 <_dtoa_r+0x91a>
 801e1f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801e1fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	f000 80fe 	beq.w	801e400 <_dtoa_r+0xb38>
 801e204:	2e00      	cmp	r6, #0
 801e206:	dd05      	ble.n	801e214 <_dtoa_r+0x94c>
 801e208:	4629      	mov	r1, r5
 801e20a:	4632      	mov	r2, r6
 801e20c:	4648      	mov	r0, r9
 801e20e:	f000 fac9 	bl	801e7a4 <__lshift>
 801e212:	4605      	mov	r5, r0
 801e214:	9b08      	ldr	r3, [sp, #32]
 801e216:	2b00      	cmp	r3, #0
 801e218:	d05b      	beq.n	801e2d2 <_dtoa_r+0xa0a>
 801e21a:	6869      	ldr	r1, [r5, #4]
 801e21c:	4648      	mov	r0, r9
 801e21e:	f000 f909 	bl	801e434 <_Balloc>
 801e222:	4606      	mov	r6, r0
 801e224:	b920      	cbnz	r0, 801e230 <_dtoa_r+0x968>
 801e226:	4b81      	ldr	r3, [pc, #516]	@ (801e42c <_dtoa_r+0xb64>)
 801e228:	4602      	mov	r2, r0
 801e22a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e22e:	e470      	b.n	801db12 <_dtoa_r+0x24a>
 801e230:	692a      	ldr	r2, [r5, #16]
 801e232:	3202      	adds	r2, #2
 801e234:	0092      	lsls	r2, r2, #2
 801e236:	f105 010c 	add.w	r1, r5, #12
 801e23a:	300c      	adds	r0, #12
 801e23c:	f7fd fbf4 	bl	801ba28 <memcpy>
 801e240:	2201      	movs	r2, #1
 801e242:	4631      	mov	r1, r6
 801e244:	4648      	mov	r0, r9
 801e246:	f000 faad 	bl	801e7a4 <__lshift>
 801e24a:	f10a 0301 	add.w	r3, sl, #1
 801e24e:	9300      	str	r3, [sp, #0]
 801e250:	eb0a 030b 	add.w	r3, sl, fp
 801e254:	9308      	str	r3, [sp, #32]
 801e256:	9b04      	ldr	r3, [sp, #16]
 801e258:	f003 0301 	and.w	r3, r3, #1
 801e25c:	462f      	mov	r7, r5
 801e25e:	9306      	str	r3, [sp, #24]
 801e260:	4605      	mov	r5, r0
 801e262:	9b00      	ldr	r3, [sp, #0]
 801e264:	9802      	ldr	r0, [sp, #8]
 801e266:	4621      	mov	r1, r4
 801e268:	f103 3bff 	add.w	fp, r3, #4294967295
 801e26c:	f7ff faa4 	bl	801d7b8 <quorem>
 801e270:	4603      	mov	r3, r0
 801e272:	3330      	adds	r3, #48	@ 0x30
 801e274:	9003      	str	r0, [sp, #12]
 801e276:	4639      	mov	r1, r7
 801e278:	9802      	ldr	r0, [sp, #8]
 801e27a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e27c:	f000 fafe 	bl	801e87c <__mcmp>
 801e280:	462a      	mov	r2, r5
 801e282:	9004      	str	r0, [sp, #16]
 801e284:	4621      	mov	r1, r4
 801e286:	4648      	mov	r0, r9
 801e288:	f000 fb14 	bl	801e8b4 <__mdiff>
 801e28c:	68c2      	ldr	r2, [r0, #12]
 801e28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e290:	4606      	mov	r6, r0
 801e292:	bb02      	cbnz	r2, 801e2d6 <_dtoa_r+0xa0e>
 801e294:	4601      	mov	r1, r0
 801e296:	9802      	ldr	r0, [sp, #8]
 801e298:	f000 faf0 	bl	801e87c <__mcmp>
 801e29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e29e:	4602      	mov	r2, r0
 801e2a0:	4631      	mov	r1, r6
 801e2a2:	4648      	mov	r0, r9
 801e2a4:	920c      	str	r2, [sp, #48]	@ 0x30
 801e2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2a8:	f000 f8e9 	bl	801e47e <_Bfree>
 801e2ac:	9b07      	ldr	r3, [sp, #28]
 801e2ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e2b0:	9e00      	ldr	r6, [sp, #0]
 801e2b2:	ea42 0103 	orr.w	r1, r2, r3
 801e2b6:	9b06      	ldr	r3, [sp, #24]
 801e2b8:	4319      	orrs	r1, r3
 801e2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2bc:	d10d      	bne.n	801e2da <_dtoa_r+0xa12>
 801e2be:	2b39      	cmp	r3, #57	@ 0x39
 801e2c0:	d027      	beq.n	801e312 <_dtoa_r+0xa4a>
 801e2c2:	9a04      	ldr	r2, [sp, #16]
 801e2c4:	2a00      	cmp	r2, #0
 801e2c6:	dd01      	ble.n	801e2cc <_dtoa_r+0xa04>
 801e2c8:	9b03      	ldr	r3, [sp, #12]
 801e2ca:	3331      	adds	r3, #49	@ 0x31
 801e2cc:	f88b 3000 	strb.w	r3, [fp]
 801e2d0:	e530      	b.n	801dd34 <_dtoa_r+0x46c>
 801e2d2:	4628      	mov	r0, r5
 801e2d4:	e7b9      	b.n	801e24a <_dtoa_r+0x982>
 801e2d6:	2201      	movs	r2, #1
 801e2d8:	e7e2      	b.n	801e2a0 <_dtoa_r+0x9d8>
 801e2da:	9904      	ldr	r1, [sp, #16]
 801e2dc:	2900      	cmp	r1, #0
 801e2de:	db04      	blt.n	801e2ea <_dtoa_r+0xa22>
 801e2e0:	9807      	ldr	r0, [sp, #28]
 801e2e2:	4301      	orrs	r1, r0
 801e2e4:	9806      	ldr	r0, [sp, #24]
 801e2e6:	4301      	orrs	r1, r0
 801e2e8:	d120      	bne.n	801e32c <_dtoa_r+0xa64>
 801e2ea:	2a00      	cmp	r2, #0
 801e2ec:	ddee      	ble.n	801e2cc <_dtoa_r+0xa04>
 801e2ee:	9902      	ldr	r1, [sp, #8]
 801e2f0:	9300      	str	r3, [sp, #0]
 801e2f2:	2201      	movs	r2, #1
 801e2f4:	4648      	mov	r0, r9
 801e2f6:	f000 fa55 	bl	801e7a4 <__lshift>
 801e2fa:	4621      	mov	r1, r4
 801e2fc:	9002      	str	r0, [sp, #8]
 801e2fe:	f000 fabd 	bl	801e87c <__mcmp>
 801e302:	2800      	cmp	r0, #0
 801e304:	9b00      	ldr	r3, [sp, #0]
 801e306:	dc02      	bgt.n	801e30e <_dtoa_r+0xa46>
 801e308:	d1e0      	bne.n	801e2cc <_dtoa_r+0xa04>
 801e30a:	07da      	lsls	r2, r3, #31
 801e30c:	d5de      	bpl.n	801e2cc <_dtoa_r+0xa04>
 801e30e:	2b39      	cmp	r3, #57	@ 0x39
 801e310:	d1da      	bne.n	801e2c8 <_dtoa_r+0xa00>
 801e312:	2339      	movs	r3, #57	@ 0x39
 801e314:	f88b 3000 	strb.w	r3, [fp]
 801e318:	4633      	mov	r3, r6
 801e31a:	461e      	mov	r6, r3
 801e31c:	3b01      	subs	r3, #1
 801e31e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e322:	2a39      	cmp	r2, #57	@ 0x39
 801e324:	d04e      	beq.n	801e3c4 <_dtoa_r+0xafc>
 801e326:	3201      	adds	r2, #1
 801e328:	701a      	strb	r2, [r3, #0]
 801e32a:	e503      	b.n	801dd34 <_dtoa_r+0x46c>
 801e32c:	2a00      	cmp	r2, #0
 801e32e:	dd03      	ble.n	801e338 <_dtoa_r+0xa70>
 801e330:	2b39      	cmp	r3, #57	@ 0x39
 801e332:	d0ee      	beq.n	801e312 <_dtoa_r+0xa4a>
 801e334:	3301      	adds	r3, #1
 801e336:	e7c9      	b.n	801e2cc <_dtoa_r+0xa04>
 801e338:	9a00      	ldr	r2, [sp, #0]
 801e33a:	9908      	ldr	r1, [sp, #32]
 801e33c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e340:	428a      	cmp	r2, r1
 801e342:	d028      	beq.n	801e396 <_dtoa_r+0xace>
 801e344:	9902      	ldr	r1, [sp, #8]
 801e346:	2300      	movs	r3, #0
 801e348:	220a      	movs	r2, #10
 801e34a:	4648      	mov	r0, r9
 801e34c:	f000 f8a0 	bl	801e490 <__multadd>
 801e350:	42af      	cmp	r7, r5
 801e352:	9002      	str	r0, [sp, #8]
 801e354:	f04f 0300 	mov.w	r3, #0
 801e358:	f04f 020a 	mov.w	r2, #10
 801e35c:	4639      	mov	r1, r7
 801e35e:	4648      	mov	r0, r9
 801e360:	d107      	bne.n	801e372 <_dtoa_r+0xaaa>
 801e362:	f000 f895 	bl	801e490 <__multadd>
 801e366:	4607      	mov	r7, r0
 801e368:	4605      	mov	r5, r0
 801e36a:	9b00      	ldr	r3, [sp, #0]
 801e36c:	3301      	adds	r3, #1
 801e36e:	9300      	str	r3, [sp, #0]
 801e370:	e777      	b.n	801e262 <_dtoa_r+0x99a>
 801e372:	f000 f88d 	bl	801e490 <__multadd>
 801e376:	4629      	mov	r1, r5
 801e378:	4607      	mov	r7, r0
 801e37a:	2300      	movs	r3, #0
 801e37c:	220a      	movs	r2, #10
 801e37e:	4648      	mov	r0, r9
 801e380:	f000 f886 	bl	801e490 <__multadd>
 801e384:	4605      	mov	r5, r0
 801e386:	e7f0      	b.n	801e36a <_dtoa_r+0xaa2>
 801e388:	f1bb 0f00 	cmp.w	fp, #0
 801e38c:	bfcc      	ite	gt
 801e38e:	465e      	movgt	r6, fp
 801e390:	2601      	movle	r6, #1
 801e392:	4456      	add	r6, sl
 801e394:	2700      	movs	r7, #0
 801e396:	9902      	ldr	r1, [sp, #8]
 801e398:	9300      	str	r3, [sp, #0]
 801e39a:	2201      	movs	r2, #1
 801e39c:	4648      	mov	r0, r9
 801e39e:	f000 fa01 	bl	801e7a4 <__lshift>
 801e3a2:	4621      	mov	r1, r4
 801e3a4:	9002      	str	r0, [sp, #8]
 801e3a6:	f000 fa69 	bl	801e87c <__mcmp>
 801e3aa:	2800      	cmp	r0, #0
 801e3ac:	dcb4      	bgt.n	801e318 <_dtoa_r+0xa50>
 801e3ae:	d102      	bne.n	801e3b6 <_dtoa_r+0xaee>
 801e3b0:	9b00      	ldr	r3, [sp, #0]
 801e3b2:	07db      	lsls	r3, r3, #31
 801e3b4:	d4b0      	bmi.n	801e318 <_dtoa_r+0xa50>
 801e3b6:	4633      	mov	r3, r6
 801e3b8:	461e      	mov	r6, r3
 801e3ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e3be:	2a30      	cmp	r2, #48	@ 0x30
 801e3c0:	d0fa      	beq.n	801e3b8 <_dtoa_r+0xaf0>
 801e3c2:	e4b7      	b.n	801dd34 <_dtoa_r+0x46c>
 801e3c4:	459a      	cmp	sl, r3
 801e3c6:	d1a8      	bne.n	801e31a <_dtoa_r+0xa52>
 801e3c8:	2331      	movs	r3, #49	@ 0x31
 801e3ca:	f108 0801 	add.w	r8, r8, #1
 801e3ce:	f88a 3000 	strb.w	r3, [sl]
 801e3d2:	e4af      	b.n	801dd34 <_dtoa_r+0x46c>
 801e3d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e3d6:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801e430 <_dtoa_r+0xb68>
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	f43f aaab 	beq.w	801d936 <_dtoa_r+0x6e>
 801e3e0:	f10a 0308 	add.w	r3, sl, #8
 801e3e4:	f7ff baa5 	b.w	801d932 <_dtoa_r+0x6a>
 801e3e8:	9b07      	ldr	r3, [sp, #28]
 801e3ea:	2b01      	cmp	r3, #1
 801e3ec:	f77f ae31 	ble.w	801e052 <_dtoa_r+0x78a>
 801e3f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3f2:	9308      	str	r3, [sp, #32]
 801e3f4:	2001      	movs	r0, #1
 801e3f6:	e650      	b.n	801e09a <_dtoa_r+0x7d2>
 801e3f8:	f1bb 0f00 	cmp.w	fp, #0
 801e3fc:	f77f aedc 	ble.w	801e1b8 <_dtoa_r+0x8f0>
 801e400:	4656      	mov	r6, sl
 801e402:	9802      	ldr	r0, [sp, #8]
 801e404:	4621      	mov	r1, r4
 801e406:	f7ff f9d7 	bl	801d7b8 <quorem>
 801e40a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801e40e:	f806 3b01 	strb.w	r3, [r6], #1
 801e412:	eba6 020a 	sub.w	r2, r6, sl
 801e416:	4593      	cmp	fp, r2
 801e418:	ddb6      	ble.n	801e388 <_dtoa_r+0xac0>
 801e41a:	9902      	ldr	r1, [sp, #8]
 801e41c:	2300      	movs	r3, #0
 801e41e:	220a      	movs	r2, #10
 801e420:	4648      	mov	r0, r9
 801e422:	f000 f835 	bl	801e490 <__multadd>
 801e426:	9002      	str	r0, [sp, #8]
 801e428:	e7eb      	b.n	801e402 <_dtoa_r+0xb3a>
 801e42a:	bf00      	nop
 801e42c:	0802228a 	.word	0x0802228a
 801e430:	0802227d 	.word	0x0802227d

0801e434 <_Balloc>:
 801e434:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e436:	b570      	push	{r4, r5, r6, lr}
 801e438:	4605      	mov	r5, r0
 801e43a:	460c      	mov	r4, r1
 801e43c:	b17b      	cbz	r3, 801e45e <_Balloc+0x2a>
 801e43e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801e440:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e444:	b9a0      	cbnz	r0, 801e470 <_Balloc+0x3c>
 801e446:	2101      	movs	r1, #1
 801e448:	fa01 f604 	lsl.w	r6, r1, r4
 801e44c:	1d72      	adds	r2, r6, #5
 801e44e:	0092      	lsls	r2, r2, #2
 801e450:	4628      	mov	r0, r5
 801e452:	f7fc facb 	bl	801a9ec <_calloc_r>
 801e456:	b148      	cbz	r0, 801e46c <_Balloc+0x38>
 801e458:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801e45c:	e00b      	b.n	801e476 <_Balloc+0x42>
 801e45e:	2221      	movs	r2, #33	@ 0x21
 801e460:	2104      	movs	r1, #4
 801e462:	f7fc fac3 	bl	801a9ec <_calloc_r>
 801e466:	6468      	str	r0, [r5, #68]	@ 0x44
 801e468:	2800      	cmp	r0, #0
 801e46a:	d1e8      	bne.n	801e43e <_Balloc+0xa>
 801e46c:	2000      	movs	r0, #0
 801e46e:	bd70      	pop	{r4, r5, r6, pc}
 801e470:	6802      	ldr	r2, [r0, #0]
 801e472:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801e476:	2300      	movs	r3, #0
 801e478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e47c:	e7f7      	b.n	801e46e <_Balloc+0x3a>

0801e47e <_Bfree>:
 801e47e:	b131      	cbz	r1, 801e48e <_Bfree+0x10>
 801e480:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e482:	684a      	ldr	r2, [r1, #4]
 801e484:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e488:	6008      	str	r0, [r1, #0]
 801e48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e48e:	4770      	bx	lr

0801e490 <__multadd>:
 801e490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e494:	690d      	ldr	r5, [r1, #16]
 801e496:	4607      	mov	r7, r0
 801e498:	460c      	mov	r4, r1
 801e49a:	461e      	mov	r6, r3
 801e49c:	f101 0c14 	add.w	ip, r1, #20
 801e4a0:	2000      	movs	r0, #0
 801e4a2:	f8dc 3000 	ldr.w	r3, [ip]
 801e4a6:	b299      	uxth	r1, r3
 801e4a8:	fb02 6101 	mla	r1, r2, r1, r6
 801e4ac:	0c1e      	lsrs	r6, r3, #16
 801e4ae:	0c0b      	lsrs	r3, r1, #16
 801e4b0:	fb02 3306 	mla	r3, r2, r6, r3
 801e4b4:	b289      	uxth	r1, r1
 801e4b6:	3001      	adds	r0, #1
 801e4b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e4bc:	4285      	cmp	r5, r0
 801e4be:	f84c 1b04 	str.w	r1, [ip], #4
 801e4c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e4c6:	dcec      	bgt.n	801e4a2 <__multadd+0x12>
 801e4c8:	b30e      	cbz	r6, 801e50e <__multadd+0x7e>
 801e4ca:	68a3      	ldr	r3, [r4, #8]
 801e4cc:	42ab      	cmp	r3, r5
 801e4ce:	dc19      	bgt.n	801e504 <__multadd+0x74>
 801e4d0:	6861      	ldr	r1, [r4, #4]
 801e4d2:	4638      	mov	r0, r7
 801e4d4:	3101      	adds	r1, #1
 801e4d6:	f7ff ffad 	bl	801e434 <_Balloc>
 801e4da:	4680      	mov	r8, r0
 801e4dc:	b928      	cbnz	r0, 801e4ea <__multadd+0x5a>
 801e4de:	4602      	mov	r2, r0
 801e4e0:	4b0c      	ldr	r3, [pc, #48]	@ (801e514 <__multadd+0x84>)
 801e4e2:	480d      	ldr	r0, [pc, #52]	@ (801e518 <__multadd+0x88>)
 801e4e4:	21ba      	movs	r1, #186	@ 0xba
 801e4e6:	f000 fbb3 	bl	801ec50 <__assert_func>
 801e4ea:	6922      	ldr	r2, [r4, #16]
 801e4ec:	3202      	adds	r2, #2
 801e4ee:	f104 010c 	add.w	r1, r4, #12
 801e4f2:	0092      	lsls	r2, r2, #2
 801e4f4:	300c      	adds	r0, #12
 801e4f6:	f7fd fa97 	bl	801ba28 <memcpy>
 801e4fa:	4621      	mov	r1, r4
 801e4fc:	4638      	mov	r0, r7
 801e4fe:	f7ff ffbe 	bl	801e47e <_Bfree>
 801e502:	4644      	mov	r4, r8
 801e504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e508:	3501      	adds	r5, #1
 801e50a:	615e      	str	r6, [r3, #20]
 801e50c:	6125      	str	r5, [r4, #16]
 801e50e:	4620      	mov	r0, r4
 801e510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e514:	0802228a 	.word	0x0802228a
 801e518:	080222f3 	.word	0x080222f3

0801e51c <__hi0bits>:
 801e51c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e520:	4603      	mov	r3, r0
 801e522:	bf36      	itet	cc
 801e524:	0403      	lslcc	r3, r0, #16
 801e526:	2000      	movcs	r0, #0
 801e528:	2010      	movcc	r0, #16
 801e52a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e52e:	bf3c      	itt	cc
 801e530:	021b      	lslcc	r3, r3, #8
 801e532:	3008      	addcc	r0, #8
 801e534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e538:	bf3c      	itt	cc
 801e53a:	011b      	lslcc	r3, r3, #4
 801e53c:	3004      	addcc	r0, #4
 801e53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e542:	bf3c      	itt	cc
 801e544:	009b      	lslcc	r3, r3, #2
 801e546:	3002      	addcc	r0, #2
 801e548:	2b00      	cmp	r3, #0
 801e54a:	db05      	blt.n	801e558 <__hi0bits+0x3c>
 801e54c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e550:	f100 0001 	add.w	r0, r0, #1
 801e554:	bf08      	it	eq
 801e556:	2020      	moveq	r0, #32
 801e558:	4770      	bx	lr

0801e55a <__lo0bits>:
 801e55a:	6803      	ldr	r3, [r0, #0]
 801e55c:	4602      	mov	r2, r0
 801e55e:	f013 0007 	ands.w	r0, r3, #7
 801e562:	d00b      	beq.n	801e57c <__lo0bits+0x22>
 801e564:	07d9      	lsls	r1, r3, #31
 801e566:	d421      	bmi.n	801e5ac <__lo0bits+0x52>
 801e568:	0798      	lsls	r0, r3, #30
 801e56a:	bf49      	itett	mi
 801e56c:	085b      	lsrmi	r3, r3, #1
 801e56e:	089b      	lsrpl	r3, r3, #2
 801e570:	2001      	movmi	r0, #1
 801e572:	6013      	strmi	r3, [r2, #0]
 801e574:	bf5c      	itt	pl
 801e576:	6013      	strpl	r3, [r2, #0]
 801e578:	2002      	movpl	r0, #2
 801e57a:	4770      	bx	lr
 801e57c:	b299      	uxth	r1, r3
 801e57e:	b909      	cbnz	r1, 801e584 <__lo0bits+0x2a>
 801e580:	0c1b      	lsrs	r3, r3, #16
 801e582:	2010      	movs	r0, #16
 801e584:	b2d9      	uxtb	r1, r3
 801e586:	b909      	cbnz	r1, 801e58c <__lo0bits+0x32>
 801e588:	3008      	adds	r0, #8
 801e58a:	0a1b      	lsrs	r3, r3, #8
 801e58c:	0719      	lsls	r1, r3, #28
 801e58e:	bf04      	itt	eq
 801e590:	091b      	lsreq	r3, r3, #4
 801e592:	3004      	addeq	r0, #4
 801e594:	0799      	lsls	r1, r3, #30
 801e596:	bf04      	itt	eq
 801e598:	089b      	lsreq	r3, r3, #2
 801e59a:	3002      	addeq	r0, #2
 801e59c:	07d9      	lsls	r1, r3, #31
 801e59e:	d403      	bmi.n	801e5a8 <__lo0bits+0x4e>
 801e5a0:	085b      	lsrs	r3, r3, #1
 801e5a2:	f100 0001 	add.w	r0, r0, #1
 801e5a6:	d003      	beq.n	801e5b0 <__lo0bits+0x56>
 801e5a8:	6013      	str	r3, [r2, #0]
 801e5aa:	4770      	bx	lr
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	4770      	bx	lr
 801e5b0:	2020      	movs	r0, #32
 801e5b2:	4770      	bx	lr

0801e5b4 <__i2b>:
 801e5b4:	b510      	push	{r4, lr}
 801e5b6:	460c      	mov	r4, r1
 801e5b8:	2101      	movs	r1, #1
 801e5ba:	f7ff ff3b 	bl	801e434 <_Balloc>
 801e5be:	4602      	mov	r2, r0
 801e5c0:	b928      	cbnz	r0, 801e5ce <__i2b+0x1a>
 801e5c2:	4b05      	ldr	r3, [pc, #20]	@ (801e5d8 <__i2b+0x24>)
 801e5c4:	4805      	ldr	r0, [pc, #20]	@ (801e5dc <__i2b+0x28>)
 801e5c6:	f240 1145 	movw	r1, #325	@ 0x145
 801e5ca:	f000 fb41 	bl	801ec50 <__assert_func>
 801e5ce:	2301      	movs	r3, #1
 801e5d0:	6144      	str	r4, [r0, #20]
 801e5d2:	6103      	str	r3, [r0, #16]
 801e5d4:	bd10      	pop	{r4, pc}
 801e5d6:	bf00      	nop
 801e5d8:	0802228a 	.word	0x0802228a
 801e5dc:	080222f3 	.word	0x080222f3

0801e5e0 <__multiply>:
 801e5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e4:	4617      	mov	r7, r2
 801e5e6:	690a      	ldr	r2, [r1, #16]
 801e5e8:	693b      	ldr	r3, [r7, #16]
 801e5ea:	429a      	cmp	r2, r3
 801e5ec:	bfa8      	it	ge
 801e5ee:	463b      	movge	r3, r7
 801e5f0:	4689      	mov	r9, r1
 801e5f2:	bfa4      	itt	ge
 801e5f4:	460f      	movge	r7, r1
 801e5f6:	4699      	movge	r9, r3
 801e5f8:	693d      	ldr	r5, [r7, #16]
 801e5fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e5fe:	68bb      	ldr	r3, [r7, #8]
 801e600:	6879      	ldr	r1, [r7, #4]
 801e602:	eb05 060a 	add.w	r6, r5, sl
 801e606:	42b3      	cmp	r3, r6
 801e608:	b085      	sub	sp, #20
 801e60a:	bfb8      	it	lt
 801e60c:	3101      	addlt	r1, #1
 801e60e:	f7ff ff11 	bl	801e434 <_Balloc>
 801e612:	b930      	cbnz	r0, 801e622 <__multiply+0x42>
 801e614:	4602      	mov	r2, r0
 801e616:	4b41      	ldr	r3, [pc, #260]	@ (801e71c <__multiply+0x13c>)
 801e618:	4841      	ldr	r0, [pc, #260]	@ (801e720 <__multiply+0x140>)
 801e61a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e61e:	f000 fb17 	bl	801ec50 <__assert_func>
 801e622:	f100 0414 	add.w	r4, r0, #20
 801e626:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801e62a:	4623      	mov	r3, r4
 801e62c:	2200      	movs	r2, #0
 801e62e:	4573      	cmp	r3, lr
 801e630:	d320      	bcc.n	801e674 <__multiply+0x94>
 801e632:	f107 0814 	add.w	r8, r7, #20
 801e636:	f109 0114 	add.w	r1, r9, #20
 801e63a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801e63e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801e642:	9302      	str	r3, [sp, #8]
 801e644:	1beb      	subs	r3, r5, r7
 801e646:	3b15      	subs	r3, #21
 801e648:	f023 0303 	bic.w	r3, r3, #3
 801e64c:	3304      	adds	r3, #4
 801e64e:	3715      	adds	r7, #21
 801e650:	42bd      	cmp	r5, r7
 801e652:	bf38      	it	cc
 801e654:	2304      	movcc	r3, #4
 801e656:	9301      	str	r3, [sp, #4]
 801e658:	9b02      	ldr	r3, [sp, #8]
 801e65a:	9103      	str	r1, [sp, #12]
 801e65c:	428b      	cmp	r3, r1
 801e65e:	d80c      	bhi.n	801e67a <__multiply+0x9a>
 801e660:	2e00      	cmp	r6, #0
 801e662:	dd03      	ble.n	801e66c <__multiply+0x8c>
 801e664:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d055      	beq.n	801e718 <__multiply+0x138>
 801e66c:	6106      	str	r6, [r0, #16]
 801e66e:	b005      	add	sp, #20
 801e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e674:	f843 2b04 	str.w	r2, [r3], #4
 801e678:	e7d9      	b.n	801e62e <__multiply+0x4e>
 801e67a:	f8b1 a000 	ldrh.w	sl, [r1]
 801e67e:	f1ba 0f00 	cmp.w	sl, #0
 801e682:	d01f      	beq.n	801e6c4 <__multiply+0xe4>
 801e684:	46c4      	mov	ip, r8
 801e686:	46a1      	mov	r9, r4
 801e688:	2700      	movs	r7, #0
 801e68a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e68e:	f8d9 3000 	ldr.w	r3, [r9]
 801e692:	fa1f fb82 	uxth.w	fp, r2
 801e696:	b29b      	uxth	r3, r3
 801e698:	fb0a 330b 	mla	r3, sl, fp, r3
 801e69c:	443b      	add	r3, r7
 801e69e:	f8d9 7000 	ldr.w	r7, [r9]
 801e6a2:	0c12      	lsrs	r2, r2, #16
 801e6a4:	0c3f      	lsrs	r7, r7, #16
 801e6a6:	fb0a 7202 	mla	r2, sl, r2, r7
 801e6aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801e6ae:	b29b      	uxth	r3, r3
 801e6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e6b4:	4565      	cmp	r5, ip
 801e6b6:	f849 3b04 	str.w	r3, [r9], #4
 801e6ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801e6be:	d8e4      	bhi.n	801e68a <__multiply+0xaa>
 801e6c0:	9b01      	ldr	r3, [sp, #4]
 801e6c2:	50e7      	str	r7, [r4, r3]
 801e6c4:	9b03      	ldr	r3, [sp, #12]
 801e6c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e6ca:	3104      	adds	r1, #4
 801e6cc:	f1b9 0f00 	cmp.w	r9, #0
 801e6d0:	d020      	beq.n	801e714 <__multiply+0x134>
 801e6d2:	6823      	ldr	r3, [r4, #0]
 801e6d4:	4647      	mov	r7, r8
 801e6d6:	46a4      	mov	ip, r4
 801e6d8:	f04f 0a00 	mov.w	sl, #0
 801e6dc:	f8b7 b000 	ldrh.w	fp, [r7]
 801e6e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801e6e4:	fb09 220b 	mla	r2, r9, fp, r2
 801e6e8:	4452      	add	r2, sl
 801e6ea:	b29b      	uxth	r3, r3
 801e6ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e6f0:	f84c 3b04 	str.w	r3, [ip], #4
 801e6f4:	f857 3b04 	ldr.w	r3, [r7], #4
 801e6f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e6fc:	f8bc 3000 	ldrh.w	r3, [ip]
 801e700:	fb09 330a 	mla	r3, r9, sl, r3
 801e704:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801e708:	42bd      	cmp	r5, r7
 801e70a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e70e:	d8e5      	bhi.n	801e6dc <__multiply+0xfc>
 801e710:	9a01      	ldr	r2, [sp, #4]
 801e712:	50a3      	str	r3, [r4, r2]
 801e714:	3404      	adds	r4, #4
 801e716:	e79f      	b.n	801e658 <__multiply+0x78>
 801e718:	3e01      	subs	r6, #1
 801e71a:	e7a1      	b.n	801e660 <__multiply+0x80>
 801e71c:	0802228a 	.word	0x0802228a
 801e720:	080222f3 	.word	0x080222f3

0801e724 <__pow5mult>:
 801e724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e728:	4615      	mov	r5, r2
 801e72a:	f012 0203 	ands.w	r2, r2, #3
 801e72e:	4607      	mov	r7, r0
 801e730:	460e      	mov	r6, r1
 801e732:	d007      	beq.n	801e744 <__pow5mult+0x20>
 801e734:	4c1a      	ldr	r4, [pc, #104]	@ (801e7a0 <__pow5mult+0x7c>)
 801e736:	3a01      	subs	r2, #1
 801e738:	2300      	movs	r3, #0
 801e73a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e73e:	f7ff fea7 	bl	801e490 <__multadd>
 801e742:	4606      	mov	r6, r0
 801e744:	10ad      	asrs	r5, r5, #2
 801e746:	d027      	beq.n	801e798 <__pow5mult+0x74>
 801e748:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801e74a:	b944      	cbnz	r4, 801e75e <__pow5mult+0x3a>
 801e74c:	f240 2171 	movw	r1, #625	@ 0x271
 801e750:	4638      	mov	r0, r7
 801e752:	f7ff ff2f 	bl	801e5b4 <__i2b>
 801e756:	2300      	movs	r3, #0
 801e758:	6438      	str	r0, [r7, #64]	@ 0x40
 801e75a:	4604      	mov	r4, r0
 801e75c:	6003      	str	r3, [r0, #0]
 801e75e:	f04f 0900 	mov.w	r9, #0
 801e762:	07eb      	lsls	r3, r5, #31
 801e764:	d50a      	bpl.n	801e77c <__pow5mult+0x58>
 801e766:	4631      	mov	r1, r6
 801e768:	4622      	mov	r2, r4
 801e76a:	4638      	mov	r0, r7
 801e76c:	f7ff ff38 	bl	801e5e0 <__multiply>
 801e770:	4631      	mov	r1, r6
 801e772:	4680      	mov	r8, r0
 801e774:	4638      	mov	r0, r7
 801e776:	f7ff fe82 	bl	801e47e <_Bfree>
 801e77a:	4646      	mov	r6, r8
 801e77c:	106d      	asrs	r5, r5, #1
 801e77e:	d00b      	beq.n	801e798 <__pow5mult+0x74>
 801e780:	6820      	ldr	r0, [r4, #0]
 801e782:	b938      	cbnz	r0, 801e794 <__pow5mult+0x70>
 801e784:	4622      	mov	r2, r4
 801e786:	4621      	mov	r1, r4
 801e788:	4638      	mov	r0, r7
 801e78a:	f7ff ff29 	bl	801e5e0 <__multiply>
 801e78e:	6020      	str	r0, [r4, #0]
 801e790:	f8c0 9000 	str.w	r9, [r0]
 801e794:	4604      	mov	r4, r0
 801e796:	e7e4      	b.n	801e762 <__pow5mult+0x3e>
 801e798:	4630      	mov	r0, r6
 801e79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e79e:	bf00      	nop
 801e7a0:	080223b4 	.word	0x080223b4

0801e7a4 <__lshift>:
 801e7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7a8:	460c      	mov	r4, r1
 801e7aa:	6849      	ldr	r1, [r1, #4]
 801e7ac:	6923      	ldr	r3, [r4, #16]
 801e7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e7b2:	68a3      	ldr	r3, [r4, #8]
 801e7b4:	4607      	mov	r7, r0
 801e7b6:	4691      	mov	r9, r2
 801e7b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e7bc:	f108 0601 	add.w	r6, r8, #1
 801e7c0:	42b3      	cmp	r3, r6
 801e7c2:	db0b      	blt.n	801e7dc <__lshift+0x38>
 801e7c4:	4638      	mov	r0, r7
 801e7c6:	f7ff fe35 	bl	801e434 <_Balloc>
 801e7ca:	4605      	mov	r5, r0
 801e7cc:	b948      	cbnz	r0, 801e7e2 <__lshift+0x3e>
 801e7ce:	4602      	mov	r2, r0
 801e7d0:	4b28      	ldr	r3, [pc, #160]	@ (801e874 <__lshift+0xd0>)
 801e7d2:	4829      	ldr	r0, [pc, #164]	@ (801e878 <__lshift+0xd4>)
 801e7d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e7d8:	f000 fa3a 	bl	801ec50 <__assert_func>
 801e7dc:	3101      	adds	r1, #1
 801e7de:	005b      	lsls	r3, r3, #1
 801e7e0:	e7ee      	b.n	801e7c0 <__lshift+0x1c>
 801e7e2:	2300      	movs	r3, #0
 801e7e4:	f100 0114 	add.w	r1, r0, #20
 801e7e8:	f100 0210 	add.w	r2, r0, #16
 801e7ec:	4618      	mov	r0, r3
 801e7ee:	4553      	cmp	r3, sl
 801e7f0:	db33      	blt.n	801e85a <__lshift+0xb6>
 801e7f2:	6920      	ldr	r0, [r4, #16]
 801e7f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e7f8:	f104 0314 	add.w	r3, r4, #20
 801e7fc:	f019 091f 	ands.w	r9, r9, #31
 801e800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e808:	d02b      	beq.n	801e862 <__lshift+0xbe>
 801e80a:	f1c9 0e20 	rsb	lr, r9, #32
 801e80e:	468a      	mov	sl, r1
 801e810:	2200      	movs	r2, #0
 801e812:	6818      	ldr	r0, [r3, #0]
 801e814:	fa00 f009 	lsl.w	r0, r0, r9
 801e818:	4310      	orrs	r0, r2
 801e81a:	f84a 0b04 	str.w	r0, [sl], #4
 801e81e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e822:	459c      	cmp	ip, r3
 801e824:	fa22 f20e 	lsr.w	r2, r2, lr
 801e828:	d8f3      	bhi.n	801e812 <__lshift+0x6e>
 801e82a:	ebac 0304 	sub.w	r3, ip, r4
 801e82e:	3b15      	subs	r3, #21
 801e830:	f023 0303 	bic.w	r3, r3, #3
 801e834:	3304      	adds	r3, #4
 801e836:	f104 0015 	add.w	r0, r4, #21
 801e83a:	4560      	cmp	r0, ip
 801e83c:	bf88      	it	hi
 801e83e:	2304      	movhi	r3, #4
 801e840:	50ca      	str	r2, [r1, r3]
 801e842:	b10a      	cbz	r2, 801e848 <__lshift+0xa4>
 801e844:	f108 0602 	add.w	r6, r8, #2
 801e848:	3e01      	subs	r6, #1
 801e84a:	4638      	mov	r0, r7
 801e84c:	612e      	str	r6, [r5, #16]
 801e84e:	4621      	mov	r1, r4
 801e850:	f7ff fe15 	bl	801e47e <_Bfree>
 801e854:	4628      	mov	r0, r5
 801e856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e85a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e85e:	3301      	adds	r3, #1
 801e860:	e7c5      	b.n	801e7ee <__lshift+0x4a>
 801e862:	3904      	subs	r1, #4
 801e864:	f853 2b04 	ldr.w	r2, [r3], #4
 801e868:	f841 2f04 	str.w	r2, [r1, #4]!
 801e86c:	459c      	cmp	ip, r3
 801e86e:	d8f9      	bhi.n	801e864 <__lshift+0xc0>
 801e870:	e7ea      	b.n	801e848 <__lshift+0xa4>
 801e872:	bf00      	nop
 801e874:	0802228a 	.word	0x0802228a
 801e878:	080222f3 	.word	0x080222f3

0801e87c <__mcmp>:
 801e87c:	690a      	ldr	r2, [r1, #16]
 801e87e:	4603      	mov	r3, r0
 801e880:	6900      	ldr	r0, [r0, #16]
 801e882:	1a80      	subs	r0, r0, r2
 801e884:	b530      	push	{r4, r5, lr}
 801e886:	d10e      	bne.n	801e8a6 <__mcmp+0x2a>
 801e888:	3314      	adds	r3, #20
 801e88a:	3114      	adds	r1, #20
 801e88c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e890:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e894:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e898:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e89c:	4295      	cmp	r5, r2
 801e89e:	d003      	beq.n	801e8a8 <__mcmp+0x2c>
 801e8a0:	d205      	bcs.n	801e8ae <__mcmp+0x32>
 801e8a2:	f04f 30ff 	mov.w	r0, #4294967295
 801e8a6:	bd30      	pop	{r4, r5, pc}
 801e8a8:	42a3      	cmp	r3, r4
 801e8aa:	d3f3      	bcc.n	801e894 <__mcmp+0x18>
 801e8ac:	e7fb      	b.n	801e8a6 <__mcmp+0x2a>
 801e8ae:	2001      	movs	r0, #1
 801e8b0:	e7f9      	b.n	801e8a6 <__mcmp+0x2a>
	...

0801e8b4 <__mdiff>:
 801e8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8b8:	4689      	mov	r9, r1
 801e8ba:	4606      	mov	r6, r0
 801e8bc:	4611      	mov	r1, r2
 801e8be:	4648      	mov	r0, r9
 801e8c0:	4614      	mov	r4, r2
 801e8c2:	f7ff ffdb 	bl	801e87c <__mcmp>
 801e8c6:	1e05      	subs	r5, r0, #0
 801e8c8:	d112      	bne.n	801e8f0 <__mdiff+0x3c>
 801e8ca:	4629      	mov	r1, r5
 801e8cc:	4630      	mov	r0, r6
 801e8ce:	f7ff fdb1 	bl	801e434 <_Balloc>
 801e8d2:	4602      	mov	r2, r0
 801e8d4:	b928      	cbnz	r0, 801e8e2 <__mdiff+0x2e>
 801e8d6:	4b3f      	ldr	r3, [pc, #252]	@ (801e9d4 <__mdiff+0x120>)
 801e8d8:	f240 2137 	movw	r1, #567	@ 0x237
 801e8dc:	483e      	ldr	r0, [pc, #248]	@ (801e9d8 <__mdiff+0x124>)
 801e8de:	f000 f9b7 	bl	801ec50 <__assert_func>
 801e8e2:	2301      	movs	r3, #1
 801e8e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e8e8:	4610      	mov	r0, r2
 801e8ea:	b003      	add	sp, #12
 801e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8f0:	bfbc      	itt	lt
 801e8f2:	464b      	movlt	r3, r9
 801e8f4:	46a1      	movlt	r9, r4
 801e8f6:	4630      	mov	r0, r6
 801e8f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e8fc:	bfba      	itte	lt
 801e8fe:	461c      	movlt	r4, r3
 801e900:	2501      	movlt	r5, #1
 801e902:	2500      	movge	r5, #0
 801e904:	f7ff fd96 	bl	801e434 <_Balloc>
 801e908:	4602      	mov	r2, r0
 801e90a:	b918      	cbnz	r0, 801e914 <__mdiff+0x60>
 801e90c:	4b31      	ldr	r3, [pc, #196]	@ (801e9d4 <__mdiff+0x120>)
 801e90e:	f240 2145 	movw	r1, #581	@ 0x245
 801e912:	e7e3      	b.n	801e8dc <__mdiff+0x28>
 801e914:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e918:	6926      	ldr	r6, [r4, #16]
 801e91a:	60c5      	str	r5, [r0, #12]
 801e91c:	f109 0310 	add.w	r3, r9, #16
 801e920:	f109 0514 	add.w	r5, r9, #20
 801e924:	f104 0e14 	add.w	lr, r4, #20
 801e928:	f100 0b14 	add.w	fp, r0, #20
 801e92c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e930:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e934:	9301      	str	r3, [sp, #4]
 801e936:	46d9      	mov	r9, fp
 801e938:	f04f 0c00 	mov.w	ip, #0
 801e93c:	9b01      	ldr	r3, [sp, #4]
 801e93e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e942:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e946:	9301      	str	r3, [sp, #4]
 801e948:	fa1f f38a 	uxth.w	r3, sl
 801e94c:	4619      	mov	r1, r3
 801e94e:	b283      	uxth	r3, r0
 801e950:	1acb      	subs	r3, r1, r3
 801e952:	0c00      	lsrs	r0, r0, #16
 801e954:	4463      	add	r3, ip
 801e956:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e95a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e95e:	b29b      	uxth	r3, r3
 801e960:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e964:	4576      	cmp	r6, lr
 801e966:	f849 3b04 	str.w	r3, [r9], #4
 801e96a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e96e:	d8e5      	bhi.n	801e93c <__mdiff+0x88>
 801e970:	1b33      	subs	r3, r6, r4
 801e972:	3b15      	subs	r3, #21
 801e974:	f023 0303 	bic.w	r3, r3, #3
 801e978:	3415      	adds	r4, #21
 801e97a:	3304      	adds	r3, #4
 801e97c:	42a6      	cmp	r6, r4
 801e97e:	bf38      	it	cc
 801e980:	2304      	movcc	r3, #4
 801e982:	441d      	add	r5, r3
 801e984:	445b      	add	r3, fp
 801e986:	461e      	mov	r6, r3
 801e988:	462c      	mov	r4, r5
 801e98a:	4544      	cmp	r4, r8
 801e98c:	d30e      	bcc.n	801e9ac <__mdiff+0xf8>
 801e98e:	f108 0103 	add.w	r1, r8, #3
 801e992:	1b49      	subs	r1, r1, r5
 801e994:	f021 0103 	bic.w	r1, r1, #3
 801e998:	3d03      	subs	r5, #3
 801e99a:	45a8      	cmp	r8, r5
 801e99c:	bf38      	it	cc
 801e99e:	2100      	movcc	r1, #0
 801e9a0:	440b      	add	r3, r1
 801e9a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e9a6:	b191      	cbz	r1, 801e9ce <__mdiff+0x11a>
 801e9a8:	6117      	str	r7, [r2, #16]
 801e9aa:	e79d      	b.n	801e8e8 <__mdiff+0x34>
 801e9ac:	f854 1b04 	ldr.w	r1, [r4], #4
 801e9b0:	46e6      	mov	lr, ip
 801e9b2:	0c08      	lsrs	r0, r1, #16
 801e9b4:	fa1c fc81 	uxtah	ip, ip, r1
 801e9b8:	4471      	add	r1, lr
 801e9ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e9be:	b289      	uxth	r1, r1
 801e9c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e9c4:	f846 1b04 	str.w	r1, [r6], #4
 801e9c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e9cc:	e7dd      	b.n	801e98a <__mdiff+0xd6>
 801e9ce:	3f01      	subs	r7, #1
 801e9d0:	e7e7      	b.n	801e9a2 <__mdiff+0xee>
 801e9d2:	bf00      	nop
 801e9d4:	0802228a 	.word	0x0802228a
 801e9d8:	080222f3 	.word	0x080222f3

0801e9dc <__d2b>:
 801e9dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e9e0:	460f      	mov	r7, r1
 801e9e2:	2101      	movs	r1, #1
 801e9e4:	ec59 8b10 	vmov	r8, r9, d0
 801e9e8:	4616      	mov	r6, r2
 801e9ea:	f7ff fd23 	bl	801e434 <_Balloc>
 801e9ee:	4604      	mov	r4, r0
 801e9f0:	b930      	cbnz	r0, 801ea00 <__d2b+0x24>
 801e9f2:	4602      	mov	r2, r0
 801e9f4:	4b23      	ldr	r3, [pc, #140]	@ (801ea84 <__d2b+0xa8>)
 801e9f6:	4824      	ldr	r0, [pc, #144]	@ (801ea88 <__d2b+0xac>)
 801e9f8:	f240 310f 	movw	r1, #783	@ 0x30f
 801e9fc:	f000 f928 	bl	801ec50 <__assert_func>
 801ea00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ea04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ea08:	b10d      	cbz	r5, 801ea0e <__d2b+0x32>
 801ea0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ea0e:	9301      	str	r3, [sp, #4]
 801ea10:	f1b8 0300 	subs.w	r3, r8, #0
 801ea14:	d023      	beq.n	801ea5e <__d2b+0x82>
 801ea16:	4668      	mov	r0, sp
 801ea18:	9300      	str	r3, [sp, #0]
 801ea1a:	f7ff fd9e 	bl	801e55a <__lo0bits>
 801ea1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ea22:	b1d0      	cbz	r0, 801ea5a <__d2b+0x7e>
 801ea24:	f1c0 0320 	rsb	r3, r0, #32
 801ea28:	fa02 f303 	lsl.w	r3, r2, r3
 801ea2c:	430b      	orrs	r3, r1
 801ea2e:	40c2      	lsrs	r2, r0
 801ea30:	6163      	str	r3, [r4, #20]
 801ea32:	9201      	str	r2, [sp, #4]
 801ea34:	9b01      	ldr	r3, [sp, #4]
 801ea36:	61a3      	str	r3, [r4, #24]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	bf0c      	ite	eq
 801ea3c:	2201      	moveq	r2, #1
 801ea3e:	2202      	movne	r2, #2
 801ea40:	6122      	str	r2, [r4, #16]
 801ea42:	b1a5      	cbz	r5, 801ea6e <__d2b+0x92>
 801ea44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ea48:	4405      	add	r5, r0
 801ea4a:	603d      	str	r5, [r7, #0]
 801ea4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ea50:	6030      	str	r0, [r6, #0]
 801ea52:	4620      	mov	r0, r4
 801ea54:	b003      	add	sp, #12
 801ea56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea5a:	6161      	str	r1, [r4, #20]
 801ea5c:	e7ea      	b.n	801ea34 <__d2b+0x58>
 801ea5e:	a801      	add	r0, sp, #4
 801ea60:	f7ff fd7b 	bl	801e55a <__lo0bits>
 801ea64:	9b01      	ldr	r3, [sp, #4]
 801ea66:	6163      	str	r3, [r4, #20]
 801ea68:	3020      	adds	r0, #32
 801ea6a:	2201      	movs	r2, #1
 801ea6c:	e7e8      	b.n	801ea40 <__d2b+0x64>
 801ea6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ea72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ea76:	6038      	str	r0, [r7, #0]
 801ea78:	6918      	ldr	r0, [r3, #16]
 801ea7a:	f7ff fd4f 	bl	801e51c <__hi0bits>
 801ea7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ea82:	e7e5      	b.n	801ea50 <__d2b+0x74>
 801ea84:	0802228a 	.word	0x0802228a
 801ea88:	080222f3 	.word	0x080222f3

0801ea8c <__ssputs_r>:
 801ea8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea90:	688e      	ldr	r6, [r1, #8]
 801ea92:	461f      	mov	r7, r3
 801ea94:	42be      	cmp	r6, r7
 801ea96:	680b      	ldr	r3, [r1, #0]
 801ea98:	4682      	mov	sl, r0
 801ea9a:	460c      	mov	r4, r1
 801ea9c:	4690      	mov	r8, r2
 801ea9e:	d82d      	bhi.n	801eafc <__ssputs_r+0x70>
 801eaa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801eaa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801eaa8:	d026      	beq.n	801eaf8 <__ssputs_r+0x6c>
 801eaaa:	6965      	ldr	r5, [r4, #20]
 801eaac:	6909      	ldr	r1, [r1, #16]
 801eaae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eab2:	eba3 0901 	sub.w	r9, r3, r1
 801eab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eaba:	1c7b      	adds	r3, r7, #1
 801eabc:	444b      	add	r3, r9
 801eabe:	106d      	asrs	r5, r5, #1
 801eac0:	429d      	cmp	r5, r3
 801eac2:	bf38      	it	cc
 801eac4:	461d      	movcc	r5, r3
 801eac6:	0553      	lsls	r3, r2, #21
 801eac8:	d527      	bpl.n	801eb1a <__ssputs_r+0x8e>
 801eaca:	4629      	mov	r1, r5
 801eacc:	f7fc f82a 	bl	801ab24 <_malloc_r>
 801ead0:	4606      	mov	r6, r0
 801ead2:	b360      	cbz	r0, 801eb2e <__ssputs_r+0xa2>
 801ead4:	6921      	ldr	r1, [r4, #16]
 801ead6:	464a      	mov	r2, r9
 801ead8:	f7fc ffa6 	bl	801ba28 <memcpy>
 801eadc:	89a3      	ldrh	r3, [r4, #12]
 801eade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801eae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eae6:	81a3      	strh	r3, [r4, #12]
 801eae8:	6126      	str	r6, [r4, #16]
 801eaea:	6165      	str	r5, [r4, #20]
 801eaec:	444e      	add	r6, r9
 801eaee:	eba5 0509 	sub.w	r5, r5, r9
 801eaf2:	6026      	str	r6, [r4, #0]
 801eaf4:	60a5      	str	r5, [r4, #8]
 801eaf6:	463e      	mov	r6, r7
 801eaf8:	42be      	cmp	r6, r7
 801eafa:	d900      	bls.n	801eafe <__ssputs_r+0x72>
 801eafc:	463e      	mov	r6, r7
 801eafe:	6820      	ldr	r0, [r4, #0]
 801eb00:	4632      	mov	r2, r6
 801eb02:	4641      	mov	r1, r8
 801eb04:	f7fc fe8e 	bl	801b824 <memmove>
 801eb08:	68a3      	ldr	r3, [r4, #8]
 801eb0a:	1b9b      	subs	r3, r3, r6
 801eb0c:	60a3      	str	r3, [r4, #8]
 801eb0e:	6823      	ldr	r3, [r4, #0]
 801eb10:	4433      	add	r3, r6
 801eb12:	6023      	str	r3, [r4, #0]
 801eb14:	2000      	movs	r0, #0
 801eb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb1a:	462a      	mov	r2, r5
 801eb1c:	f7fc fa76 	bl	801b00c <_realloc_r>
 801eb20:	4606      	mov	r6, r0
 801eb22:	2800      	cmp	r0, #0
 801eb24:	d1e0      	bne.n	801eae8 <__ssputs_r+0x5c>
 801eb26:	6921      	ldr	r1, [r4, #16]
 801eb28:	4650      	mov	r0, sl
 801eb2a:	f7fd f853 	bl	801bbd4 <_free_r>
 801eb2e:	230c      	movs	r3, #12
 801eb30:	f8ca 3000 	str.w	r3, [sl]
 801eb34:	89a3      	ldrh	r3, [r4, #12]
 801eb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eb3a:	81a3      	strh	r3, [r4, #12]
 801eb3c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb40:	e7e9      	b.n	801eb16 <__ssputs_r+0x8a>

0801eb42 <__swhatbuf_r>:
 801eb42:	b570      	push	{r4, r5, r6, lr}
 801eb44:	460c      	mov	r4, r1
 801eb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb4a:	2900      	cmp	r1, #0
 801eb4c:	b096      	sub	sp, #88	@ 0x58
 801eb4e:	4615      	mov	r5, r2
 801eb50:	461e      	mov	r6, r3
 801eb52:	da07      	bge.n	801eb64 <__swhatbuf_r+0x22>
 801eb54:	89a1      	ldrh	r1, [r4, #12]
 801eb56:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801eb5a:	d117      	bne.n	801eb8c <__swhatbuf_r+0x4a>
 801eb5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eb60:	4608      	mov	r0, r1
 801eb62:	e00f      	b.n	801eb84 <__swhatbuf_r+0x42>
 801eb64:	466a      	mov	r2, sp
 801eb66:	f000 f851 	bl	801ec0c <_fstat_r>
 801eb6a:	2800      	cmp	r0, #0
 801eb6c:	dbf2      	blt.n	801eb54 <__swhatbuf_r+0x12>
 801eb6e:	9901      	ldr	r1, [sp, #4]
 801eb70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801eb74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801eb78:	4259      	negs	r1, r3
 801eb7a:	4159      	adcs	r1, r3
 801eb7c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801eb80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eb84:	6031      	str	r1, [r6, #0]
 801eb86:	602b      	str	r3, [r5, #0]
 801eb88:	b016      	add	sp, #88	@ 0x58
 801eb8a:	bd70      	pop	{r4, r5, r6, pc}
 801eb8c:	2100      	movs	r1, #0
 801eb8e:	2340      	movs	r3, #64	@ 0x40
 801eb90:	e7e6      	b.n	801eb60 <__swhatbuf_r+0x1e>

0801eb92 <__smakebuf_r>:
 801eb92:	898b      	ldrh	r3, [r1, #12]
 801eb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eb96:	079d      	lsls	r5, r3, #30
 801eb98:	4606      	mov	r6, r0
 801eb9a:	460c      	mov	r4, r1
 801eb9c:	d507      	bpl.n	801ebae <__smakebuf_r+0x1c>
 801eb9e:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 801eba2:	6023      	str	r3, [r4, #0]
 801eba4:	6123      	str	r3, [r4, #16]
 801eba6:	2301      	movs	r3, #1
 801eba8:	6163      	str	r3, [r4, #20]
 801ebaa:	b003      	add	sp, #12
 801ebac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebae:	ab01      	add	r3, sp, #4
 801ebb0:	466a      	mov	r2, sp
 801ebb2:	f7ff ffc6 	bl	801eb42 <__swhatbuf_r>
 801ebb6:	9f00      	ldr	r7, [sp, #0]
 801ebb8:	4605      	mov	r5, r0
 801ebba:	4639      	mov	r1, r7
 801ebbc:	4630      	mov	r0, r6
 801ebbe:	f7fb ffb1 	bl	801ab24 <_malloc_r>
 801ebc2:	b948      	cbnz	r0, 801ebd8 <__smakebuf_r+0x46>
 801ebc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ebc8:	059a      	lsls	r2, r3, #22
 801ebca:	d4ee      	bmi.n	801ebaa <__smakebuf_r+0x18>
 801ebcc:	f023 0303 	bic.w	r3, r3, #3
 801ebd0:	f043 0302 	orr.w	r3, r3, #2
 801ebd4:	81a3      	strh	r3, [r4, #12]
 801ebd6:	e7e2      	b.n	801eb9e <__smakebuf_r+0xc>
 801ebd8:	89a3      	ldrh	r3, [r4, #12]
 801ebda:	6020      	str	r0, [r4, #0]
 801ebdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ebe0:	81a3      	strh	r3, [r4, #12]
 801ebe2:	9b01      	ldr	r3, [sp, #4]
 801ebe4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ebe8:	b15b      	cbz	r3, 801ec02 <__smakebuf_r+0x70>
 801ebea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebee:	4630      	mov	r0, r6
 801ebf0:	f000 f81e 	bl	801ec30 <_isatty_r>
 801ebf4:	b128      	cbz	r0, 801ec02 <__smakebuf_r+0x70>
 801ebf6:	89a3      	ldrh	r3, [r4, #12]
 801ebf8:	f023 0303 	bic.w	r3, r3, #3
 801ebfc:	f043 0301 	orr.w	r3, r3, #1
 801ec00:	81a3      	strh	r3, [r4, #12]
 801ec02:	89a3      	ldrh	r3, [r4, #12]
 801ec04:	431d      	orrs	r5, r3
 801ec06:	81a5      	strh	r5, [r4, #12]
 801ec08:	e7cf      	b.n	801ebaa <__smakebuf_r+0x18>
	...

0801ec0c <_fstat_r>:
 801ec0c:	b538      	push	{r3, r4, r5, lr}
 801ec0e:	4d07      	ldr	r5, [pc, #28]	@ (801ec2c <_fstat_r+0x20>)
 801ec10:	2300      	movs	r3, #0
 801ec12:	4604      	mov	r4, r0
 801ec14:	4608      	mov	r0, r1
 801ec16:	4611      	mov	r1, r2
 801ec18:	602b      	str	r3, [r5, #0]
 801ec1a:	f7e5 f8a8 	bl	8003d6e <_fstat>
 801ec1e:	1c43      	adds	r3, r0, #1
 801ec20:	d102      	bne.n	801ec28 <_fstat_r+0x1c>
 801ec22:	682b      	ldr	r3, [r5, #0]
 801ec24:	b103      	cbz	r3, 801ec28 <_fstat_r+0x1c>
 801ec26:	6023      	str	r3, [r4, #0]
 801ec28:	bd38      	pop	{r3, r4, r5, pc}
 801ec2a:	bf00      	nop
 801ec2c:	20011ed4 	.word	0x20011ed4

0801ec30 <_isatty_r>:
 801ec30:	b538      	push	{r3, r4, r5, lr}
 801ec32:	4d06      	ldr	r5, [pc, #24]	@ (801ec4c <_isatty_r+0x1c>)
 801ec34:	2300      	movs	r3, #0
 801ec36:	4604      	mov	r4, r0
 801ec38:	4608      	mov	r0, r1
 801ec3a:	602b      	str	r3, [r5, #0]
 801ec3c:	f7e5 f8a7 	bl	8003d8e <_isatty>
 801ec40:	1c43      	adds	r3, r0, #1
 801ec42:	d102      	bne.n	801ec4a <_isatty_r+0x1a>
 801ec44:	682b      	ldr	r3, [r5, #0]
 801ec46:	b103      	cbz	r3, 801ec4a <_isatty_r+0x1a>
 801ec48:	6023      	str	r3, [r4, #0]
 801ec4a:	bd38      	pop	{r3, r4, r5, pc}
 801ec4c:	20011ed4 	.word	0x20011ed4

0801ec50 <__assert_func>:
 801ec50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ec52:	4614      	mov	r4, r2
 801ec54:	461a      	mov	r2, r3
 801ec56:	4b09      	ldr	r3, [pc, #36]	@ (801ec7c <__assert_func+0x2c>)
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	4605      	mov	r5, r0
 801ec5c:	68d8      	ldr	r0, [r3, #12]
 801ec5e:	b14c      	cbz	r4, 801ec74 <__assert_func+0x24>
 801ec60:	4b07      	ldr	r3, [pc, #28]	@ (801ec80 <__assert_func+0x30>)
 801ec62:	9100      	str	r1, [sp, #0]
 801ec64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ec68:	4906      	ldr	r1, [pc, #24]	@ (801ec84 <__assert_func+0x34>)
 801ec6a:	462b      	mov	r3, r5
 801ec6c:	f000 f82e 	bl	801eccc <fiprintf>
 801ec70:	f000 fd13 	bl	801f69a <abort>
 801ec74:	4b04      	ldr	r3, [pc, #16]	@ (801ec88 <__assert_func+0x38>)
 801ec76:	461c      	mov	r4, r3
 801ec78:	e7f3      	b.n	801ec62 <__assert_func+0x12>
 801ec7a:	bf00      	nop
 801ec7c:	20003554 	.word	0x20003554
 801ec80:	08022356 	.word	0x08022356
 801ec84:	08022363 	.word	0x08022363
 801ec88:	08022391 	.word	0x08022391

0801ec8c <__ascii_mbtowc>:
 801ec8c:	b082      	sub	sp, #8
 801ec8e:	b901      	cbnz	r1, 801ec92 <__ascii_mbtowc+0x6>
 801ec90:	a901      	add	r1, sp, #4
 801ec92:	b142      	cbz	r2, 801eca6 <__ascii_mbtowc+0x1a>
 801ec94:	b14b      	cbz	r3, 801ecaa <__ascii_mbtowc+0x1e>
 801ec96:	7813      	ldrb	r3, [r2, #0]
 801ec98:	600b      	str	r3, [r1, #0]
 801ec9a:	7812      	ldrb	r2, [r2, #0]
 801ec9c:	1e10      	subs	r0, r2, #0
 801ec9e:	bf18      	it	ne
 801eca0:	2001      	movne	r0, #1
 801eca2:	b002      	add	sp, #8
 801eca4:	4770      	bx	lr
 801eca6:	4610      	mov	r0, r2
 801eca8:	e7fb      	b.n	801eca2 <__ascii_mbtowc+0x16>
 801ecaa:	f06f 0001 	mvn.w	r0, #1
 801ecae:	e7f8      	b.n	801eca2 <__ascii_mbtowc+0x16>

0801ecb0 <__ascii_wctomb>:
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	4608      	mov	r0, r1
 801ecb4:	b141      	cbz	r1, 801ecc8 <__ascii_wctomb+0x18>
 801ecb6:	2aff      	cmp	r2, #255	@ 0xff
 801ecb8:	d904      	bls.n	801ecc4 <__ascii_wctomb+0x14>
 801ecba:	228a      	movs	r2, #138	@ 0x8a
 801ecbc:	601a      	str	r2, [r3, #0]
 801ecbe:	f04f 30ff 	mov.w	r0, #4294967295
 801ecc2:	4770      	bx	lr
 801ecc4:	700a      	strb	r2, [r1, #0]
 801ecc6:	2001      	movs	r0, #1
 801ecc8:	4770      	bx	lr
	...

0801eccc <fiprintf>:
 801eccc:	b40e      	push	{r1, r2, r3}
 801ecce:	b503      	push	{r0, r1, lr}
 801ecd0:	4601      	mov	r1, r0
 801ecd2:	ab03      	add	r3, sp, #12
 801ecd4:	4805      	ldr	r0, [pc, #20]	@ (801ecec <fiprintf+0x20>)
 801ecd6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecda:	6800      	ldr	r0, [r0, #0]
 801ecdc:	9301      	str	r3, [sp, #4]
 801ecde:	f000 f807 	bl	801ecf0 <_vfiprintf_r>
 801ece2:	b002      	add	sp, #8
 801ece4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ece8:	b003      	add	sp, #12
 801ecea:	4770      	bx	lr
 801ecec:	20003554 	.word	0x20003554

0801ecf0 <_vfiprintf_r>:
 801ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecf4:	b0bb      	sub	sp, #236	@ 0xec
 801ecf6:	460f      	mov	r7, r1
 801ecf8:	4693      	mov	fp, r2
 801ecfa:	461c      	mov	r4, r3
 801ecfc:	461d      	mov	r5, r3
 801ecfe:	9000      	str	r0, [sp, #0]
 801ed00:	b118      	cbz	r0, 801ed0a <_vfiprintf_r+0x1a>
 801ed02:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801ed04:	b90b      	cbnz	r3, 801ed0a <_vfiprintf_r+0x1a>
 801ed06:	f7fc fc2d 	bl	801b564 <__sinit>
 801ed0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ed0c:	07da      	lsls	r2, r3, #31
 801ed0e:	d405      	bmi.n	801ed1c <_vfiprintf_r+0x2c>
 801ed10:	89bb      	ldrh	r3, [r7, #12]
 801ed12:	059b      	lsls	r3, r3, #22
 801ed14:	d402      	bmi.n	801ed1c <_vfiprintf_r+0x2c>
 801ed16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ed18:	f7fc fe70 	bl	801b9fc <__retarget_lock_acquire_recursive>
 801ed1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ed20:	049e      	lsls	r6, r3, #18
 801ed22:	d406      	bmi.n	801ed32 <_vfiprintf_r+0x42>
 801ed24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ed26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ed2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801ed2e:	81bb      	strh	r3, [r7, #12]
 801ed30:	667a      	str	r2, [r7, #100]	@ 0x64
 801ed32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ed34:	0498      	lsls	r0, r3, #18
 801ed36:	d508      	bpl.n	801ed4a <_vfiprintf_r+0x5a>
 801ed38:	07d9      	lsls	r1, r3, #31
 801ed3a:	d512      	bpl.n	801ed62 <_vfiprintf_r+0x72>
 801ed3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ed40:	9303      	str	r3, [sp, #12]
 801ed42:	9803      	ldr	r0, [sp, #12]
 801ed44:	b03b      	add	sp, #236	@ 0xec
 801ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed4a:	89bb      	ldrh	r3, [r7, #12]
 801ed4c:	071a      	lsls	r2, r3, #28
 801ed4e:	d501      	bpl.n	801ed54 <_vfiprintf_r+0x64>
 801ed50:	693b      	ldr	r3, [r7, #16]
 801ed52:	b96b      	cbnz	r3, 801ed70 <_vfiprintf_r+0x80>
 801ed54:	9800      	ldr	r0, [sp, #0]
 801ed56:	4639      	mov	r1, r7
 801ed58:	f7fe fc4c 	bl	801d5f4 <__swsetup_r>
 801ed5c:	b140      	cbz	r0, 801ed70 <_vfiprintf_r+0x80>
 801ed5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ed60:	e7ea      	b.n	801ed38 <_vfiprintf_r+0x48>
 801ed62:	89bb      	ldrh	r3, [r7, #12]
 801ed64:	059b      	lsls	r3, r3, #22
 801ed66:	d4e9      	bmi.n	801ed3c <_vfiprintf_r+0x4c>
 801ed68:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ed6a:	f7fc fe48 	bl	801b9fe <__retarget_lock_release_recursive>
 801ed6e:	e7e5      	b.n	801ed3c <_vfiprintf_r+0x4c>
 801ed70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801ed74:	f003 021a 	and.w	r2, r3, #26
 801ed78:	2a0a      	cmp	r2, #10
 801ed7a:	d114      	bne.n	801eda6 <_vfiprintf_r+0xb6>
 801ed7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ed80:	2a00      	cmp	r2, #0
 801ed82:	db10      	blt.n	801eda6 <_vfiprintf_r+0xb6>
 801ed84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ed86:	07d6      	lsls	r6, r2, #31
 801ed88:	d404      	bmi.n	801ed94 <_vfiprintf_r+0xa4>
 801ed8a:	059d      	lsls	r5, r3, #22
 801ed8c:	d402      	bmi.n	801ed94 <_vfiprintf_r+0xa4>
 801ed8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ed90:	f7fc fe35 	bl	801b9fe <__retarget_lock_release_recursive>
 801ed94:	9800      	ldr	r0, [sp, #0]
 801ed96:	4623      	mov	r3, r4
 801ed98:	465a      	mov	r2, fp
 801ed9a:	4639      	mov	r1, r7
 801ed9c:	b03b      	add	sp, #236	@ 0xec
 801ed9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda2:	f000 bc2d 	b.w	801f600 <__sbprintf>
 801eda6:	2300      	movs	r3, #0
 801eda8:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801edac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801edb0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801edb4:	ae11      	add	r6, sp, #68	@ 0x44
 801edb6:	960e      	str	r6, [sp, #56]	@ 0x38
 801edb8:	9303      	str	r3, [sp, #12]
 801edba:	465b      	mov	r3, fp
 801edbc:	461c      	mov	r4, r3
 801edbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edc2:	b10a      	cbz	r2, 801edc8 <_vfiprintf_r+0xd8>
 801edc4:	2a25      	cmp	r2, #37	@ 0x25
 801edc6:	d1f9      	bne.n	801edbc <_vfiprintf_r+0xcc>
 801edc8:	ebb4 080b 	subs.w	r8, r4, fp
 801edcc:	d00d      	beq.n	801edea <_vfiprintf_r+0xfa>
 801edce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edd0:	4443      	add	r3, r8
 801edd2:	9310      	str	r3, [sp, #64]	@ 0x40
 801edd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edd6:	3301      	adds	r3, #1
 801edd8:	2b07      	cmp	r3, #7
 801edda:	e9c6 b800 	strd	fp, r8, [r6]
 801edde:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ede0:	dc75      	bgt.n	801eece <_vfiprintf_r+0x1de>
 801ede2:	3608      	adds	r6, #8
 801ede4:	9b03      	ldr	r3, [sp, #12]
 801ede6:	4443      	add	r3, r8
 801ede8:	9303      	str	r3, [sp, #12]
 801edea:	7823      	ldrb	r3, [r4, #0]
 801edec:	2b00      	cmp	r3, #0
 801edee:	f000 83c9 	beq.w	801f584 <_vfiprintf_r+0x894>
 801edf2:	2300      	movs	r3, #0
 801edf4:	f04f 32ff 	mov.w	r2, #4294967295
 801edf8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801edfc:	3401      	adds	r4, #1
 801edfe:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801ee02:	469a      	mov	sl, r3
 801ee04:	46a3      	mov	fp, r4
 801ee06:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801ee0a:	f1a3 0220 	sub.w	r2, r3, #32
 801ee0e:	2a5a      	cmp	r2, #90	@ 0x5a
 801ee10:	f200 8312 	bhi.w	801f438 <_vfiprintf_r+0x748>
 801ee14:	e8df f012 	tbh	[pc, r2, lsl #1]
 801ee18:	0310009a 	.word	0x0310009a
 801ee1c:	00a20310 	.word	0x00a20310
 801ee20:	03100310 	.word	0x03100310
 801ee24:	00820310 	.word	0x00820310
 801ee28:	03100310 	.word	0x03100310
 801ee2c:	00af00a5 	.word	0x00af00a5
 801ee30:	00ac0310 	.word	0x00ac0310
 801ee34:	031000b1 	.word	0x031000b1
 801ee38:	00d000cd 	.word	0x00d000cd
 801ee3c:	00d000d0 	.word	0x00d000d0
 801ee40:	00d000d0 	.word	0x00d000d0
 801ee44:	00d000d0 	.word	0x00d000d0
 801ee48:	00d000d0 	.word	0x00d000d0
 801ee4c:	03100310 	.word	0x03100310
 801ee50:	03100310 	.word	0x03100310
 801ee54:	03100310 	.word	0x03100310
 801ee58:	03100310 	.word	0x03100310
 801ee5c:	00f60310 	.word	0x00f60310
 801ee60:	03100103 	.word	0x03100103
 801ee64:	03100310 	.word	0x03100310
 801ee68:	03100310 	.word	0x03100310
 801ee6c:	03100310 	.word	0x03100310
 801ee70:	03100310 	.word	0x03100310
 801ee74:	01510310 	.word	0x01510310
 801ee78:	03100310 	.word	0x03100310
 801ee7c:	01980310 	.word	0x01980310
 801ee80:	02770310 	.word	0x02770310
 801ee84:	03100310 	.word	0x03100310
 801ee88:	03100297 	.word	0x03100297
 801ee8c:	03100310 	.word	0x03100310
 801ee90:	03100310 	.word	0x03100310
 801ee94:	03100310 	.word	0x03100310
 801ee98:	03100310 	.word	0x03100310
 801ee9c:	00f60310 	.word	0x00f60310
 801eea0:	03100105 	.word	0x03100105
 801eea4:	03100310 	.word	0x03100310
 801eea8:	010500df 	.word	0x010500df
 801eeac:	031000f0 	.word	0x031000f0
 801eeb0:	031000ea 	.word	0x031000ea
 801eeb4:	01530131 	.word	0x01530131
 801eeb8:	00f00188 	.word	0x00f00188
 801eebc:	01980310 	.word	0x01980310
 801eec0:	02790098 	.word	0x02790098
 801eec4:	03100310 	.word	0x03100310
 801eec8:	03100065 	.word	0x03100065
 801eecc:	0098      	.short	0x0098
 801eece:	9800      	ldr	r0, [sp, #0]
 801eed0:	aa0e      	add	r2, sp, #56	@ 0x38
 801eed2:	4639      	mov	r1, r7
 801eed4:	f000 fbd4 	bl	801f680 <__sprint_r>
 801eed8:	2800      	cmp	r0, #0
 801eeda:	f040 8332 	bne.w	801f542 <_vfiprintf_r+0x852>
 801eede:	ae11      	add	r6, sp, #68	@ 0x44
 801eee0:	e780      	b.n	801ede4 <_vfiprintf_r+0xf4>
 801eee2:	4a98      	ldr	r2, [pc, #608]	@ (801f144 <_vfiprintf_r+0x454>)
 801eee4:	9205      	str	r2, [sp, #20]
 801eee6:	f01a 0220 	ands.w	r2, sl, #32
 801eeea:	f000 822e 	beq.w	801f34a <_vfiprintf_r+0x65a>
 801eeee:	3507      	adds	r5, #7
 801eef0:	f025 0507 	bic.w	r5, r5, #7
 801eef4:	46a8      	mov	r8, r5
 801eef6:	686d      	ldr	r5, [r5, #4]
 801eef8:	f858 4b08 	ldr.w	r4, [r8], #8
 801eefc:	f01a 0f01 	tst.w	sl, #1
 801ef00:	d009      	beq.n	801ef16 <_vfiprintf_r+0x226>
 801ef02:	ea54 0205 	orrs.w	r2, r4, r5
 801ef06:	bf1f      	itttt	ne
 801ef08:	2230      	movne	r2, #48	@ 0x30
 801ef0a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801ef0e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801ef12:	f04a 0a02 	orrne.w	sl, sl, #2
 801ef16:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801ef1a:	e111      	b.n	801f140 <_vfiprintf_r+0x450>
 801ef1c:	9800      	ldr	r0, [sp, #0]
 801ef1e:	f7fe fbbf 	bl	801d6a0 <_localeconv_r>
 801ef22:	6843      	ldr	r3, [r0, #4]
 801ef24:	9308      	str	r3, [sp, #32]
 801ef26:	4618      	mov	r0, r3
 801ef28:	f7e1 f9d2 	bl	80002d0 <strlen>
 801ef2c:	9007      	str	r0, [sp, #28]
 801ef2e:	9800      	ldr	r0, [sp, #0]
 801ef30:	f7fe fbb6 	bl	801d6a0 <_localeconv_r>
 801ef34:	6883      	ldr	r3, [r0, #8]
 801ef36:	9306      	str	r3, [sp, #24]
 801ef38:	9b07      	ldr	r3, [sp, #28]
 801ef3a:	b12b      	cbz	r3, 801ef48 <_vfiprintf_r+0x258>
 801ef3c:	9b06      	ldr	r3, [sp, #24]
 801ef3e:	b11b      	cbz	r3, 801ef48 <_vfiprintf_r+0x258>
 801ef40:	781b      	ldrb	r3, [r3, #0]
 801ef42:	b10b      	cbz	r3, 801ef48 <_vfiprintf_r+0x258>
 801ef44:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 801ef48:	465c      	mov	r4, fp
 801ef4a:	e75b      	b.n	801ee04 <_vfiprintf_r+0x114>
 801ef4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d1f9      	bne.n	801ef48 <_vfiprintf_r+0x258>
 801ef54:	2320      	movs	r3, #32
 801ef56:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801ef5a:	e7f5      	b.n	801ef48 <_vfiprintf_r+0x258>
 801ef5c:	f04a 0a01 	orr.w	sl, sl, #1
 801ef60:	e7f2      	b.n	801ef48 <_vfiprintf_r+0x258>
 801ef62:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef66:	9302      	str	r3, [sp, #8]
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	daed      	bge.n	801ef48 <_vfiprintf_r+0x258>
 801ef6c:	425b      	negs	r3, r3
 801ef6e:	9302      	str	r3, [sp, #8]
 801ef70:	f04a 0a04 	orr.w	sl, sl, #4
 801ef74:	e7e8      	b.n	801ef48 <_vfiprintf_r+0x258>
 801ef76:	232b      	movs	r3, #43	@ 0x2b
 801ef78:	e7ed      	b.n	801ef56 <_vfiprintf_r+0x266>
 801ef7a:	465a      	mov	r2, fp
 801ef7c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801ef80:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef82:	d113      	bne.n	801efac <_vfiprintf_r+0x2bc>
 801ef84:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ef8c:	9301      	str	r3, [sp, #4]
 801ef8e:	4693      	mov	fp, r2
 801ef90:	e7da      	b.n	801ef48 <_vfiprintf_r+0x258>
 801ef92:	f812 3b01 	ldrb.w	r3, [r2], #1
 801ef96:	fb04 0101 	mla	r1, r4, r1, r0
 801ef9a:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 801ef9e:	2809      	cmp	r0, #9
 801efa0:	d9f7      	bls.n	801ef92 <_vfiprintf_r+0x2a2>
 801efa2:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 801efa6:	9101      	str	r1, [sp, #4]
 801efa8:	4693      	mov	fp, r2
 801efaa:	e72e      	b.n	801ee0a <_vfiprintf_r+0x11a>
 801efac:	2100      	movs	r1, #0
 801efae:	240a      	movs	r4, #10
 801efb0:	e7f3      	b.n	801ef9a <_vfiprintf_r+0x2aa>
 801efb2:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 801efb6:	e7c7      	b.n	801ef48 <_vfiprintf_r+0x258>
 801efb8:	2200      	movs	r2, #0
 801efba:	9202      	str	r2, [sp, #8]
 801efbc:	210a      	movs	r1, #10
 801efbe:	9a02      	ldr	r2, [sp, #8]
 801efc0:	3b30      	subs	r3, #48	@ 0x30
 801efc2:	fb01 3302 	mla	r3, r1, r2, r3
 801efc6:	9302      	str	r3, [sp, #8]
 801efc8:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801efcc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 801efd0:	2a09      	cmp	r2, #9
 801efd2:	d9f4      	bls.n	801efbe <_vfiprintf_r+0x2ce>
 801efd4:	e719      	b.n	801ee0a <_vfiprintf_r+0x11a>
 801efd6:	f89b 3000 	ldrb.w	r3, [fp]
 801efda:	2b68      	cmp	r3, #104	@ 0x68
 801efdc:	bf06      	itte	eq
 801efde:	f10b 0b01 	addeq.w	fp, fp, #1
 801efe2:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 801efe6:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 801efea:	e7ad      	b.n	801ef48 <_vfiprintf_r+0x258>
 801efec:	f89b 3000 	ldrb.w	r3, [fp]
 801eff0:	2b6c      	cmp	r3, #108	@ 0x6c
 801eff2:	d104      	bne.n	801effe <_vfiprintf_r+0x30e>
 801eff4:	f10b 0b01 	add.w	fp, fp, #1
 801eff8:	f04a 0a20 	orr.w	sl, sl, #32
 801effc:	e7a4      	b.n	801ef48 <_vfiprintf_r+0x258>
 801effe:	f04a 0a10 	orr.w	sl, sl, #16
 801f002:	e7a1      	b.n	801ef48 <_vfiprintf_r+0x258>
 801f004:	46a8      	mov	r8, r5
 801f006:	2400      	movs	r4, #0
 801f008:	f858 3b04 	ldr.w	r3, [r8], #4
 801f00c:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801f010:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801f014:	2301      	movs	r3, #1
 801f016:	9301      	str	r3, [sp, #4]
 801f018:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801f01c:	e0a9      	b.n	801f172 <_vfiprintf_r+0x482>
 801f01e:	f04a 0a10 	orr.w	sl, sl, #16
 801f022:	f01a 0f20 	tst.w	sl, #32
 801f026:	d011      	beq.n	801f04c <_vfiprintf_r+0x35c>
 801f028:	3507      	adds	r5, #7
 801f02a:	f025 0507 	bic.w	r5, r5, #7
 801f02e:	46a8      	mov	r8, r5
 801f030:	686d      	ldr	r5, [r5, #4]
 801f032:	f858 4b08 	ldr.w	r4, [r8], #8
 801f036:	2d00      	cmp	r5, #0
 801f038:	da06      	bge.n	801f048 <_vfiprintf_r+0x358>
 801f03a:	4264      	negs	r4, r4
 801f03c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801f040:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801f044:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801f048:	2301      	movs	r3, #1
 801f04a:	e048      	b.n	801f0de <_vfiprintf_r+0x3ee>
 801f04c:	46a8      	mov	r8, r5
 801f04e:	f01a 0f10 	tst.w	sl, #16
 801f052:	f858 5b04 	ldr.w	r5, [r8], #4
 801f056:	d002      	beq.n	801f05e <_vfiprintf_r+0x36e>
 801f058:	462c      	mov	r4, r5
 801f05a:	17ed      	asrs	r5, r5, #31
 801f05c:	e7eb      	b.n	801f036 <_vfiprintf_r+0x346>
 801f05e:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801f062:	d003      	beq.n	801f06c <_vfiprintf_r+0x37c>
 801f064:	b22c      	sxth	r4, r5
 801f066:	f345 35c0 	sbfx	r5, r5, #15, #1
 801f06a:	e7e4      	b.n	801f036 <_vfiprintf_r+0x346>
 801f06c:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801f070:	d0f2      	beq.n	801f058 <_vfiprintf_r+0x368>
 801f072:	b26c      	sxtb	r4, r5
 801f074:	f345 15c0 	sbfx	r5, r5, #7, #1
 801f078:	e7dd      	b.n	801f036 <_vfiprintf_r+0x346>
 801f07a:	f01a 0f20 	tst.w	sl, #32
 801f07e:	d007      	beq.n	801f090 <_vfiprintf_r+0x3a0>
 801f080:	9a03      	ldr	r2, [sp, #12]
 801f082:	682b      	ldr	r3, [r5, #0]
 801f084:	9903      	ldr	r1, [sp, #12]
 801f086:	17d2      	asrs	r2, r2, #31
 801f088:	e9c3 1200 	strd	r1, r2, [r3]
 801f08c:	3504      	adds	r5, #4
 801f08e:	e694      	b.n	801edba <_vfiprintf_r+0xca>
 801f090:	f01a 0f10 	tst.w	sl, #16
 801f094:	d003      	beq.n	801f09e <_vfiprintf_r+0x3ae>
 801f096:	682b      	ldr	r3, [r5, #0]
 801f098:	9a03      	ldr	r2, [sp, #12]
 801f09a:	601a      	str	r2, [r3, #0]
 801f09c:	e7f6      	b.n	801f08c <_vfiprintf_r+0x39c>
 801f09e:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801f0a2:	d003      	beq.n	801f0ac <_vfiprintf_r+0x3bc>
 801f0a4:	682b      	ldr	r3, [r5, #0]
 801f0a6:	9a03      	ldr	r2, [sp, #12]
 801f0a8:	801a      	strh	r2, [r3, #0]
 801f0aa:	e7ef      	b.n	801f08c <_vfiprintf_r+0x39c>
 801f0ac:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801f0b0:	d0f1      	beq.n	801f096 <_vfiprintf_r+0x3a6>
 801f0b2:	682b      	ldr	r3, [r5, #0]
 801f0b4:	9a03      	ldr	r2, [sp, #12]
 801f0b6:	701a      	strb	r2, [r3, #0]
 801f0b8:	e7e8      	b.n	801f08c <_vfiprintf_r+0x39c>
 801f0ba:	f04a 0a10 	orr.w	sl, sl, #16
 801f0be:	f01a 0320 	ands.w	r3, sl, #32
 801f0c2:	d01f      	beq.n	801f104 <_vfiprintf_r+0x414>
 801f0c4:	3507      	adds	r5, #7
 801f0c6:	f025 0507 	bic.w	r5, r5, #7
 801f0ca:	46a8      	mov	r8, r5
 801f0cc:	686d      	ldr	r5, [r5, #4]
 801f0ce:	f858 4b08 	ldr.w	r4, [r8], #8
 801f0d2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801f0d6:	2300      	movs	r3, #0
 801f0d8:	2200      	movs	r2, #0
 801f0da:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801f0de:	9a01      	ldr	r2, [sp, #4]
 801f0e0:	2a00      	cmp	r2, #0
 801f0e2:	f2c0 825c 	blt.w	801f59e <_vfiprintf_r+0x8ae>
 801f0e6:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 801f0ea:	9204      	str	r2, [sp, #16]
 801f0ec:	ea54 0205 	orrs.w	r2, r4, r5
 801f0f0:	f040 825b 	bne.w	801f5aa <_vfiprintf_r+0x8ba>
 801f0f4:	9a01      	ldr	r2, [sp, #4]
 801f0f6:	2a00      	cmp	r2, #0
 801f0f8:	f000 8195 	beq.w	801f426 <_vfiprintf_r+0x736>
 801f0fc:	2b01      	cmp	r3, #1
 801f0fe:	f040 8257 	bne.w	801f5b0 <_vfiprintf_r+0x8c0>
 801f102:	e139      	b.n	801f378 <_vfiprintf_r+0x688>
 801f104:	46a8      	mov	r8, r5
 801f106:	f01a 0510 	ands.w	r5, sl, #16
 801f10a:	f858 4b04 	ldr.w	r4, [r8], #4
 801f10e:	d001      	beq.n	801f114 <_vfiprintf_r+0x424>
 801f110:	461d      	mov	r5, r3
 801f112:	e7de      	b.n	801f0d2 <_vfiprintf_r+0x3e2>
 801f114:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801f118:	d001      	beq.n	801f11e <_vfiprintf_r+0x42e>
 801f11a:	b2a4      	uxth	r4, r4
 801f11c:	e7d9      	b.n	801f0d2 <_vfiprintf_r+0x3e2>
 801f11e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801f122:	d0d6      	beq.n	801f0d2 <_vfiprintf_r+0x3e2>
 801f124:	b2e4      	uxtb	r4, r4
 801f126:	e7f3      	b.n	801f110 <_vfiprintf_r+0x420>
 801f128:	46a8      	mov	r8, r5
 801f12a:	f647 0330 	movw	r3, #30768	@ 0x7830
 801f12e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801f132:	f858 4b04 	ldr.w	r4, [r8], #4
 801f136:	4b03      	ldr	r3, [pc, #12]	@ (801f144 <_vfiprintf_r+0x454>)
 801f138:	9305      	str	r3, [sp, #20]
 801f13a:	2500      	movs	r5, #0
 801f13c:	f04a 0a02 	orr.w	sl, sl, #2
 801f140:	2302      	movs	r3, #2
 801f142:	e7c9      	b.n	801f0d8 <_vfiprintf_r+0x3e8>
 801f144:	08022259 	.word	0x08022259
 801f148:	9b01      	ldr	r3, [sp, #4]
 801f14a:	46a8      	mov	r8, r5
 801f14c:	2500      	movs	r5, #0
 801f14e:	42ab      	cmp	r3, r5
 801f150:	f858 9b04 	ldr.w	r9, [r8], #4
 801f154:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801f158:	f2c0 80d0 	blt.w	801f2fc <_vfiprintf_r+0x60c>
 801f15c:	461a      	mov	r2, r3
 801f15e:	4629      	mov	r1, r5
 801f160:	4648      	mov	r0, r9
 801f162:	f7e1 f865 	bl	8000230 <memchr>
 801f166:	4604      	mov	r4, r0
 801f168:	b118      	cbz	r0, 801f172 <_vfiprintf_r+0x482>
 801f16a:	eba0 0309 	sub.w	r3, r0, r9
 801f16e:	9301      	str	r3, [sp, #4]
 801f170:	462c      	mov	r4, r5
 801f172:	9b01      	ldr	r3, [sp, #4]
 801f174:	42a3      	cmp	r3, r4
 801f176:	bfb8      	it	lt
 801f178:	4623      	movlt	r3, r4
 801f17a:	9304      	str	r3, [sp, #16]
 801f17c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801f180:	b113      	cbz	r3, 801f188 <_vfiprintf_r+0x498>
 801f182:	9b04      	ldr	r3, [sp, #16]
 801f184:	3301      	adds	r3, #1
 801f186:	9304      	str	r3, [sp, #16]
 801f188:	f01a 0302 	ands.w	r3, sl, #2
 801f18c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f18e:	bf1e      	ittt	ne
 801f190:	9b04      	ldrne	r3, [sp, #16]
 801f192:	3302      	addne	r3, #2
 801f194:	9304      	strne	r3, [sp, #16]
 801f196:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 801f19a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f19c:	d11f      	bne.n	801f1de <_vfiprintf_r+0x4ee>
 801f19e:	9b02      	ldr	r3, [sp, #8]
 801f1a0:	9a04      	ldr	r2, [sp, #16]
 801f1a2:	1a9d      	subs	r5, r3, r2
 801f1a4:	2d00      	cmp	r5, #0
 801f1a6:	dd1a      	ble.n	801f1de <_vfiprintf_r+0x4ee>
 801f1a8:	4ba8      	ldr	r3, [pc, #672]	@ (801f44c <_vfiprintf_r+0x75c>)
 801f1aa:	6033      	str	r3, [r6, #0]
 801f1ac:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801f1b0:	2d10      	cmp	r5, #16
 801f1b2:	f102 0201 	add.w	r2, r2, #1
 801f1b6:	f106 0008 	add.w	r0, r6, #8
 801f1ba:	f300 814d 	bgt.w	801f458 <_vfiprintf_r+0x768>
 801f1be:	6075      	str	r5, [r6, #4]
 801f1c0:	2a07      	cmp	r2, #7
 801f1c2:	4465      	add	r5, ip
 801f1c4:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801f1c8:	f340 8159 	ble.w	801f47e <_vfiprintf_r+0x78e>
 801f1cc:	9800      	ldr	r0, [sp, #0]
 801f1ce:	aa0e      	add	r2, sp, #56	@ 0x38
 801f1d0:	4639      	mov	r1, r7
 801f1d2:	f000 fa55 	bl	801f680 <__sprint_r>
 801f1d6:	2800      	cmp	r0, #0
 801f1d8:	f040 81b3 	bne.w	801f542 <_vfiprintf_r+0x852>
 801f1dc:	ae11      	add	r6, sp, #68	@ 0x44
 801f1de:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 801f1e2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801f1e6:	b161      	cbz	r1, 801f202 <_vfiprintf_r+0x512>
 801f1e8:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801f1ec:	3301      	adds	r3, #1
 801f1ee:	6031      	str	r1, [r6, #0]
 801f1f0:	2101      	movs	r1, #1
 801f1f2:	440a      	add	r2, r1
 801f1f4:	2b07      	cmp	r3, #7
 801f1f6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801f1fa:	6071      	str	r1, [r6, #4]
 801f1fc:	f300 8141 	bgt.w	801f482 <_vfiprintf_r+0x792>
 801f200:	3608      	adds	r6, #8
 801f202:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f204:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801f208:	b159      	cbz	r1, 801f222 <_vfiprintf_r+0x532>
 801f20a:	a90d      	add	r1, sp, #52	@ 0x34
 801f20c:	3301      	adds	r3, #1
 801f20e:	6031      	str	r1, [r6, #0]
 801f210:	2102      	movs	r1, #2
 801f212:	440a      	add	r2, r1
 801f214:	2b07      	cmp	r3, #7
 801f216:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801f21a:	6071      	str	r1, [r6, #4]
 801f21c:	f300 813a 	bgt.w	801f494 <_vfiprintf_r+0x7a4>
 801f220:	3608      	adds	r6, #8
 801f222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f224:	2b80      	cmp	r3, #128	@ 0x80
 801f226:	d11f      	bne.n	801f268 <_vfiprintf_r+0x578>
 801f228:	9b02      	ldr	r3, [sp, #8]
 801f22a:	9a04      	ldr	r2, [sp, #16]
 801f22c:	1a9d      	subs	r5, r3, r2
 801f22e:	2d00      	cmp	r5, #0
 801f230:	dd1a      	ble.n	801f268 <_vfiprintf_r+0x578>
 801f232:	4b87      	ldr	r3, [pc, #540]	@ (801f450 <_vfiprintf_r+0x760>)
 801f234:	6033      	str	r3, [r6, #0]
 801f236:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801f23a:	2d10      	cmp	r5, #16
 801f23c:	f102 0201 	add.w	r2, r2, #1
 801f240:	f106 0008 	add.w	r0, r6, #8
 801f244:	f300 812f 	bgt.w	801f4a6 <_vfiprintf_r+0x7b6>
 801f248:	6075      	str	r5, [r6, #4]
 801f24a:	2a07      	cmp	r2, #7
 801f24c:	4465      	add	r5, ip
 801f24e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801f252:	f340 813b 	ble.w	801f4cc <_vfiprintf_r+0x7dc>
 801f256:	9800      	ldr	r0, [sp, #0]
 801f258:	aa0e      	add	r2, sp, #56	@ 0x38
 801f25a:	4639      	mov	r1, r7
 801f25c:	f000 fa10 	bl	801f680 <__sprint_r>
 801f260:	2800      	cmp	r0, #0
 801f262:	f040 816e 	bne.w	801f542 <_vfiprintf_r+0x852>
 801f266:	ae11      	add	r6, sp, #68	@ 0x44
 801f268:	9b01      	ldr	r3, [sp, #4]
 801f26a:	1ae4      	subs	r4, r4, r3
 801f26c:	2c00      	cmp	r4, #0
 801f26e:	dd1a      	ble.n	801f2a6 <_vfiprintf_r+0x5b6>
 801f270:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801f274:	4876      	ldr	r0, [pc, #472]	@ (801f450 <_vfiprintf_r+0x760>)
 801f276:	6030      	str	r0, [r6, #0]
 801f278:	2c10      	cmp	r4, #16
 801f27a:	f103 0301 	add.w	r3, r3, #1
 801f27e:	f106 0108 	add.w	r1, r6, #8
 801f282:	f300 8125 	bgt.w	801f4d0 <_vfiprintf_r+0x7e0>
 801f286:	6074      	str	r4, [r6, #4]
 801f288:	2b07      	cmp	r3, #7
 801f28a:	4414      	add	r4, r2
 801f28c:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 801f290:	f340 812f 	ble.w	801f4f2 <_vfiprintf_r+0x802>
 801f294:	9800      	ldr	r0, [sp, #0]
 801f296:	aa0e      	add	r2, sp, #56	@ 0x38
 801f298:	4639      	mov	r1, r7
 801f29a:	f000 f9f1 	bl	801f680 <__sprint_r>
 801f29e:	2800      	cmp	r0, #0
 801f2a0:	f040 814f 	bne.w	801f542 <_vfiprintf_r+0x852>
 801f2a4:	ae11      	add	r6, sp, #68	@ 0x44
 801f2a6:	9b01      	ldr	r3, [sp, #4]
 801f2a8:	9a01      	ldr	r2, [sp, #4]
 801f2aa:	6073      	str	r3, [r6, #4]
 801f2ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2ae:	f8c6 9000 	str.w	r9, [r6]
 801f2b2:	4413      	add	r3, r2
 801f2b4:	9310      	str	r3, [sp, #64]	@ 0x40
 801f2b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2b8:	3301      	adds	r3, #1
 801f2ba:	2b07      	cmp	r3, #7
 801f2bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f2be:	f300 811a 	bgt.w	801f4f6 <_vfiprintf_r+0x806>
 801f2c2:	f106 0308 	add.w	r3, r6, #8
 801f2c6:	f01a 0f04 	tst.w	sl, #4
 801f2ca:	f040 811c 	bne.w	801f506 <_vfiprintf_r+0x816>
 801f2ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f2d2:	9904      	ldr	r1, [sp, #16]
 801f2d4:	428a      	cmp	r2, r1
 801f2d6:	bfac      	ite	ge
 801f2d8:	189b      	addge	r3, r3, r2
 801f2da:	185b      	addlt	r3, r3, r1
 801f2dc:	9303      	str	r3, [sp, #12]
 801f2de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2e0:	b13b      	cbz	r3, 801f2f2 <_vfiprintf_r+0x602>
 801f2e2:	9800      	ldr	r0, [sp, #0]
 801f2e4:	aa0e      	add	r2, sp, #56	@ 0x38
 801f2e6:	4639      	mov	r1, r7
 801f2e8:	f000 f9ca 	bl	801f680 <__sprint_r>
 801f2ec:	2800      	cmp	r0, #0
 801f2ee:	f040 8128 	bne.w	801f542 <_vfiprintf_r+0x852>
 801f2f2:	2300      	movs	r3, #0
 801f2f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f2f6:	4645      	mov	r5, r8
 801f2f8:	ae11      	add	r6, sp, #68	@ 0x44
 801f2fa:	e55e      	b.n	801edba <_vfiprintf_r+0xca>
 801f2fc:	4648      	mov	r0, r9
 801f2fe:	f7e0 ffe7 	bl	80002d0 <strlen>
 801f302:	9001      	str	r0, [sp, #4]
 801f304:	e734      	b.n	801f170 <_vfiprintf_r+0x480>
 801f306:	f04a 0a10 	orr.w	sl, sl, #16
 801f30a:	f01a 0320 	ands.w	r3, sl, #32
 801f30e:	d008      	beq.n	801f322 <_vfiprintf_r+0x632>
 801f310:	3507      	adds	r5, #7
 801f312:	f025 0507 	bic.w	r5, r5, #7
 801f316:	46a8      	mov	r8, r5
 801f318:	686d      	ldr	r5, [r5, #4]
 801f31a:	f858 4b08 	ldr.w	r4, [r8], #8
 801f31e:	2301      	movs	r3, #1
 801f320:	e6da      	b.n	801f0d8 <_vfiprintf_r+0x3e8>
 801f322:	46a8      	mov	r8, r5
 801f324:	f01a 0510 	ands.w	r5, sl, #16
 801f328:	f858 4b04 	ldr.w	r4, [r8], #4
 801f32c:	d001      	beq.n	801f332 <_vfiprintf_r+0x642>
 801f32e:	461d      	mov	r5, r3
 801f330:	e7f5      	b.n	801f31e <_vfiprintf_r+0x62e>
 801f332:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801f336:	d001      	beq.n	801f33c <_vfiprintf_r+0x64c>
 801f338:	b2a4      	uxth	r4, r4
 801f33a:	e7f0      	b.n	801f31e <_vfiprintf_r+0x62e>
 801f33c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801f340:	d0ed      	beq.n	801f31e <_vfiprintf_r+0x62e>
 801f342:	b2e4      	uxtb	r4, r4
 801f344:	e7f3      	b.n	801f32e <_vfiprintf_r+0x63e>
 801f346:	4a43      	ldr	r2, [pc, #268]	@ (801f454 <_vfiprintf_r+0x764>)
 801f348:	e5cc      	b.n	801eee4 <_vfiprintf_r+0x1f4>
 801f34a:	46a8      	mov	r8, r5
 801f34c:	f01a 0510 	ands.w	r5, sl, #16
 801f350:	f858 4b04 	ldr.w	r4, [r8], #4
 801f354:	d001      	beq.n	801f35a <_vfiprintf_r+0x66a>
 801f356:	4615      	mov	r5, r2
 801f358:	e5d0      	b.n	801eefc <_vfiprintf_r+0x20c>
 801f35a:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 801f35e:	d001      	beq.n	801f364 <_vfiprintf_r+0x674>
 801f360:	b2a4      	uxth	r4, r4
 801f362:	e5cb      	b.n	801eefc <_vfiprintf_r+0x20c>
 801f364:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801f368:	f43f adc8 	beq.w	801eefc <_vfiprintf_r+0x20c>
 801f36c:	b2e4      	uxtb	r4, r4
 801f36e:	e7f2      	b.n	801f356 <_vfiprintf_r+0x666>
 801f370:	2c0a      	cmp	r4, #10
 801f372:	f175 0300 	sbcs.w	r3, r5, #0
 801f376:	d206      	bcs.n	801f386 <_vfiprintf_r+0x696>
 801f378:	3430      	adds	r4, #48	@ 0x30
 801f37a:	b2e4      	uxtb	r4, r4
 801f37c:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 801f380:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 801f384:	e130      	b.n	801f5e8 <_vfiprintf_r+0x8f8>
 801f386:	ab3a      	add	r3, sp, #232	@ 0xe8
 801f388:	9309      	str	r3, [sp, #36]	@ 0x24
 801f38a:	9b04      	ldr	r3, [sp, #16]
 801f38c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801f390:	f04f 0a00 	mov.w	sl, #0
 801f394:	930a      	str	r3, [sp, #40]	@ 0x28
 801f396:	220a      	movs	r2, #10
 801f398:	2300      	movs	r3, #0
 801f39a:	4620      	mov	r0, r4
 801f39c:	4629      	mov	r1, r5
 801f39e:	f7e1 fcd3 	bl	8000d48 <__aeabi_uldivmod>
 801f3a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f3a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f3a6:	3230      	adds	r2, #48	@ 0x30
 801f3a8:	f801 2c01 	strb.w	r2, [r1, #-1]
 801f3ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f3ae:	4603      	mov	r3, r0
 801f3b0:	f101 39ff 	add.w	r9, r1, #4294967295
 801f3b4:	f10a 0a01 	add.w	sl, sl, #1
 801f3b8:	b312      	cbz	r2, 801f400 <_vfiprintf_r+0x710>
 801f3ba:	9a06      	ldr	r2, [sp, #24]
 801f3bc:	7812      	ldrb	r2, [r2, #0]
 801f3be:	4552      	cmp	r2, sl
 801f3c0:	d11e      	bne.n	801f400 <_vfiprintf_r+0x710>
 801f3c2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801f3c6:	d01b      	beq.n	801f400 <_vfiprintf_r+0x710>
 801f3c8:	2c0a      	cmp	r4, #10
 801f3ca:	f175 0500 	sbcs.w	r5, r5, #0
 801f3ce:	f0c0 810b 	bcc.w	801f5e8 <_vfiprintf_r+0x8f8>
 801f3d2:	9b07      	ldr	r3, [sp, #28]
 801f3d4:	9009      	str	r0, [sp, #36]	@ 0x24
 801f3d6:	eba9 0903 	sub.w	r9, r9, r3
 801f3da:	461a      	mov	r2, r3
 801f3dc:	9908      	ldr	r1, [sp, #32]
 801f3de:	4648      	mov	r0, r9
 801f3e0:	f7fc fa61 	bl	801b8a6 <strncpy>
 801f3e4:	9b06      	ldr	r3, [sp, #24]
 801f3e6:	785a      	ldrb	r2, [r3, #1]
 801f3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3ea:	b112      	cbz	r2, 801f3f2 <_vfiprintf_r+0x702>
 801f3ec:	9a06      	ldr	r2, [sp, #24]
 801f3ee:	3201      	adds	r2, #1
 801f3f0:	9206      	str	r2, [sp, #24]
 801f3f2:	f04f 0a00 	mov.w	sl, #0
 801f3f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f3f8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801f3fc:	461c      	mov	r4, r3
 801f3fe:	e7ca      	b.n	801f396 <_vfiprintf_r+0x6a6>
 801f400:	2c0a      	cmp	r4, #10
 801f402:	f175 0500 	sbcs.w	r5, r5, #0
 801f406:	d2f6      	bcs.n	801f3f6 <_vfiprintf_r+0x706>
 801f408:	e0ee      	b.n	801f5e8 <_vfiprintf_r+0x8f8>
 801f40a:	f004 030f 	and.w	r3, r4, #15
 801f40e:	9a05      	ldr	r2, [sp, #20]
 801f410:	0924      	lsrs	r4, r4, #4
 801f412:	5cd3      	ldrb	r3, [r2, r3]
 801f414:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801f418:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801f41c:	092d      	lsrs	r5, r5, #4
 801f41e:	ea54 0305 	orrs.w	r3, r4, r5
 801f422:	d1f2      	bne.n	801f40a <_vfiprintf_r+0x71a>
 801f424:	e0e0      	b.n	801f5e8 <_vfiprintf_r+0x8f8>
 801f426:	b923      	cbnz	r3, 801f432 <_vfiprintf_r+0x742>
 801f428:	f01a 0f01 	tst.w	sl, #1
 801f42c:	d001      	beq.n	801f432 <_vfiprintf_r+0x742>
 801f42e:	2430      	movs	r4, #48	@ 0x30
 801f430:	e7a4      	b.n	801f37c <_vfiprintf_r+0x68c>
 801f432:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801f436:	e0d7      	b.n	801f5e8 <_vfiprintf_r+0x8f8>
 801f438:	2b00      	cmp	r3, #0
 801f43a:	f000 80a3 	beq.w	801f584 <_vfiprintf_r+0x894>
 801f43e:	2400      	movs	r4, #0
 801f440:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801f444:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801f448:	46a8      	mov	r8, r5
 801f44a:	e5e3      	b.n	801f014 <_vfiprintf_r+0x324>
 801f44c:	080224c0 	.word	0x080224c0
 801f450:	080224b0 	.word	0x080224b0
 801f454:	0802226a 	.word	0x0802226a
 801f458:	2110      	movs	r1, #16
 801f45a:	6071      	str	r1, [r6, #4]
 801f45c:	2a07      	cmp	r2, #7
 801f45e:	4461      	add	r1, ip
 801f460:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801f464:	dd08      	ble.n	801f478 <_vfiprintf_r+0x788>
 801f466:	9800      	ldr	r0, [sp, #0]
 801f468:	aa0e      	add	r2, sp, #56	@ 0x38
 801f46a:	4639      	mov	r1, r7
 801f46c:	f000 f908 	bl	801f680 <__sprint_r>
 801f470:	2800      	cmp	r0, #0
 801f472:	d166      	bne.n	801f542 <_vfiprintf_r+0x852>
 801f474:	4b60      	ldr	r3, [pc, #384]	@ (801f5f8 <_vfiprintf_r+0x908>)
 801f476:	a811      	add	r0, sp, #68	@ 0x44
 801f478:	3d10      	subs	r5, #16
 801f47a:	4606      	mov	r6, r0
 801f47c:	e695      	b.n	801f1aa <_vfiprintf_r+0x4ba>
 801f47e:	4606      	mov	r6, r0
 801f480:	e6ad      	b.n	801f1de <_vfiprintf_r+0x4ee>
 801f482:	9800      	ldr	r0, [sp, #0]
 801f484:	aa0e      	add	r2, sp, #56	@ 0x38
 801f486:	4639      	mov	r1, r7
 801f488:	f000 f8fa 	bl	801f680 <__sprint_r>
 801f48c:	2800      	cmp	r0, #0
 801f48e:	d158      	bne.n	801f542 <_vfiprintf_r+0x852>
 801f490:	ae11      	add	r6, sp, #68	@ 0x44
 801f492:	e6b6      	b.n	801f202 <_vfiprintf_r+0x512>
 801f494:	9800      	ldr	r0, [sp, #0]
 801f496:	aa0e      	add	r2, sp, #56	@ 0x38
 801f498:	4639      	mov	r1, r7
 801f49a:	f000 f8f1 	bl	801f680 <__sprint_r>
 801f49e:	2800      	cmp	r0, #0
 801f4a0:	d14f      	bne.n	801f542 <_vfiprintf_r+0x852>
 801f4a2:	ae11      	add	r6, sp, #68	@ 0x44
 801f4a4:	e6bd      	b.n	801f222 <_vfiprintf_r+0x532>
 801f4a6:	2110      	movs	r1, #16
 801f4a8:	6071      	str	r1, [r6, #4]
 801f4aa:	2a07      	cmp	r2, #7
 801f4ac:	4461      	add	r1, ip
 801f4ae:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801f4b2:	dd08      	ble.n	801f4c6 <_vfiprintf_r+0x7d6>
 801f4b4:	9800      	ldr	r0, [sp, #0]
 801f4b6:	aa0e      	add	r2, sp, #56	@ 0x38
 801f4b8:	4639      	mov	r1, r7
 801f4ba:	f000 f8e1 	bl	801f680 <__sprint_r>
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	d13f      	bne.n	801f542 <_vfiprintf_r+0x852>
 801f4c2:	4b4e      	ldr	r3, [pc, #312]	@ (801f5fc <_vfiprintf_r+0x90c>)
 801f4c4:	a811      	add	r0, sp, #68	@ 0x44
 801f4c6:	3d10      	subs	r5, #16
 801f4c8:	4606      	mov	r6, r0
 801f4ca:	e6b3      	b.n	801f234 <_vfiprintf_r+0x544>
 801f4cc:	4606      	mov	r6, r0
 801f4ce:	e6cb      	b.n	801f268 <_vfiprintf_r+0x578>
 801f4d0:	2010      	movs	r0, #16
 801f4d2:	4402      	add	r2, r0
 801f4d4:	2b07      	cmp	r3, #7
 801f4d6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801f4da:	6070      	str	r0, [r6, #4]
 801f4dc:	dd06      	ble.n	801f4ec <_vfiprintf_r+0x7fc>
 801f4de:	9800      	ldr	r0, [sp, #0]
 801f4e0:	aa0e      	add	r2, sp, #56	@ 0x38
 801f4e2:	4639      	mov	r1, r7
 801f4e4:	f000 f8cc 	bl	801f680 <__sprint_r>
 801f4e8:	bb58      	cbnz	r0, 801f542 <_vfiprintf_r+0x852>
 801f4ea:	a911      	add	r1, sp, #68	@ 0x44
 801f4ec:	3c10      	subs	r4, #16
 801f4ee:	460e      	mov	r6, r1
 801f4f0:	e6be      	b.n	801f270 <_vfiprintf_r+0x580>
 801f4f2:	460e      	mov	r6, r1
 801f4f4:	e6d7      	b.n	801f2a6 <_vfiprintf_r+0x5b6>
 801f4f6:	9800      	ldr	r0, [sp, #0]
 801f4f8:	aa0e      	add	r2, sp, #56	@ 0x38
 801f4fa:	4639      	mov	r1, r7
 801f4fc:	f000 f8c0 	bl	801f680 <__sprint_r>
 801f500:	b9f8      	cbnz	r0, 801f542 <_vfiprintf_r+0x852>
 801f502:	ab11      	add	r3, sp, #68	@ 0x44
 801f504:	e6df      	b.n	801f2c6 <_vfiprintf_r+0x5d6>
 801f506:	9a02      	ldr	r2, [sp, #8]
 801f508:	9904      	ldr	r1, [sp, #16]
 801f50a:	1a54      	subs	r4, r2, r1
 801f50c:	2c00      	cmp	r4, #0
 801f50e:	f77f aede 	ble.w	801f2ce <_vfiprintf_r+0x5de>
 801f512:	4d39      	ldr	r5, [pc, #228]	@ (801f5f8 <_vfiprintf_r+0x908>)
 801f514:	2610      	movs	r6, #16
 801f516:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801f51a:	2c10      	cmp	r4, #16
 801f51c:	f102 0201 	add.w	r2, r2, #1
 801f520:	601d      	str	r5, [r3, #0]
 801f522:	dc1d      	bgt.n	801f560 <_vfiprintf_r+0x870>
 801f524:	605c      	str	r4, [r3, #4]
 801f526:	2a07      	cmp	r2, #7
 801f528:	440c      	add	r4, r1
 801f52a:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 801f52e:	f77f aece 	ble.w	801f2ce <_vfiprintf_r+0x5de>
 801f532:	9800      	ldr	r0, [sp, #0]
 801f534:	aa0e      	add	r2, sp, #56	@ 0x38
 801f536:	4639      	mov	r1, r7
 801f538:	f000 f8a2 	bl	801f680 <__sprint_r>
 801f53c:	2800      	cmp	r0, #0
 801f53e:	f43f aec6 	beq.w	801f2ce <_vfiprintf_r+0x5de>
 801f542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f544:	07d9      	lsls	r1, r3, #31
 801f546:	d405      	bmi.n	801f554 <_vfiprintf_r+0x864>
 801f548:	89bb      	ldrh	r3, [r7, #12]
 801f54a:	059a      	lsls	r2, r3, #22
 801f54c:	d402      	bmi.n	801f554 <_vfiprintf_r+0x864>
 801f54e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801f550:	f7fc fa55 	bl	801b9fe <__retarget_lock_release_recursive>
 801f554:	89bb      	ldrh	r3, [r7, #12]
 801f556:	065b      	lsls	r3, r3, #25
 801f558:	f57f abf3 	bpl.w	801ed42 <_vfiprintf_r+0x52>
 801f55c:	f7ff bbee 	b.w	801ed3c <_vfiprintf_r+0x4c>
 801f560:	3110      	adds	r1, #16
 801f562:	2a07      	cmp	r2, #7
 801f564:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801f568:	605e      	str	r6, [r3, #4]
 801f56a:	dc02      	bgt.n	801f572 <_vfiprintf_r+0x882>
 801f56c:	3308      	adds	r3, #8
 801f56e:	3c10      	subs	r4, #16
 801f570:	e7d1      	b.n	801f516 <_vfiprintf_r+0x826>
 801f572:	9800      	ldr	r0, [sp, #0]
 801f574:	aa0e      	add	r2, sp, #56	@ 0x38
 801f576:	4639      	mov	r1, r7
 801f578:	f000 f882 	bl	801f680 <__sprint_r>
 801f57c:	2800      	cmp	r0, #0
 801f57e:	d1e0      	bne.n	801f542 <_vfiprintf_r+0x852>
 801f580:	ab11      	add	r3, sp, #68	@ 0x44
 801f582:	e7f4      	b.n	801f56e <_vfiprintf_r+0x87e>
 801f584:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f586:	b913      	cbnz	r3, 801f58e <_vfiprintf_r+0x89e>
 801f588:	2300      	movs	r3, #0
 801f58a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f58c:	e7d9      	b.n	801f542 <_vfiprintf_r+0x852>
 801f58e:	9800      	ldr	r0, [sp, #0]
 801f590:	aa0e      	add	r2, sp, #56	@ 0x38
 801f592:	4639      	mov	r1, r7
 801f594:	f000 f874 	bl	801f680 <__sprint_r>
 801f598:	2800      	cmp	r0, #0
 801f59a:	d0f5      	beq.n	801f588 <_vfiprintf_r+0x898>
 801f59c:	e7d1      	b.n	801f542 <_vfiprintf_r+0x852>
 801f59e:	ea54 0205 	orrs.w	r2, r4, r5
 801f5a2:	f8cd a010 	str.w	sl, [sp, #16]
 801f5a6:	f43f ada9 	beq.w	801f0fc <_vfiprintf_r+0x40c>
 801f5aa:	2b01      	cmp	r3, #1
 801f5ac:	f43f aee0 	beq.w	801f370 <_vfiprintf_r+0x680>
 801f5b0:	2b02      	cmp	r3, #2
 801f5b2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801f5b6:	f43f af28 	beq.w	801f40a <_vfiprintf_r+0x71a>
 801f5ba:	f004 0307 	and.w	r3, r4, #7
 801f5be:	08e4      	lsrs	r4, r4, #3
 801f5c0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801f5c4:	08ed      	lsrs	r5, r5, #3
 801f5c6:	3330      	adds	r3, #48	@ 0x30
 801f5c8:	ea54 0105 	orrs.w	r1, r4, r5
 801f5cc:	464a      	mov	r2, r9
 801f5ce:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801f5d2:	d1f2      	bne.n	801f5ba <_vfiprintf_r+0x8ca>
 801f5d4:	9904      	ldr	r1, [sp, #16]
 801f5d6:	07c8      	lsls	r0, r1, #31
 801f5d8:	d506      	bpl.n	801f5e8 <_vfiprintf_r+0x8f8>
 801f5da:	2b30      	cmp	r3, #48	@ 0x30
 801f5dc:	d004      	beq.n	801f5e8 <_vfiprintf_r+0x8f8>
 801f5de:	2330      	movs	r3, #48	@ 0x30
 801f5e0:	f809 3c01 	strb.w	r3, [r9, #-1]
 801f5e4:	f1a2 0902 	sub.w	r9, r2, #2
 801f5e8:	ab3a      	add	r3, sp, #232	@ 0xe8
 801f5ea:	eba3 0309 	sub.w	r3, r3, r9
 801f5ee:	9c01      	ldr	r4, [sp, #4]
 801f5f0:	f8dd a010 	ldr.w	sl, [sp, #16]
 801f5f4:	9301      	str	r3, [sp, #4]
 801f5f6:	e5bc      	b.n	801f172 <_vfiprintf_r+0x482>
 801f5f8:	080224c0 	.word	0x080224c0
 801f5fc:	080224b0 	.word	0x080224b0

0801f600 <__sbprintf>:
 801f600:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f602:	461f      	mov	r7, r3
 801f604:	898b      	ldrh	r3, [r1, #12]
 801f606:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801f60a:	f023 0302 	bic.w	r3, r3, #2
 801f60e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f612:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801f614:	9319      	str	r3, [sp, #100]	@ 0x64
 801f616:	89cb      	ldrh	r3, [r1, #14]
 801f618:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f61c:	69cb      	ldr	r3, [r1, #28]
 801f61e:	9307      	str	r3, [sp, #28]
 801f620:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801f622:	9309      	str	r3, [sp, #36]	@ 0x24
 801f624:	ab1a      	add	r3, sp, #104	@ 0x68
 801f626:	9300      	str	r3, [sp, #0]
 801f628:	9304      	str	r3, [sp, #16]
 801f62a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f62e:	4615      	mov	r5, r2
 801f630:	4606      	mov	r6, r0
 801f632:	9302      	str	r3, [sp, #8]
 801f634:	9305      	str	r3, [sp, #20]
 801f636:	a816      	add	r0, sp, #88	@ 0x58
 801f638:	2300      	movs	r3, #0
 801f63a:	460c      	mov	r4, r1
 801f63c:	9306      	str	r3, [sp, #24]
 801f63e:	f7fc f9db 	bl	801b9f8 <__retarget_lock_init_recursive>
 801f642:	462a      	mov	r2, r5
 801f644:	463b      	mov	r3, r7
 801f646:	4669      	mov	r1, sp
 801f648:	4630      	mov	r0, r6
 801f64a:	f7ff fb51 	bl	801ecf0 <_vfiprintf_r>
 801f64e:	1e05      	subs	r5, r0, #0
 801f650:	db07      	blt.n	801f662 <__sbprintf+0x62>
 801f652:	4669      	mov	r1, sp
 801f654:	4630      	mov	r0, r6
 801f656:	f7fd fe5b 	bl	801d310 <_fflush_r>
 801f65a:	2800      	cmp	r0, #0
 801f65c:	bf18      	it	ne
 801f65e:	f04f 35ff 	movne.w	r5, #4294967295
 801f662:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f666:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f668:	065b      	lsls	r3, r3, #25
 801f66a:	bf42      	ittt	mi
 801f66c:	89a3      	ldrhmi	r3, [r4, #12]
 801f66e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801f672:	81a3      	strhmi	r3, [r4, #12]
 801f674:	f7fc f9c1 	bl	801b9fa <__retarget_lock_close_recursive>
 801f678:	4628      	mov	r0, r5
 801f67a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801f67e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f680 <__sprint_r>:
 801f680:	6893      	ldr	r3, [r2, #8]
 801f682:	b510      	push	{r4, lr}
 801f684:	4614      	mov	r4, r2
 801f686:	b133      	cbz	r3, 801f696 <__sprint_r+0x16>
 801f688:	f7fd fe68 	bl	801d35c <__sfvwrite_r>
 801f68c:	2300      	movs	r3, #0
 801f68e:	60a3      	str	r3, [r4, #8]
 801f690:	2300      	movs	r3, #0
 801f692:	6063      	str	r3, [r4, #4]
 801f694:	bd10      	pop	{r4, pc}
 801f696:	4618      	mov	r0, r3
 801f698:	e7fa      	b.n	801f690 <__sprint_r+0x10>

0801f69a <abort>:
 801f69a:	b508      	push	{r3, lr}
 801f69c:	2006      	movs	r0, #6
 801f69e:	f000 f82d 	bl	801f6fc <raise>
 801f6a2:	2001      	movs	r0, #1
 801f6a4:	f7e4 fb13 	bl	8003cce <_exit>

0801f6a8 <_raise_r>:
 801f6a8:	291f      	cmp	r1, #31
 801f6aa:	b538      	push	{r3, r4, r5, lr}
 801f6ac:	4605      	mov	r5, r0
 801f6ae:	460c      	mov	r4, r1
 801f6b0:	d904      	bls.n	801f6bc <_raise_r+0x14>
 801f6b2:	2316      	movs	r3, #22
 801f6b4:	6003      	str	r3, [r0, #0]
 801f6b6:	f04f 30ff 	mov.w	r0, #4294967295
 801f6ba:	bd38      	pop	{r3, r4, r5, pc}
 801f6bc:	f8d0 2138 	ldr.w	r2, [r0, #312]	@ 0x138
 801f6c0:	b112      	cbz	r2, 801f6c8 <_raise_r+0x20>
 801f6c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f6c6:	b94b      	cbnz	r3, 801f6dc <_raise_r+0x34>
 801f6c8:	4628      	mov	r0, r5
 801f6ca:	f000 f831 	bl	801f730 <_getpid_r>
 801f6ce:	4622      	mov	r2, r4
 801f6d0:	4601      	mov	r1, r0
 801f6d2:	4628      	mov	r0, r5
 801f6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f6d8:	f000 b818 	b.w	801f70c <_kill_r>
 801f6dc:	2b01      	cmp	r3, #1
 801f6de:	d00a      	beq.n	801f6f6 <_raise_r+0x4e>
 801f6e0:	1c59      	adds	r1, r3, #1
 801f6e2:	d103      	bne.n	801f6ec <_raise_r+0x44>
 801f6e4:	2316      	movs	r3, #22
 801f6e6:	6003      	str	r3, [r0, #0]
 801f6e8:	2001      	movs	r0, #1
 801f6ea:	e7e6      	b.n	801f6ba <_raise_r+0x12>
 801f6ec:	2100      	movs	r1, #0
 801f6ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	4798      	blx	r3
 801f6f6:	2000      	movs	r0, #0
 801f6f8:	e7df      	b.n	801f6ba <_raise_r+0x12>
	...

0801f6fc <raise>:
 801f6fc:	4b02      	ldr	r3, [pc, #8]	@ (801f708 <raise+0xc>)
 801f6fe:	4601      	mov	r1, r0
 801f700:	6818      	ldr	r0, [r3, #0]
 801f702:	f7ff bfd1 	b.w	801f6a8 <_raise_r>
 801f706:	bf00      	nop
 801f708:	20003554 	.word	0x20003554

0801f70c <_kill_r>:
 801f70c:	b538      	push	{r3, r4, r5, lr}
 801f70e:	4d07      	ldr	r5, [pc, #28]	@ (801f72c <_kill_r+0x20>)
 801f710:	2300      	movs	r3, #0
 801f712:	4604      	mov	r4, r0
 801f714:	4608      	mov	r0, r1
 801f716:	4611      	mov	r1, r2
 801f718:	602b      	str	r3, [r5, #0]
 801f71a:	f7e4 fac8 	bl	8003cae <_kill>
 801f71e:	1c43      	adds	r3, r0, #1
 801f720:	d102      	bne.n	801f728 <_kill_r+0x1c>
 801f722:	682b      	ldr	r3, [r5, #0]
 801f724:	b103      	cbz	r3, 801f728 <_kill_r+0x1c>
 801f726:	6023      	str	r3, [r4, #0]
 801f728:	bd38      	pop	{r3, r4, r5, pc}
 801f72a:	bf00      	nop
 801f72c:	20011ed4 	.word	0x20011ed4

0801f730 <_getpid_r>:
 801f730:	f7e4 bab5 	b.w	8003c9e <_getpid>
 801f734:	0000      	movs	r0, r0
	...

0801f738 <cos>:
 801f738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f73a:	ec53 2b10 	vmov	r2, r3, d0
 801f73e:	4826      	ldr	r0, [pc, #152]	@ (801f7d8 <cos+0xa0>)
 801f740:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f744:	4281      	cmp	r1, r0
 801f746:	d806      	bhi.n	801f756 <cos+0x1e>
 801f748:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f7d0 <cos+0x98>
 801f74c:	b005      	add	sp, #20
 801f74e:	f85d eb04 	ldr.w	lr, [sp], #4
 801f752:	f000 b911 	b.w	801f978 <__kernel_cos>
 801f756:	4821      	ldr	r0, [pc, #132]	@ (801f7dc <cos+0xa4>)
 801f758:	4281      	cmp	r1, r0
 801f75a:	d908      	bls.n	801f76e <cos+0x36>
 801f75c:	4610      	mov	r0, r2
 801f75e:	4619      	mov	r1, r3
 801f760:	f7e0 fdc2 	bl	80002e8 <__aeabi_dsub>
 801f764:	ec41 0b10 	vmov	d0, r0, r1
 801f768:	b005      	add	sp, #20
 801f76a:	f85d fb04 	ldr.w	pc, [sp], #4
 801f76e:	4668      	mov	r0, sp
 801f770:	f000 fa86 	bl	801fc80 <__ieee754_rem_pio2>
 801f774:	f000 0003 	and.w	r0, r0, #3
 801f778:	2801      	cmp	r0, #1
 801f77a:	d00b      	beq.n	801f794 <cos+0x5c>
 801f77c:	2802      	cmp	r0, #2
 801f77e:	d015      	beq.n	801f7ac <cos+0x74>
 801f780:	b9d8      	cbnz	r0, 801f7ba <cos+0x82>
 801f782:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f786:	ed9d 0b00 	vldr	d0, [sp]
 801f78a:	f000 f8f5 	bl	801f978 <__kernel_cos>
 801f78e:	ec51 0b10 	vmov	r0, r1, d0
 801f792:	e7e7      	b.n	801f764 <cos+0x2c>
 801f794:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f798:	ed9d 0b00 	vldr	d0, [sp]
 801f79c:	f000 f9b4 	bl	801fb08 <__kernel_sin>
 801f7a0:	ec53 2b10 	vmov	r2, r3, d0
 801f7a4:	4610      	mov	r0, r2
 801f7a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f7aa:	e7db      	b.n	801f764 <cos+0x2c>
 801f7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f7b0:	ed9d 0b00 	vldr	d0, [sp]
 801f7b4:	f000 f8e0 	bl	801f978 <__kernel_cos>
 801f7b8:	e7f2      	b.n	801f7a0 <cos+0x68>
 801f7ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f7be:	ed9d 0b00 	vldr	d0, [sp]
 801f7c2:	2001      	movs	r0, #1
 801f7c4:	f000 f9a0 	bl	801fb08 <__kernel_sin>
 801f7c8:	e7e1      	b.n	801f78e <cos+0x56>
 801f7ca:	bf00      	nop
 801f7cc:	f3af 8000 	nop.w
	...
 801f7d8:	3fe921fb 	.word	0x3fe921fb
 801f7dc:	7fefffff 	.word	0x7fefffff

0801f7e0 <sin>:
 801f7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f7e2:	ec53 2b10 	vmov	r2, r3, d0
 801f7e6:	4826      	ldr	r0, [pc, #152]	@ (801f880 <sin+0xa0>)
 801f7e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f7ec:	4281      	cmp	r1, r0
 801f7ee:	d807      	bhi.n	801f800 <sin+0x20>
 801f7f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f878 <sin+0x98>
 801f7f4:	2000      	movs	r0, #0
 801f7f6:	b005      	add	sp, #20
 801f7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801f7fc:	f000 b984 	b.w	801fb08 <__kernel_sin>
 801f800:	4820      	ldr	r0, [pc, #128]	@ (801f884 <sin+0xa4>)
 801f802:	4281      	cmp	r1, r0
 801f804:	d908      	bls.n	801f818 <sin+0x38>
 801f806:	4610      	mov	r0, r2
 801f808:	4619      	mov	r1, r3
 801f80a:	f7e0 fd6d 	bl	80002e8 <__aeabi_dsub>
 801f80e:	ec41 0b10 	vmov	d0, r0, r1
 801f812:	b005      	add	sp, #20
 801f814:	f85d fb04 	ldr.w	pc, [sp], #4
 801f818:	4668      	mov	r0, sp
 801f81a:	f000 fa31 	bl	801fc80 <__ieee754_rem_pio2>
 801f81e:	f000 0003 	and.w	r0, r0, #3
 801f822:	2801      	cmp	r0, #1
 801f824:	d00c      	beq.n	801f840 <sin+0x60>
 801f826:	2802      	cmp	r0, #2
 801f828:	d011      	beq.n	801f84e <sin+0x6e>
 801f82a:	b9e8      	cbnz	r0, 801f868 <sin+0x88>
 801f82c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f830:	ed9d 0b00 	vldr	d0, [sp]
 801f834:	2001      	movs	r0, #1
 801f836:	f000 f967 	bl	801fb08 <__kernel_sin>
 801f83a:	ec51 0b10 	vmov	r0, r1, d0
 801f83e:	e7e6      	b.n	801f80e <sin+0x2e>
 801f840:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f844:	ed9d 0b00 	vldr	d0, [sp]
 801f848:	f000 f896 	bl	801f978 <__kernel_cos>
 801f84c:	e7f5      	b.n	801f83a <sin+0x5a>
 801f84e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f852:	ed9d 0b00 	vldr	d0, [sp]
 801f856:	2001      	movs	r0, #1
 801f858:	f000 f956 	bl	801fb08 <__kernel_sin>
 801f85c:	ec53 2b10 	vmov	r2, r3, d0
 801f860:	4610      	mov	r0, r2
 801f862:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f866:	e7d2      	b.n	801f80e <sin+0x2e>
 801f868:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f86c:	ed9d 0b00 	vldr	d0, [sp]
 801f870:	f000 f882 	bl	801f978 <__kernel_cos>
 801f874:	e7f2      	b.n	801f85c <sin+0x7c>
 801f876:	bf00      	nop
	...
 801f880:	3fe921fb 	.word	0x3fe921fb
 801f884:	7fefffff 	.word	0x7fefffff

0801f888 <fmax>:
 801f888:	b508      	push	{r3, lr}
 801f88a:	ed2d 8b04 	vpush	{d8-d9}
 801f88e:	eeb0 8a40 	vmov.f32	s16, s0
 801f892:	eef0 8a60 	vmov.f32	s17, s1
 801f896:	eeb0 9a41 	vmov.f32	s18, s2
 801f89a:	eef0 9a61 	vmov.f32	s19, s3
 801f89e:	f000 f847 	bl	801f930 <__fpclassifyd>
 801f8a2:	b950      	cbnz	r0, 801f8ba <fmax+0x32>
 801f8a4:	eeb0 8a49 	vmov.f32	s16, s18
 801f8a8:	eef0 8a69 	vmov.f32	s17, s19
 801f8ac:	eeb0 0a48 	vmov.f32	s0, s16
 801f8b0:	eef0 0a68 	vmov.f32	s1, s17
 801f8b4:	ecbd 8b04 	vpop	{d8-d9}
 801f8b8:	bd08      	pop	{r3, pc}
 801f8ba:	eeb0 0a49 	vmov.f32	s0, s18
 801f8be:	eef0 0a69 	vmov.f32	s1, s19
 801f8c2:	f000 f835 	bl	801f930 <__fpclassifyd>
 801f8c6:	2800      	cmp	r0, #0
 801f8c8:	d0f0      	beq.n	801f8ac <fmax+0x24>
 801f8ca:	ec53 2b19 	vmov	r2, r3, d9
 801f8ce:	ec51 0b18 	vmov	r0, r1, d8
 801f8d2:	f7e1 f951 	bl	8000b78 <__aeabi_dcmpgt>
 801f8d6:	2800      	cmp	r0, #0
 801f8d8:	d0e4      	beq.n	801f8a4 <fmax+0x1c>
 801f8da:	e7e7      	b.n	801f8ac <fmax+0x24>

0801f8dc <fmin>:
 801f8dc:	b508      	push	{r3, lr}
 801f8de:	ed2d 8b04 	vpush	{d8-d9}
 801f8e2:	eeb0 8a40 	vmov.f32	s16, s0
 801f8e6:	eef0 8a60 	vmov.f32	s17, s1
 801f8ea:	eeb0 9a41 	vmov.f32	s18, s2
 801f8ee:	eef0 9a61 	vmov.f32	s19, s3
 801f8f2:	f000 f81d 	bl	801f930 <__fpclassifyd>
 801f8f6:	b950      	cbnz	r0, 801f90e <fmin+0x32>
 801f8f8:	eeb0 8a49 	vmov.f32	s16, s18
 801f8fc:	eef0 8a69 	vmov.f32	s17, s19
 801f900:	eeb0 0a48 	vmov.f32	s0, s16
 801f904:	eef0 0a68 	vmov.f32	s1, s17
 801f908:	ecbd 8b04 	vpop	{d8-d9}
 801f90c:	bd08      	pop	{r3, pc}
 801f90e:	eeb0 0a49 	vmov.f32	s0, s18
 801f912:	eef0 0a69 	vmov.f32	s1, s19
 801f916:	f000 f80b 	bl	801f930 <__fpclassifyd>
 801f91a:	2800      	cmp	r0, #0
 801f91c:	d0f0      	beq.n	801f900 <fmin+0x24>
 801f91e:	ec53 2b19 	vmov	r2, r3, d9
 801f922:	ec51 0b18 	vmov	r0, r1, d8
 801f926:	f7e1 f909 	bl	8000b3c <__aeabi_dcmplt>
 801f92a:	2800      	cmp	r0, #0
 801f92c:	d0e4      	beq.n	801f8f8 <fmin+0x1c>
 801f92e:	e7e7      	b.n	801f900 <fmin+0x24>

0801f930 <__fpclassifyd>:
 801f930:	ec51 0b10 	vmov	r0, r1, d0
 801f934:	460b      	mov	r3, r1
 801f936:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801f93a:	b510      	push	{r4, lr}
 801f93c:	d104      	bne.n	801f948 <__fpclassifyd+0x18>
 801f93e:	2800      	cmp	r0, #0
 801f940:	bf0c      	ite	eq
 801f942:	2002      	moveq	r0, #2
 801f944:	2003      	movne	r0, #3
 801f946:	bd10      	pop	{r4, pc}
 801f948:	4a09      	ldr	r2, [pc, #36]	@ (801f970 <__fpclassifyd+0x40>)
 801f94a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801f94e:	4294      	cmp	r4, r2
 801f950:	d908      	bls.n	801f964 <__fpclassifyd+0x34>
 801f952:	4a08      	ldr	r2, [pc, #32]	@ (801f974 <__fpclassifyd+0x44>)
 801f954:	4213      	tst	r3, r2
 801f956:	d007      	beq.n	801f968 <__fpclassifyd+0x38>
 801f958:	4291      	cmp	r1, r2
 801f95a:	d107      	bne.n	801f96c <__fpclassifyd+0x3c>
 801f95c:	fab0 f080 	clz	r0, r0
 801f960:	0940      	lsrs	r0, r0, #5
 801f962:	e7f0      	b.n	801f946 <__fpclassifyd+0x16>
 801f964:	2004      	movs	r0, #4
 801f966:	e7ee      	b.n	801f946 <__fpclassifyd+0x16>
 801f968:	2003      	movs	r0, #3
 801f96a:	e7ec      	b.n	801f946 <__fpclassifyd+0x16>
 801f96c:	2000      	movs	r0, #0
 801f96e:	e7ea      	b.n	801f946 <__fpclassifyd+0x16>
 801f970:	7fdfffff 	.word	0x7fdfffff
 801f974:	7ff00000 	.word	0x7ff00000

0801f978 <__kernel_cos>:
 801f978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f97c:	ec57 6b10 	vmov	r6, r7, d0
 801f980:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801f984:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801f988:	ed8d 1b00 	vstr	d1, [sp]
 801f98c:	d206      	bcs.n	801f99c <__kernel_cos+0x24>
 801f98e:	4630      	mov	r0, r6
 801f990:	4639      	mov	r1, r7
 801f992:	f7e1 f911 	bl	8000bb8 <__aeabi_d2iz>
 801f996:	2800      	cmp	r0, #0
 801f998:	f000 8088 	beq.w	801faac <__kernel_cos+0x134>
 801f99c:	4632      	mov	r2, r6
 801f99e:	463b      	mov	r3, r7
 801f9a0:	4630      	mov	r0, r6
 801f9a2:	4639      	mov	r1, r7
 801f9a4:	f7e0 fe58 	bl	8000658 <__aeabi_dmul>
 801f9a8:	4b51      	ldr	r3, [pc, #324]	@ (801faf0 <__kernel_cos+0x178>)
 801f9aa:	2200      	movs	r2, #0
 801f9ac:	4604      	mov	r4, r0
 801f9ae:	460d      	mov	r5, r1
 801f9b0:	f7e0 fe52 	bl	8000658 <__aeabi_dmul>
 801f9b4:	a340      	add	r3, pc, #256	@ (adr r3, 801fab8 <__kernel_cos+0x140>)
 801f9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9ba:	4682      	mov	sl, r0
 801f9bc:	468b      	mov	fp, r1
 801f9be:	4620      	mov	r0, r4
 801f9c0:	4629      	mov	r1, r5
 801f9c2:	f7e0 fe49 	bl	8000658 <__aeabi_dmul>
 801f9c6:	a33e      	add	r3, pc, #248	@ (adr r3, 801fac0 <__kernel_cos+0x148>)
 801f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9cc:	f7e0 fc8e 	bl	80002ec <__adddf3>
 801f9d0:	4622      	mov	r2, r4
 801f9d2:	462b      	mov	r3, r5
 801f9d4:	f7e0 fe40 	bl	8000658 <__aeabi_dmul>
 801f9d8:	a33b      	add	r3, pc, #236	@ (adr r3, 801fac8 <__kernel_cos+0x150>)
 801f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9de:	f7e0 fc83 	bl	80002e8 <__aeabi_dsub>
 801f9e2:	4622      	mov	r2, r4
 801f9e4:	462b      	mov	r3, r5
 801f9e6:	f7e0 fe37 	bl	8000658 <__aeabi_dmul>
 801f9ea:	a339      	add	r3, pc, #228	@ (adr r3, 801fad0 <__kernel_cos+0x158>)
 801f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9f0:	f7e0 fc7c 	bl	80002ec <__adddf3>
 801f9f4:	4622      	mov	r2, r4
 801f9f6:	462b      	mov	r3, r5
 801f9f8:	f7e0 fe2e 	bl	8000658 <__aeabi_dmul>
 801f9fc:	a336      	add	r3, pc, #216	@ (adr r3, 801fad8 <__kernel_cos+0x160>)
 801f9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa02:	f7e0 fc71 	bl	80002e8 <__aeabi_dsub>
 801fa06:	4622      	mov	r2, r4
 801fa08:	462b      	mov	r3, r5
 801fa0a:	f7e0 fe25 	bl	8000658 <__aeabi_dmul>
 801fa0e:	a334      	add	r3, pc, #208	@ (adr r3, 801fae0 <__kernel_cos+0x168>)
 801fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa14:	f7e0 fc6a 	bl	80002ec <__adddf3>
 801fa18:	4622      	mov	r2, r4
 801fa1a:	462b      	mov	r3, r5
 801fa1c:	f7e0 fe1c 	bl	8000658 <__aeabi_dmul>
 801fa20:	4622      	mov	r2, r4
 801fa22:	462b      	mov	r3, r5
 801fa24:	f7e0 fe18 	bl	8000658 <__aeabi_dmul>
 801fa28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa2c:	4604      	mov	r4, r0
 801fa2e:	460d      	mov	r5, r1
 801fa30:	4630      	mov	r0, r6
 801fa32:	4639      	mov	r1, r7
 801fa34:	f7e0 fe10 	bl	8000658 <__aeabi_dmul>
 801fa38:	460b      	mov	r3, r1
 801fa3a:	4602      	mov	r2, r0
 801fa3c:	4629      	mov	r1, r5
 801fa3e:	4620      	mov	r0, r4
 801fa40:	f7e0 fc52 	bl	80002e8 <__aeabi_dsub>
 801fa44:	4b2b      	ldr	r3, [pc, #172]	@ (801faf4 <__kernel_cos+0x17c>)
 801fa46:	4598      	cmp	r8, r3
 801fa48:	4606      	mov	r6, r0
 801fa4a:	460f      	mov	r7, r1
 801fa4c:	d810      	bhi.n	801fa70 <__kernel_cos+0xf8>
 801fa4e:	4602      	mov	r2, r0
 801fa50:	460b      	mov	r3, r1
 801fa52:	4650      	mov	r0, sl
 801fa54:	4659      	mov	r1, fp
 801fa56:	f7e0 fc47 	bl	80002e8 <__aeabi_dsub>
 801fa5a:	460b      	mov	r3, r1
 801fa5c:	4926      	ldr	r1, [pc, #152]	@ (801faf8 <__kernel_cos+0x180>)
 801fa5e:	4602      	mov	r2, r0
 801fa60:	2000      	movs	r0, #0
 801fa62:	f7e0 fc41 	bl	80002e8 <__aeabi_dsub>
 801fa66:	ec41 0b10 	vmov	d0, r0, r1
 801fa6a:	b003      	add	sp, #12
 801fa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa70:	4b22      	ldr	r3, [pc, #136]	@ (801fafc <__kernel_cos+0x184>)
 801fa72:	4921      	ldr	r1, [pc, #132]	@ (801faf8 <__kernel_cos+0x180>)
 801fa74:	4598      	cmp	r8, r3
 801fa76:	bf8c      	ite	hi
 801fa78:	4d21      	ldrhi	r5, [pc, #132]	@ (801fb00 <__kernel_cos+0x188>)
 801fa7a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801fa7e:	2400      	movs	r4, #0
 801fa80:	4622      	mov	r2, r4
 801fa82:	462b      	mov	r3, r5
 801fa84:	2000      	movs	r0, #0
 801fa86:	f7e0 fc2f 	bl	80002e8 <__aeabi_dsub>
 801fa8a:	4622      	mov	r2, r4
 801fa8c:	4680      	mov	r8, r0
 801fa8e:	4689      	mov	r9, r1
 801fa90:	462b      	mov	r3, r5
 801fa92:	4650      	mov	r0, sl
 801fa94:	4659      	mov	r1, fp
 801fa96:	f7e0 fc27 	bl	80002e8 <__aeabi_dsub>
 801fa9a:	4632      	mov	r2, r6
 801fa9c:	463b      	mov	r3, r7
 801fa9e:	f7e0 fc23 	bl	80002e8 <__aeabi_dsub>
 801faa2:	4602      	mov	r2, r0
 801faa4:	460b      	mov	r3, r1
 801faa6:	4640      	mov	r0, r8
 801faa8:	4649      	mov	r1, r9
 801faaa:	e7da      	b.n	801fa62 <__kernel_cos+0xea>
 801faac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801fae8 <__kernel_cos+0x170>
 801fab0:	e7db      	b.n	801fa6a <__kernel_cos+0xf2>
 801fab2:	bf00      	nop
 801fab4:	f3af 8000 	nop.w
 801fab8:	be8838d4 	.word	0xbe8838d4
 801fabc:	bda8fae9 	.word	0xbda8fae9
 801fac0:	bdb4b1c4 	.word	0xbdb4b1c4
 801fac4:	3e21ee9e 	.word	0x3e21ee9e
 801fac8:	809c52ad 	.word	0x809c52ad
 801facc:	3e927e4f 	.word	0x3e927e4f
 801fad0:	19cb1590 	.word	0x19cb1590
 801fad4:	3efa01a0 	.word	0x3efa01a0
 801fad8:	16c15177 	.word	0x16c15177
 801fadc:	3f56c16c 	.word	0x3f56c16c
 801fae0:	5555554c 	.word	0x5555554c
 801fae4:	3fa55555 	.word	0x3fa55555
 801fae8:	00000000 	.word	0x00000000
 801faec:	3ff00000 	.word	0x3ff00000
 801faf0:	3fe00000 	.word	0x3fe00000
 801faf4:	3fd33332 	.word	0x3fd33332
 801faf8:	3ff00000 	.word	0x3ff00000
 801fafc:	3fe90000 	.word	0x3fe90000
 801fb00:	3fd20000 	.word	0x3fd20000
 801fb04:	00000000 	.word	0x00000000

0801fb08 <__kernel_sin>:
 801fb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb0c:	ec55 4b10 	vmov	r4, r5, d0
 801fb10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fb14:	b085      	sub	sp, #20
 801fb16:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801fb1a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801fb1e:	4680      	mov	r8, r0
 801fb20:	d205      	bcs.n	801fb2e <__kernel_sin+0x26>
 801fb22:	4620      	mov	r0, r4
 801fb24:	4629      	mov	r1, r5
 801fb26:	f7e1 f847 	bl	8000bb8 <__aeabi_d2iz>
 801fb2a:	2800      	cmp	r0, #0
 801fb2c:	d052      	beq.n	801fbd4 <__kernel_sin+0xcc>
 801fb2e:	4622      	mov	r2, r4
 801fb30:	462b      	mov	r3, r5
 801fb32:	4620      	mov	r0, r4
 801fb34:	4629      	mov	r1, r5
 801fb36:	f7e0 fd8f 	bl	8000658 <__aeabi_dmul>
 801fb3a:	4682      	mov	sl, r0
 801fb3c:	468b      	mov	fp, r1
 801fb3e:	4602      	mov	r2, r0
 801fb40:	460b      	mov	r3, r1
 801fb42:	4620      	mov	r0, r4
 801fb44:	4629      	mov	r1, r5
 801fb46:	f7e0 fd87 	bl	8000658 <__aeabi_dmul>
 801fb4a:	a342      	add	r3, pc, #264	@ (adr r3, 801fc54 <__kernel_sin+0x14c>)
 801fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb50:	e9cd 0100 	strd	r0, r1, [sp]
 801fb54:	4650      	mov	r0, sl
 801fb56:	4659      	mov	r1, fp
 801fb58:	f7e0 fd7e 	bl	8000658 <__aeabi_dmul>
 801fb5c:	a33f      	add	r3, pc, #252	@ (adr r3, 801fc5c <__kernel_sin+0x154>)
 801fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb62:	f7e0 fbc1 	bl	80002e8 <__aeabi_dsub>
 801fb66:	4652      	mov	r2, sl
 801fb68:	465b      	mov	r3, fp
 801fb6a:	f7e0 fd75 	bl	8000658 <__aeabi_dmul>
 801fb6e:	a33d      	add	r3, pc, #244	@ (adr r3, 801fc64 <__kernel_sin+0x15c>)
 801fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb74:	f7e0 fbba 	bl	80002ec <__adddf3>
 801fb78:	4652      	mov	r2, sl
 801fb7a:	465b      	mov	r3, fp
 801fb7c:	f7e0 fd6c 	bl	8000658 <__aeabi_dmul>
 801fb80:	a33a      	add	r3, pc, #232	@ (adr r3, 801fc6c <__kernel_sin+0x164>)
 801fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb86:	f7e0 fbaf 	bl	80002e8 <__aeabi_dsub>
 801fb8a:	4652      	mov	r2, sl
 801fb8c:	465b      	mov	r3, fp
 801fb8e:	f7e0 fd63 	bl	8000658 <__aeabi_dmul>
 801fb92:	a338      	add	r3, pc, #224	@ (adr r3, 801fc74 <__kernel_sin+0x16c>)
 801fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb98:	f7e0 fba8 	bl	80002ec <__adddf3>
 801fb9c:	4606      	mov	r6, r0
 801fb9e:	460f      	mov	r7, r1
 801fba0:	f1b8 0f00 	cmp.w	r8, #0
 801fba4:	d11b      	bne.n	801fbde <__kernel_sin+0xd6>
 801fba6:	4602      	mov	r2, r0
 801fba8:	460b      	mov	r3, r1
 801fbaa:	4650      	mov	r0, sl
 801fbac:	4659      	mov	r1, fp
 801fbae:	f7e0 fd53 	bl	8000658 <__aeabi_dmul>
 801fbb2:	a325      	add	r3, pc, #148	@ (adr r3, 801fc48 <__kernel_sin+0x140>)
 801fbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbb8:	f7e0 fb96 	bl	80002e8 <__aeabi_dsub>
 801fbbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fbc0:	f7e0 fd4a 	bl	8000658 <__aeabi_dmul>
 801fbc4:	4602      	mov	r2, r0
 801fbc6:	460b      	mov	r3, r1
 801fbc8:	4620      	mov	r0, r4
 801fbca:	4629      	mov	r1, r5
 801fbcc:	f7e0 fb8e 	bl	80002ec <__adddf3>
 801fbd0:	4604      	mov	r4, r0
 801fbd2:	460d      	mov	r5, r1
 801fbd4:	ec45 4b10 	vmov	d0, r4, r5
 801fbd8:	b005      	add	sp, #20
 801fbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fbe2:	4b1b      	ldr	r3, [pc, #108]	@ (801fc50 <__kernel_sin+0x148>)
 801fbe4:	2200      	movs	r2, #0
 801fbe6:	f7e0 fd37 	bl	8000658 <__aeabi_dmul>
 801fbea:	4632      	mov	r2, r6
 801fbec:	4680      	mov	r8, r0
 801fbee:	4689      	mov	r9, r1
 801fbf0:	463b      	mov	r3, r7
 801fbf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fbf6:	f7e0 fd2f 	bl	8000658 <__aeabi_dmul>
 801fbfa:	4602      	mov	r2, r0
 801fbfc:	460b      	mov	r3, r1
 801fbfe:	4640      	mov	r0, r8
 801fc00:	4649      	mov	r1, r9
 801fc02:	f7e0 fb71 	bl	80002e8 <__aeabi_dsub>
 801fc06:	4652      	mov	r2, sl
 801fc08:	465b      	mov	r3, fp
 801fc0a:	f7e0 fd25 	bl	8000658 <__aeabi_dmul>
 801fc0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fc12:	f7e0 fb69 	bl	80002e8 <__aeabi_dsub>
 801fc16:	a30c      	add	r3, pc, #48	@ (adr r3, 801fc48 <__kernel_sin+0x140>)
 801fc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc1c:	4606      	mov	r6, r0
 801fc1e:	460f      	mov	r7, r1
 801fc20:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fc24:	f7e0 fd18 	bl	8000658 <__aeabi_dmul>
 801fc28:	4602      	mov	r2, r0
 801fc2a:	460b      	mov	r3, r1
 801fc2c:	4630      	mov	r0, r6
 801fc2e:	4639      	mov	r1, r7
 801fc30:	f7e0 fb5c 	bl	80002ec <__adddf3>
 801fc34:	4602      	mov	r2, r0
 801fc36:	460b      	mov	r3, r1
 801fc38:	4620      	mov	r0, r4
 801fc3a:	4629      	mov	r1, r5
 801fc3c:	f7e0 fb54 	bl	80002e8 <__aeabi_dsub>
 801fc40:	e7c6      	b.n	801fbd0 <__kernel_sin+0xc8>
 801fc42:	bf00      	nop
 801fc44:	f3af 8000 	nop.w
 801fc48:	55555549 	.word	0x55555549
 801fc4c:	3fc55555 	.word	0x3fc55555
 801fc50:	3fe00000 	.word	0x3fe00000
 801fc54:	5acfd57c 	.word	0x5acfd57c
 801fc58:	3de5d93a 	.word	0x3de5d93a
 801fc5c:	8a2b9ceb 	.word	0x8a2b9ceb
 801fc60:	3e5ae5e6 	.word	0x3e5ae5e6
 801fc64:	57b1fe7d 	.word	0x57b1fe7d
 801fc68:	3ec71de3 	.word	0x3ec71de3
 801fc6c:	19c161d5 	.word	0x19c161d5
 801fc70:	3f2a01a0 	.word	0x3f2a01a0
 801fc74:	1110f8a6 	.word	0x1110f8a6
 801fc78:	3f811111 	.word	0x3f811111
 801fc7c:	00000000 	.word	0x00000000

0801fc80 <__ieee754_rem_pio2>:
 801fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc84:	ec57 6b10 	vmov	r6, r7, d0
 801fc88:	4bc5      	ldr	r3, [pc, #788]	@ (801ffa0 <__ieee754_rem_pio2+0x320>)
 801fc8a:	b08d      	sub	sp, #52	@ 0x34
 801fc8c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801fc90:	4598      	cmp	r8, r3
 801fc92:	4604      	mov	r4, r0
 801fc94:	9704      	str	r7, [sp, #16]
 801fc96:	d807      	bhi.n	801fca8 <__ieee754_rem_pio2+0x28>
 801fc98:	2200      	movs	r2, #0
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	ed80 0b00 	vstr	d0, [r0]
 801fca0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801fca4:	2500      	movs	r5, #0
 801fca6:	e028      	b.n	801fcfa <__ieee754_rem_pio2+0x7a>
 801fca8:	4bbe      	ldr	r3, [pc, #760]	@ (801ffa4 <__ieee754_rem_pio2+0x324>)
 801fcaa:	4598      	cmp	r8, r3
 801fcac:	d878      	bhi.n	801fda0 <__ieee754_rem_pio2+0x120>
 801fcae:	9b04      	ldr	r3, [sp, #16]
 801fcb0:	4dbd      	ldr	r5, [pc, #756]	@ (801ffa8 <__ieee754_rem_pio2+0x328>)
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	4630      	mov	r0, r6
 801fcb6:	a3ac      	add	r3, pc, #688	@ (adr r3, 801ff68 <__ieee754_rem_pio2+0x2e8>)
 801fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcbc:	4639      	mov	r1, r7
 801fcbe:	dd38      	ble.n	801fd32 <__ieee754_rem_pio2+0xb2>
 801fcc0:	f7e0 fb12 	bl	80002e8 <__aeabi_dsub>
 801fcc4:	45a8      	cmp	r8, r5
 801fcc6:	4606      	mov	r6, r0
 801fcc8:	460f      	mov	r7, r1
 801fcca:	d01a      	beq.n	801fd02 <__ieee754_rem_pio2+0x82>
 801fccc:	a3a8      	add	r3, pc, #672	@ (adr r3, 801ff70 <__ieee754_rem_pio2+0x2f0>)
 801fcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcd2:	f7e0 fb09 	bl	80002e8 <__aeabi_dsub>
 801fcd6:	4602      	mov	r2, r0
 801fcd8:	460b      	mov	r3, r1
 801fcda:	4680      	mov	r8, r0
 801fcdc:	4689      	mov	r9, r1
 801fcde:	4630      	mov	r0, r6
 801fce0:	4639      	mov	r1, r7
 801fce2:	f7e0 fb01 	bl	80002e8 <__aeabi_dsub>
 801fce6:	a3a2      	add	r3, pc, #648	@ (adr r3, 801ff70 <__ieee754_rem_pio2+0x2f0>)
 801fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcec:	f7e0 fafc 	bl	80002e8 <__aeabi_dsub>
 801fcf0:	e9c4 8900 	strd	r8, r9, [r4]
 801fcf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fcf8:	2501      	movs	r5, #1
 801fcfa:	4628      	mov	r0, r5
 801fcfc:	b00d      	add	sp, #52	@ 0x34
 801fcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd02:	a39d      	add	r3, pc, #628	@ (adr r3, 801ff78 <__ieee754_rem_pio2+0x2f8>)
 801fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd08:	f7e0 faee 	bl	80002e8 <__aeabi_dsub>
 801fd0c:	a39c      	add	r3, pc, #624	@ (adr r3, 801ff80 <__ieee754_rem_pio2+0x300>)
 801fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd12:	4606      	mov	r6, r0
 801fd14:	460f      	mov	r7, r1
 801fd16:	f7e0 fae7 	bl	80002e8 <__aeabi_dsub>
 801fd1a:	4602      	mov	r2, r0
 801fd1c:	460b      	mov	r3, r1
 801fd1e:	4680      	mov	r8, r0
 801fd20:	4689      	mov	r9, r1
 801fd22:	4630      	mov	r0, r6
 801fd24:	4639      	mov	r1, r7
 801fd26:	f7e0 fadf 	bl	80002e8 <__aeabi_dsub>
 801fd2a:	a395      	add	r3, pc, #596	@ (adr r3, 801ff80 <__ieee754_rem_pio2+0x300>)
 801fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd30:	e7dc      	b.n	801fcec <__ieee754_rem_pio2+0x6c>
 801fd32:	f7e0 fadb 	bl	80002ec <__adddf3>
 801fd36:	45a8      	cmp	r8, r5
 801fd38:	4606      	mov	r6, r0
 801fd3a:	460f      	mov	r7, r1
 801fd3c:	d018      	beq.n	801fd70 <__ieee754_rem_pio2+0xf0>
 801fd3e:	a38c      	add	r3, pc, #560	@ (adr r3, 801ff70 <__ieee754_rem_pio2+0x2f0>)
 801fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd44:	f7e0 fad2 	bl	80002ec <__adddf3>
 801fd48:	4602      	mov	r2, r0
 801fd4a:	460b      	mov	r3, r1
 801fd4c:	4680      	mov	r8, r0
 801fd4e:	4689      	mov	r9, r1
 801fd50:	4630      	mov	r0, r6
 801fd52:	4639      	mov	r1, r7
 801fd54:	f7e0 fac8 	bl	80002e8 <__aeabi_dsub>
 801fd58:	a385      	add	r3, pc, #532	@ (adr r3, 801ff70 <__ieee754_rem_pio2+0x2f0>)
 801fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd5e:	f7e0 fac5 	bl	80002ec <__adddf3>
 801fd62:	f04f 35ff 	mov.w	r5, #4294967295
 801fd66:	e9c4 8900 	strd	r8, r9, [r4]
 801fd6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fd6e:	e7c4      	b.n	801fcfa <__ieee754_rem_pio2+0x7a>
 801fd70:	a381      	add	r3, pc, #516	@ (adr r3, 801ff78 <__ieee754_rem_pio2+0x2f8>)
 801fd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd76:	f7e0 fab9 	bl	80002ec <__adddf3>
 801fd7a:	a381      	add	r3, pc, #516	@ (adr r3, 801ff80 <__ieee754_rem_pio2+0x300>)
 801fd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd80:	4606      	mov	r6, r0
 801fd82:	460f      	mov	r7, r1
 801fd84:	f7e0 fab2 	bl	80002ec <__adddf3>
 801fd88:	4602      	mov	r2, r0
 801fd8a:	460b      	mov	r3, r1
 801fd8c:	4680      	mov	r8, r0
 801fd8e:	4689      	mov	r9, r1
 801fd90:	4630      	mov	r0, r6
 801fd92:	4639      	mov	r1, r7
 801fd94:	f7e0 faa8 	bl	80002e8 <__aeabi_dsub>
 801fd98:	a379      	add	r3, pc, #484	@ (adr r3, 801ff80 <__ieee754_rem_pio2+0x300>)
 801fd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd9e:	e7de      	b.n	801fd5e <__ieee754_rem_pio2+0xde>
 801fda0:	4b82      	ldr	r3, [pc, #520]	@ (801ffac <__ieee754_rem_pio2+0x32c>)
 801fda2:	4598      	cmp	r8, r3
 801fda4:	f200 80d1 	bhi.w	801ff4a <__ieee754_rem_pio2+0x2ca>
 801fda8:	f000 f966 	bl	8020078 <fabs>
 801fdac:	ec57 6b10 	vmov	r6, r7, d0
 801fdb0:	a375      	add	r3, pc, #468	@ (adr r3, 801ff88 <__ieee754_rem_pio2+0x308>)
 801fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdb6:	4630      	mov	r0, r6
 801fdb8:	4639      	mov	r1, r7
 801fdba:	f7e0 fc4d 	bl	8000658 <__aeabi_dmul>
 801fdbe:	4b7c      	ldr	r3, [pc, #496]	@ (801ffb0 <__ieee754_rem_pio2+0x330>)
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	f7e0 fa93 	bl	80002ec <__adddf3>
 801fdc6:	f7e0 fef7 	bl	8000bb8 <__aeabi_d2iz>
 801fdca:	4605      	mov	r5, r0
 801fdcc:	f7e0 fbda 	bl	8000584 <__aeabi_i2d>
 801fdd0:	4602      	mov	r2, r0
 801fdd2:	460b      	mov	r3, r1
 801fdd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fdd8:	a363      	add	r3, pc, #396	@ (adr r3, 801ff68 <__ieee754_rem_pio2+0x2e8>)
 801fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdde:	f7e0 fc3b 	bl	8000658 <__aeabi_dmul>
 801fde2:	4602      	mov	r2, r0
 801fde4:	460b      	mov	r3, r1
 801fde6:	4630      	mov	r0, r6
 801fde8:	4639      	mov	r1, r7
 801fdea:	f7e0 fa7d 	bl	80002e8 <__aeabi_dsub>
 801fdee:	a360      	add	r3, pc, #384	@ (adr r3, 801ff70 <__ieee754_rem_pio2+0x2f0>)
 801fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf4:	4682      	mov	sl, r0
 801fdf6:	468b      	mov	fp, r1
 801fdf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fdfc:	f7e0 fc2c 	bl	8000658 <__aeabi_dmul>
 801fe00:	2d1f      	cmp	r5, #31
 801fe02:	4606      	mov	r6, r0
 801fe04:	460f      	mov	r7, r1
 801fe06:	dc0c      	bgt.n	801fe22 <__ieee754_rem_pio2+0x1a2>
 801fe08:	4b6a      	ldr	r3, [pc, #424]	@ (801ffb4 <__ieee754_rem_pio2+0x334>)
 801fe0a:	1e6a      	subs	r2, r5, #1
 801fe0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fe10:	4543      	cmp	r3, r8
 801fe12:	d006      	beq.n	801fe22 <__ieee754_rem_pio2+0x1a2>
 801fe14:	4632      	mov	r2, r6
 801fe16:	463b      	mov	r3, r7
 801fe18:	4650      	mov	r0, sl
 801fe1a:	4659      	mov	r1, fp
 801fe1c:	f7e0 fa64 	bl	80002e8 <__aeabi_dsub>
 801fe20:	e00e      	b.n	801fe40 <__ieee754_rem_pio2+0x1c0>
 801fe22:	463b      	mov	r3, r7
 801fe24:	4632      	mov	r2, r6
 801fe26:	4650      	mov	r0, sl
 801fe28:	4659      	mov	r1, fp
 801fe2a:	f7e0 fa5d 	bl	80002e8 <__aeabi_dsub>
 801fe2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fe32:	9305      	str	r3, [sp, #20]
 801fe34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fe38:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801fe3c:	2b10      	cmp	r3, #16
 801fe3e:	dc02      	bgt.n	801fe46 <__ieee754_rem_pio2+0x1c6>
 801fe40:	e9c4 0100 	strd	r0, r1, [r4]
 801fe44:	e039      	b.n	801feba <__ieee754_rem_pio2+0x23a>
 801fe46:	a34c      	add	r3, pc, #304	@ (adr r3, 801ff78 <__ieee754_rem_pio2+0x2f8>)
 801fe48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fe50:	f7e0 fc02 	bl	8000658 <__aeabi_dmul>
 801fe54:	4606      	mov	r6, r0
 801fe56:	460f      	mov	r7, r1
 801fe58:	4602      	mov	r2, r0
 801fe5a:	460b      	mov	r3, r1
 801fe5c:	4650      	mov	r0, sl
 801fe5e:	4659      	mov	r1, fp
 801fe60:	f7e0 fa42 	bl	80002e8 <__aeabi_dsub>
 801fe64:	4602      	mov	r2, r0
 801fe66:	460b      	mov	r3, r1
 801fe68:	4680      	mov	r8, r0
 801fe6a:	4689      	mov	r9, r1
 801fe6c:	4650      	mov	r0, sl
 801fe6e:	4659      	mov	r1, fp
 801fe70:	f7e0 fa3a 	bl	80002e8 <__aeabi_dsub>
 801fe74:	4632      	mov	r2, r6
 801fe76:	463b      	mov	r3, r7
 801fe78:	f7e0 fa36 	bl	80002e8 <__aeabi_dsub>
 801fe7c:	a340      	add	r3, pc, #256	@ (adr r3, 801ff80 <__ieee754_rem_pio2+0x300>)
 801fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe82:	4606      	mov	r6, r0
 801fe84:	460f      	mov	r7, r1
 801fe86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fe8a:	f7e0 fbe5 	bl	8000658 <__aeabi_dmul>
 801fe8e:	4632      	mov	r2, r6
 801fe90:	463b      	mov	r3, r7
 801fe92:	f7e0 fa29 	bl	80002e8 <__aeabi_dsub>
 801fe96:	4602      	mov	r2, r0
 801fe98:	460b      	mov	r3, r1
 801fe9a:	4606      	mov	r6, r0
 801fe9c:	460f      	mov	r7, r1
 801fe9e:	4640      	mov	r0, r8
 801fea0:	4649      	mov	r1, r9
 801fea2:	f7e0 fa21 	bl	80002e8 <__aeabi_dsub>
 801fea6:	9a05      	ldr	r2, [sp, #20]
 801fea8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801feac:	1ad3      	subs	r3, r2, r3
 801feae:	2b31      	cmp	r3, #49	@ 0x31
 801feb0:	dc20      	bgt.n	801fef4 <__ieee754_rem_pio2+0x274>
 801feb2:	e9c4 0100 	strd	r0, r1, [r4]
 801feb6:	46c2      	mov	sl, r8
 801feb8:	46cb      	mov	fp, r9
 801feba:	e9d4 8900 	ldrd	r8, r9, [r4]
 801febe:	4650      	mov	r0, sl
 801fec0:	4642      	mov	r2, r8
 801fec2:	464b      	mov	r3, r9
 801fec4:	4659      	mov	r1, fp
 801fec6:	f7e0 fa0f 	bl	80002e8 <__aeabi_dsub>
 801feca:	463b      	mov	r3, r7
 801fecc:	4632      	mov	r2, r6
 801fece:	f7e0 fa0b 	bl	80002e8 <__aeabi_dsub>
 801fed2:	9b04      	ldr	r3, [sp, #16]
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801feda:	f6bf af0e 	bge.w	801fcfa <__ieee754_rem_pio2+0x7a>
 801fede:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801fee2:	6063      	str	r3, [r4, #4]
 801fee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fee8:	f8c4 8000 	str.w	r8, [r4]
 801feec:	60a0      	str	r0, [r4, #8]
 801feee:	60e3      	str	r3, [r4, #12]
 801fef0:	426d      	negs	r5, r5
 801fef2:	e702      	b.n	801fcfa <__ieee754_rem_pio2+0x7a>
 801fef4:	a326      	add	r3, pc, #152	@ (adr r3, 801ff90 <__ieee754_rem_pio2+0x310>)
 801fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fefa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fefe:	f7e0 fbab 	bl	8000658 <__aeabi_dmul>
 801ff02:	4606      	mov	r6, r0
 801ff04:	460f      	mov	r7, r1
 801ff06:	4602      	mov	r2, r0
 801ff08:	460b      	mov	r3, r1
 801ff0a:	4640      	mov	r0, r8
 801ff0c:	4649      	mov	r1, r9
 801ff0e:	f7e0 f9eb 	bl	80002e8 <__aeabi_dsub>
 801ff12:	4602      	mov	r2, r0
 801ff14:	460b      	mov	r3, r1
 801ff16:	4682      	mov	sl, r0
 801ff18:	468b      	mov	fp, r1
 801ff1a:	4640      	mov	r0, r8
 801ff1c:	4649      	mov	r1, r9
 801ff1e:	f7e0 f9e3 	bl	80002e8 <__aeabi_dsub>
 801ff22:	4632      	mov	r2, r6
 801ff24:	463b      	mov	r3, r7
 801ff26:	f7e0 f9df 	bl	80002e8 <__aeabi_dsub>
 801ff2a:	a31b      	add	r3, pc, #108	@ (adr r3, 801ff98 <__ieee754_rem_pio2+0x318>)
 801ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff30:	4606      	mov	r6, r0
 801ff32:	460f      	mov	r7, r1
 801ff34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ff38:	f7e0 fb8e 	bl	8000658 <__aeabi_dmul>
 801ff3c:	4632      	mov	r2, r6
 801ff3e:	463b      	mov	r3, r7
 801ff40:	f7e0 f9d2 	bl	80002e8 <__aeabi_dsub>
 801ff44:	4606      	mov	r6, r0
 801ff46:	460f      	mov	r7, r1
 801ff48:	e764      	b.n	801fe14 <__ieee754_rem_pio2+0x194>
 801ff4a:	4b1b      	ldr	r3, [pc, #108]	@ (801ffb8 <__ieee754_rem_pio2+0x338>)
 801ff4c:	4598      	cmp	r8, r3
 801ff4e:	d935      	bls.n	801ffbc <__ieee754_rem_pio2+0x33c>
 801ff50:	4632      	mov	r2, r6
 801ff52:	463b      	mov	r3, r7
 801ff54:	4630      	mov	r0, r6
 801ff56:	4639      	mov	r1, r7
 801ff58:	f7e0 f9c6 	bl	80002e8 <__aeabi_dsub>
 801ff5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ff60:	e9c4 0100 	strd	r0, r1, [r4]
 801ff64:	e69e      	b.n	801fca4 <__ieee754_rem_pio2+0x24>
 801ff66:	bf00      	nop
 801ff68:	54400000 	.word	0x54400000
 801ff6c:	3ff921fb 	.word	0x3ff921fb
 801ff70:	1a626331 	.word	0x1a626331
 801ff74:	3dd0b461 	.word	0x3dd0b461
 801ff78:	1a600000 	.word	0x1a600000
 801ff7c:	3dd0b461 	.word	0x3dd0b461
 801ff80:	2e037073 	.word	0x2e037073
 801ff84:	3ba3198a 	.word	0x3ba3198a
 801ff88:	6dc9c883 	.word	0x6dc9c883
 801ff8c:	3fe45f30 	.word	0x3fe45f30
 801ff90:	2e000000 	.word	0x2e000000
 801ff94:	3ba3198a 	.word	0x3ba3198a
 801ff98:	252049c1 	.word	0x252049c1
 801ff9c:	397b839a 	.word	0x397b839a
 801ffa0:	3fe921fb 	.word	0x3fe921fb
 801ffa4:	4002d97b 	.word	0x4002d97b
 801ffa8:	3ff921fb 	.word	0x3ff921fb
 801ffac:	413921fb 	.word	0x413921fb
 801ffb0:	3fe00000 	.word	0x3fe00000
 801ffb4:	080224d0 	.word	0x080224d0
 801ffb8:	7fefffff 	.word	0x7fefffff
 801ffbc:	ea4f 5528 	mov.w	r5, r8, asr #20
 801ffc0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801ffc4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801ffc8:	4630      	mov	r0, r6
 801ffca:	460f      	mov	r7, r1
 801ffcc:	f7e0 fdf4 	bl	8000bb8 <__aeabi_d2iz>
 801ffd0:	f7e0 fad8 	bl	8000584 <__aeabi_i2d>
 801ffd4:	4602      	mov	r2, r0
 801ffd6:	460b      	mov	r3, r1
 801ffd8:	4630      	mov	r0, r6
 801ffda:	4639      	mov	r1, r7
 801ffdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ffe0:	f7e0 f982 	bl	80002e8 <__aeabi_dsub>
 801ffe4:	4b22      	ldr	r3, [pc, #136]	@ (8020070 <__ieee754_rem_pio2+0x3f0>)
 801ffe6:	2200      	movs	r2, #0
 801ffe8:	f7e0 fb36 	bl	8000658 <__aeabi_dmul>
 801ffec:	460f      	mov	r7, r1
 801ffee:	4606      	mov	r6, r0
 801fff0:	f7e0 fde2 	bl	8000bb8 <__aeabi_d2iz>
 801fff4:	f7e0 fac6 	bl	8000584 <__aeabi_i2d>
 801fff8:	4602      	mov	r2, r0
 801fffa:	460b      	mov	r3, r1
 801fffc:	4630      	mov	r0, r6
 801fffe:	4639      	mov	r1, r7
 8020000:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020004:	f7e0 f970 	bl	80002e8 <__aeabi_dsub>
 8020008:	4b19      	ldr	r3, [pc, #100]	@ (8020070 <__ieee754_rem_pio2+0x3f0>)
 802000a:	2200      	movs	r2, #0
 802000c:	f7e0 fb24 	bl	8000658 <__aeabi_dmul>
 8020010:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8020014:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8020018:	f04f 0803 	mov.w	r8, #3
 802001c:	2600      	movs	r6, #0
 802001e:	2700      	movs	r7, #0
 8020020:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8020024:	4632      	mov	r2, r6
 8020026:	463b      	mov	r3, r7
 8020028:	46c2      	mov	sl, r8
 802002a:	f108 38ff 	add.w	r8, r8, #4294967295
 802002e:	f7e0 fd7b 	bl	8000b28 <__aeabi_dcmpeq>
 8020032:	2800      	cmp	r0, #0
 8020034:	d1f4      	bne.n	8020020 <__ieee754_rem_pio2+0x3a0>
 8020036:	4b0f      	ldr	r3, [pc, #60]	@ (8020074 <__ieee754_rem_pio2+0x3f4>)
 8020038:	9301      	str	r3, [sp, #4]
 802003a:	2302      	movs	r3, #2
 802003c:	9300      	str	r3, [sp, #0]
 802003e:	462a      	mov	r2, r5
 8020040:	4653      	mov	r3, sl
 8020042:	4621      	mov	r1, r4
 8020044:	a806      	add	r0, sp, #24
 8020046:	f000 f81f 	bl	8020088 <__kernel_rem_pio2>
 802004a:	9b04      	ldr	r3, [sp, #16]
 802004c:	2b00      	cmp	r3, #0
 802004e:	4605      	mov	r5, r0
 8020050:	f6bf ae53 	bge.w	801fcfa <__ieee754_rem_pio2+0x7a>
 8020054:	e9d4 2100 	ldrd	r2, r1, [r4]
 8020058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802005c:	e9c4 2300 	strd	r2, r3, [r4]
 8020060:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8020064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020068:	e9c4 2302 	strd	r2, r3, [r4, #8]
 802006c:	e740      	b.n	801fef0 <__ieee754_rem_pio2+0x270>
 802006e:	bf00      	nop
 8020070:	41700000 	.word	0x41700000
 8020074:	08022550 	.word	0x08022550

08020078 <fabs>:
 8020078:	ec51 0b10 	vmov	r0, r1, d0
 802007c:	4602      	mov	r2, r0
 802007e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8020082:	ec43 2b10 	vmov	d0, r2, r3
 8020086:	4770      	bx	lr

08020088 <__kernel_rem_pio2>:
 8020088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802008c:	ed2d 8b02 	vpush	{d8}
 8020090:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8020094:	f112 0f14 	cmn.w	r2, #20
 8020098:	9306      	str	r3, [sp, #24]
 802009a:	9104      	str	r1, [sp, #16]
 802009c:	4bc2      	ldr	r3, [pc, #776]	@ (80203a8 <__kernel_rem_pio2+0x320>)
 802009e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80200a0:	9008      	str	r0, [sp, #32]
 80200a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80200a6:	9300      	str	r3, [sp, #0]
 80200a8:	9b06      	ldr	r3, [sp, #24]
 80200aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80200ae:	bfa8      	it	ge
 80200b0:	1ed4      	subge	r4, r2, #3
 80200b2:	9305      	str	r3, [sp, #20]
 80200b4:	bfb2      	itee	lt
 80200b6:	2400      	movlt	r4, #0
 80200b8:	2318      	movge	r3, #24
 80200ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80200be:	f06f 0317 	mvn.w	r3, #23
 80200c2:	fb04 3303 	mla	r3, r4, r3, r3
 80200c6:	eb03 0b02 	add.w	fp, r3, r2
 80200ca:	9b00      	ldr	r3, [sp, #0]
 80200cc:	9a05      	ldr	r2, [sp, #20]
 80200ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8020398 <__kernel_rem_pio2+0x310>
 80200d2:	eb03 0802 	add.w	r8, r3, r2
 80200d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80200d8:	1aa7      	subs	r7, r4, r2
 80200da:	ae20      	add	r6, sp, #128	@ 0x80
 80200dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80200e0:	2500      	movs	r5, #0
 80200e2:	4545      	cmp	r5, r8
 80200e4:	dd12      	ble.n	802010c <__kernel_rem_pio2+0x84>
 80200e6:	9b06      	ldr	r3, [sp, #24]
 80200e8:	aa20      	add	r2, sp, #128	@ 0x80
 80200ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80200ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80200f2:	2700      	movs	r7, #0
 80200f4:	9b00      	ldr	r3, [sp, #0]
 80200f6:	429f      	cmp	r7, r3
 80200f8:	dc2e      	bgt.n	8020158 <__kernel_rem_pio2+0xd0>
 80200fa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8020398 <__kernel_rem_pio2+0x310>
 80200fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020102:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020106:	46a8      	mov	r8, r5
 8020108:	2600      	movs	r6, #0
 802010a:	e01b      	b.n	8020144 <__kernel_rem_pio2+0xbc>
 802010c:	42ef      	cmn	r7, r5
 802010e:	d407      	bmi.n	8020120 <__kernel_rem_pio2+0x98>
 8020110:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8020114:	f7e0 fa36 	bl	8000584 <__aeabi_i2d>
 8020118:	e8e6 0102 	strd	r0, r1, [r6], #8
 802011c:	3501      	adds	r5, #1
 802011e:	e7e0      	b.n	80200e2 <__kernel_rem_pio2+0x5a>
 8020120:	ec51 0b18 	vmov	r0, r1, d8
 8020124:	e7f8      	b.n	8020118 <__kernel_rem_pio2+0x90>
 8020126:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 802012a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 802012e:	f7e0 fa93 	bl	8000658 <__aeabi_dmul>
 8020132:	4602      	mov	r2, r0
 8020134:	460b      	mov	r3, r1
 8020136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802013a:	f7e0 f8d7 	bl	80002ec <__adddf3>
 802013e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020142:	3601      	adds	r6, #1
 8020144:	9b05      	ldr	r3, [sp, #20]
 8020146:	429e      	cmp	r6, r3
 8020148:	dded      	ble.n	8020126 <__kernel_rem_pio2+0x9e>
 802014a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802014e:	3701      	adds	r7, #1
 8020150:	ecaa 7b02 	vstmia	sl!, {d7}
 8020154:	3508      	adds	r5, #8
 8020156:	e7cd      	b.n	80200f4 <__kernel_rem_pio2+0x6c>
 8020158:	9b00      	ldr	r3, [sp, #0]
 802015a:	f8dd 8000 	ldr.w	r8, [sp]
 802015e:	aa0c      	add	r2, sp, #48	@ 0x30
 8020160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020164:	930a      	str	r3, [sp, #40]	@ 0x28
 8020166:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8020168:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802016c:	9309      	str	r3, [sp, #36]	@ 0x24
 802016e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8020172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020174:	ab98      	add	r3, sp, #608	@ 0x260
 8020176:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802017a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 802017e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020182:	ac0c      	add	r4, sp, #48	@ 0x30
 8020184:	ab70      	add	r3, sp, #448	@ 0x1c0
 8020186:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 802018a:	46a1      	mov	r9, r4
 802018c:	46c2      	mov	sl, r8
 802018e:	f1ba 0f00 	cmp.w	sl, #0
 8020192:	dc77      	bgt.n	8020284 <__kernel_rem_pio2+0x1fc>
 8020194:	4658      	mov	r0, fp
 8020196:	ed9d 0b02 	vldr	d0, [sp, #8]
 802019a:	f000 fac5 	bl	8020728 <scalbn>
 802019e:	ec57 6b10 	vmov	r6, r7, d0
 80201a2:	2200      	movs	r2, #0
 80201a4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80201a8:	4630      	mov	r0, r6
 80201aa:	4639      	mov	r1, r7
 80201ac:	f7e0 fa54 	bl	8000658 <__aeabi_dmul>
 80201b0:	ec41 0b10 	vmov	d0, r0, r1
 80201b4:	f000 fb34 	bl	8020820 <floor>
 80201b8:	4b7c      	ldr	r3, [pc, #496]	@ (80203ac <__kernel_rem_pio2+0x324>)
 80201ba:	ec51 0b10 	vmov	r0, r1, d0
 80201be:	2200      	movs	r2, #0
 80201c0:	f7e0 fa4a 	bl	8000658 <__aeabi_dmul>
 80201c4:	4602      	mov	r2, r0
 80201c6:	460b      	mov	r3, r1
 80201c8:	4630      	mov	r0, r6
 80201ca:	4639      	mov	r1, r7
 80201cc:	f7e0 f88c 	bl	80002e8 <__aeabi_dsub>
 80201d0:	460f      	mov	r7, r1
 80201d2:	4606      	mov	r6, r0
 80201d4:	f7e0 fcf0 	bl	8000bb8 <__aeabi_d2iz>
 80201d8:	9002      	str	r0, [sp, #8]
 80201da:	f7e0 f9d3 	bl	8000584 <__aeabi_i2d>
 80201de:	4602      	mov	r2, r0
 80201e0:	460b      	mov	r3, r1
 80201e2:	4630      	mov	r0, r6
 80201e4:	4639      	mov	r1, r7
 80201e6:	f7e0 f87f 	bl	80002e8 <__aeabi_dsub>
 80201ea:	f1bb 0f00 	cmp.w	fp, #0
 80201ee:	4606      	mov	r6, r0
 80201f0:	460f      	mov	r7, r1
 80201f2:	dd6c      	ble.n	80202ce <__kernel_rem_pio2+0x246>
 80201f4:	f108 31ff 	add.w	r1, r8, #4294967295
 80201f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80201fa:	9d02      	ldr	r5, [sp, #8]
 80201fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020200:	f1cb 0018 	rsb	r0, fp, #24
 8020204:	fa43 f200 	asr.w	r2, r3, r0
 8020208:	4415      	add	r5, r2
 802020a:	4082      	lsls	r2, r0
 802020c:	1a9b      	subs	r3, r3, r2
 802020e:	aa0c      	add	r2, sp, #48	@ 0x30
 8020210:	9502      	str	r5, [sp, #8]
 8020212:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8020216:	f1cb 0217 	rsb	r2, fp, #23
 802021a:	fa43 f902 	asr.w	r9, r3, r2
 802021e:	f1b9 0f00 	cmp.w	r9, #0
 8020222:	dd64      	ble.n	80202ee <__kernel_rem_pio2+0x266>
 8020224:	9b02      	ldr	r3, [sp, #8]
 8020226:	2200      	movs	r2, #0
 8020228:	3301      	adds	r3, #1
 802022a:	9302      	str	r3, [sp, #8]
 802022c:	4615      	mov	r5, r2
 802022e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8020232:	4590      	cmp	r8, r2
 8020234:	f300 80a1 	bgt.w	802037a <__kernel_rem_pio2+0x2f2>
 8020238:	f1bb 0f00 	cmp.w	fp, #0
 802023c:	dd07      	ble.n	802024e <__kernel_rem_pio2+0x1c6>
 802023e:	f1bb 0f01 	cmp.w	fp, #1
 8020242:	f000 80c1 	beq.w	80203c8 <__kernel_rem_pio2+0x340>
 8020246:	f1bb 0f02 	cmp.w	fp, #2
 802024a:	f000 80c8 	beq.w	80203de <__kernel_rem_pio2+0x356>
 802024e:	f1b9 0f02 	cmp.w	r9, #2
 8020252:	d14c      	bne.n	80202ee <__kernel_rem_pio2+0x266>
 8020254:	4632      	mov	r2, r6
 8020256:	463b      	mov	r3, r7
 8020258:	4955      	ldr	r1, [pc, #340]	@ (80203b0 <__kernel_rem_pio2+0x328>)
 802025a:	2000      	movs	r0, #0
 802025c:	f7e0 f844 	bl	80002e8 <__aeabi_dsub>
 8020260:	4606      	mov	r6, r0
 8020262:	460f      	mov	r7, r1
 8020264:	2d00      	cmp	r5, #0
 8020266:	d042      	beq.n	80202ee <__kernel_rem_pio2+0x266>
 8020268:	4658      	mov	r0, fp
 802026a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80203a0 <__kernel_rem_pio2+0x318>
 802026e:	f000 fa5b 	bl	8020728 <scalbn>
 8020272:	4630      	mov	r0, r6
 8020274:	4639      	mov	r1, r7
 8020276:	ec53 2b10 	vmov	r2, r3, d0
 802027a:	f7e0 f835 	bl	80002e8 <__aeabi_dsub>
 802027e:	4606      	mov	r6, r0
 8020280:	460f      	mov	r7, r1
 8020282:	e034      	b.n	80202ee <__kernel_rem_pio2+0x266>
 8020284:	4b4b      	ldr	r3, [pc, #300]	@ (80203b4 <__kernel_rem_pio2+0x32c>)
 8020286:	2200      	movs	r2, #0
 8020288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802028c:	f7e0 f9e4 	bl	8000658 <__aeabi_dmul>
 8020290:	f7e0 fc92 	bl	8000bb8 <__aeabi_d2iz>
 8020294:	f7e0 f976 	bl	8000584 <__aeabi_i2d>
 8020298:	4b47      	ldr	r3, [pc, #284]	@ (80203b8 <__kernel_rem_pio2+0x330>)
 802029a:	2200      	movs	r2, #0
 802029c:	4606      	mov	r6, r0
 802029e:	460f      	mov	r7, r1
 80202a0:	f7e0 f9da 	bl	8000658 <__aeabi_dmul>
 80202a4:	4602      	mov	r2, r0
 80202a6:	460b      	mov	r3, r1
 80202a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80202ac:	f7e0 f81c 	bl	80002e8 <__aeabi_dsub>
 80202b0:	f7e0 fc82 	bl	8000bb8 <__aeabi_d2iz>
 80202b4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80202b8:	f849 0b04 	str.w	r0, [r9], #4
 80202bc:	4639      	mov	r1, r7
 80202be:	4630      	mov	r0, r6
 80202c0:	f7e0 f814 	bl	80002ec <__adddf3>
 80202c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80202c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80202cc:	e75f      	b.n	802018e <__kernel_rem_pio2+0x106>
 80202ce:	d107      	bne.n	80202e0 <__kernel_rem_pio2+0x258>
 80202d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80202d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80202d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80202da:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80202de:	e79e      	b.n	802021e <__kernel_rem_pio2+0x196>
 80202e0:	4b36      	ldr	r3, [pc, #216]	@ (80203bc <__kernel_rem_pio2+0x334>)
 80202e2:	2200      	movs	r2, #0
 80202e4:	f7e0 fc3e 	bl	8000b64 <__aeabi_dcmpge>
 80202e8:	2800      	cmp	r0, #0
 80202ea:	d143      	bne.n	8020374 <__kernel_rem_pio2+0x2ec>
 80202ec:	4681      	mov	r9, r0
 80202ee:	2200      	movs	r2, #0
 80202f0:	2300      	movs	r3, #0
 80202f2:	4630      	mov	r0, r6
 80202f4:	4639      	mov	r1, r7
 80202f6:	f7e0 fc17 	bl	8000b28 <__aeabi_dcmpeq>
 80202fa:	2800      	cmp	r0, #0
 80202fc:	f000 80c1 	beq.w	8020482 <__kernel_rem_pio2+0x3fa>
 8020300:	f108 33ff 	add.w	r3, r8, #4294967295
 8020304:	2200      	movs	r2, #0
 8020306:	9900      	ldr	r1, [sp, #0]
 8020308:	428b      	cmp	r3, r1
 802030a:	da70      	bge.n	80203ee <__kernel_rem_pio2+0x366>
 802030c:	2a00      	cmp	r2, #0
 802030e:	f000 808b 	beq.w	8020428 <__kernel_rem_pio2+0x3a0>
 8020312:	f108 38ff 	add.w	r8, r8, #4294967295
 8020316:	ab0c      	add	r3, sp, #48	@ 0x30
 8020318:	f1ab 0b18 	sub.w	fp, fp, #24
 802031c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8020320:	2b00      	cmp	r3, #0
 8020322:	d0f6      	beq.n	8020312 <__kernel_rem_pio2+0x28a>
 8020324:	4658      	mov	r0, fp
 8020326:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80203a0 <__kernel_rem_pio2+0x318>
 802032a:	f000 f9fd 	bl	8020728 <scalbn>
 802032e:	f108 0301 	add.w	r3, r8, #1
 8020332:	00da      	lsls	r2, r3, #3
 8020334:	9205      	str	r2, [sp, #20]
 8020336:	ec55 4b10 	vmov	r4, r5, d0
 802033a:	aa70      	add	r2, sp, #448	@ 0x1c0
 802033c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80203b4 <__kernel_rem_pio2+0x32c>
 8020340:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8020344:	4646      	mov	r6, r8
 8020346:	f04f 0a00 	mov.w	sl, #0
 802034a:	2e00      	cmp	r6, #0
 802034c:	f280 80d1 	bge.w	80204f2 <__kernel_rem_pio2+0x46a>
 8020350:	4644      	mov	r4, r8
 8020352:	2c00      	cmp	r4, #0
 8020354:	f2c0 80ff 	blt.w	8020556 <__kernel_rem_pio2+0x4ce>
 8020358:	4b19      	ldr	r3, [pc, #100]	@ (80203c0 <__kernel_rem_pio2+0x338>)
 802035a:	461f      	mov	r7, r3
 802035c:	ab70      	add	r3, sp, #448	@ 0x1c0
 802035e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020362:	9306      	str	r3, [sp, #24]
 8020364:	f04f 0a00 	mov.w	sl, #0
 8020368:	f04f 0b00 	mov.w	fp, #0
 802036c:	2600      	movs	r6, #0
 802036e:	eba8 0504 	sub.w	r5, r8, r4
 8020372:	e0e4      	b.n	802053e <__kernel_rem_pio2+0x4b6>
 8020374:	f04f 0902 	mov.w	r9, #2
 8020378:	e754      	b.n	8020224 <__kernel_rem_pio2+0x19c>
 802037a:	f854 3b04 	ldr.w	r3, [r4], #4
 802037e:	bb0d      	cbnz	r5, 80203c4 <__kernel_rem_pio2+0x33c>
 8020380:	b123      	cbz	r3, 802038c <__kernel_rem_pio2+0x304>
 8020382:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8020386:	f844 3c04 	str.w	r3, [r4, #-4]
 802038a:	2301      	movs	r3, #1
 802038c:	3201      	adds	r2, #1
 802038e:	461d      	mov	r5, r3
 8020390:	e74f      	b.n	8020232 <__kernel_rem_pio2+0x1aa>
 8020392:	bf00      	nop
 8020394:	f3af 8000 	nop.w
	...
 80203a4:	3ff00000 	.word	0x3ff00000
 80203a8:	08022698 	.word	0x08022698
 80203ac:	40200000 	.word	0x40200000
 80203b0:	3ff00000 	.word	0x3ff00000
 80203b4:	3e700000 	.word	0x3e700000
 80203b8:	41700000 	.word	0x41700000
 80203bc:	3fe00000 	.word	0x3fe00000
 80203c0:	08022658 	.word	0x08022658
 80203c4:	1acb      	subs	r3, r1, r3
 80203c6:	e7de      	b.n	8020386 <__kernel_rem_pio2+0x2fe>
 80203c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80203cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80203ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80203d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80203d6:	a90c      	add	r1, sp, #48	@ 0x30
 80203d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80203dc:	e737      	b.n	802024e <__kernel_rem_pio2+0x1c6>
 80203de:	f108 32ff 	add.w	r2, r8, #4294967295
 80203e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80203e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80203e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80203ec:	e7f3      	b.n	80203d6 <__kernel_rem_pio2+0x34e>
 80203ee:	a90c      	add	r1, sp, #48	@ 0x30
 80203f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80203f4:	3b01      	subs	r3, #1
 80203f6:	430a      	orrs	r2, r1
 80203f8:	e785      	b.n	8020306 <__kernel_rem_pio2+0x27e>
 80203fa:	3401      	adds	r4, #1
 80203fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8020400:	2a00      	cmp	r2, #0
 8020402:	d0fa      	beq.n	80203fa <__kernel_rem_pio2+0x372>
 8020404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020406:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 802040a:	eb0d 0503 	add.w	r5, sp, r3
 802040e:	9b06      	ldr	r3, [sp, #24]
 8020410:	aa20      	add	r2, sp, #128	@ 0x80
 8020412:	4443      	add	r3, r8
 8020414:	f108 0701 	add.w	r7, r8, #1
 8020418:	3d98      	subs	r5, #152	@ 0x98
 802041a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 802041e:	4444      	add	r4, r8
 8020420:	42bc      	cmp	r4, r7
 8020422:	da04      	bge.n	802042e <__kernel_rem_pio2+0x3a6>
 8020424:	46a0      	mov	r8, r4
 8020426:	e6a2      	b.n	802016e <__kernel_rem_pio2+0xe6>
 8020428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802042a:	2401      	movs	r4, #1
 802042c:	e7e6      	b.n	80203fc <__kernel_rem_pio2+0x374>
 802042e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020430:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8020434:	f7e0 f8a6 	bl	8000584 <__aeabi_i2d>
 8020438:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80206f8 <__kernel_rem_pio2+0x670>
 802043c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8020440:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020448:	46b2      	mov	sl, r6
 802044a:	f04f 0800 	mov.w	r8, #0
 802044e:	9b05      	ldr	r3, [sp, #20]
 8020450:	4598      	cmp	r8, r3
 8020452:	dd05      	ble.n	8020460 <__kernel_rem_pio2+0x3d8>
 8020454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020458:	3701      	adds	r7, #1
 802045a:	eca5 7b02 	vstmia	r5!, {d7}
 802045e:	e7df      	b.n	8020420 <__kernel_rem_pio2+0x398>
 8020460:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8020464:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020468:	f7e0 f8f6 	bl	8000658 <__aeabi_dmul>
 802046c:	4602      	mov	r2, r0
 802046e:	460b      	mov	r3, r1
 8020470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020474:	f7df ff3a 	bl	80002ec <__adddf3>
 8020478:	f108 0801 	add.w	r8, r8, #1
 802047c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020480:	e7e5      	b.n	802044e <__kernel_rem_pio2+0x3c6>
 8020482:	f1cb 0000 	rsb	r0, fp, #0
 8020486:	ec47 6b10 	vmov	d0, r6, r7
 802048a:	f000 f94d 	bl	8020728 <scalbn>
 802048e:	ec55 4b10 	vmov	r4, r5, d0
 8020492:	4b9b      	ldr	r3, [pc, #620]	@ (8020700 <__kernel_rem_pio2+0x678>)
 8020494:	2200      	movs	r2, #0
 8020496:	4620      	mov	r0, r4
 8020498:	4629      	mov	r1, r5
 802049a:	f7e0 fb63 	bl	8000b64 <__aeabi_dcmpge>
 802049e:	b300      	cbz	r0, 80204e2 <__kernel_rem_pio2+0x45a>
 80204a0:	4b98      	ldr	r3, [pc, #608]	@ (8020704 <__kernel_rem_pio2+0x67c>)
 80204a2:	2200      	movs	r2, #0
 80204a4:	4620      	mov	r0, r4
 80204a6:	4629      	mov	r1, r5
 80204a8:	f7e0 f8d6 	bl	8000658 <__aeabi_dmul>
 80204ac:	f7e0 fb84 	bl	8000bb8 <__aeabi_d2iz>
 80204b0:	4606      	mov	r6, r0
 80204b2:	f7e0 f867 	bl	8000584 <__aeabi_i2d>
 80204b6:	4b92      	ldr	r3, [pc, #584]	@ (8020700 <__kernel_rem_pio2+0x678>)
 80204b8:	2200      	movs	r2, #0
 80204ba:	f7e0 f8cd 	bl	8000658 <__aeabi_dmul>
 80204be:	460b      	mov	r3, r1
 80204c0:	4602      	mov	r2, r0
 80204c2:	4629      	mov	r1, r5
 80204c4:	4620      	mov	r0, r4
 80204c6:	f7df ff0f 	bl	80002e8 <__aeabi_dsub>
 80204ca:	f7e0 fb75 	bl	8000bb8 <__aeabi_d2iz>
 80204ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80204d0:	f10b 0b18 	add.w	fp, fp, #24
 80204d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80204d8:	f108 0801 	add.w	r8, r8, #1
 80204dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80204e0:	e720      	b.n	8020324 <__kernel_rem_pio2+0x29c>
 80204e2:	4620      	mov	r0, r4
 80204e4:	4629      	mov	r1, r5
 80204e6:	f7e0 fb67 	bl	8000bb8 <__aeabi_d2iz>
 80204ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80204ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80204f0:	e718      	b.n	8020324 <__kernel_rem_pio2+0x29c>
 80204f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80204f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80204f8:	f7e0 f844 	bl	8000584 <__aeabi_i2d>
 80204fc:	4622      	mov	r2, r4
 80204fe:	462b      	mov	r3, r5
 8020500:	f7e0 f8aa 	bl	8000658 <__aeabi_dmul>
 8020504:	4652      	mov	r2, sl
 8020506:	e967 0102 	strd	r0, r1, [r7, #-8]!
 802050a:	465b      	mov	r3, fp
 802050c:	4620      	mov	r0, r4
 802050e:	4629      	mov	r1, r5
 8020510:	f7e0 f8a2 	bl	8000658 <__aeabi_dmul>
 8020514:	3e01      	subs	r6, #1
 8020516:	4604      	mov	r4, r0
 8020518:	460d      	mov	r5, r1
 802051a:	e716      	b.n	802034a <__kernel_rem_pio2+0x2c2>
 802051c:	9906      	ldr	r1, [sp, #24]
 802051e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8020522:	9106      	str	r1, [sp, #24]
 8020524:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8020528:	f7e0 f896 	bl	8000658 <__aeabi_dmul>
 802052c:	4602      	mov	r2, r0
 802052e:	460b      	mov	r3, r1
 8020530:	4650      	mov	r0, sl
 8020532:	4659      	mov	r1, fp
 8020534:	f7df feda 	bl	80002ec <__adddf3>
 8020538:	3601      	adds	r6, #1
 802053a:	4682      	mov	sl, r0
 802053c:	468b      	mov	fp, r1
 802053e:	9b00      	ldr	r3, [sp, #0]
 8020540:	429e      	cmp	r6, r3
 8020542:	dc01      	bgt.n	8020548 <__kernel_rem_pio2+0x4c0>
 8020544:	42ae      	cmp	r6, r5
 8020546:	dde9      	ble.n	802051c <__kernel_rem_pio2+0x494>
 8020548:	ab48      	add	r3, sp, #288	@ 0x120
 802054a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802054e:	e9c5 ab00 	strd	sl, fp, [r5]
 8020552:	3c01      	subs	r4, #1
 8020554:	e6fd      	b.n	8020352 <__kernel_rem_pio2+0x2ca>
 8020556:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8020558:	2b02      	cmp	r3, #2
 802055a:	dc0b      	bgt.n	8020574 <__kernel_rem_pio2+0x4ec>
 802055c:	2b00      	cmp	r3, #0
 802055e:	dc35      	bgt.n	80205cc <__kernel_rem_pio2+0x544>
 8020560:	d059      	beq.n	8020616 <__kernel_rem_pio2+0x58e>
 8020562:	9b02      	ldr	r3, [sp, #8]
 8020564:	f003 0007 	and.w	r0, r3, #7
 8020568:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 802056c:	ecbd 8b02 	vpop	{d8}
 8020570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020574:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8020576:	2b03      	cmp	r3, #3
 8020578:	d1f3      	bne.n	8020562 <__kernel_rem_pio2+0x4da>
 802057a:	9b05      	ldr	r3, [sp, #20]
 802057c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8020580:	eb0d 0403 	add.w	r4, sp, r3
 8020584:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8020588:	4625      	mov	r5, r4
 802058a:	46c2      	mov	sl, r8
 802058c:	f1ba 0f00 	cmp.w	sl, #0
 8020590:	dc69      	bgt.n	8020666 <__kernel_rem_pio2+0x5de>
 8020592:	4645      	mov	r5, r8
 8020594:	2d01      	cmp	r5, #1
 8020596:	f300 8087 	bgt.w	80206a8 <__kernel_rem_pio2+0x620>
 802059a:	9c05      	ldr	r4, [sp, #20]
 802059c:	ab48      	add	r3, sp, #288	@ 0x120
 802059e:	441c      	add	r4, r3
 80205a0:	2000      	movs	r0, #0
 80205a2:	2100      	movs	r1, #0
 80205a4:	f1b8 0f01 	cmp.w	r8, #1
 80205a8:	f300 809c 	bgt.w	80206e4 <__kernel_rem_pio2+0x65c>
 80205ac:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80205b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80205b4:	f1b9 0f00 	cmp.w	r9, #0
 80205b8:	f040 80a6 	bne.w	8020708 <__kernel_rem_pio2+0x680>
 80205bc:	9b04      	ldr	r3, [sp, #16]
 80205be:	e9c3 5600 	strd	r5, r6, [r3]
 80205c2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80205c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80205ca:	e7ca      	b.n	8020562 <__kernel_rem_pio2+0x4da>
 80205cc:	9d05      	ldr	r5, [sp, #20]
 80205ce:	ab48      	add	r3, sp, #288	@ 0x120
 80205d0:	441d      	add	r5, r3
 80205d2:	4644      	mov	r4, r8
 80205d4:	2000      	movs	r0, #0
 80205d6:	2100      	movs	r1, #0
 80205d8:	2c00      	cmp	r4, #0
 80205da:	da35      	bge.n	8020648 <__kernel_rem_pio2+0x5c0>
 80205dc:	f1b9 0f00 	cmp.w	r9, #0
 80205e0:	d038      	beq.n	8020654 <__kernel_rem_pio2+0x5cc>
 80205e2:	4602      	mov	r2, r0
 80205e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80205e8:	9c04      	ldr	r4, [sp, #16]
 80205ea:	e9c4 2300 	strd	r2, r3, [r4]
 80205ee:	4602      	mov	r2, r0
 80205f0:	460b      	mov	r3, r1
 80205f2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80205f6:	f7df fe77 	bl	80002e8 <__aeabi_dsub>
 80205fa:	ad4a      	add	r5, sp, #296	@ 0x128
 80205fc:	2401      	movs	r4, #1
 80205fe:	45a0      	cmp	r8, r4
 8020600:	da2b      	bge.n	802065a <__kernel_rem_pio2+0x5d2>
 8020602:	f1b9 0f00 	cmp.w	r9, #0
 8020606:	d002      	beq.n	802060e <__kernel_rem_pio2+0x586>
 8020608:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802060c:	4619      	mov	r1, r3
 802060e:	9b04      	ldr	r3, [sp, #16]
 8020610:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8020614:	e7a5      	b.n	8020562 <__kernel_rem_pio2+0x4da>
 8020616:	9c05      	ldr	r4, [sp, #20]
 8020618:	ab48      	add	r3, sp, #288	@ 0x120
 802061a:	441c      	add	r4, r3
 802061c:	2000      	movs	r0, #0
 802061e:	2100      	movs	r1, #0
 8020620:	f1b8 0f00 	cmp.w	r8, #0
 8020624:	da09      	bge.n	802063a <__kernel_rem_pio2+0x5b2>
 8020626:	f1b9 0f00 	cmp.w	r9, #0
 802062a:	d002      	beq.n	8020632 <__kernel_rem_pio2+0x5aa>
 802062c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020630:	4619      	mov	r1, r3
 8020632:	9b04      	ldr	r3, [sp, #16]
 8020634:	e9c3 0100 	strd	r0, r1, [r3]
 8020638:	e793      	b.n	8020562 <__kernel_rem_pio2+0x4da>
 802063a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802063e:	f7df fe55 	bl	80002ec <__adddf3>
 8020642:	f108 38ff 	add.w	r8, r8, #4294967295
 8020646:	e7eb      	b.n	8020620 <__kernel_rem_pio2+0x598>
 8020648:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 802064c:	f7df fe4e 	bl	80002ec <__adddf3>
 8020650:	3c01      	subs	r4, #1
 8020652:	e7c1      	b.n	80205d8 <__kernel_rem_pio2+0x550>
 8020654:	4602      	mov	r2, r0
 8020656:	460b      	mov	r3, r1
 8020658:	e7c6      	b.n	80205e8 <__kernel_rem_pio2+0x560>
 802065a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 802065e:	f7df fe45 	bl	80002ec <__adddf3>
 8020662:	3401      	adds	r4, #1
 8020664:	e7cb      	b.n	80205fe <__kernel_rem_pio2+0x576>
 8020666:	ed35 7b02 	vldmdb	r5!, {d7}
 802066a:	ed8d 7b00 	vstr	d7, [sp]
 802066e:	ed95 7b02 	vldr	d7, [r5, #8]
 8020672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020676:	ec53 2b17 	vmov	r2, r3, d7
 802067a:	ed8d 7b06 	vstr	d7, [sp, #24]
 802067e:	f7df fe35 	bl	80002ec <__adddf3>
 8020682:	4602      	mov	r2, r0
 8020684:	460b      	mov	r3, r1
 8020686:	4606      	mov	r6, r0
 8020688:	460f      	mov	r7, r1
 802068a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802068e:	f7df fe2b 	bl	80002e8 <__aeabi_dsub>
 8020692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020696:	f7df fe29 	bl	80002ec <__adddf3>
 802069a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802069e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80206a2:	e9c5 6700 	strd	r6, r7, [r5]
 80206a6:	e771      	b.n	802058c <__kernel_rem_pio2+0x504>
 80206a8:	ed34 7b02 	vldmdb	r4!, {d7}
 80206ac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80206b0:	ec51 0b17 	vmov	r0, r1, d7
 80206b4:	4652      	mov	r2, sl
 80206b6:	465b      	mov	r3, fp
 80206b8:	ed8d 7b00 	vstr	d7, [sp]
 80206bc:	f7df fe16 	bl	80002ec <__adddf3>
 80206c0:	4602      	mov	r2, r0
 80206c2:	460b      	mov	r3, r1
 80206c4:	4606      	mov	r6, r0
 80206c6:	460f      	mov	r7, r1
 80206c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206cc:	f7df fe0c 	bl	80002e8 <__aeabi_dsub>
 80206d0:	4652      	mov	r2, sl
 80206d2:	465b      	mov	r3, fp
 80206d4:	f7df fe0a 	bl	80002ec <__adddf3>
 80206d8:	3d01      	subs	r5, #1
 80206da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80206de:	e9c4 6700 	strd	r6, r7, [r4]
 80206e2:	e757      	b.n	8020594 <__kernel_rem_pio2+0x50c>
 80206e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80206e8:	f7df fe00 	bl	80002ec <__adddf3>
 80206ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80206f0:	e758      	b.n	80205a4 <__kernel_rem_pio2+0x51c>
 80206f2:	bf00      	nop
 80206f4:	f3af 8000 	nop.w
	...
 8020700:	41700000 	.word	0x41700000
 8020704:	3e700000 	.word	0x3e700000
 8020708:	9b04      	ldr	r3, [sp, #16]
 802070a:	9a04      	ldr	r2, [sp, #16]
 802070c:	601d      	str	r5, [r3, #0]
 802070e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8020712:	605c      	str	r4, [r3, #4]
 8020714:	609f      	str	r7, [r3, #8]
 8020716:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 802071a:	60d3      	str	r3, [r2, #12]
 802071c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020720:	6110      	str	r0, [r2, #16]
 8020722:	6153      	str	r3, [r2, #20]
 8020724:	e71d      	b.n	8020562 <__kernel_rem_pio2+0x4da>
 8020726:	bf00      	nop

08020728 <scalbn>:
 8020728:	b570      	push	{r4, r5, r6, lr}
 802072a:	ec55 4b10 	vmov	r4, r5, d0
 802072e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020732:	4606      	mov	r6, r0
 8020734:	462b      	mov	r3, r5
 8020736:	b991      	cbnz	r1, 802075e <scalbn+0x36>
 8020738:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802073c:	4323      	orrs	r3, r4
 802073e:	d03b      	beq.n	80207b8 <scalbn+0x90>
 8020740:	4b33      	ldr	r3, [pc, #204]	@ (8020810 <scalbn+0xe8>)
 8020742:	4620      	mov	r0, r4
 8020744:	4629      	mov	r1, r5
 8020746:	2200      	movs	r2, #0
 8020748:	f7df ff86 	bl	8000658 <__aeabi_dmul>
 802074c:	4b31      	ldr	r3, [pc, #196]	@ (8020814 <scalbn+0xec>)
 802074e:	429e      	cmp	r6, r3
 8020750:	4604      	mov	r4, r0
 8020752:	460d      	mov	r5, r1
 8020754:	da0f      	bge.n	8020776 <scalbn+0x4e>
 8020756:	a326      	add	r3, pc, #152	@ (adr r3, 80207f0 <scalbn+0xc8>)
 8020758:	e9d3 2300 	ldrd	r2, r3, [r3]
 802075c:	e01e      	b.n	802079c <scalbn+0x74>
 802075e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8020762:	4291      	cmp	r1, r2
 8020764:	d10b      	bne.n	802077e <scalbn+0x56>
 8020766:	4622      	mov	r2, r4
 8020768:	4620      	mov	r0, r4
 802076a:	4629      	mov	r1, r5
 802076c:	f7df fdbe 	bl	80002ec <__adddf3>
 8020770:	4604      	mov	r4, r0
 8020772:	460d      	mov	r5, r1
 8020774:	e020      	b.n	80207b8 <scalbn+0x90>
 8020776:	460b      	mov	r3, r1
 8020778:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802077c:	3936      	subs	r1, #54	@ 0x36
 802077e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8020782:	4296      	cmp	r6, r2
 8020784:	dd0d      	ble.n	80207a2 <scalbn+0x7a>
 8020786:	2d00      	cmp	r5, #0
 8020788:	a11b      	add	r1, pc, #108	@ (adr r1, 80207f8 <scalbn+0xd0>)
 802078a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802078e:	da02      	bge.n	8020796 <scalbn+0x6e>
 8020790:	a11b      	add	r1, pc, #108	@ (adr r1, 8020800 <scalbn+0xd8>)
 8020792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020796:	a318      	add	r3, pc, #96	@ (adr r3, 80207f8 <scalbn+0xd0>)
 8020798:	e9d3 2300 	ldrd	r2, r3, [r3]
 802079c:	f7df ff5c 	bl	8000658 <__aeabi_dmul>
 80207a0:	e7e6      	b.n	8020770 <scalbn+0x48>
 80207a2:	1872      	adds	r2, r6, r1
 80207a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80207a8:	428a      	cmp	r2, r1
 80207aa:	dcec      	bgt.n	8020786 <scalbn+0x5e>
 80207ac:	2a00      	cmp	r2, #0
 80207ae:	dd06      	ble.n	80207be <scalbn+0x96>
 80207b0:	f36f 531e 	bfc	r3, #20, #11
 80207b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80207b8:	ec45 4b10 	vmov	d0, r4, r5
 80207bc:	bd70      	pop	{r4, r5, r6, pc}
 80207be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80207c2:	da08      	bge.n	80207d6 <scalbn+0xae>
 80207c4:	2d00      	cmp	r5, #0
 80207c6:	a10a      	add	r1, pc, #40	@ (adr r1, 80207f0 <scalbn+0xc8>)
 80207c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207cc:	dac3      	bge.n	8020756 <scalbn+0x2e>
 80207ce:	a10e      	add	r1, pc, #56	@ (adr r1, 8020808 <scalbn+0xe0>)
 80207d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207d4:	e7bf      	b.n	8020756 <scalbn+0x2e>
 80207d6:	3236      	adds	r2, #54	@ 0x36
 80207d8:	f36f 531e 	bfc	r3, #20, #11
 80207dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80207e0:	4620      	mov	r0, r4
 80207e2:	4b0d      	ldr	r3, [pc, #52]	@ (8020818 <scalbn+0xf0>)
 80207e4:	4629      	mov	r1, r5
 80207e6:	2200      	movs	r2, #0
 80207e8:	e7d8      	b.n	802079c <scalbn+0x74>
 80207ea:	bf00      	nop
 80207ec:	f3af 8000 	nop.w
 80207f0:	c2f8f359 	.word	0xc2f8f359
 80207f4:	01a56e1f 	.word	0x01a56e1f
 80207f8:	8800759c 	.word	0x8800759c
 80207fc:	7e37e43c 	.word	0x7e37e43c
 8020800:	8800759c 	.word	0x8800759c
 8020804:	fe37e43c 	.word	0xfe37e43c
 8020808:	c2f8f359 	.word	0xc2f8f359
 802080c:	81a56e1f 	.word	0x81a56e1f
 8020810:	43500000 	.word	0x43500000
 8020814:	ffff3cb0 	.word	0xffff3cb0
 8020818:	3c900000 	.word	0x3c900000
 802081c:	00000000 	.word	0x00000000

08020820 <floor>:
 8020820:	ec51 0b10 	vmov	r0, r1, d0
 8020824:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802082c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8020830:	2e13      	cmp	r6, #19
 8020832:	460c      	mov	r4, r1
 8020834:	4605      	mov	r5, r0
 8020836:	4680      	mov	r8, r0
 8020838:	dc34      	bgt.n	80208a4 <floor+0x84>
 802083a:	2e00      	cmp	r6, #0
 802083c:	da17      	bge.n	802086e <floor+0x4e>
 802083e:	a332      	add	r3, pc, #200	@ (adr r3, 8020908 <floor+0xe8>)
 8020840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020844:	f7df fd52 	bl	80002ec <__adddf3>
 8020848:	2200      	movs	r2, #0
 802084a:	2300      	movs	r3, #0
 802084c:	f7e0 f994 	bl	8000b78 <__aeabi_dcmpgt>
 8020850:	b150      	cbz	r0, 8020868 <floor+0x48>
 8020852:	2c00      	cmp	r4, #0
 8020854:	da55      	bge.n	8020902 <floor+0xe2>
 8020856:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 802085a:	432c      	orrs	r4, r5
 802085c:	2500      	movs	r5, #0
 802085e:	42ac      	cmp	r4, r5
 8020860:	4c2b      	ldr	r4, [pc, #172]	@ (8020910 <floor+0xf0>)
 8020862:	bf08      	it	eq
 8020864:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8020868:	4621      	mov	r1, r4
 802086a:	4628      	mov	r0, r5
 802086c:	e023      	b.n	80208b6 <floor+0x96>
 802086e:	4f29      	ldr	r7, [pc, #164]	@ (8020914 <floor+0xf4>)
 8020870:	4137      	asrs	r7, r6
 8020872:	ea01 0307 	and.w	r3, r1, r7
 8020876:	4303      	orrs	r3, r0
 8020878:	d01d      	beq.n	80208b6 <floor+0x96>
 802087a:	a323      	add	r3, pc, #140	@ (adr r3, 8020908 <floor+0xe8>)
 802087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020880:	f7df fd34 	bl	80002ec <__adddf3>
 8020884:	2200      	movs	r2, #0
 8020886:	2300      	movs	r3, #0
 8020888:	f7e0 f976 	bl	8000b78 <__aeabi_dcmpgt>
 802088c:	2800      	cmp	r0, #0
 802088e:	d0eb      	beq.n	8020868 <floor+0x48>
 8020890:	2c00      	cmp	r4, #0
 8020892:	bfbe      	ittt	lt
 8020894:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8020898:	4133      	asrlt	r3, r6
 802089a:	18e4      	addlt	r4, r4, r3
 802089c:	ea24 0407 	bic.w	r4, r4, r7
 80208a0:	2500      	movs	r5, #0
 80208a2:	e7e1      	b.n	8020868 <floor+0x48>
 80208a4:	2e33      	cmp	r6, #51	@ 0x33
 80208a6:	dd0a      	ble.n	80208be <floor+0x9e>
 80208a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80208ac:	d103      	bne.n	80208b6 <floor+0x96>
 80208ae:	4602      	mov	r2, r0
 80208b0:	460b      	mov	r3, r1
 80208b2:	f7df fd1b 	bl	80002ec <__adddf3>
 80208b6:	ec41 0b10 	vmov	d0, r0, r1
 80208ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80208c2:	f04f 37ff 	mov.w	r7, #4294967295
 80208c6:	40df      	lsrs	r7, r3
 80208c8:	4207      	tst	r7, r0
 80208ca:	d0f4      	beq.n	80208b6 <floor+0x96>
 80208cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8020908 <floor+0xe8>)
 80208ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208d2:	f7df fd0b 	bl	80002ec <__adddf3>
 80208d6:	2200      	movs	r2, #0
 80208d8:	2300      	movs	r3, #0
 80208da:	f7e0 f94d 	bl	8000b78 <__aeabi_dcmpgt>
 80208de:	2800      	cmp	r0, #0
 80208e0:	d0c2      	beq.n	8020868 <floor+0x48>
 80208e2:	2c00      	cmp	r4, #0
 80208e4:	da0a      	bge.n	80208fc <floor+0xdc>
 80208e6:	2e14      	cmp	r6, #20
 80208e8:	d101      	bne.n	80208ee <floor+0xce>
 80208ea:	3401      	adds	r4, #1
 80208ec:	e006      	b.n	80208fc <floor+0xdc>
 80208ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80208f2:	2301      	movs	r3, #1
 80208f4:	40b3      	lsls	r3, r6
 80208f6:	441d      	add	r5, r3
 80208f8:	4545      	cmp	r5, r8
 80208fa:	d3f6      	bcc.n	80208ea <floor+0xca>
 80208fc:	ea25 0507 	bic.w	r5, r5, r7
 8020900:	e7b2      	b.n	8020868 <floor+0x48>
 8020902:	2500      	movs	r5, #0
 8020904:	462c      	mov	r4, r5
 8020906:	e7af      	b.n	8020868 <floor+0x48>
 8020908:	8800759c 	.word	0x8800759c
 802090c:	7e37e43c 	.word	0x7e37e43c
 8020910:	bff00000 	.word	0xbff00000
 8020914:	000fffff 	.word	0x000fffff

08020918 <_init>:
 8020918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802091a:	bf00      	nop
 802091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802091e:	bc08      	pop	{r3}
 8020920:	469e      	mov	lr, r3
 8020922:	4770      	bx	lr

08020924 <_fini>:
 8020924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020926:	bf00      	nop
 8020928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802092a:	bc08      	pop	{r3}
 802092c:	469e      	mov	lr, r3
 802092e:	4770      	bx	lr
