
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007664  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007834  08007834  00008834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800789c  0800789c  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a4  080078a4  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a4  080078a4  000088a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078a8  080078a8  000088a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080078ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c2c  20000010  080078bc  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c3c  080078bc  00009c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001867a  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c0  00000000  00000000  000216ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00024c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001079  00000000  00000000  000261a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e01  00000000  00000000  00027219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015649  00000000  00000000  0002a01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db627  00000000  00000000  0003f663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ac8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005960  00000000  00000000  0011acd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00120630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800781c 	.word	0x0800781c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800781c 	.word	0x0800781c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 ff00 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f824 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fad0 	bl	8000aec <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 faa6 	bl	8000a9c <MX_DMA_Init>
  MX_TIM1_Init();
 8000550:	f000 f88c 	bl	800066c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000554:	f000 f978 	bl	8000848 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000558:	f000 f9ca 	bl	80008f0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800055c:	f000 fa1c 	bl	8000998 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000560:	f000 fa72 	bl	8000a48 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000564:	f000 f8da 	bl	800071c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f004 fb9a 	bl	8004ca0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a05      	ldr	r2, [pc, #20]	@ (8000584 <main+0x48>)
 800056e:	2100      	movs	r1, #0
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <main+0x4c>)
 8000572:	f004 fbdf 	bl	8004d34 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <main+0x50>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 fbb4 	bl	8004ce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x44>
 8000584:	08007858 	.word	0x08007858
 8000588:	08000c41 	.word	0x08000c41
 800058c:	2000029c 	.word	0x2000029c

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 f902 	bl	80077a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <SystemClock_Config+0xd4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005dc:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <SystemClock_Config+0xd8>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f85a 	bl	80026d8 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062a:	f000 fb45 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fcc8 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000656:	f000 fb2f 	bl	8000cb8 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	@ 0x30
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2224      	movs	r2, #36	@ 0x24
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f007 f894 	bl	80077a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <MX_TIM1_Init+0xa8>)
 800068a:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <MX_TIM1_Init+0xac>)
 800068c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800068e:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <MX_TIM1_Init+0xa8>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_TIM1_Init+0xa8>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800069a:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_TIM1_Init+0xa8>)
 800069c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <MX_TIM1_Init+0xa8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_TIM1_Init+0xa8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <MX_TIM1_Init+0xa8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006bc:	2301      	movs	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <MX_TIM1_Init+0xa8>)
 80006e0:	f002 fc7a 	bl	8002fd8 <HAL_TIM_Encoder_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80006ea:	f000 fae5 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_TIM1_Init+0xa8>)
 80006fc:	f003 faca 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000706:	f000 fad7 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	@ 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000002c 	.word	0x2000002c
 8000718:	40010000 	.word	0x40010000

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	@ 0x38
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b3d      	ldr	r3, [pc, #244]	@ (8000844 <MX_TIM2_Init+0x128>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000754:	4b3b      	ldr	r3, [pc, #236]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b3a      	ldr	r3, [pc, #232]	@ (8000844 <MX_TIM2_Init+0x128>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8000760:	4b38      	ldr	r3, [pc, #224]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000762:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_TIM2_Init+0x128>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076e:	4b35      	ldr	r3, [pc, #212]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000770:	2280      	movs	r2, #128	@ 0x80
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000774:	4833      	ldr	r0, [pc, #204]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000776:	f002 fa4d 	bl	8002c14 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000780:	f000 fa9a 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078e:	4619      	mov	r1, r3
 8000790:	482c      	ldr	r0, [pc, #176]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000792:	f002 fe79 	bl	8003488 <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800079c:	f000 fa8c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a0:	4828      	ldr	r0, [pc, #160]	@ (8000844 <MX_TIM2_Init+0x128>)
 80007a2:	f002 faf7 	bl	8002d94 <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007ac:	f000 fa84 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4619      	mov	r1, r3
 80007be:	4821      	ldr	r0, [pc, #132]	@ (8000844 <MX_TIM2_Init+0x128>)
 80007c0:	f003 fa68 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ca:	f000 fa75 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ce:	2360      	movs	r3, #96	@ 0x60
 80007d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	4817      	ldr	r0, [pc, #92]	@ (8000844 <MX_TIM2_Init+0x128>)
 80007e6:	f002 fd8d 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007f0:	f000 fa62 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2204      	movs	r2, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_TIM2_Init+0x128>)
 80007fc:	f002 fd82 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000806:	f000 fa57 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2208      	movs	r2, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000812:	f002 fd77 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800081c:	f000 fa4c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	220c      	movs	r2, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000828:	f002 fd6c 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000832:	f000 fa41 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000836:	4803      	ldr	r0, [pc, #12]	@ (8000844 <MX_TIM2_Init+0x128>)
 8000838:	f000 fb78 	bl	8000f2c <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3738      	adds	r7, #56	@ 0x38
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000074 	.word	0x20000074

08000848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	@ 0x30
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2224      	movs	r2, #36	@ 0x24
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f006 ffa6 	bl	80077a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <MX_TIM3_Init+0xa4>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 8000878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800088a:	2301      	movs	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008a2:	2301      	movs	r3, #1
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 80008b6:	f002 fb8f 	bl	8002fd8 <HAL_TIM_Encoder_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f9fa 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_TIM3_Init+0xa0>)
 80008d2:	f003 f9df 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008dc:	f000 f9ec 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3730      	adds	r7, #48	@ 0x30
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000bc 	.word	0x200000bc
 80008ec:	40000400 	.word	0x40000400

080008f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2224      	movs	r2, #36	@ 0x24
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f006 ff52 	bl	80077a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_TIM4_Init+0xa0>)
 800090e:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <MX_TIM4_Init+0xa4>)
 8000910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_TIM4_Init+0xa0>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM4_Init+0xa0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM4_Init+0xa0>)
 8000920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000924:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM4_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_TIM4_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000932:	2301      	movs	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800094a:	2301      	movs	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_TIM4_Init+0xa0>)
 800095e:	f002 fb3b 	bl	8002fd8 <HAL_TIM_Encoder_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f9a6 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_TIM4_Init+0xa0>)
 800097a:	f003 f98b 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 f998 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000104 	.word	0x20000104
 8000994:	40000800 	.word	0x40000800

08000998 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	@ 0x30
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2224      	movs	r2, #36	@ 0x24
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f006 fefe 	bl	80077a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <MX_TIM8_Init+0xac>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009f8:	2301      	movs	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 8000a0c:	f002 fae4 	bl	8002fd8 <HAL_TIM_Encoder_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000a16:	f000 f94f 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_TIM8_Init+0xa8>)
 8000a28:	f003 f934 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000a32:	f000 f941 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	@ 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000014c 	.word	0x2000014c
 8000a44:	40010400 	.word	0x40010400

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a80:	f003 f998 	bl	8003db4 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f915 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000194 	.word	0x20000194
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_DMA_Init+0x4c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae8 <MX_DMA_Init+0x4c>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <MX_DMA_Init+0x4c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	2010      	movs	r0, #16
 8000ac4:	f000 fd38 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ac8:	2010      	movs	r0, #16
 8000aca:	f000 fd51 	bl	8001570 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2105      	movs	r1, #5
 8000ad2:	2011      	movs	r0, #17
 8000ad4:	f000 fd30 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ad8:	2011      	movs	r0, #17
 8000ada:	f000 fd49 	bl	8001570 <HAL_NVIC_EnableIRQ>

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b49      	ldr	r3, [pc, #292]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a48      	ldr	r2, [pc, #288]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b46      	ldr	r3, [pc, #280]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b42      	ldr	r3, [pc, #264]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a41      	ldr	r2, [pc, #260]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a3a      	ldr	r2, [pc, #232]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b38      	ldr	r3, [pc, #224]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b34      	ldr	r3, [pc, #208]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a33      	ldr	r2, [pc, #204]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <MX_GPIO_Init+0x140>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RL_INB_GPO_Pin|RL_INA_GPO_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2103      	movs	r1, #3
 8000b76:	482e      	ldr	r0, [pc, #184]	@ (8000c30 <MX_GPIO_Init+0x144>)
 8000b78:	f001 fa18 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|LR_INA_GPO_Pin|LR_INB_GPO_Pin
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f640 411f 	movw	r1, #3103	@ 0xc1f
 8000b82:	482c      	ldr	r0, [pc, #176]	@ (8000c34 <MX_GPIO_Init+0x148>)
 8000b84:	f001 fa12 	bl	8001fac <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UR_INA_GPO_Pin|FR_INA_GPO_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000b8e:	482a      	ldr	r0, [pc, #168]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b90:	f001 fa0c 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UR_INB_GPO_Pin|RR_INA_GPO_Pin|UL_INA_GPO_Pin|UL_INB_GPO_Pin
 8000b94:	2200      	movs	r2, #0
 8000b96:	f24e 0121 	movw	r1, #57377	@ 0xe021
 8000b9a:	4828      	ldr	r0, [pc, #160]	@ (8000c3c <MX_GPIO_Init+0x150>)
 8000b9c:	f001 fa06 	bl	8001fac <HAL_GPIO_WritePin>
                          |FR_INB_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ba6:	4823      	ldr	r0, [pc, #140]	@ (8000c34 <MX_GPIO_Init+0x148>)
 8000ba8:	f001 fa00 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RL_INB_GPO_Pin RL_INA_GPO_Pin */
  GPIO_InitStruct.Pin = RL_INB_GPO_Pin|RL_INA_GPO_Pin;
 8000bac:	2303      	movs	r3, #3
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481b      	ldr	r0, [pc, #108]	@ (8000c30 <MX_GPIO_Init+0x144>)
 8000bc4:	f001 f85e 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_INA_GPO_Pin FL_INB_GPO_Pin LR_INA_GPO_Pin LR_INB_GPO_Pin
                           RR_INB_GPO_Pin RR_VDD_GPO_Pin FR_VDD_GPO_Pin RL_VDD_GPO_Pin
                           FL_VDD_GPO_Pin */
  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|LR_INA_GPO_Pin|LR_INB_GPO_Pin
 8000bc8:	f640 731f 	movw	r3, #3871	@ 0xf1f
 8000bcc:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin|RL_VDD_GPO_Pin
                          |FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <MX_GPIO_Init+0x148>)
 8000be2:	f001 f84f 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : UR_INA_GPO_Pin FR_INA_GPO_Pin */
  GPIO_InitStruct.Pin = UR_INA_GPO_Pin|FR_INA_GPO_Pin;
 8000be6:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000c00:	f001 f840 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : UR_INB_GPO_Pin RR_INA_GPO_Pin UL_INA_GPO_Pin UL_INB_GPO_Pin
                           FR_INB_GPO_Pin */
  GPIO_InitStruct.Pin = UR_INB_GPO_Pin|RR_INA_GPO_Pin|UL_INA_GPO_Pin|UL_INB_GPO_Pin
 8000c04:	f24e 0321 	movw	r3, #57377	@ 0xe021
 8000c08:	617b      	str	r3, [r7, #20]
                          |FR_INB_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <MX_GPIO_Init+0x150>)
 8000c1e:	f001 f831 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40021c00 	.word	0x40021c00
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020400 	.word	0x40020400

08000c40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOB, RL_VDD_GPO_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4e:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <StartDefaultTask+0x4c>)
 8000c50:	f001 f9ac 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2102      	movs	r1, #2
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <StartDefaultTask+0x4c>)
 8000c5a:	f001 f9a7 	bl	8001fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FL_INA_GPO_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2101      	movs	r1, #1
 8000c62:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <StartDefaultTask+0x4c>)
 8000c64:	f001 f9a2 	bl	8001fac <HAL_GPIO_WritePin>

	// set 50% duty BEFORE starting (preload will latch on first update)
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <StartDefaultTask+0x50>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arr/2);
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <StartDefaultTask+0x50>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	0852      	lsrs	r2, r2, #1
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34

	// start PWM on CH1 (do this once)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <StartDefaultTask+0x50>)
 8000c7e:	f002 f8e3 	bl	8002e48 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f004 f8e8 	bl	8004e58 <osDelay>
 8000c88:	e7fb      	b.n	8000c82 <StartDefaultTask+0x42>
 8000c8a:	bf00      	nop
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	20000074 	.word	0x20000074

08000c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ca6:	f000 fb6f 	bl	8001388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40001400 	.word	0x40001400

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a11      	ldr	r2, [pc, #68]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <HAL_MspInit+0x54>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	210f      	movs	r1, #15
 8000d06:	f06f 0001 	mvn.w	r0, #1
 8000d0a:	f000 fc15 	bl	8001538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a64      	ldr	r2, [pc, #400]	@ (8000ecc <HAL_TIM_Encoder_MspInit+0x1b0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12d      	bne.n	8000d9a <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d42:	4b63      	ldr	r3, [pc, #396]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a62      	ldr	r2, [pc, #392]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b60      	ldr	r3, [pc, #384]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a5b      	ldr	r2, [pc, #364]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b59      	ldr	r3, [pc, #356]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = UL_ENC_A_T1C1_Pin|UL_ENC_B_T1C2_Pin;
 8000d76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d90:	4619      	mov	r1, r3
 8000d92:	4850      	ldr	r0, [pc, #320]	@ (8000ed4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000d94:	f000 ff76 	bl	8001c84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d98:	e094      	b.n	8000ec4 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8000ed8 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d12c      	bne.n	8000dfe <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
 8000da8:	4b49      	ldr	r3, [pc, #292]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a48      	ldr	r2, [pc, #288]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b46      	ldr	r3, [pc, #280]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	4b42      	ldr	r3, [pc, #264]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a41      	ldr	r2, [pc, #260]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UR_ENC_A_T3C1_Pin|UR_ENC_B_T3C2_Pin;
 8000ddc:	23c0      	movs	r3, #192	@ 0xc0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dec:	2302      	movs	r3, #2
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4837      	ldr	r0, [pc, #220]	@ (8000ed4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000df8:	f000 ff44 	bl	8001c84 <HAL_GPIO_Init>
}
 8000dfc:	e062      	b.n	8000ec4 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a36      	ldr	r2, [pc, #216]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d12c      	bne.n	8000e62 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a28      	ldr	r2, [pc, #160]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LL_ENC_A_T4C1_Pin|LL_ENC_B_T4C2_Pin;
 8000e40:	23c0      	movs	r3, #192	@ 0xc0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e50:	2302      	movs	r3, #2
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	@ (8000ee0 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e5c:	f000 ff12 	bl	8001c84 <HAL_GPIO_Init>
}
 8000e60:	e030      	b.n	8000ec4 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d12b      	bne.n	8000ec4 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LR_ENC_A_T8C1_Pin|LR_ENC_B_T8C2_Pin;
 8000ea4:	23c0      	movs	r3, #192	@ 0xc0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000ec0:	f000 fee0 	bl	8001c84 <HAL_GPIO_Init>
}
 8000ec4:	bf00      	nop
 8000ec6:	3740      	adds	r7, #64	@ 0x40
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40000400 	.word	0x40000400
 8000edc:	40000800 	.word	0x40000800
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40010400 	.word	0x40010400
 8000ee8:	40020800 	.word	0x40020800

08000eec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000efc:	d10d      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_TIM_Base_MspInit+0x3c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_TIM_Base_MspInit+0x3c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_TIM_Base_MspInit+0x3c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f4c:	d13c      	bne.n	8000fc8 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <HAL_TIM_MspPostInit+0xa4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_TIM_MspPostInit+0xa4>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_TIM_MspPostInit+0xa4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_TIM_MspPostInit+0xa4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a17      	ldr	r2, [pc, #92]	@ (8000fd0 <HAL_TIM_MspPostInit+0xa4>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_TIM_MspPostInit+0xa4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8000f86:	2303      	movs	r3, #3
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <HAL_TIM_MspPostInit+0xa8>)
 8000fa2:	f000 fe6f 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 8000fa6:	f240 4304 	movw	r3, #1028	@ 0x404
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <HAL_TIM_MspPostInit+0xac>)
 8000fc4:	f000 fe5e 	bl	8001c84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	@ 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400

08000fdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <HAL_UART_MspInit+0x154>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	f040 8093 	bne.w	8001126 <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <HAL_UART_MspInit+0x158>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a4a      	ldr	r2, [pc, #296]	@ (8001134 <HAL_UART_MspInit+0x158>)
 800100a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b48      	ldr	r3, [pc, #288]	@ (8001134 <HAL_UART_MspInit+0x158>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <HAL_UART_MspInit+0x158>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	4a43      	ldr	r2, [pc, #268]	@ (8001134 <HAL_UART_MspInit+0x158>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6313      	str	r3, [r2, #48]	@ 0x30
 800102c:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <HAL_UART_MspInit+0x158>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001038:	230c      	movs	r3, #12
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001048:	2307      	movs	r3, #7
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4839      	ldr	r0, [pc, #228]	@ (8001138 <HAL_UART_MspInit+0x15c>)
 8001054:	f000 fe16 	bl	8001c84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001058:	4b38      	ldr	r3, [pc, #224]	@ (800113c <HAL_UART_MspInit+0x160>)
 800105a:	4a39      	ldr	r2, [pc, #228]	@ (8001140 <HAL_UART_MspInit+0x164>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001060:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001064:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <HAL_UART_MspInit+0x160>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <HAL_UART_MspInit+0x160>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800108c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001090:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001094:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800109c:	4827      	ldr	r0, [pc, #156]	@ (800113c <HAL_UART_MspInit+0x160>)
 800109e:	f000 fa75 	bl	800158c <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80010a8:	f7ff fe06 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a23      	ldr	r2, [pc, #140]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b2:	4a22      	ldr	r2, [pc, #136]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_UART_MspInit+0x16c>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010c8:	2240      	movs	r2, #64	@ 0x40
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010fa:	4812      	ldr	r0, [pc, #72]	@ (8001144 <HAL_UART_MspInit+0x168>)
 80010fc:	f000 fa46 	bl	800158c <HAL_DMA_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001106:	f7ff fdd7 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <HAL_UART_MspInit+0x168>)
 800110e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001110:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <HAL_UART_MspInit+0x168>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	2026      	movs	r0, #38	@ 0x26
 800111c:	f000 fa0c 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001120:	2026      	movs	r0, #38	@ 0x26
 8001122:	f000 fa25 	bl	8001570 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004400 	.word	0x40004400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	200001dc 	.word	0x200001dc
 8001140:	40026088 	.word	0x40026088
 8001144:	2000023c 	.word	0x2000023c
 8001148:	400260a0 	.word	0x400260a0

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	@ 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <HAL_InitTick+0xe4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a32      	ldr	r2, [pc, #200]	@ (8001230 <HAL_InitTick+0xe4>)
 8001166:	f043 0320 	orr.w	r3, r3, #32
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b30      	ldr	r3, [pc, #192]	@ (8001230 <HAL_InitTick+0xe4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001178:	f107 0210 	add.w	r2, r7, #16
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f001 f846 	bl	8002214 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001192:	f001 f817 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8001196:	6378      	str	r0, [r7, #52]	@ 0x34
 8001198:	e004      	b.n	80011a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800119a:	f001 f813 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 800119e:	4603      	mov	r3, r0
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a6:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <HAL_InitTick+0xe8>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9b      	lsrs	r3, r3, #18
 80011ae:	3b01      	subs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <HAL_InitTick+0xec>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	@ (800123c <HAL_InitTick+0xf0>)
 80011b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <HAL_InitTick+0xec>)
 80011ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011be:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80011c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <HAL_InitTick+0xec>)
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <HAL_InitTick+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_InitTick+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_InitTick+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80011d8:	4817      	ldr	r0, [pc, #92]	@ (8001238 <HAL_InitTick+0xec>)
 80011da:	f001 fd1b 	bl	8002c14 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11b      	bne.n	8001224 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80011ec:	4812      	ldr	r0, [pc, #72]	@ (8001238 <HAL_InitTick+0xec>)
 80011ee:	f001 fd61 	bl	8002cb4 <HAL_TIM_Base_Start_IT>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001200:	2037      	movs	r0, #55	@ 0x37
 8001202:	f000 f9b5 	bl	8001570 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d808      	bhi.n	800121e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2037      	movs	r0, #55	@ 0x37
 8001212:	f000 f991 	bl	8001538 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_InitTick+0xf4>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e002      	b.n	8001224 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001224:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001228:	4618      	mov	r0, r3
 800122a:	3738      	adds	r7, #56	@ 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	431bde83 	.word	0x431bde83
 8001238:	200002a0 	.word	0x200002a0
 800123c:	40001400 	.word	0x40001400
 8001240:	20000004 	.word	0x20000004

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <DMA1_Stream5_IRQHandler+0x10>)
 8001282:	f000 fac3 	bl	800180c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001dc 	.word	0x200001dc

08001290 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <DMA1_Stream6_IRQHandler+0x10>)
 8001296:	f000 fab9 	bl	800180c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000023c 	.word	0x2000023c

080012a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <USART2_IRQHandler+0x10>)
 80012aa:	f002 fdd3 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000194 	.word	0x20000194

080012b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <TIM7_IRQHandler+0x10>)
 80012be:	f001 ff31 	bl	8003124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002a0 	.word	0x200002a0

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f4:	f7ff ffea 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800131e:	f006 fa4b 	bl	80077b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff f90b 	bl	800053c <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001334:	080078ac 	.word	0x080078ac
  ldr r2, =_sbss
 8001338:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800133c:	20004c3c 	.word	0x20004c3c

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 f8d8 	bl	8001522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	200f      	movs	r0, #15
 8001374:	f7ff feea 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fca4 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	200002e8 	.word	0x200002e8

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200002e8 	.word	0x200002e8

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	@ (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff4c 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154a:	f7ff ff61 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800154e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	6978      	ldr	r0, [r7, #20]
 8001556:	f7ff ffb1 	bl	80014bc <NVIC_EncodePriority>
 800155a:	4602      	mov	r2, r0
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff80 	bl	8001468 <__NVIC_SetPriority>
}
 8001568:	bf00      	nop
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff54 	bl	800142c <__NVIC_EnableIRQ>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ff0a 	bl	80013b0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e099      	b.n	80016dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c8:	e00f      	b.n	80015ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ca:	f7ff fef1 	bl	80013b0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d908      	bls.n	80015ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2220      	movs	r2, #32
 80015dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2203      	movs	r2, #3
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e078      	b.n	80016dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e8      	bne.n	80015ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4b38      	ldr	r3, [pc, #224]	@ (80016e4 <HAL_DMA_Init+0x158>)
 8001604:	4013      	ands	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	2b04      	cmp	r3, #4
 8001642:	d107      	bne.n	8001654 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	4313      	orrs	r3, r2
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f023 0307 	bic.w	r3, r3, #7
 800166a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	2b04      	cmp	r3, #4
 800167c:	d117      	bne.n	80016ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00e      	beq.n	80016ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fa7b 	bl	8001b8c <DMA_CheckFifoParam>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016aa:	2301      	movs	r3, #1
 80016ac:	e016      	b.n	80016dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fa32 	bl	8001b20 <DMA_CalcBaseAndBitshift>
 80016bc:	4603      	mov	r3, r0
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c4:	223f      	movs	r2, #63	@ 0x3f
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f010803f 	.word	0xf010803f

080016e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016f6:	f7ff fe5b 	bl	80013b0 <HAL_GetTick>
 80016fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d008      	beq.n	800171a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2280      	movs	r2, #128	@ 0x80
 800170c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e052      	b.n	80017c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0216 	bic.w	r2, r2, #22
 8001728:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001738:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_DMA_Abort+0x62>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0208 	bic.w	r2, r2, #8
 8001758:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176a:	e013      	b.n	8001794 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800176c:	f7ff fe20 	bl	80013b0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b05      	cmp	r3, #5
 8001778:	d90c      	bls.n	8001794 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e015      	b.n	80017c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1e4      	bne.n	800176c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	223f      	movs	r2, #63	@ 0x3f
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d004      	beq.n	80017e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2280      	movs	r2, #128	@ 0x80
 80017e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00c      	b.n	8001800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001818:	4b8e      	ldr	r3, [pc, #568]	@ (8001a54 <HAL_DMA_IRQHandler+0x248>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a58 <HAL_DMA_IRQHandler+0x24c>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	2208      	movs	r2, #8
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001864:	2208      	movs	r2, #8
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d012      	beq.n	80018ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189a:	2201      	movs	r2, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b2:	2204      	movs	r2, #4
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d012      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d0:	2204      	movs	r2, #4
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018dc:	f043 0204 	orr.w	r2, r3, #4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e8:	2210      	movs	r2, #16
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d043      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03c      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001906:	2210      	movs	r2, #16
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d018      	beq.n	800194e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d024      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
 800193a:	e01f      	b.n	800197c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
 800194c:	e016      	b.n	800197c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0208 	bic.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001980:	2220      	movs	r2, #32
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 808f 	beq.w	8001aac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8087 	beq.w	8001aac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a2:	2220      	movs	r2, #32
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d136      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0216 	bic.w	r2, r2, #22
 80019c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x1da>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0208 	bic.w	r2, r2, #8
 80019f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fa:	223f      	movs	r2, #63	@ 0x3f
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d07e      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
        }
        return;
 8001a22:	e079      	b.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d031      	beq.n	8001aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e02c      	b.n	8001aac <HAL_DMA_IRQHandler+0x2a0>
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000
 8001a58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d023      	beq.n	8001aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e01e      	b.n	8001aac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d032      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d022      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2205      	movs	r2, #5
 8001ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d307      	bcc.n	8001af4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f2      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x2cc>
 8001af2:	e000      	b.n	8001af6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001af4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
 8001b16:	e000      	b.n	8001b1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b18:	bf00      	nop
    }
  }
}
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3b10      	subs	r3, #16
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <DMA_CalcBaseAndBitshift+0x64>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <DMA_CalcBaseAndBitshift+0x68>)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d909      	bls.n	8001b62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	1d1a      	adds	r2, r3, #4
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b60:	e007      	b.n	8001b72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	aaaaaaab 	.word	0xaaaaaaab
 8001b88:	08007894 	.word	0x08007894

08001b8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11f      	bne.n	8001be6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d856      	bhi.n	8001c5a <DMA_CheckFifoParam+0xce>
 8001bac:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb4 <DMA_CheckFifoParam+0x28>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001bd7 	.word	0x08001bd7
 8001bbc:	08001bc5 	.word	0x08001bc5
 8001bc0:	08001c5b 	.word	0x08001c5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d046      	beq.n	8001c5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd4:	e043      	b.n	8001c5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bde:	d140      	bne.n	8001c62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be4:	e03d      	b.n	8001c62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bee:	d121      	bne.n	8001c34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d837      	bhi.n	8001c66 <DMA_CheckFifoParam+0xda>
 8001bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bfc <DMA_CheckFifoParam+0x70>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001c13 	.word	0x08001c13
 8001c04:	08001c0d 	.word	0x08001c0d
 8001c08:	08001c25 	.word	0x08001c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c10:	e030      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d025      	beq.n	8001c6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c22:	e022      	b.n	8001c6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c2c:	d11f      	bne.n	8001c6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c32:	e01c      	b.n	8001c6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d903      	bls.n	8001c42 <DMA_CheckFifoParam+0xb6>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d003      	beq.n	8001c48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c40:	e018      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
      break;
 8001c46:	e015      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      break;
 8001c58:	e00b      	b.n	8001c72 <DMA_CheckFifoParam+0xe6>
      break;
 8001c5a:	bf00      	nop
 8001c5c:	e00a      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5e:	bf00      	nop
 8001c60:	e008      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      break;
 8001c62:	bf00      	nop
 8001c64:	e006      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      break;
 8001c66:	bf00      	nop
 8001c68:	e004      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      break;
 8001c6a:	bf00      	nop
 8001c6c:	e002      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c6e:	bf00      	nop
 8001c70:	e000      	b.n	8001c74 <DMA_CheckFifoParam+0xe8>
      break;
 8001c72:	bf00      	nop
    }
  } 
  
  return status; 
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e165      	b.n	8001f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	f040 8154 	bne.w	8001f66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d005      	beq.n	8001cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d130      	bne.n	8001d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 0201 	and.w	r2, r3, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d017      	beq.n	8001d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80ae 	beq.w	8001f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a5c      	ldr	r2, [pc, #368]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e26:	4a58      	ldr	r2, [pc, #352]	@ (8001f88 <HAL_GPIO_Init+0x304>)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f8c <HAL_GPIO_Init+0x308>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d025      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4e      	ldr	r2, [pc, #312]	@ (8001f90 <HAL_GPIO_Init+0x30c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <HAL_GPIO_Init+0x216>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f94 <HAL_GPIO_Init+0x310>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	@ (8001f98 <HAL_GPIO_Init+0x314>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <HAL_GPIO_Init+0x318>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x20a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa0 <HAL_GPIO_Init+0x31c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x206>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a49      	ldr	r2, [pc, #292]	@ (8001fa4 <HAL_GPIO_Init+0x320>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x202>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00c      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e00a      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	@ (8001f88 <HAL_GPIO_Init+0x304>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a31      	ldr	r2, [pc, #196]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f12:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f36:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f ae96 	bls.w	8001ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cc      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b68      	ldr	r3, [pc, #416]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90c      	bls.n	800201c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b65      	ldr	r3, [pc, #404]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d044      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b3f      	ldr	r3, [pc, #252]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e067      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b37      	ldr	r3, [pc, #220]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4934      	ldr	r1, [pc, #208]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7ff f96e 	bl	80013b0 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7ff f96a 	bl	80013b0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e04f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d20c      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002152:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f887 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ffe0 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	0800787c 	.word	0x0800787c
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a9b      	lsrs	r3, r3, #10
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	@ (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	0800788c 	.word	0x0800788c

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021f0:	f7ff ffdc 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0b5b      	lsrs	r3, r3, #13
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	@ (8002210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	0800788c 	.word	0x0800788c

08002214 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	220f      	movs	r2, #15
 8002222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCC_GetClockConfig+0x5c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_RCC_GetClockConfig+0x5c>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_RCC_GetClockConfig+0x5c>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RCC_GetClockConfig+0x5c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_RCC_GetClockConfig+0x60>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800227c:	b0ae      	sub	sp, #184	@ 0xb8
 800227e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229e:	4bcb      	ldr	r3, [pc, #812]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	f200 8206 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x440>
 80022ac:	a201      	add	r2, pc, #4	@ (adr r2, 80022b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022e9 	.word	0x080022e9
 80022b8:	080026b9 	.word	0x080026b9
 80022bc:	080026b9 	.word	0x080026b9
 80022c0:	080026b9 	.word	0x080026b9
 80022c4:	080022f1 	.word	0x080022f1
 80022c8:	080026b9 	.word	0x080026b9
 80022cc:	080026b9 	.word	0x080026b9
 80022d0:	080026b9 	.word	0x080026b9
 80022d4:	080022f9 	.word	0x080022f9
 80022d8:	080026b9 	.word	0x080026b9
 80022dc:	080026b9 	.word	0x080026b9
 80022e0:	080026b9 	.word	0x080026b9
 80022e4:	080024e9 	.word	0x080024e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4bb9      	ldr	r3, [pc, #740]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ee:	e1e7      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4bb8      	ldr	r3, [pc, #736]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022f6:	e1e3      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4bb4      	ldr	r3, [pc, #720]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002304:	4bb1      	ldr	r3, [pc, #708]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d071      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4bae      	ldr	r3, [pc, #696]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800231c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002348:	0150      	lsls	r0, r2, #5
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4621      	mov	r1, r4
 8002350:	1a51      	subs	r1, r2, r1
 8002352:	6439      	str	r1, [r7, #64]	@ 0x40
 8002354:	4629      	mov	r1, r5
 8002356:	eb63 0301 	sbc.w	r3, r3, r1
 800235a:	647b      	str	r3, [r7, #68]	@ 0x44
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002368:	4649      	mov	r1, r9
 800236a:	018b      	lsls	r3, r1, #6
 800236c:	4641      	mov	r1, r8
 800236e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002372:	4641      	mov	r1, r8
 8002374:	018a      	lsls	r2, r1, #6
 8002376:	4641      	mov	r1, r8
 8002378:	1a51      	subs	r1, r2, r1
 800237a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800237c:	4649      	mov	r1, r9
 800237e:	eb63 0301 	sbc.w	r3, r3, r1
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002390:	4649      	mov	r1, r9
 8002392:	00cb      	lsls	r3, r1, #3
 8002394:	4641      	mov	r1, r8
 8002396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800239a:	4641      	mov	r1, r8
 800239c:	00ca      	lsls	r2, r1, #3
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	4622      	mov	r2, r4
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023aa:	462b      	mov	r3, r5
 80023ac:	460a      	mov	r2, r1
 80023ae:	eb42 0303 	adc.w	r3, r2, r3
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023c0:	4629      	mov	r1, r5
 80023c2:	024b      	lsls	r3, r1, #9
 80023c4:	4621      	mov	r1, r4
 80023c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ca:	4621      	mov	r1, r4
 80023cc:	024a      	lsls	r2, r1, #9
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023e4:	f7fd ff14 	bl	8000210 <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4613      	mov	r3, r2
 80023ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023f2:	e067      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f4:	4b75      	ldr	r3, [pc, #468]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002400:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002404:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800240e:	2300      	movs	r3, #0
 8002410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002412:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002416:	4622      	mov	r2, r4
 8002418:	462b      	mov	r3, r5
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	0159      	lsls	r1, r3, #5
 8002424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002428:	0150      	lsls	r0, r2, #5
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4621      	mov	r1, r4
 8002430:	1a51      	subs	r1, r2, r1
 8002432:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002434:	4629      	mov	r1, r5
 8002436:	eb63 0301 	sbc.w	r3, r3, r1
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002448:	4649      	mov	r1, r9
 800244a:	018b      	lsls	r3, r1, #6
 800244c:	4641      	mov	r1, r8
 800244e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002452:	4641      	mov	r1, r8
 8002454:	018a      	lsls	r2, r1, #6
 8002456:	4641      	mov	r1, r8
 8002458:	ebb2 0a01 	subs.w	sl, r2, r1
 800245c:	4649      	mov	r1, r9
 800245e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800246e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002476:	4692      	mov	sl, r2
 8002478:	469b      	mov	fp, r3
 800247a:	4623      	mov	r3, r4
 800247c:	eb1a 0303 	adds.w	r3, sl, r3
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	462b      	mov	r3, r5
 8002484:	eb4b 0303 	adc.w	r3, fp, r3
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024ac:	2200      	movs	r2, #0
 80024ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80024b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80024b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024b6:	f7fd feab 	bl	8000210 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4613      	mov	r3, r2
 80024c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024c4:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	3301      	adds	r3, #1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80024d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024e6:	e0eb      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f4:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06b      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002500:	4b32      	ldr	r3, [pc, #200]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	2200      	movs	r2, #0
 8002508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800250a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800250c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	663b      	str	r3, [r7, #96]	@ 0x60
 8002514:	2300      	movs	r3, #0
 8002516:	667b      	str	r3, [r7, #100]	@ 0x64
 8002518:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800251c:	4622      	mov	r2, r4
 800251e:	462b      	mov	r3, r5
 8002520:	f04f 0000 	mov.w	r0, #0
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	0159      	lsls	r1, r3, #5
 800252a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252e:	0150      	lsls	r0, r2, #5
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4621      	mov	r1, r4
 8002536:	1a51      	subs	r1, r2, r1
 8002538:	61b9      	str	r1, [r7, #24]
 800253a:	4629      	mov	r1, r5
 800253c:	eb63 0301 	sbc.w	r3, r3, r1
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800254e:	4659      	mov	r1, fp
 8002550:	018b      	lsls	r3, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002558:	4651      	mov	r1, sl
 800255a:	018a      	lsls	r2, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ebb2 0801 	subs.w	r8, r2, r1
 8002562:	4659      	mov	r1, fp
 8002564:	eb63 0901 	sbc.w	r9, r3, r1
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257c:	4690      	mov	r8, r2
 800257e:	4699      	mov	r9, r3
 8002580:	4623      	mov	r3, r4
 8002582:	eb18 0303 	adds.w	r3, r8, r3
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	462b      	mov	r3, r5
 800258a:	eb49 0303 	adc.w	r3, r9, r3
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800259c:	4629      	mov	r1, r5
 800259e:	024b      	lsls	r3, r1, #9
 80025a0:	4621      	mov	r1, r4
 80025a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025a6:	4621      	mov	r1, r4
 80025a8:	024a      	lsls	r2, r1, #9
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025b2:	2200      	movs	r2, #0
 80025b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025bc:	f7fd fe28 	bl	8000210 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4613      	mov	r3, r2
 80025c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025ca:	e065      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x420>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d8:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	2200      	movs	r2, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	4611      	mov	r1, r2
 80025e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80025ea:	2300      	movs	r3, #0
 80025ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025f2:	4642      	mov	r2, r8
 80025f4:	464b      	mov	r3, r9
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4641      	mov	r1, r8
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	4649      	mov	r1, r9
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002624:	4659      	mov	r1, fp
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4651      	mov	r1, sl
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4651      	mov	r1, sl
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4651      	mov	r1, sl
 8002634:	1a54      	subs	r4, r2, r1
 8002636:	4659      	mov	r1, fp
 8002638:	eb63 0501 	sbc.w	r5, r3, r1
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	00eb      	lsls	r3, r5, #3
 8002646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264a:	00e2      	lsls	r2, r4, #3
 800264c:	4614      	mov	r4, r2
 800264e:	461d      	mov	r5, r3
 8002650:	4643      	mov	r3, r8
 8002652:	18e3      	adds	r3, r4, r3
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	464b      	mov	r3, r9
 8002658:	eb45 0303 	adc.w	r3, r5, r3
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266a:	4629      	mov	r1, r5
 800266c:	028b      	lsls	r3, r1, #10
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002674:	4621      	mov	r1, r4
 8002676:	028a      	lsls	r2, r1, #10
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002680:	2200      	movs	r2, #0
 8002682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002684:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800268a:	f7fd fdc1 	bl	8000210 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4613      	mov	r3, r2
 8002694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002698:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0f1b      	lsrs	r3, r3, #28
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80026a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026b6:	e003      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	37b8      	adds	r7, #184	@ 0xb8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	00f42400 	.word	0x00f42400

080026d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e28d      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8083 	beq.w	80027fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f8:	4b94      	ldr	r3, [pc, #592]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b04      	cmp	r3, #4
 8002702:	d019      	beq.n	8002738 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002704:	4b91      	ldr	r3, [pc, #580]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
        || \
 800270c:	2b08      	cmp	r3, #8
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002710:	4b8e      	ldr	r3, [pc, #568]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800271c:	d00c      	beq.n	8002738 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b8b      	ldr	r3, [pc, #556]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d112      	bne.n	8002750 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b88      	ldr	r3, [pc, #544]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b84      	ldr	r3, [pc, #528]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05b      	beq.n	80027fc <HAL_RCC_OscConfig+0x124>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d157      	bne.n	80027fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e25a      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x90>
 800275a:	4b7c      	ldr	r3, [pc, #496]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7b      	ldr	r2, [pc, #492]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e01d      	b.n	80027a4 <HAL_RCC_OscConfig+0xcc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0xb4>
 8002772:	4b76      	ldr	r3, [pc, #472]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a75      	ldr	r2, [pc, #468]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b73      	ldr	r3, [pc, #460]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a72      	ldr	r2, [pc, #456]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0xcc>
 800278c:	4b6f      	ldr	r3, [pc, #444]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6e      	ldr	r2, [pc, #440]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b6c      	ldr	r3, [pc, #432]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6b      	ldr	r2, [pc, #428]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fe00 	bl	80013b0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fdfc 	bl	80013b0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e21f      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b61      	ldr	r3, [pc, #388]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xdc>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fdec 	bl	80013b0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fde8 	bl	80013b0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	@ 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e20b      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	4b57      	ldr	r3, [pc, #348]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x104>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06f      	beq.n	80028ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800280a:	4b50      	ldr	r3, [pc, #320]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002816:	4b4d      	ldr	r3, [pc, #308]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
        || \
 800281e:	2b08      	cmp	r3, #8
 8002820:	d105      	bne.n	800282e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002822:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b47      	ldr	r3, [pc, #284]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d11c      	bne.n	8002874 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b44      	ldr	r3, [pc, #272]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d116      	bne.n	8002874 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	4b41      	ldr	r3, [pc, #260]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x186>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1d3      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b3b      	ldr	r3, [pc, #236]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4937      	ldr	r1, [pc, #220]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	e03a      	b.n	80028ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287c:	4b34      	ldr	r3, [pc, #208]	@ (8002950 <HAL_RCC_OscConfig+0x278>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fd95 	bl	80013b0 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fd91 	bl	80013b0 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1b4      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b28      	ldr	r3, [pc, #160]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4925      	ldr	r1, [pc, #148]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e015      	b.n	80028ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <HAL_RCC_OscConfig+0x278>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fd74 	bl	80013b0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fe fd70 	bl	80013b0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e193      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d036      	beq.n	8002964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe fd54 	bl	80013b0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fd50 	bl	80013b0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e173      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 8002920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x234>
 800292a:	e01b      	b.n	8002964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7fe fd3d 	bl	80013b0 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	e00e      	b.n	8002958 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293a:	f7fe fd39 	bl	80013b0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d907      	bls.n	8002958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e15c      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 800294c:	40023800 	.word	0x40023800
 8002950:	42470000 	.word	0x42470000
 8002954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b8a      	ldr	r3, [pc, #552]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ea      	bne.n	800293a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8097 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b83      	ldr	r3, [pc, #524]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b7f      	ldr	r3, [pc, #508]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	@ 0x40
 8002992:	4b7c      	ldr	r3, [pc, #496]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b79      	ldr	r3, [pc, #484]	@ (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b76      	ldr	r3, [pc, #472]	@ (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a75      	ldr	r2, [pc, #468]	@ (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fcf9 	bl	80013b0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe fcf5 	bl	80013b0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e118      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x31e>
 80029e8:	4b66      	ldr	r3, [pc, #408]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	4a65      	ldr	r2, [pc, #404]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x358>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x340>
 80029fe:	4b61      	ldr	r3, [pc, #388]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	4a60      	ldr	r2, [pc, #384]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0x358>
 8002a18:	4b5a      	ldr	r3, [pc, #360]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1c:	4a59      	ldr	r2, [pc, #356]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a24:	4b57      	ldr	r3, [pc, #348]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	4a56      	ldr	r2, [pc, #344]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a2a:	f023 0304 	bic.w	r3, r3, #4
 8002a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fcba 	bl	80013b0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fcb6 	bl	80013b0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0d7      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	4b4b      	ldr	r3, [pc, #300]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ee      	beq.n	8002a40 <HAL_RCC_OscConfig+0x368>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe fca4 	bl	80013b0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fca0 	bl	80013b0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0c1      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a82:	4b40      	ldr	r3, [pc, #256]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b3b      	ldr	r3, [pc, #236]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	4a3a      	ldr	r2, [pc, #232]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80ad 	beq.w	8002c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aaa:	4b36      	ldr	r3, [pc, #216]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d060      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d145      	bne.n	8002b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b33      	ldr	r3, [pc, #204]	@ (8002b8c <HAL_RCC_OscConfig+0x4b4>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fc74 	bl	80013b0 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fc70 	bl	80013b0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e093      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b29      	ldr	r3, [pc, #164]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	019b      	lsls	r3, r3, #6
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	071b      	lsls	r3, r3, #28
 8002b16:	491b      	ldr	r1, [pc, #108]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x4b4>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe fc45 	bl	80013b0 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe fc41 	bl	80013b0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e064      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x452>
 8002b48:	e05c      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_RCC_OscConfig+0x4b4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fc2e 	bl	80013b0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fc2a 	bl	80013b0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e04d      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x480>
 8002b76:	e045      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e040      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	@ (8002c10 <HAL_RCC_OscConfig+0x538>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d030      	beq.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d129      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d122      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d119      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10f      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e041      	b.n	8002caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe f956 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f000 fd08 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d001      	beq.n	8002ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e04e      	b.n	8002d6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	@ (8002d78 <HAL_TIM_Base_Start_IT+0xc4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d022      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf6:	d01d      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8002d7c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1e      	ldr	r2, [pc, #120]	@ (8002d80 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	@ (8002d84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x80>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	@ (8002d90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d010      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d56:	e007      	b.n	8002d68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40010400 	.word	0x40010400
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40001800 	.word	0x40001800

08002d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e041      	b.n	8002e2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f839 	bl	8002e32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 fc48 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_TIM_PWM_Start+0x24>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e022      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x6a>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d109      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x3e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e015      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x6a>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d109      	bne.n	8002ea0 <HAL_TIM_PWM_Start+0x58>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e008      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x6a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07c      	b.n	8002fb4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0x82>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	e013      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xaa>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0x92>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed8:	e00b      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xaa>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0xa2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fea4 	bl	8003c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_TIM_PWM_Start+0x174>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIM_PWM_Start+0xcc>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc0 <HAL_TIM_PWM_Start+0x178>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_TIM_PWM_Start+0xd0>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_TIM_PWM_Start+0xd2>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a22      	ldr	r2, [pc, #136]	@ (8002fbc <HAL_TIM_PWM_Start+0x174>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f40:	d01d      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc4 <HAL_TIM_PWM_Start+0x17c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d018      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <HAL_TIM_PWM_Start+0x180>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_TIM_PWM_Start+0x184>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	@ (8002fc0 <HAL_TIM_PWM_Start+0x178>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_TIM_PWM_Start+0x188>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x136>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a16      	ldr	r2, [pc, #88]	@ (8002fd4 <HAL_TIM_PWM_Start+0x18c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d111      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d010      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	e007      	b.n	8002fb2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40010400 	.word	0x40010400
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	40001800 	.word	0x40001800

08002fd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e097      	b.n	800311c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fd fe8b 	bl	8000d1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800301c:	f023 0307 	bic.w	r3, r3, #7
 8003020:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4610      	mov	r0, r2
 800302e:	f000 fb1b 	bl	8003668 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	4313      	orrs	r3, r2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003078:	f023 030c 	bic.w	r3, r3, #12
 800307c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003084:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	4313      	orrs	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	011a      	lsls	r2, r3, #4
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	031b      	lsls	r3, r3, #12
 80030a8:	4313      	orrs	r3, r2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	4313      	orrs	r3, r2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0202 	mvn.w	r2, #2
 8003158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa5b 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fa4d 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fa5e 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0204 	mvn.w	r2, #4
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa35 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa27 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fa38 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0208 	mvn.w	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa0f 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa01 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa12 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0210 	mvn.w	r2, #16
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2208      	movs	r2, #8
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9e9 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9db 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f9ec 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00c      	beq.n	8003290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0201 	mvn.w	r2, #1
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fd02 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fd76 	bl	8003da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9bd 	bl	8003652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0220 	mvn.w	r2, #32
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fd48 	bl	8003d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800331e:	2302      	movs	r3, #2
 8003320:	e0ae      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	f200 809f 	bhi.w	8003470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800336d 	.word	0x0800336d
 800333c:	08003471 	.word	0x08003471
 8003340:	08003471 	.word	0x08003471
 8003344:	08003471 	.word	0x08003471
 8003348:	080033ad 	.word	0x080033ad
 800334c:	08003471 	.word	0x08003471
 8003350:	08003471 	.word	0x08003471
 8003354:	08003471 	.word	0x08003471
 8003358:	080033ef 	.word	0x080033ef
 800335c:	08003471 	.word	0x08003471
 8003360:	08003471 	.word	0x08003471
 8003364:	08003471 	.word	0x08003471
 8003368:	0800342f 	.word	0x0800342f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fa1e 	bl	80037b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0208 	orr.w	r2, r2, #8
 8003386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6999      	ldr	r1, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]
      break;
 80033aa:	e064      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa6e 	bl	8003894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6999      	ldr	r1, [r3, #24]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	619a      	str	r2, [r3, #24]
      break;
 80033ec:	e043      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fac3 	bl	8003980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0208 	orr.w	r2, r2, #8
 8003408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0204 	bic.w	r2, r2, #4
 8003418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
      break;
 800342c:	e023      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fb17 	bl	8003a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69d9      	ldr	r1, [r3, #28]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	61da      	str	r2, [r3, #28]
      break;
 800346e:	e002      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
      break;
 8003474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0b4      	b.n	800360e <HAL_TIM_ConfigClockSource+0x186>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034dc:	d03e      	beq.n	800355c <HAL_TIM_ConfigClockSource+0xd4>
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	f200 8087 	bhi.w	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	f000 8086 	beq.w	80035fa <HAL_TIM_ConfigClockSource+0x172>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f2:	d87f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b70      	cmp	r3, #112	@ 0x70
 80034f6:	d01a      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xa6>
 80034f8:	2b70      	cmp	r3, #112	@ 0x70
 80034fa:	d87b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b60      	cmp	r3, #96	@ 0x60
 80034fe:	d050      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003500:	2b60      	cmp	r3, #96	@ 0x60
 8003502:	d877      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b50      	cmp	r3, #80	@ 0x50
 8003506:	d03c      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xfa>
 8003508:	2b50      	cmp	r3, #80	@ 0x50
 800350a:	d873      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d058      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d86f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b30      	cmp	r3, #48	@ 0x30
 8003516:	d064      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003518:	2b30      	cmp	r3, #48	@ 0x30
 800351a:	d86b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b20      	cmp	r3, #32
 800351e:	d060      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d867      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05c      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	2b10      	cmp	r3, #16
 800352a:	d05a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	e062      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	f000 fb63 	bl	8003c08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
      break;
 800355a:	e04f      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	f000 fb4c 	bl	8003c08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800357e:	609a      	str	r2, [r3, #8]
      break;
 8003580:	e03c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fac0 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2150      	movs	r1, #80	@ 0x50
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fb19 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80035a0:	e02c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 fadf 	bl	8003b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2160      	movs	r1, #96	@ 0x60
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fb09 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80035c0:	e01c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	461a      	mov	r2, r3
 80035d0:	f000 faa0 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2140      	movs	r1, #64	@ 0x40
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 faf9 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80035e0:	e00c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 faf0 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80035f2:	e003      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e000      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a43      	ldr	r2, [pc, #268]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a40      	ldr	r2, [pc, #256]	@ (800378c <TIM_Base_SetConfig+0x124>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3f      	ldr	r2, [pc, #252]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3e      	ldr	r2, [pc, #248]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3d      	ldr	r2, [pc, #244]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a32      	ldr	r2, [pc, #200]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c8:	d027      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2f      	ldr	r2, [pc, #188]	@ (800378c <TIM_Base_SetConfig+0x124>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d023      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d017      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <TIM_Base_SetConfig+0x134>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <TIM_Base_SetConfig+0x138>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <TIM_Base_SetConfig+0x13c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a28      	ldr	r2, [pc, #160]	@ (80037a8 <TIM_Base_SetConfig+0x140>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a27      	ldr	r2, [pc, #156]	@ (80037ac <TIM_Base_SetConfig+0x144>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a26      	ldr	r2, [pc, #152]	@ (80037b0 <TIM_Base_SetConfig+0x148>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0e      	ldr	r2, [pc, #56]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_Base_SetConfig+0xf2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d103      	bne.n	8003762 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f043 0204 	orr.w	r2, r3, #4
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00
 8003798:	40010400 	.word	0x40010400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800
 80037a8:	40001800 	.word	0x40001800
 80037ac:	40001c00 	.word	0x40001c00
 80037b0:	40002000 	.word	0x40002000

080037b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0201 	bic.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 0302 	bic.w	r3, r3, #2
 80037fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a20      	ldr	r2, [pc, #128]	@ (800388c <TIM_OC1_SetConfig+0xd8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC1_SetConfig+0x64>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1f      	ldr	r2, [pc, #124]	@ (8003890 <TIM_OC1_SetConfig+0xdc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10c      	bne.n	8003832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0308 	bic.w	r3, r3, #8
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a15      	ldr	r2, [pc, #84]	@ (800388c <TIM_OC1_SetConfig+0xd8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC1_SetConfig+0x8e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a14      	ldr	r2, [pc, #80]	@ (8003890 <TIM_OC1_SetConfig+0xdc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 0210 	bic.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a22      	ldr	r2, [pc, #136]	@ (8003978 <TIM_OC2_SetConfig+0xe4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC2_SetConfig+0x68>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a21      	ldr	r2, [pc, #132]	@ (800397c <TIM_OC2_SetConfig+0xe8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10d      	bne.n	8003918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <TIM_OC2_SetConfig+0xe4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC2_SetConfig+0x94>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a16      	ldr	r2, [pc, #88]	@ (800397c <TIM_OC2_SetConfig+0xe8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d113      	bne.n	8003950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800392e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400

08003980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <TIM_OC3_SetConfig+0xe0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_OC3_SetConfig+0x66>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <TIM_OC3_SetConfig+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10d      	bne.n	8003a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a16      	ldr	r2, [pc, #88]	@ (8003a60 <TIM_OC3_SetConfig+0xe0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC3_SetConfig+0x92>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a15      	ldr	r2, [pc, #84]	@ (8003a64 <TIM_OC3_SetConfig+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40010400 	.word	0x40010400

08003a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	031b      	lsls	r3, r3, #12
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <TIM_OC4_SetConfig+0xa4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_OC4_SetConfig+0x68>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <TIM_OC4_SetConfig+0xa8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d109      	bne.n	8003ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0201 	bic.w	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f023 030a 	bic.w	r3, r3, #10
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f023 0210 	bic.w	r2, r3, #16
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	031b      	lsls	r3, r3, #12
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f043 0307 	orr.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	021a      	lsls	r2, r3, #8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	609a      	str	r2, [r3, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e05a      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a21      	ldr	r2, [pc, #132]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf8:	d01d      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1b      	ldr	r2, [pc, #108]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1a      	ldr	r2, [pc, #104]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a18      	ldr	r2, [pc, #96]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a17      	ldr	r2, [pc, #92]	@ (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40010400 	.word	0x40010400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40001800 	.word	0x40001800

08003d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e042      	b.n	8003e4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd f8fe 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	@ 0x24
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fc99 	bl	8004730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b0ba      	sub	sp, #232	@ 0xe8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fb7e 	bl	80045b4 <UART_Receive_IT>
      return;
 8003eb8:	e273      	b.n	80043a2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80de 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
 8003ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80d1 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
 8003f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d011      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f043 0208 	orr.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 820a 	beq.w	8004398 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb09 	bl	80045b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b40      	cmp	r3, #64	@ 0x40
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_UART_IRQHandler+0x17a>
 8003fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04f      	beq.n	800406e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa14 	bl	80043fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d141      	bne.n	8004066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800400e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800401a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d9      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	4a8a      	ldr	r2, [pc, #552]	@ (8004264 <HAL_UART_IRQHandler+0x410>)
 800403c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd fbc0 	bl	80017c8 <HAL_DMA_Abort_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004058:	4610      	mov	r0, r2
 800405a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e00e      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9b6 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e00a      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9b2 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e006      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9ae 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800407a:	e18d      	b.n	8004398 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	bf00      	nop
    return;
 800407e:	e18b      	b.n	8004398 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 8167 	bne.w	8004358 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8160 	beq.w	8004358 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8159 	beq.w	8004358 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	f040 80ce 	bne.w	8004268 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a9 	beq.w	8004234 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 80a2 	bcs.w	8004234 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004102:	f000 8088 	beq.w	8004216 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004124:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800413e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800414a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d9      	bne.n	8004106 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004176:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800417a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800417e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e1      	bne.n	8004152 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3314      	adds	r3, #20
 8004194:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800419e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e3      	bne.n	80041d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd fa69 	bl	80016e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	b29b      	uxth	r3, r3
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8d9 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004232:	e0b3      	b.n	800439c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004238:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800423c:	429a      	cmp	r2, r3
 800423e:	f040 80ad 	bne.w	800439c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424c:	f040 80a6 	bne.w	800439c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8c1 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004262:	e09b      	b.n	800439c <HAL_UART_IRQHandler+0x548>
 8004264:	080044c3 	.word	0x080044c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 808e 	beq.w	80043a0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8089 	beq.w	80043a0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	623b      	str	r3, [r7, #32]
   return(result);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004330:	61fa      	str	r2, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	617b      	str	r3, [r7, #20]
   return(result);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f847 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004356:	e023      	b.n	80043a0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_UART_IRQHandler+0x524>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8b7 	bl	80044e4 <UART_Transmit_IT>
    return;
 8004376:	e014      	b.n	80043a2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_UART_IRQHandler+0x54e>
 8004384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8f7 	bl	8004584 <UART_EndTransmit_IT>
    return;
 8004396:	e004      	b.n	80043a2 <HAL_UART_IRQHandler+0x54e>
    return;
 8004398:	bf00      	nop
 800439a:	e002      	b.n	80043a2 <HAL_UART_IRQHandler+0x54e>
      return;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <HAL_UART_IRQHandler+0x54e>
      return;
 80043a0:	bf00      	nop
  }
}
 80043a2:	37e8      	adds	r7, #232	@ 0xe8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b095      	sub	sp, #84	@ 0x54
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004424:	643a      	str	r2, [r7, #64]	@ 0x40
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800442a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e5      	bne.n	8004404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	61fb      	str	r3, [r7, #28]
   return(result);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3314      	adds	r3, #20
 8004456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004458:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	d119      	bne.n	80044a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60bb      	str	r3, [r7, #8]
   return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	647b      	str	r3, [r7, #68]	@ 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004494:	61ba      	str	r2, [r7, #24]
 8004496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	613b      	str	r3, [r7, #16]
   return(result);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044b6:	bf00      	nop
 80044b8:	3754      	adds	r7, #84	@ 0x54
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff ff7a 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b21      	cmp	r3, #33	@ 0x21
 80044f6:	d13e      	bne.n	8004576 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004500:	d114      	bne.n	800452c <UART_Transmit_IT+0x48>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d110      	bne.n	800452c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]
 800452a:	e008      	b.n	800453e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6211      	str	r1, [r2, #32]
 8004536:	781a      	ldrb	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29b      	uxth	r3, r3
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4619      	mov	r1, r3
 800454c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004560:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004570:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff feff 	bl	80043a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	@ 0x30
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b22      	cmp	r3, #34	@ 0x22
 80045ce:	f040 80aa 	bne.w	8004726 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045da:	d115      	bne.n	8004608 <UART_Receive_IT+0x54>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d111      	bne.n	8004608 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
 8004606:	e024      	b.n	8004652 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004616:	d007      	beq.n	8004628 <UART_Receive_IT+0x74>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <UART_Receive_IT+0x82>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	e008      	b.n	8004648 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004642:	b2da      	uxtb	r2, r3
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4619      	mov	r1, r3
 8004660:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004662:	2b00      	cmp	r3, #0
 8004664:	d15d      	bne.n	8004722 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0220 	bic.w	r2, r2, #32
 8004674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d135      	bne.n	8004718 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	613b      	str	r3, [r7, #16]
   return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d2:	623a      	str	r2, [r7, #32]
 80046d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	69f9      	ldr	r1, [r7, #28]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e5      	bne.n	80046b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d10a      	bne.n	800470a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fe67 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
 8004716:	e002      	b.n	800471e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fe4f 	bl	80043bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e002      	b.n	8004728 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3730      	adds	r7, #48	@ 0x30
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b0c0      	sub	sp, #256	@ 0x100
 8004736:	af00      	add	r7, sp, #0
 8004738:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	68d9      	ldr	r1, [r3, #12]
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	ea40 0301 	orr.w	r3, r0, r1
 8004758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	431a      	orrs	r2, r3
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004788:	f021 010c 	bic.w	r1, r1, #12
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004796:	430b      	orrs	r3, r1
 8004798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047aa:	6999      	ldr	r1, [r3, #24]
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	ea40 0301 	orr.w	r3, r0, r1
 80047b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b8f      	ldr	r3, [pc, #572]	@ (80049fc <UART_SetConfig+0x2cc>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d005      	beq.n	80047d0 <UART_SetConfig+0xa0>
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004a00 <UART_SetConfig+0x2d0>)
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d104      	bne.n	80047da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7fd fd0c 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 80047d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047d8:	e003      	b.n	80047e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047da:	f7fd fcf3 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80047de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ec:	f040 810c 	bne.w	8004a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	1891      	adds	r1, r2, r2
 8004808:	65b9      	str	r1, [r7, #88]	@ 0x58
 800480a:	415b      	adcs	r3, r3
 800480c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800480e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004812:	4621      	mov	r1, r4
 8004814:	eb12 0801 	adds.w	r8, r2, r1
 8004818:	4629      	mov	r1, r5
 800481a:	eb43 0901 	adc.w	r9, r3, r1
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800482e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004832:	4690      	mov	r8, r2
 8004834:	4699      	mov	r9, r3
 8004836:	4623      	mov	r3, r4
 8004838:	eb18 0303 	adds.w	r3, r8, r3
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004840:	462b      	mov	r3, r5
 8004842:	eb49 0303 	adc.w	r3, r9, r3
 8004846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004856:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800485a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800485e:	460b      	mov	r3, r1
 8004860:	18db      	adds	r3, r3, r3
 8004862:	653b      	str	r3, [r7, #80]	@ 0x50
 8004864:	4613      	mov	r3, r2
 8004866:	eb42 0303 	adc.w	r3, r2, r3
 800486a:	657b      	str	r3, [r7, #84]	@ 0x54
 800486c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004874:	f7fb fccc 	bl	8000210 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4b61      	ldr	r3, [pc, #388]	@ (8004a04 <UART_SetConfig+0x2d4>)
 800487e:	fba3 2302 	umull	r2, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	011c      	lsls	r4, r3, #4
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004890:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048a0:	415b      	adcs	r3, r3
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048a8:	4641      	mov	r1, r8
 80048aa:	eb12 0a01 	adds.w	sl, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb43 0b01 	adc.w	fp, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c8:	4692      	mov	sl, r2
 80048ca:	469b      	mov	fp, r3
 80048cc:	4643      	mov	r3, r8
 80048ce:	eb1a 0303 	adds.w	r3, sl, r3
 80048d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048d6:	464b      	mov	r3, r9
 80048d8:	eb4b 0303 	adc.w	r3, fp, r3
 80048dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
 8004902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800490a:	f7fb fc81 	bl	8000210 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4611      	mov	r1, r2
 8004914:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <UART_SetConfig+0x2d4>)
 8004916:	fba3 2301 	umull	r2, r3, r3, r1
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2264      	movs	r2, #100	@ 0x64
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800492a:	4b36      	ldr	r3, [pc, #216]	@ (8004a04 <UART_SetConfig+0x2d4>)
 800492c:	fba3 2302 	umull	r2, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004938:	441c      	add	r4, r3
 800493a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004944:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	1891      	adds	r1, r2, r2
 8004952:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004954:	415b      	adcs	r3, r3
 8004956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800495c:	4641      	mov	r1, r8
 800495e:	1851      	adds	r1, r2, r1
 8004960:	6339      	str	r1, [r7, #48]	@ 0x30
 8004962:	4649      	mov	r1, r9
 8004964:	414b      	adcs	r3, r1
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004974:	4659      	mov	r1, fp
 8004976:	00cb      	lsls	r3, r1, #3
 8004978:	4651      	mov	r1, sl
 800497a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497e:	4651      	mov	r1, sl
 8004980:	00ca      	lsls	r2, r1, #3
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	4603      	mov	r3, r0
 8004988:	4642      	mov	r2, r8
 800498a:	189b      	adds	r3, r3, r2
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004990:	464b      	mov	r3, r9
 8004992:	460a      	mov	r2, r1
 8004994:	eb42 0303 	adc.w	r3, r2, r3
 8004998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049b0:	460b      	mov	r3, r1
 80049b2:	18db      	adds	r3, r3, r3
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049b6:	4613      	mov	r3, r2
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049c6:	f7fb fc23 	bl	8000210 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 1302 	umull	r1, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	2164      	movs	r1, #100	@ 0x64
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	3332      	adds	r3, #50	@ 0x32
 80049e2:	4a08      	ldr	r2, [pc, #32]	@ (8004a04 <UART_SetConfig+0x2d4>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	f003 0207 	and.w	r2, r3, #7
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4422      	add	r2, r4
 80049f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049f8:	e106      	b.n	8004c08 <UART_SetConfig+0x4d8>
 80049fa:	bf00      	nop
 80049fc:	40011000 	.word	0x40011000
 8004a00:	40011400 	.word	0x40011400
 8004a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	1891      	adds	r1, r2, r2
 8004a20:	6239      	str	r1, [r7, #32]
 8004a22:	415b      	adcs	r3, r3
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	1854      	adds	r4, r2, r1
 8004a2e:	4649      	mov	r1, r9
 8004a30:	eb43 0501 	adc.w	r5, r3, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	00eb      	lsls	r3, r5, #3
 8004a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a42:	00e2      	lsls	r2, r4, #3
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	18e3      	adds	r3, r4, r3
 8004a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a50:	464b      	mov	r3, r9
 8004a52:	eb45 0303 	adc.w	r3, r5, r3
 8004a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a76:	4629      	mov	r1, r5
 8004a78:	008b      	lsls	r3, r1, #2
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a80:	4621      	mov	r1, r4
 8004a82:	008a      	lsls	r2, r1, #2
 8004a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a88:	f7fb fbc2 	bl	8000210 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4b60      	ldr	r3, [pc, #384]	@ (8004c14 <UART_SetConfig+0x4e4>)
 8004a92:	fba3 2302 	umull	r2, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	011c      	lsls	r4, r3, #4
 8004a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004aa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	1891      	adds	r1, r2, r2
 8004ab2:	61b9      	str	r1, [r7, #24]
 8004ab4:	415b      	adcs	r3, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004abc:	4641      	mov	r1, r8
 8004abe:	1851      	adds	r1, r2, r1
 8004ac0:	6139      	str	r1, [r7, #16]
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	414b      	adcs	r3, r1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	00cb      	lsls	r3, r1, #3
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ade:	4651      	mov	r1, sl
 8004ae0:	00ca      	lsls	r2, r1, #3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004af0:	464b      	mov	r3, r9
 8004af2:	460a      	mov	r2, r1
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b14:	4649      	mov	r1, r9
 8004b16:	008b      	lsls	r3, r1, #2
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1e:	4641      	mov	r1, r8
 8004b20:	008a      	lsls	r2, r1, #2
 8004b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b26:	f7fb fb73 	bl	8000210 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4b38      	ldr	r3, [pc, #224]	@ (8004c14 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2301 	umull	r2, r3, r3, r1
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2264      	movs	r2, #100	@ 0x64
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	1acb      	subs	r3, r1, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	@ 0x32
 8004b44:	4a33      	ldr	r2, [pc, #204]	@ (8004c14 <UART_SetConfig+0x4e4>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b50:	441c      	add	r4, r3
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b70:	4641      	mov	r1, r8
 8004b72:	1851      	adds	r1, r2, r1
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	4649      	mov	r1, r9
 8004b78:	414b      	adcs	r3, r1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b88:	4659      	mov	r1, fp
 8004b8a:	00cb      	lsls	r3, r1, #3
 8004b8c:	4651      	mov	r1, sl
 8004b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b92:	4651      	mov	r1, sl
 8004b94:	00ca      	lsls	r2, r1, #3
 8004b96:	4610      	mov	r0, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	460a      	mov	r2, r1
 8004ba6:	eb42 0303 	adc.w	r3, r2, r3
 8004baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	4641      	mov	r1, r8
 8004bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bce:	4641      	mov	r1, r8
 8004bd0:	008a      	lsls	r2, r1, #2
 8004bd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bd6:	f7fb fb1b 	bl	8000210 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <UART_SetConfig+0x4e4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	@ 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	3332      	adds	r3, #50	@ 0x32
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <UART_SetConfig+0x4e4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4422      	add	r2, r4
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c14:	51eb851f 	.word	0x51eb851f

08004c18 <__NVIC_SetPriority>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db0a      	blt.n	8004c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	490c      	ldr	r1, [pc, #48]	@ (8004c64 <__NVIC_SetPriority+0x4c>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c40:	e00a      	b.n	8004c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4908      	ldr	r1, [pc, #32]	@ (8004c68 <__NVIC_SetPriority+0x50>)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	440b      	add	r3, r1
 8004c56:	761a      	strb	r2, [r3, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <SysTick_Handler+0x1c>)
 8004c72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c74:	f001 fd18 	bl	80066a8 <xTaskGetSchedulerState>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d001      	beq.n	8004c82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c7e:	f002 fb13 	bl	80072a8 <xPortSysTickHandler>
  }
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000e010 	.word	0xe000e010

08004c8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c90:	2100      	movs	r1, #0
 8004c92:	f06f 0004 	mvn.w	r0, #4
 8004c96:	f7ff ffbf 	bl	8004c18 <__NVIC_SetPriority>
#endif
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca6:	f3ef 8305 	mrs	r3, IPSR
 8004caa:	603b      	str	r3, [r7, #0]
  return(result);
 8004cac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cb2:	f06f 0305 	mvn.w	r3, #5
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	e00c      	b.n	8004cd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <osKernelInitialize+0x44>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <osKernelInitialize+0x44>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e002      	b.n	8004cd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cd4:	687b      	ldr	r3, [r7, #4]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	200002ec 	.word	0x200002ec

08004ce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cfa:	f06f 0305 	mvn.w	r3, #5
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e010      	b.n	8004d24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <osKernelStart+0x48>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d109      	bne.n	8004d1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d0a:	f7ff ffbf 	bl	8004c8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <osKernelStart+0x48>)
 8004d10:	2202      	movs	r2, #2
 8004d12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d14:	f001 f87a 	bl	8005e0c <vTaskStartScheduler>
      stat = osOK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	e002      	b.n	8004d24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d24:	687b      	ldr	r3, [r7, #4]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200002ec 	.word	0x200002ec

08004d34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	@ 0x38
 8004d38:	af04      	add	r7, sp, #16
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d44:	f3ef 8305 	mrs	r3, IPSR
 8004d48:	617b      	str	r3, [r7, #20]
  return(result);
 8004d4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d17e      	bne.n	8004e4e <osThreadNew+0x11a>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d07b      	beq.n	8004e4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d56:	2380      	movs	r3, #128	@ 0x80
 8004d58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d5a:	2318      	movs	r3, #24
 8004d5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
 8004d66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d045      	beq.n	8004dfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <osThreadNew+0x48>
        name = attr->name;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <osThreadNew+0x6e>
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b38      	cmp	r3, #56	@ 0x38
 8004d94:	d805      	bhi.n	8004da2 <osThreadNew+0x6e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <osThreadNew+0x72>
        return (NULL);
 8004da2:	2300      	movs	r3, #0
 8004da4:	e054      	b.n	8004e50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <osThreadNew+0xa8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b5b      	cmp	r3, #91	@ 0x5b
 8004dc4:	d90a      	bls.n	8004ddc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <osThreadNew+0xa8>
        mem = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e010      	b.n	8004dfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <osThreadNew+0xca>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <osThreadNew+0xca>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <osThreadNew+0xca>
          mem = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e001      	b.n	8004dfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e0c:	9202      	str	r2, [sp, #8]
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fe1a 	bl	8005a54 <xTaskCreateStatic>
 8004e20:	4603      	mov	r3, r0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e013      	b.n	8004e4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fe68 	bl	8005b14 <xTaskCreate>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d001      	beq.n	8004e4e <osThreadNew+0x11a>
            hTask = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e4e:	693b      	ldr	r3, [r7, #16]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3728      	adds	r7, #40	@ 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e60:	f3ef 8305 	mrs	r3, IPSR
 8004e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <osDelay+0x1c>
    stat = osErrorISR;
 8004e6c:	f06f 0305 	mvn.w	r3, #5
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e007      	b.n	8004e84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 ff8e 	bl	8005da0 <vTaskDelay>
    }
  }

  return (stat);
 8004e84:	68fb      	ldr	r3, [r7, #12]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a06      	ldr	r2, [pc, #24]	@ (8004ec0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2280      	movs	r2, #128	@ 0x80
 8004eac:	601a      	str	r2, [r3, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	200002f0 	.word	0x200002f0
 8004ec0:	2000034c 	.word	0x2000034c

08004ec4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a07      	ldr	r2, [pc, #28]	@ (8004ef0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ed4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a06      	ldr	r2, [pc, #24]	@ (8004ef4 <vApplicationGetTimerTaskMemory+0x30>)
 8004eda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	2000054c 	.word	0x2000054c
 8004ef4:	200005a8 	.word	0x200005a8

08004ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 0208 	add.w	r2, r3, #8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 0208 	add.w	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d103      	bne.n	8004fba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00c      	b.n	8004fd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <vListInsert+0x2e>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d2f6      	bcs.n	8004fc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6852      	ldr	r2, [r2, #4]
 800502c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d103      	bne.n	8005040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800508c:	f002 f87c 	bl	8007188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	3b01      	subs	r3, #1
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	22ff      	movs	r2, #255	@ 0xff
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	22ff      	movs	r2, #255	@ 0xff
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d114      	bne.n	800510c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01a      	beq.n	8005120 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3310      	adds	r3, #16
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f91a 	bl	8006328 <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d012      	beq.n	8005120 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <xQueueGenericReset+0xd0>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	e009      	b.n	8005120 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3310      	adds	r3, #16
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fef1 	bl	8004ef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3324      	adds	r3, #36	@ 0x24
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff feec 	bl	8004ef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f002 f864 	bl	80071ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005124:	2301      	movs	r3, #1
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	@ 0x38
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	e7fd      	b.n	800515c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <xQueueGenericCreateStatic+0x56>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <xQueueGenericCreateStatic+0x5a>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <xQueueGenericCreateStatic+0x5c>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <xQueueGenericCreateStatic+0x84>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <xQueueGenericCreateStatic+0x88>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <xQueueGenericCreateStatic+0x8a>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61fb      	str	r3, [r7, #28]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051da:	2350      	movs	r3, #80	@ 0x50
 80051dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b50      	cmp	r3, #80	@ 0x50
 80051e2:	d00b      	beq.n	80051fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61bb      	str	r3, [r7, #24]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005210:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f805 	bl	800522e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005226:	4618      	mov	r0, r3
 8005228:	3730      	adds	r7, #48	@ 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e002      	b.n	8005250 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800525c:	2101      	movs	r1, #1
 800525e:	69b8      	ldr	r0, [r7, #24]
 8005260:	f7ff fefe 	bl	8005060 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	@ 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <xQueueGenericSend+0x34>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSend+0x42>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSend+0x46>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSend+0x48>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <xQueueGenericSend+0x64>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSend+0x72>
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <xQueueGenericSend+0x76>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueGenericSend+0x78>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <xQueueGenericSend+0x94>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	623b      	str	r3, [r7, #32]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005308:	f001 f9ce 	bl	80066a8 <xTaskGetSchedulerState>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <xQueueGenericSend+0xa4>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <xQueueGenericSend+0xa8>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <xQueueGenericSend+0xaa>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <xQueueGenericSend+0xc6>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61fb      	str	r3, [r7, #28]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800533a:	f001 ff25 	bl	8007188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <xQueueGenericSend+0xdc>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d129      	bne.n	80053a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005356:	f000 fa0f 	bl	8005778 <prvCopyDataToQueue>
 800535a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d010      	beq.n	8005386 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	3324      	adds	r3, #36	@ 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f000 ffdd 	bl	8006328 <xTaskRemoveFromEventList>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005374:	4b3f      	ldr	r3, [pc, #252]	@ (8005474 <xQueueGenericSend+0x200>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	e00a      	b.n	800539c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800538c:	4b39      	ldr	r3, [pc, #228]	@ (8005474 <xQueueGenericSend+0x200>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800539c:	f001 ff26 	bl	80071ec <vPortExitCritical>
				return pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e063      	b.n	800546c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053aa:	f001 ff1f 	bl	80071ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e05c      	b.n	800546c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053b8:	f107 0314 	add.w	r3, r7, #20
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 f817 	bl	80063f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053c6:	f001 ff11 	bl	80071ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ca:	f000 fd87 	bl	8005edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ce:	f001 fedb 	bl	8007188 <vPortEnterCritical>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d103      	bne.n	80053e8 <xQueueGenericSend+0x174>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSend+0x18a>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053fe:	f001 fef5 	bl	80071ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005402:	1d3a      	adds	r2, r7, #4
 8005404:	f107 0314 	add.w	r3, r7, #20
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f806 	bl	800641c <xTaskCheckForTimeOut>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d124      	bne.n	8005460 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005418:	f000 faa6 	bl	8005968 <prvIsQueueFull>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	3310      	adds	r3, #16
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f000 ff2a 	bl	8006284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005432:	f000 fa31 	bl	8005898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005436:	f000 fd5f 	bl	8005ef8 <xTaskResumeAll>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	f47f af7c 	bne.w	800533a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <xQueueGenericSend+0x200>)
 8005444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	e772      	b.n	800533a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005456:	f000 fa1f 	bl	8005898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800545a:	f000 fd4d 	bl	8005ef8 <xTaskResumeAll>
 800545e:	e76c      	b.n	800533a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005462:	f000 fa19 	bl	8005898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005466:	f000 fd47 	bl	8005ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800546a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800546c:	4618      	mov	r0, r3
 800546e:	3738      	adds	r7, #56	@ 0x38
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b090      	sub	sp, #64	@ 0x40
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSendFromISR+0x3e>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <xQueueGenericSendFromISR+0x42>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericSendFromISR+0x44>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d103      	bne.n	80054e6 <xQueueGenericSendFromISR+0x6e>
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <xQueueGenericSendFromISR+0x72>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericSendFromISR+0x74>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	623b      	str	r3, [r7, #32]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005508:	f001 ff1e 	bl	8007348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800550c:	f3ef 8211 	mrs	r2, BASEPRI
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61fa      	str	r2, [r7, #28]
 8005522:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005524:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005526:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <xQueueGenericSendFromISR+0xc2>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d12f      	bne.n	800559a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005540:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005550:	f000 f912 	bl	8005778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005554:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d112      	bne.n	8005584 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800555e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	d016      	beq.n	8005594 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	3324      	adds	r3, #36	@ 0x24
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fedc 	bl	8006328 <xTaskRemoveFromEventList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e007      	b.n	8005594 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005588:	3301      	adds	r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	b25a      	sxtb	r2, r3
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005594:	2301      	movs	r3, #1
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005598:	e001      	b.n	800559e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800559a:	2300      	movs	r3, #0
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3740      	adds	r7, #64	@ 0x40
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	@ 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <xQueueReceive+0x32>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	623b      	str	r3, [r7, #32]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <xQueueReceive+0x40>
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xQueueReceive+0x44>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <xQueueReceive+0x46>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <xQueueReceive+0x62>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fb      	str	r3, [r7, #28]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005616:	f001 f847 	bl	80066a8 <xTaskGetSchedulerState>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <xQueueReceive+0x72>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <xQueueReceive+0x76>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <xQueueReceive+0x78>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <xQueueReceive+0x94>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	61bb      	str	r3, [r7, #24]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005648:	f001 fd9e 	bl	8007188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01f      	beq.n	8005698 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565c:	f000 f8f6 	bl	800584c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00f      	beq.n	8005690 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	3310      	adds	r3, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fe57 	bl	8006328 <xTaskRemoveFromEventList>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005680:	4b3c      	ldr	r3, [pc, #240]	@ (8005774 <xQueueReceive+0x1c0>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005690:	f001 fdac 	bl	80071ec <vPortExitCritical>
				return pdPASS;
 8005694:	2301      	movs	r3, #1
 8005696:	e069      	b.n	800576c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800569e:	f001 fda5 	bl	80071ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e062      	b.n	800576c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fe9d 	bl	80063f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056ba:	f001 fd97 	bl	80071ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056be:	f000 fc0d 	bl	8005edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c2:	f001 fd61 	bl	8007188 <vPortEnterCritical>
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d103      	bne.n	80056dc <xQueueReceive+0x128>
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d103      	bne.n	80056f2 <xQueueReceive+0x13e>
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f2:	f001 fd7b 	bl	80071ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f6:	1d3a      	adds	r2, r7, #4
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fe8c 	bl	800641c <xTaskCheckForTimeOut>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d123      	bne.n	8005752 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800570a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570c:	f000 f916 	bl	800593c <prvIsQueueEmpty>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	3324      	adds	r3, #36	@ 0x24
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fdb0 	bl	8006284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005726:	f000 f8b7 	bl	8005898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800572a:	f000 fbe5 	bl	8005ef8 <xTaskResumeAll>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d189      	bne.n	8005648 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005734:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <xQueueReceive+0x1c0>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	e780      	b.n	8005648 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005748:	f000 f8a6 	bl	8005898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800574c:	f000 fbd4 	bl	8005ef8 <xTaskResumeAll>
 8005750:	e77a      	b.n	8005648 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005754:	f000 f8a0 	bl	8005898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005758:	f000 fbce 	bl	8005ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800575e:	f000 f8ed 	bl	800593c <prvIsQueueEmpty>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f43f af6f 	beq.w	8005648 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800576a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800576c:	4618      	mov	r0, r3
 800576e:	3730      	adds	r7, #48	@ 0x30
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d14d      	bne.n	800583a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ff9e 	bl	80066e4 <xTaskPriorityDisinherit>
 80057a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	e043      	b.n	800583a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d119      	bne.n	80057ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6858      	ldr	r0, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	461a      	mov	r2, r3
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	f002 f81c 	bl	8007800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d32b      	bcc.n	800583a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e026      	b.n	800583a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68d8      	ldr	r0, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	461a      	mov	r2, r3
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	f002 f802 	bl	8007800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005804:	425b      	negs	r3, r3
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d207      	bcs.n	8005828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	425b      	negs	r3, r3
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d105      	bne.n	800583a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3b01      	subs	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	441a      	add	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d303      	bcc.n	8005880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	461a      	mov	r2, r3
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	f001 ffb8 	bl	8007800 <memcpy>
	}
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fc72 	bl	8007188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ac:	e011      	b.n	80058d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d012      	beq.n	80058dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3324      	adds	r3, #36	@ 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fd34 	bl	8006328 <xTaskRemoveFromEventList>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058c6:	f000 fe0d 	bl	80064e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dce9      	bgt.n	80058ae <prvUnlockQueue+0x16>
 80058da:	e000      	b.n	80058de <prvUnlockQueue+0x46>
					break;
 80058dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	22ff      	movs	r2, #255	@ 0xff
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80058e6:	f001 fc81 	bl	80071ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058ea:	f001 fc4d 	bl	8007188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f6:	e011      	b.n	800591c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d012      	beq.n	8005926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3310      	adds	r3, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fd0f 	bl	8006328 <xTaskRemoveFromEventList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005910:	f000 fde8 	bl	80064e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	3b01      	subs	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800591c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005920:	2b00      	cmp	r3, #0
 8005922:	dce9      	bgt.n	80058f8 <prvUnlockQueue+0x60>
 8005924:	e000      	b.n	8005928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	22ff      	movs	r2, #255	@ 0xff
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005930:	f001 fc5c 	bl	80071ec <vPortExitCritical>
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005944:	f001 fc20 	bl	8007188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005950:	2301      	movs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e001      	b.n	800595a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f001 fc47 	bl	80071ec <vPortExitCritical>

	return xReturn;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005970:	f001 fc0a 	bl	8007188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	429a      	cmp	r2, r3
 800597e:	d102      	bne.n	8005986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e001      	b.n	800598a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fc2f 	bl	80071ec <vPortExitCritical>

	return xReturn;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e014      	b.n	80059d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059a8:	4a0f      	ldr	r2, [pc, #60]	@ (80059e8 <vQueueAddToRegistry+0x50>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10b      	bne.n	80059cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059b4:	490c      	ldr	r1, [pc, #48]	@ (80059e8 <vQueueAddToRegistry+0x50>)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059be:	4a0a      	ldr	r2, [pc, #40]	@ (80059e8 <vQueueAddToRegistry+0x50>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ca:	e006      	b.n	80059da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d9e7      	bls.n	80059a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	200009a8 	.word	0x200009a8

080059ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059fc:	f001 fbc4 	bl	8007188 <vPortEnterCritical>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d103      	bne.n	8005a16 <vQueueWaitForMessageRestricted+0x2a>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d103      	bne.n	8005a2c <vQueueWaitForMessageRestricted+0x40>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a2c:	f001 fbde 	bl	80071ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3324      	adds	r3, #36	@ 0x24
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc45 	bl	80062d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff26 	bl	8005898 <prvUnlockQueue>
	}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	@ 0x38
 8005a58:	af04      	add	r7, sp, #16
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	623b      	str	r3, [r7, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10b      	bne.n	8005a9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	61fb      	str	r3, [r7, #28]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a9e:	235c      	movs	r3, #92	@ 0x5c
 8005aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005aa6:	d00b      	beq.n	8005ac0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ac0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01e      	beq.n	8005b06 <xTaskCreateStatic+0xb2>
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f850 	bl	8005b9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005afe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b00:	f000 f8de 	bl	8005cc0 <prvAddNewTaskToReadyList>
 8005b04:	e001      	b.n	8005b0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b0a:	697b      	ldr	r3, [r7, #20]
	}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3728      	adds	r7, #40	@ 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08c      	sub	sp, #48	@ 0x30
 8005b18:	af04      	add	r7, sp, #16
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fc4f 	bl	80073cc <pvPortMalloc>
 8005b2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00e      	beq.n	8005b54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b36:	205c      	movs	r0, #92	@ 0x5c
 8005b38:	f001 fc48 	bl	80073cc <pvPortMalloc>
 8005b3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b4a:	e005      	b.n	8005b58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b4c:	6978      	ldr	r0, [r7, #20]
 8005b4e:	f001 fd0b 	bl	8007568 <vPortFree>
 8005b52:	e001      	b.n	8005b58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d017      	beq.n	8005b8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9303      	str	r3, [sp, #12]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	9302      	str	r3, [sp, #8]
 8005b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f80e 	bl	8005b9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b82:	69f8      	ldr	r0, [r7, #28]
 8005b84:	f000 f89c 	bl	8005cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e002      	b.n	8005b94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b94:	69bb      	ldr	r3, [r7, #24]
	}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b088      	sub	sp, #32
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	21a5      	movs	r1, #165	@ 0xa5
 8005bb8:	f001 fdf6 	bl	80077a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	617b      	str	r3, [r7, #20]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01f      	beq.n	8005c3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e012      	b.n	8005c2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	7819      	ldrb	r1, [r3, #0]
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	3334      	adds	r3, #52	@ 0x34
 8005c14:	460a      	mov	r2, r1
 8005c16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2b0f      	cmp	r3, #15
 8005c2e:	d9e9      	bls.n	8005c04 <prvInitialiseNewTask+0x66>
 8005c30:	e000      	b.n	8005c34 <prvInitialiseNewTask+0x96>
			{
				break;
 8005c32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c3c:	e003      	b.n	8005c46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	2b37      	cmp	r3, #55	@ 0x37
 8005c4a:	d901      	bls.n	8005c50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c4c:	2337      	movs	r3, #55	@ 0x37
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	2200      	movs	r2, #0
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	3304      	adds	r3, #4
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff f966 	bl	8004f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	3318      	adds	r3, #24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f961 	bl	8004f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	2200      	movs	r2, #0
 8005c90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	69b8      	ldr	r0, [r7, #24]
 8005ca0:	f001 f93e 	bl	8006f20 <pxPortInitialiseStack>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cc8:	f001 fa5e 	bl	8007188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8005d84 <prvAddNewTaskToReadyList+0xc4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <prvAddNewTaskToReadyList+0xc4>)
 8005cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d88 <prvAddNewTaskToReadyList+0xc8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cde:	4a2a      	ldr	r2, [pc, #168]	@ (8005d88 <prvAddNewTaskToReadyList+0xc8>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ce4:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <prvAddNewTaskToReadyList+0xc4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d110      	bne.n	8005d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cec:	f000 fc1e 	bl	800652c <prvInitialiseTaskLists>
 8005cf0:	e00d      	b.n	8005d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cf2:	4b26      	ldr	r3, [pc, #152]	@ (8005d8c <prvAddNewTaskToReadyList+0xcc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cfa:	4b23      	ldr	r3, [pc, #140]	@ (8005d88 <prvAddNewTaskToReadyList+0xc8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d802      	bhi.n	8005d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d08:	4a1f      	ldr	r2, [pc, #124]	@ (8005d88 <prvAddNewTaskToReadyList+0xc8>)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d0e:	4b20      	ldr	r3, [pc, #128]	@ (8005d90 <prvAddNewTaskToReadyList+0xd0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	4a1e      	ldr	r2, [pc, #120]	@ (8005d90 <prvAddNewTaskToReadyList+0xd0>)
 8005d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d18:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <prvAddNewTaskToReadyList+0xd0>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <prvAddNewTaskToReadyList+0xd4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d903      	bls.n	8005d34 <prvAddNewTaskToReadyList+0x74>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <prvAddNewTaskToReadyList+0xd4>)
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <prvAddNewTaskToReadyList+0xd8>)
 8005d42:	441a      	add	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f7ff f901 	bl	8004f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d50:	f001 fa4c 	bl	80071ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d54:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <prvAddNewTaskToReadyList+0xcc>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <prvAddNewTaskToReadyList+0xc8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d207      	bcs.n	8005d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <prvAddNewTaskToReadyList+0xdc>)
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000ebc 	.word	0x20000ebc
 8005d88:	200009e8 	.word	0x200009e8
 8005d8c:	20000ec8 	.word	0x20000ec8
 8005d90:	20000ed8 	.word	0x20000ed8
 8005d94:	20000ec4 	.word	0x20000ec4
 8005d98:	200009ec 	.word	0x200009ec
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d018      	beq.n	8005de4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005db2:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <vTaskDelay+0x64>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <vTaskDelay+0x32>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	60bb      	str	r3, [r7, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dd2:	f000 f883 	bl	8005edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fcf3 	bl	80067c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dde:	f000 f88b 	bl	8005ef8 <xTaskResumeAll>
 8005de2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d107      	bne.n	8005dfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005dea:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <vTaskDelay+0x68>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000ee4 	.word	0x20000ee4
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	@ 0x28
 8005e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	1d39      	adds	r1, r7, #4
 8005e1e:	f107 0308 	add.w	r3, r7, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f834 	bl	8004e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	9202      	str	r2, [sp, #8]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	460a      	mov	r2, r1
 8005e3a:	4922      	ldr	r1, [pc, #136]	@ (8005ec4 <vTaskStartScheduler+0xb8>)
 8005e3c:	4822      	ldr	r0, [pc, #136]	@ (8005ec8 <vTaskStartScheduler+0xbc>)
 8005e3e:	f7ff fe09 	bl	8005a54 <xTaskCreateStatic>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4a21      	ldr	r2, [pc, #132]	@ (8005ecc <vTaskStartScheduler+0xc0>)
 8005e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e48:	4b20      	ldr	r3, [pc, #128]	@ (8005ecc <vTaskStartScheduler+0xc0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e001      	b.n	8005e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e60:	f000 fd04 	bl	800686c <xTimerCreateTimerTask>
 8005e64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d116      	bne.n	8005e9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	613b      	str	r3, [r7, #16]
}
 8005e7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e80:	4b13      	ldr	r3, [pc, #76]	@ (8005ed0 <vTaskStartScheduler+0xc4>)
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295
 8005e86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e88:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <vTaskStartScheduler+0xc8>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e8e:	4b12      	ldr	r3, [pc, #72]	@ (8005ed8 <vTaskStartScheduler+0xcc>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e94:	f001 f8d4 	bl	8007040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e98:	e00f      	b.n	8005eba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d10b      	bne.n	8005eba <vTaskStartScheduler+0xae>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <vTaskStartScheduler+0xaa>
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08007840 	.word	0x08007840
 8005ec8:	080064fd 	.word	0x080064fd
 8005ecc:	20000ee0 	.word	0x20000ee0
 8005ed0:	20000edc 	.word	0x20000edc
 8005ed4:	20000ec8 	.word	0x20000ec8
 8005ed8:	20000ec0 	.word	0x20000ec0

08005edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <vTaskSuspendAll+0x18>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	4a03      	ldr	r2, [pc, #12]	@ (8005ef4 <vTaskSuspendAll+0x18>)
 8005ee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eea:	bf00      	nop
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20000ee4 	.word	0x20000ee4

08005ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f06:	4b42      	ldr	r3, [pc, #264]	@ (8006010 <xTaskResumeAll+0x118>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <xTaskResumeAll+0x2e>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	603b      	str	r3, [r7, #0]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f26:	f001 f92f 	bl	8007188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f2a:	4b39      	ldr	r3, [pc, #228]	@ (8006010 <xTaskResumeAll+0x118>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a37      	ldr	r2, [pc, #220]	@ (8006010 <xTaskResumeAll+0x118>)
 8005f32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f34:	4b36      	ldr	r3, [pc, #216]	@ (8006010 <xTaskResumeAll+0x118>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d162      	bne.n	8006002 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f3c:	4b35      	ldr	r3, [pc, #212]	@ (8006014 <xTaskResumeAll+0x11c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d05e      	beq.n	8006002 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f44:	e02f      	b.n	8005fa6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f46:	4b34      	ldr	r3, [pc, #208]	@ (8006018 <xTaskResumeAll+0x120>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3318      	adds	r3, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff f85a 	bl	800500c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff f855 	bl	800500c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f66:	4b2d      	ldr	r3, [pc, #180]	@ (800601c <xTaskResumeAll+0x124>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d903      	bls.n	8005f76 <xTaskResumeAll+0x7e>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	4a2a      	ldr	r2, [pc, #168]	@ (800601c <xTaskResumeAll+0x124>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a27      	ldr	r2, [pc, #156]	@ (8006020 <xTaskResumeAll+0x128>)
 8005f84:	441a      	add	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fe ffe0 	bl	8004f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f96:	4b23      	ldr	r3, [pc, #140]	@ (8006024 <xTaskResumeAll+0x12c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d302      	bcc.n	8005fa6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005fa0:	4b21      	ldr	r3, [pc, #132]	@ (8006028 <xTaskResumeAll+0x130>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006018 <xTaskResumeAll+0x120>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1cb      	bne.n	8005f46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fb4:	f000 fb58 	bl	8006668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800602c <xTaskResumeAll+0x134>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fc4:	f000 f846 	bl	8006054 <xTaskIncrementTick>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005fce:	4b16      	ldr	r3, [pc, #88]	@ (8006028 <xTaskResumeAll+0x130>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f1      	bne.n	8005fc4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005fe0:	4b12      	ldr	r3, [pc, #72]	@ (800602c <xTaskResumeAll+0x134>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fe6:	4b10      	ldr	r3, [pc, #64]	@ (8006028 <xTaskResumeAll+0x130>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8006030 <xTaskResumeAll+0x138>)
 8005ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006002:	f001 f8f3 	bl	80071ec <vPortExitCritical>

	return xAlreadyYielded;
 8006006:	68bb      	ldr	r3, [r7, #8]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000ee4 	.word	0x20000ee4
 8006014:	20000ebc 	.word	0x20000ebc
 8006018:	20000e7c 	.word	0x20000e7c
 800601c:	20000ec4 	.word	0x20000ec4
 8006020:	200009ec 	.word	0x200009ec
 8006024:	200009e8 	.word	0x200009e8
 8006028:	20000ed0 	.word	0x20000ed0
 800602c:	20000ecc 	.word	0x20000ecc
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800603a:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <xTaskGetTickCount+0x1c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006040:	687b      	ldr	r3, [r7, #4]
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20000ec0 	.word	0x20000ec0

08006054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800605e:	4b4f      	ldr	r3, [pc, #316]	@ (800619c <xTaskIncrementTick+0x148>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 8090 	bne.w	8006188 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006068:	4b4d      	ldr	r3, [pc, #308]	@ (80061a0 <xTaskIncrementTick+0x14c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3301      	adds	r3, #1
 800606e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006070:	4a4b      	ldr	r2, [pc, #300]	@ (80061a0 <xTaskIncrementTick+0x14c>)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d121      	bne.n	80060c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800607c:	4b49      	ldr	r3, [pc, #292]	@ (80061a4 <xTaskIncrementTick+0x150>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	603b      	str	r3, [r7, #0]
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	e7fd      	b.n	800609a <xTaskIncrementTick+0x46>
 800609e:	4b41      	ldr	r3, [pc, #260]	@ (80061a4 <xTaskIncrementTick+0x150>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	4b40      	ldr	r3, [pc, #256]	@ (80061a8 <xTaskIncrementTick+0x154>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a3e      	ldr	r2, [pc, #248]	@ (80061a4 <xTaskIncrementTick+0x150>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4a3e      	ldr	r2, [pc, #248]	@ (80061a8 <xTaskIncrementTick+0x154>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ac <xTaskIncrementTick+0x158>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	4a3c      	ldr	r2, [pc, #240]	@ (80061ac <xTaskIncrementTick+0x158>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	f000 fad4 	bl	8006668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060c0:	4b3b      	ldr	r3, [pc, #236]	@ (80061b0 <xTaskIncrementTick+0x15c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d349      	bcc.n	800615e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ca:	4b36      	ldr	r3, [pc, #216]	@ (80061a4 <xTaskIncrementTick+0x150>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	4b36      	ldr	r3, [pc, #216]	@ (80061b0 <xTaskIncrementTick+0x15c>)
 80060d6:	f04f 32ff 	mov.w	r2, #4294967295
 80060da:	601a      	str	r2, [r3, #0]
					break;
 80060dc:	e03f      	b.n	800615e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060de:	4b31      	ldr	r3, [pc, #196]	@ (80061a4 <xTaskIncrementTick+0x150>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d203      	bcs.n	80060fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060f6:	4a2e      	ldr	r2, [pc, #184]	@ (80061b0 <xTaskIncrementTick+0x15c>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060fc:	e02f      	b.n	800615e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe ff82 	bl	800500c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	3318      	adds	r3, #24
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe ff79 	bl	800500c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <xTaskIncrementTick+0x160>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d903      	bls.n	800612e <xTaskIncrementTick+0xda>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	4a22      	ldr	r2, [pc, #136]	@ (80061b4 <xTaskIncrementTick+0x160>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4a1f      	ldr	r2, [pc, #124]	@ (80061b8 <xTaskIncrementTick+0x164>)
 800613c:	441a      	add	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f7fe ff04 	bl	8004f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614e:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <xTaskIncrementTick+0x168>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d3b8      	bcc.n	80060ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800615c:	e7b5      	b.n	80060ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800615e:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <xTaskIncrementTick+0x168>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006164:	4914      	ldr	r1, [pc, #80]	@ (80061b8 <xTaskIncrementTick+0x164>)
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d901      	bls.n	800617a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800617a:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <xTaskIncrementTick+0x16c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e004      	b.n	8006192 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006188:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <xTaskIncrementTick+0x170>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	4a0d      	ldr	r2, [pc, #52]	@ (80061c4 <xTaskIncrementTick+0x170>)
 8006190:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006192:	697b      	ldr	r3, [r7, #20]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000ee4 	.word	0x20000ee4
 80061a0:	20000ec0 	.word	0x20000ec0
 80061a4:	20000e74 	.word	0x20000e74
 80061a8:	20000e78 	.word	0x20000e78
 80061ac:	20000ed4 	.word	0x20000ed4
 80061b0:	20000edc 	.word	0x20000edc
 80061b4:	20000ec4 	.word	0x20000ec4
 80061b8:	200009ec 	.word	0x200009ec
 80061bc:	200009e8 	.word	0x200009e8
 80061c0:	20000ed0 	.word	0x20000ed0
 80061c4:	20000ecc 	.word	0x20000ecc

080061c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ce:	4b28      	ldr	r3, [pc, #160]	@ (8006270 <vTaskSwitchContext+0xa8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061d6:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <vTaskSwitchContext+0xac>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061dc:	e042      	b.n	8006264 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80061de:	4b25      	ldr	r3, [pc, #148]	@ (8006274 <vTaskSwitchContext+0xac>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e4:	4b24      	ldr	r3, [pc, #144]	@ (8006278 <vTaskSwitchContext+0xb0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e011      	b.n	8006210 <vTaskSwitchContext+0x48>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <vTaskSwitchContext+0x42>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	607b      	str	r3, [r7, #4]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <vTaskSwitchContext+0x3e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b01      	subs	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	491a      	ldr	r1, [pc, #104]	@ (800627c <vTaskSwitchContext+0xb4>)
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0e3      	beq.n	80061ec <vTaskSwitchContext+0x24>
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4a13      	ldr	r2, [pc, #76]	@ (800627c <vTaskSwitchContext+0xb4>)
 8006230:	4413      	add	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	605a      	str	r2, [r3, #4]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	3308      	adds	r3, #8
 8006246:	429a      	cmp	r2, r3
 8006248:	d104      	bne.n	8006254 <vTaskSwitchContext+0x8c>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4a09      	ldr	r2, [pc, #36]	@ (8006280 <vTaskSwitchContext+0xb8>)
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4a06      	ldr	r2, [pc, #24]	@ (8006278 <vTaskSwitchContext+0xb0>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6013      	str	r3, [r2, #0]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000ee4 	.word	0x20000ee4
 8006274:	20000ed0 	.word	0x20000ed0
 8006278:	20000ec4 	.word	0x20000ec4
 800627c:	200009ec 	.word	0x200009ec
 8006280:	200009e8 	.word	0x200009e8

08006284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60fb      	str	r3, [r7, #12]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062ac:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <vTaskPlaceOnEventList+0x48>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3318      	adds	r3, #24
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fe fe70 	bl	8004f9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062ba:	2101      	movs	r1, #1
 80062bc:	6838      	ldr	r0, [r7, #0]
 80062be:	f000 fa81 	bl	80067c4 <prvAddCurrentTaskToDelayedList>
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200009e8 	.word	0x200009e8

080062d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	617b      	str	r3, [r7, #20]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <vTaskPlaceOnEventListRestricted+0x54>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3318      	adds	r3, #24
 8006300:	4619      	mov	r1, r3
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7fe fe25 	bl	8004f52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800630e:	f04f 33ff 	mov.w	r3, #4294967295
 8006312:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	68b8      	ldr	r0, [r7, #8]
 8006318:	f000 fa54 	bl	80067c4 <prvAddCurrentTaskToDelayedList>
	}
 800631c:	bf00      	nop
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	200009e8 	.word	0x200009e8

08006328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10b      	bne.n	8006356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60fb      	str	r3, [r7, #12]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3318      	adds	r3, #24
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fe56 	bl	800500c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006360:	4b1d      	ldr	r3, [pc, #116]	@ (80063d8 <xTaskRemoveFromEventList+0xb0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11d      	bne.n	80063a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	3304      	adds	r3, #4
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fe4d 	bl	800500c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	4b19      	ldr	r3, [pc, #100]	@ (80063dc <xTaskRemoveFromEventList+0xb4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d903      	bls.n	8006386 <xTaskRemoveFromEventList+0x5e>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a16      	ldr	r2, [pc, #88]	@ (80063dc <xTaskRemoveFromEventList+0xb4>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4a13      	ldr	r2, [pc, #76]	@ (80063e0 <xTaskRemoveFromEventList+0xb8>)
 8006394:	441a      	add	r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7fe fdd8 	bl	8004f52 <vListInsertEnd>
 80063a2:	e005      	b.n	80063b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3318      	adds	r3, #24
 80063a8:	4619      	mov	r1, r3
 80063aa:	480e      	ldr	r0, [pc, #56]	@ (80063e4 <xTaskRemoveFromEventList+0xbc>)
 80063ac:	f7fe fdd1 	bl	8004f52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b4:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <xTaskRemoveFromEventList+0xc0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d905      	bls.n	80063ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063be:	2301      	movs	r3, #1
 80063c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <xTaskRemoveFromEventList+0xc4>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e001      	b.n	80063ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063ce:	697b      	ldr	r3, [r7, #20]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000ee4 	.word	0x20000ee4
 80063dc:	20000ec4 	.word	0x20000ec4
 80063e0:	200009ec 	.word	0x200009ec
 80063e4:	20000e7c 	.word	0x20000e7c
 80063e8:	200009e8 	.word	0x200009e8
 80063ec:	20000ed0 	.word	0x20000ed0

080063f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <vTaskInternalSetTimeOutState+0x24>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006400:	4b05      	ldr	r3, [pc, #20]	@ (8006418 <vTaskInternalSetTimeOutState+0x28>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	605a      	str	r2, [r3, #4]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000ed4 	.word	0x20000ed4
 8006418:	20000ec0 	.word	0x20000ec0

0800641c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	613b      	str	r3, [r7, #16]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006462:	f000 fe91 	bl	8007188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006466:	4b1d      	ldr	r3, [pc, #116]	@ (80064dc <xTaskCheckForTimeOut+0xc0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d102      	bne.n	8006486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e023      	b.n	80064ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <xTaskCheckForTimeOut+0xc4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d007      	beq.n	80064a2 <xTaskCheckForTimeOut+0x86>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	429a      	cmp	r2, r3
 800649a:	d302      	bcc.n	80064a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e015      	b.n	80064ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d20b      	bcs.n	80064c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff99 	bl	80063f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e004      	b.n	80064ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ce:	f000 fe8d 	bl	80071ec <vPortExitCritical>

	return xReturn;
 80064d2:	69fb      	ldr	r3, [r7, #28]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000ec0 	.word	0x20000ec0
 80064e0:	20000ed4 	.word	0x20000ed4

080064e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <vTaskMissedYield+0x14>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	20000ed0 	.word	0x20000ed0

080064fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006504:	f000 f852 	bl	80065ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006508:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <prvIdleTask+0x28>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d9f9      	bls.n	8006504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <prvIdleTask+0x2c>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006520:	e7f0      	b.n	8006504 <prvIdleTask+0x8>
 8006522:	bf00      	nop
 8006524:	200009ec 	.word	0x200009ec
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	e00c      	b.n	8006552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4a12      	ldr	r2, [pc, #72]	@ (800658c <prvInitialiseTaskLists+0x60>)
 8006544:	4413      	add	r3, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fcd6 	bl	8004ef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3301      	adds	r3, #1
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b37      	cmp	r3, #55	@ 0x37
 8006556:	d9ef      	bls.n	8006538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006558:	480d      	ldr	r0, [pc, #52]	@ (8006590 <prvInitialiseTaskLists+0x64>)
 800655a:	f7fe fccd 	bl	8004ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800655e:	480d      	ldr	r0, [pc, #52]	@ (8006594 <prvInitialiseTaskLists+0x68>)
 8006560:	f7fe fcca 	bl	8004ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006564:	480c      	ldr	r0, [pc, #48]	@ (8006598 <prvInitialiseTaskLists+0x6c>)
 8006566:	f7fe fcc7 	bl	8004ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800656a:	480c      	ldr	r0, [pc, #48]	@ (800659c <prvInitialiseTaskLists+0x70>)
 800656c:	f7fe fcc4 	bl	8004ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006570:	480b      	ldr	r0, [pc, #44]	@ (80065a0 <prvInitialiseTaskLists+0x74>)
 8006572:	f7fe fcc1 	bl	8004ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <prvInitialiseTaskLists+0x78>)
 8006578:	4a05      	ldr	r2, [pc, #20]	@ (8006590 <prvInitialiseTaskLists+0x64>)
 800657a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <prvInitialiseTaskLists+0x7c>)
 800657e:	4a05      	ldr	r2, [pc, #20]	@ (8006594 <prvInitialiseTaskLists+0x68>)
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200009ec 	.word	0x200009ec
 8006590:	20000e4c 	.word	0x20000e4c
 8006594:	20000e60 	.word	0x20000e60
 8006598:	20000e7c 	.word	0x20000e7c
 800659c:	20000e90 	.word	0x20000e90
 80065a0:	20000ea8 	.word	0x20000ea8
 80065a4:	20000e74 	.word	0x20000e74
 80065a8:	20000e78 	.word	0x20000e78

080065ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065b2:	e019      	b.n	80065e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065b4:	f000 fde8 	bl	8007188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b8:	4b10      	ldr	r3, [pc, #64]	@ (80065fc <prvCheckTasksWaitingTermination+0x50>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe fd21 	bl	800500c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <prvCheckTasksWaitingTermination+0x54>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006600 <prvCheckTasksWaitingTermination+0x54>)
 80065d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <prvCheckTasksWaitingTermination+0x58>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <prvCheckTasksWaitingTermination+0x58>)
 80065dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065de:	f000 fe05 	bl	80071ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f810 	bl	8006608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e8:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <prvCheckTasksWaitingTermination+0x58>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e1      	bne.n	80065b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000e90 	.word	0x20000e90
 8006600:	20000ebc 	.word	0x20000ebc
 8006604:	20000ea4 	.word	0x20000ea4

08006608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	4618      	mov	r0, r3
 8006620:	f000 ffa2 	bl	8007568 <vPortFree>
				vPortFree( pxTCB );
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ff9f 	bl	8007568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800662a:	e019      	b.n	8006660 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006632:	2b01      	cmp	r3, #1
 8006634:	d103      	bne.n	800663e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 ff96 	bl	8007568 <vPortFree>
	}
 800663c:	e010      	b.n	8006660 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006644:	2b02      	cmp	r3, #2
 8006646:	d00b      	beq.n	8006660 <prvDeleteTCB+0x58>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60fb      	str	r3, [r7, #12]
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <prvDeleteTCB+0x54>
	}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800666e:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <prvResetNextTaskUnblockTime+0x38>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006678:	4b0a      	ldr	r3, [pc, #40]	@ (80066a4 <prvResetNextTaskUnblockTime+0x3c>)
 800667a:	f04f 32ff 	mov.w	r2, #4294967295
 800667e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006680:	e008      	b.n	8006694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006682:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <prvResetNextTaskUnblockTime+0x38>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a04      	ldr	r2, [pc, #16]	@ (80066a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006692:	6013      	str	r3, [r2, #0]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20000e74 	.word	0x20000e74
 80066a4:	20000edc 	.word	0x20000edc

080066a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ae:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <xTaskGetSchedulerState+0x34>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066b6:	2301      	movs	r3, #1
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	e008      	b.n	80066ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066bc:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <xTaskGetSchedulerState+0x38>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066c4:	2302      	movs	r3, #2
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e001      	b.n	80066ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ce:	687b      	ldr	r3, [r7, #4]
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	20000ec8 	.word	0x20000ec8
 80066e0:	20000ee4 	.word	0x20000ee4

080066e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d058      	beq.n	80067ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066fa:	4b2f      	ldr	r3, [pc, #188]	@ (80067b8 <xTaskPriorityDisinherit+0xd4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	429a      	cmp	r2, r3
 8006702:	d00b      	beq.n	800671c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60bb      	str	r3, [r7, #8]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006740:	1e5a      	subs	r2, r3, #1
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800674e:	429a      	cmp	r2, r3
 8006750:	d02c      	beq.n	80067ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006756:	2b00      	cmp	r3, #0
 8006758:	d128      	bne.n	80067ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fc54 	bl	800500c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677c:	4b0f      	ldr	r3, [pc, #60]	@ (80067bc <xTaskPriorityDisinherit+0xd8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d903      	bls.n	800678c <xTaskPriorityDisinherit+0xa8>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4a0c      	ldr	r2, [pc, #48]	@ (80067bc <xTaskPriorityDisinherit+0xd8>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a09      	ldr	r2, [pc, #36]	@ (80067c0 <xTaskPriorityDisinherit+0xdc>)
 800679a:	441a      	add	r2, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe fbd5 	bl	8004f52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067ac:	697b      	ldr	r3, [r7, #20]
	}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200009e8 	.word	0x200009e8
 80067bc:	20000ec4 	.word	0x20000ec4
 80067c0:	200009ec 	.word	0x200009ec

080067c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067ce:	4b21      	ldr	r3, [pc, #132]	@ (8006854 <prvAddCurrentTaskToDelayedList+0x90>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d4:	4b20      	ldr	r3, [pc, #128]	@ (8006858 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fc16 	bl	800500c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d10a      	bne.n	80067fe <prvAddCurrentTaskToDelayedList+0x3a>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006858 <prvAddCurrentTaskToDelayedList+0x94>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4819      	ldr	r0, [pc, #100]	@ (800685c <prvAddCurrentTaskToDelayedList+0x98>)
 80067f8:	f7fe fbab 	bl	8004f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067fc:	e026      	b.n	800684c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006806:	4b14      	ldr	r3, [pc, #80]	@ (8006858 <prvAddCurrentTaskToDelayedList+0x94>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	429a      	cmp	r2, r3
 8006814:	d209      	bcs.n	800682a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006816:	4b12      	ldr	r3, [pc, #72]	@ (8006860 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4b0f      	ldr	r3, [pc, #60]	@ (8006858 <prvAddCurrentTaskToDelayedList+0x94>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f7fe fbb9 	bl	8004f9a <vListInsert>
}
 8006828:	e010      	b.n	800684c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800682a:	4b0e      	ldr	r3, [pc, #56]	@ (8006864 <prvAddCurrentTaskToDelayedList+0xa0>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <prvAddCurrentTaskToDelayedList+0x94>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f7fe fbaf 	bl	8004f9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d202      	bcs.n	800684c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006846:	4a08      	ldr	r2, [pc, #32]	@ (8006868 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6013      	str	r3, [r2, #0]
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20000ec0 	.word	0x20000ec0
 8006858:	200009e8 	.word	0x200009e8
 800685c:	20000ea8 	.word	0x20000ea8
 8006860:	20000e78 	.word	0x20000e78
 8006864:	20000e74 	.word	0x20000e74
 8006868:	20000edc 	.word	0x20000edc

0800686c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	@ 0x28
 8006870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006876:	f000 fb13 	bl	8006ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800687a:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <xTimerCreateTimerTask+0x84>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d021      	beq.n	80068c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800688a:	1d3a      	adds	r2, r7, #4
 800688c:	f107 0108 	add.w	r1, r7, #8
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fb15 	bl	8004ec4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	9202      	str	r2, [sp, #8]
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	2302      	movs	r3, #2
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	2300      	movs	r3, #0
 80068aa:	460a      	mov	r2, r1
 80068ac:	4911      	ldr	r1, [pc, #68]	@ (80068f4 <xTimerCreateTimerTask+0x88>)
 80068ae:	4812      	ldr	r0, [pc, #72]	@ (80068f8 <xTimerCreateTimerTask+0x8c>)
 80068b0:	f7ff f8d0 	bl	8005a54 <xTaskCreateStatic>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4a11      	ldr	r2, [pc, #68]	@ (80068fc <xTimerCreateTimerTask+0x90>)
 80068b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068ba:	4b10      	ldr	r3, [pc, #64]	@ (80068fc <xTimerCreateTimerTask+0x90>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068c2:	2301      	movs	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	613b      	str	r3, [r7, #16]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068e4:	697b      	ldr	r3, [r7, #20]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000f18 	.word	0x20000f18
 80068f4:	08007848 	.word	0x08007848
 80068f8:	08006a39 	.word	0x08006a39
 80068fc:	20000f1c 	.word	0x20000f1c

08006900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	@ 0x28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <xTimerGenericCommand+0x30>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006930:	4b19      	ldr	r3, [pc, #100]	@ (8006998 <xTimerGenericCommand+0x98>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d02a      	beq.n	800698e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b05      	cmp	r3, #5
 8006948:	dc18      	bgt.n	800697c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800694a:	f7ff fead 	bl	80066a8 <xTaskGetSchedulerState>
 800694e:	4603      	mov	r3, r0
 8006950:	2b02      	cmp	r3, #2
 8006952:	d109      	bne.n	8006968 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006954:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <xTimerGenericCommand+0x98>)
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	f107 0110 	add.w	r1, r7, #16
 800695c:	2300      	movs	r3, #0
 800695e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006960:	f7fe fc88 	bl	8005274 <xQueueGenericSend>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24
 8006966:	e012      	b.n	800698e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006968:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <xTimerGenericCommand+0x98>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	f107 0110 	add.w	r1, r7, #16
 8006970:	2300      	movs	r3, #0
 8006972:	2200      	movs	r2, #0
 8006974:	f7fe fc7e 	bl	8005274 <xQueueGenericSend>
 8006978:	6278      	str	r0, [r7, #36]	@ 0x24
 800697a:	e008      	b.n	800698e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800697c:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <xTimerGenericCommand+0x98>)
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	f107 0110 	add.w	r1, r7, #16
 8006984:	2300      	movs	r3, #0
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	f7fe fd76 	bl	8005478 <xQueueGenericSendFromISR>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006990:	4618      	mov	r0, r3
 8006992:	3728      	adds	r7, #40	@ 0x28
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000f18 	.word	0x20000f18

0800699c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a6:	4b23      	ldr	r3, [pc, #140]	@ (8006a34 <prvProcessExpiredTimer+0x98>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fb29 	bl	800500c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d023      	beq.n	8006a10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	18d1      	adds	r1, r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	6978      	ldr	r0, [r7, #20]
 80069d6:	f000 f8d5 	bl	8006b84 <prvInsertTimerInActiveList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d020      	beq.n	8006a22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069e0:	2300      	movs	r3, #0
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	2100      	movs	r1, #0
 80069ea:	6978      	ldr	r0, [r7, #20]
 80069ec:	f7ff ff88 	bl	8006900 <xTimerGenericCommand>
 80069f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d114      	bne.n	8006a22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	6978      	ldr	r0, [r7, #20]
 8006a28:	4798      	blx	r3
}
 8006a2a:	bf00      	nop
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000f10 	.word	0x20000f10

08006a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a40:	f107 0308 	add.w	r3, r7, #8
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f859 	bl	8006afc <prvGetNextExpireTime>
 8006a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f805 	bl	8006a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a56:	f000 f8d7 	bl	8006c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5a:	bf00      	nop
 8006a5c:	e7f0      	b.n	8006a40 <prvTimerTask+0x8>
	...

08006a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a6a:	f7ff fa37 	bl	8005edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f866 	bl	8006b44 <prvSampleTimeNow>
 8006a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d130      	bne.n	8006ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <prvProcessTimerOrBlockTask+0x3c>
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d806      	bhi.n	8006a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a8e:	f7ff fa33 	bl	8005ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff81 	bl	800699c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a9a:	e024      	b.n	8006ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aa2:	4b13      	ldr	r3, [pc, #76]	@ (8006af0 <prvProcessTimerOrBlockTask+0x90>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <prvProcessTimerOrBlockTask+0x50>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <prvProcessTimerOrBlockTask+0x52>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8006af4 <prvProcessTimerOrBlockTask+0x94>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f7fe ff93 	bl	80059ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ac6:	f7ff fa17 	bl	8005ef8 <xTaskResumeAll>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ad0:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <prvProcessTimerOrBlockTask+0x98>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
}
 8006ae0:	e001      	b.n	8006ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ae2:	f7ff fa09 	bl	8005ef8 <xTaskResumeAll>
}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000f14 	.word	0x20000f14
 8006af4:	20000f18 	.word	0x20000f18
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	@ (8006b40 <prvGetNextExpireTime+0x44>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <prvGetNextExpireTime+0x16>
 8006b0e:	2201      	movs	r2, #1
 8006b10:	e000      	b.n	8006b14 <prvGetNextExpireTime+0x18>
 8006b12:	2200      	movs	r2, #0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b20:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <prvGetNextExpireTime+0x44>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e001      	b.n	8006b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000f10 	.word	0x20000f10

08006b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b4c:	f7ff fa72 	bl	8006034 <xTaskGetTickCount>
 8006b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b52:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <prvSampleTimeNow+0x3c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d205      	bcs.n	8006b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b5c:	f000 f93a 	bl	8006dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e002      	b.n	8006b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b6e:	4a04      	ldr	r2, [pc, #16]	@ (8006b80 <prvSampleTimeNow+0x3c>)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b74:	68fb      	ldr	r3, [r7, #12]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000f20 	.word	0x20000f20

08006b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d812      	bhi.n	8006bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e01b      	b.n	8006bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <prvInsertTimerInActiveList+0x7c>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe f9e6 	bl	8004f9a <vListInsert>
 8006bce:	e012      	b.n	8006bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d206      	bcs.n	8006be6 <prvInsertTimerInActiveList+0x62>
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d302      	bcc.n	8006be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e007      	b.n	8006bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006be6:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <prvInsertTimerInActiveList+0x80>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7fe f9d2 	bl	8004f9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bf6:	697b      	ldr	r3, [r7, #20]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000f14 	.word	0x20000f14
 8006c04:	20000f10 	.word	0x20000f10

08006c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	@ 0x38
 8006c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0e:	e0ce      	b.n	8006dae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da19      	bge.n	8006c4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c16:	1d3b      	adds	r3, r7, #4
 8006c18:	3304      	adds	r3, #4
 8006c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	61fb      	str	r3, [r7, #28]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c40:	6850      	ldr	r0, [r2, #4]
 8006c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	4611      	mov	r1, r2
 8006c48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f2c0 80ae 	blt.w	8006dae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c60:	3304      	adds	r3, #4
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe f9d2 	bl	800500c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff ff6a 	bl	8006b44 <prvSampleTimeNow>
 8006c70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b09      	cmp	r3, #9
 8006c76:	f200 8097 	bhi.w	8006da8 <prvProcessReceivedCommands+0x1a0>
 8006c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <prvProcessReceivedCommands+0x78>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006ca9 	.word	0x08006ca9
 8006c8c:	08006d1f 	.word	0x08006d1f
 8006c90:	08006d33 	.word	0x08006d33
 8006c94:	08006d7f 	.word	0x08006d7f
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006ca9 	.word	0x08006ca9
 8006ca0:	08006d1f 	.word	0x08006d1f
 8006ca4:	08006d33 	.word	0x08006d33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc8:	f7ff ff5c 	bl	8006b84 <prvInsertTimerInActiveList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d06c      	beq.n	8006dac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d061      	beq.n	8006dac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	441a      	add	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cfa:	f7ff fe01 	bl	8006900 <xTimerGenericCommand>
 8006cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d152      	bne.n	8006dac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	61bb      	str	r3, [r7, #24]
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d30:	e03d      	b.n	8006dae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	617b      	str	r3, [r7, #20]
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	18d1      	adds	r1, r2, r3
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d78:	f7ff ff04 	bl	8006b84 <prvInsertTimerInActiveList>
					break;
 8006d7c:	e017      	b.n	8006dae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8e:	f000 fbeb 	bl	8007568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d92:	e00c      	b.n	8006dae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006da6:	e002      	b.n	8006dae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <prvProcessReceivedCommands+0x1a6>
					break;
 8006dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dae:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <prvProcessReceivedCommands+0x1c8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	1d39      	adds	r1, r7, #4
 8006db4:	2200      	movs	r2, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fbfc 	bl	80055b4 <xQueueReceive>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f47f af26 	bne.w	8006c10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	3730      	adds	r7, #48	@ 0x30
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000f18 	.word	0x20000f18

08006dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dda:	e049      	b.n	8006e70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8006e98 <prvSwitchTimerLists+0xc4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e98 <prvSwitchTimerLists+0xc4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe f909 	bl	800500c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02f      	beq.n	8006e70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d90e      	bls.n	8006e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f7fe f8ae 	bl	8004f9a <vListInsert>
 8006e3e:	e017      	b.n	8006e70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff fd58 	bl	8006900 <xTimerGenericCommand>
 8006e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	603b      	str	r3, [r7, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e70:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1b0      	bne.n	8006ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e7a:	4b07      	ldr	r3, [pc, #28]	@ (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <prvSwitchTimerLists+0xc8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a04      	ldr	r2, [pc, #16]	@ (8006e98 <prvSwitchTimerLists+0xc4>)
 8006e86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e88:	4a04      	ldr	r2, [pc, #16]	@ (8006e9c <prvSwitchTimerLists+0xc8>)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6013      	str	r3, [r2, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000f10 	.word	0x20000f10
 8006e9c:	20000f14 	.word	0x20000f14

08006ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ea6:	f000 f96f 	bl	8007188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eaa:	4b15      	ldr	r3, [pc, #84]	@ (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d120      	bne.n	8006ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006eb2:	4814      	ldr	r0, [pc, #80]	@ (8006f04 <prvCheckForValidListAndQueue+0x64>)
 8006eb4:	f7fe f820 	bl	8004ef8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006eb8:	4813      	ldr	r0, [pc, #76]	@ (8006f08 <prvCheckForValidListAndQueue+0x68>)
 8006eba:	f7fe f81d 	bl	8004ef8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ebe:	4b13      	ldr	r3, [pc, #76]	@ (8006f0c <prvCheckForValidListAndQueue+0x6c>)
 8006ec0:	4a10      	ldr	r2, [pc, #64]	@ (8006f04 <prvCheckForValidListAndQueue+0x64>)
 8006ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ec4:	4b12      	ldr	r3, [pc, #72]	@ (8006f10 <prvCheckForValidListAndQueue+0x70>)
 8006ec6:	4a10      	ldr	r2, [pc, #64]	@ (8006f08 <prvCheckForValidListAndQueue+0x68>)
 8006ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	4b11      	ldr	r3, [pc, #68]	@ (8006f14 <prvCheckForValidListAndQueue+0x74>)
 8006ed0:	4a11      	ldr	r2, [pc, #68]	@ (8006f18 <prvCheckForValidListAndQueue+0x78>)
 8006ed2:	2110      	movs	r1, #16
 8006ed4:	200a      	movs	r0, #10
 8006ed6:	f7fe f92d 	bl	8005134 <xQueueGenericCreateStatic>
 8006eda:	4603      	mov	r3, r0
 8006edc:	4a08      	ldr	r2, [pc, #32]	@ (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ee0:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <prvCheckForValidListAndQueue+0x60>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	490b      	ldr	r1, [pc, #44]	@ (8006f1c <prvCheckForValidListAndQueue+0x7c>)
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fd52 	bl	8005998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ef4:	f000 f97a 	bl	80071ec <vPortExitCritical>
}
 8006ef8:	bf00      	nop
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000f18 	.word	0x20000f18
 8006f04:	20000ee8 	.word	0x20000ee8
 8006f08:	20000efc 	.word	0x20000efc
 8006f0c:	20000f10 	.word	0x20000f10
 8006f10:	20000f14 	.word	0x20000f14
 8006f14:	20000fc4 	.word	0x20000fc4
 8006f18:	20000f24 	.word	0x20000f24
 8006f1c:	08007850 	.word	0x08007850

08006f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3b04      	subs	r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3b04      	subs	r3, #4
 8006f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f023 0201 	bic.w	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f50:	4a0c      	ldr	r2, [pc, #48]	@ (8006f84 <pxPortInitialiseStack+0x64>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b14      	subs	r3, #20
 8006f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3b04      	subs	r3, #4
 8006f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f06f 0202 	mvn.w	r2, #2
 8006f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3b20      	subs	r3, #32
 8006f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	08006f89 	.word	0x08006f89

08006f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <prvTaskExitError+0x58>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d00b      	beq.n	8006fb4 <prvTaskExitError+0x2c>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60fb      	str	r3, [r7, #12]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <prvTaskExitError+0x28>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	60bb      	str	r3, [r7, #8]
}
 8006fc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fc8:	bf00      	nop
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0fc      	beq.n	8006fca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c
	...

08006ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ff0:	4b07      	ldr	r3, [pc, #28]	@ (8007010 <pxCurrentTCBConst2>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f380 8809 	msr	PSP, r0
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8811 	msr	BASEPRI, r0
 800700a:	4770      	bx	lr
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst2>:
 8007010:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007018:	4808      	ldr	r0, [pc, #32]	@ (800703c <prvPortStartFirstTask+0x24>)
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f380 8808 	msr	MSP, r0
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8814 	msr	CONTROL, r0
 800702a:	b662      	cpsie	i
 800702c:	b661      	cpsie	f
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	df00      	svc	0
 8007038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800703a:	bf00      	nop
 800703c:	e000ed08 	.word	0xe000ed08

08007040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007046:	4b47      	ldr	r3, [pc, #284]	@ (8007164 <xPortStartScheduler+0x124>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a47      	ldr	r2, [pc, #284]	@ (8007168 <xPortStartScheduler+0x128>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10b      	bne.n	8007068 <xPortStartScheduler+0x28>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007068:	4b3e      	ldr	r3, [pc, #248]	@ (8007164 <xPortStartScheduler+0x124>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a3f      	ldr	r2, [pc, #252]	@ (800716c <xPortStartScheduler+0x12c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d10b      	bne.n	800708a <xPortStartScheduler+0x4a>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	613b      	str	r3, [r7, #16]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800708a:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <xPortStartScheduler+0x130>)
 800708c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	22ff      	movs	r2, #255	@ 0xff
 800709a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	4b31      	ldr	r3, [pc, #196]	@ (8007174 <xPortStartScheduler+0x134>)
 80070b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070b2:	4b31      	ldr	r3, [pc, #196]	@ (8007178 <xPortStartScheduler+0x138>)
 80070b4:	2207      	movs	r2, #7
 80070b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070b8:	e009      	b.n	80070ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80070ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007178 <xPortStartScheduler+0x138>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007178 <xPortStartScheduler+0x138>)
 80070c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d6:	2b80      	cmp	r3, #128	@ 0x80
 80070d8:	d0ef      	beq.n	80070ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070da:	4b27      	ldr	r3, [pc, #156]	@ (8007178 <xPortStartScheduler+0x138>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f1c3 0307 	rsb	r3, r3, #7
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d00b      	beq.n	80070fe <xPortStartScheduler+0xbe>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60bb      	str	r3, [r7, #8]
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	e7fd      	b.n	80070fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <xPortStartScheduler+0x138>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	021b      	lsls	r3, r3, #8
 8007104:	4a1c      	ldr	r2, [pc, #112]	@ (8007178 <xPortStartScheduler+0x138>)
 8007106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007108:	4b1b      	ldr	r3, [pc, #108]	@ (8007178 <xPortStartScheduler+0x138>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007110:	4a19      	ldr	r2, [pc, #100]	@ (8007178 <xPortStartScheduler+0x138>)
 8007112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	b2da      	uxtb	r2, r3
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <xPortStartScheduler+0x13c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a16      	ldr	r2, [pc, #88]	@ (800717c <xPortStartScheduler+0x13c>)
 8007122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007128:	4b14      	ldr	r3, [pc, #80]	@ (800717c <xPortStartScheduler+0x13c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a13      	ldr	r2, [pc, #76]	@ (800717c <xPortStartScheduler+0x13c>)
 800712e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007134:	f000 f8da 	bl	80072ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007138:	4b11      	ldr	r3, [pc, #68]	@ (8007180 <xPortStartScheduler+0x140>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800713e:	f000 f8f9 	bl	8007334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007142:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <xPortStartScheduler+0x144>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a0f      	ldr	r2, [pc, #60]	@ (8007184 <xPortStartScheduler+0x144>)
 8007148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800714c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800714e:	f7ff ff63 	bl	8007018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007152:	f7ff f839 	bl	80061c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007156:	f7ff ff17 	bl	8006f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	e000ed00 	.word	0xe000ed00
 8007168:	410fc271 	.word	0x410fc271
 800716c:	410fc270 	.word	0x410fc270
 8007170:	e000e400 	.word	0xe000e400
 8007174:	20001014 	.word	0x20001014
 8007178:	20001018 	.word	0x20001018
 800717c:	e000ed20 	.word	0xe000ed20
 8007180:	2000000c 	.word	0x2000000c
 8007184:	e000ef34 	.word	0xe000ef34

08007188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	607b      	str	r3, [r7, #4]
}
 80071a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071a2:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <vPortEnterCritical+0x5c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3301      	adds	r3, #1
 80071a8:	4a0e      	ldr	r2, [pc, #56]	@ (80071e4 <vPortEnterCritical+0x5c>)
 80071aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071ac:	4b0d      	ldr	r3, [pc, #52]	@ (80071e4 <vPortEnterCritical+0x5c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d110      	bne.n	80071d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071b4:	4b0c      	ldr	r3, [pc, #48]	@ (80071e8 <vPortEnterCritical+0x60>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	603b      	str	r3, [r7, #0]
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	e7fd      	b.n	80071d2 <vPortEnterCritical+0x4a>
	}
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	2000000c 	.word	0x2000000c
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071f2:	4b12      	ldr	r3, [pc, #72]	@ (800723c <vPortExitCritical+0x50>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <vPortExitCritical+0x26>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007212:	4b0a      	ldr	r3, [pc, #40]	@ (800723c <vPortExitCritical+0x50>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3b01      	subs	r3, #1
 8007218:	4a08      	ldr	r2, [pc, #32]	@ (800723c <vPortExitCritical+0x50>)
 800721a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800721c:	4b07      	ldr	r3, [pc, #28]	@ (800723c <vPortExitCritical+0x50>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <vPortExitCritical+0x44>
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f383 8811 	msr	BASEPRI, r3
}
 800722e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	2000000c 	.word	0x2000000c

08007240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007240:	f3ef 8009 	mrs	r0, PSP
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <pxCurrentTCBConst>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	f01e 0f10 	tst.w	lr, #16
 8007250:	bf08      	it	eq
 8007252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007264:	f380 8811 	msr	BASEPRI, r0
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f7fe ffaa 	bl	80061c8 <vTaskSwitchContext>
 8007274:	f04f 0000 	mov.w	r0, #0
 8007278:	f380 8811 	msr	BASEPRI, r0
 800727c:	bc09      	pop	{r0, r3}
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	6808      	ldr	r0, [r1, #0]
 8007282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007286:	f01e 0f10 	tst.w	lr, #16
 800728a:	bf08      	it	eq
 800728c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007290:	f380 8809 	msr	PSP, r0
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst>:
 80072a0:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	607b      	str	r3, [r7, #4]
}
 80072c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072c2:	f7fe fec7 	bl	8006054 <xTaskIncrementTick>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072cc:	4b06      	ldr	r3, [pc, #24]	@ (80072e8 <xPortSysTickHandler+0x40>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <vPortSetupTimerInterrupt+0x34>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <vPortSetupTimerInterrupt+0x38>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007328 <vPortSetupTimerInterrupt+0x3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0a      	ldr	r2, [pc, #40]	@ (800732c <vPortSetupTimerInterrupt+0x40>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	099b      	lsrs	r3, r3, #6
 8007308:	4a09      	ldr	r2, [pc, #36]	@ (8007330 <vPortSetupTimerInterrupt+0x44>)
 800730a:	3b01      	subs	r3, #1
 800730c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800730e:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <vPortSetupTimerInterrupt+0x34>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	e000e010 	.word	0xe000e010
 8007324:	e000e018 	.word	0xe000e018
 8007328:	20000000 	.word	0x20000000
 800732c:	10624dd3 	.word	0x10624dd3
 8007330:	e000e014 	.word	0xe000e014

08007334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007344 <vPortEnableVFP+0x10>
 8007338:	6801      	ldr	r1, [r0, #0]
 800733a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800733e:	6001      	str	r1, [r0, #0]
 8007340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007342:	bf00      	nop
 8007344:	e000ed88 	.word	0xe000ed88

08007348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800734e:	f3ef 8305 	mrs	r3, IPSR
 8007352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d915      	bls.n	8007386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800735a:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <vPortValidateInterruptPriority+0x74>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007364:	4b16      	ldr	r3, [pc, #88]	@ (80073c0 <vPortValidateInterruptPriority+0x78>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	7afa      	ldrb	r2, [r7, #11]
 800736a:	429a      	cmp	r2, r3
 800736c:	d20b      	bcs.n	8007386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	e7fd      	b.n	8007382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007386:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <vPortValidateInterruptPriority+0x7c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800738e:	4b0e      	ldr	r3, [pc, #56]	@ (80073c8 <vPortValidateInterruptPriority+0x80>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d90b      	bls.n	80073ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	603b      	str	r3, [r7, #0]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <vPortValidateInterruptPriority+0x62>
	}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	e000e3f0 	.word	0xe000e3f0
 80073c0:	20001014 	.word	0x20001014
 80073c4:	e000ed0c 	.word	0xe000ed0c
 80073c8:	20001018 	.word	0x20001018

080073cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	@ 0x28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073d8:	f7fe fd80 	bl	8005edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007550 <pvPortMalloc+0x184>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073e4:	f000 f924 	bl	8007630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007554 <pvPortMalloc+0x188>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4013      	ands	r3, r2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 8095 	bne.w	8007520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01e      	beq.n	800743a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80073fc:	2208      	movs	r2, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4413      	add	r3, r2
 8007402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d015      	beq.n	800743a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f023 0307 	bic.w	r3, r3, #7
 8007414:	3308      	adds	r3, #8
 8007416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <pvPortMalloc+0x6e>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	617b      	str	r3, [r7, #20]
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	e7fd      	b.n	8007436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d06f      	beq.n	8007520 <pvPortMalloc+0x154>
 8007440:	4b45      	ldr	r3, [pc, #276]	@ (8007558 <pvPortMalloc+0x18c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d86a      	bhi.n	8007520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800744a:	4b44      	ldr	r3, [pc, #272]	@ (800755c <pvPortMalloc+0x190>)
 800744c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800744e:	4b43      	ldr	r3, [pc, #268]	@ (800755c <pvPortMalloc+0x190>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007454:	e004      	b.n	8007460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d903      	bls.n	8007472 <pvPortMalloc+0xa6>
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f1      	bne.n	8007456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007472:	4b37      	ldr	r3, [pc, #220]	@ (8007550 <pvPortMalloc+0x184>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007478:	429a      	cmp	r2, r3
 800747a:	d051      	beq.n	8007520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2208      	movs	r2, #8
 8007482:	4413      	add	r3, r2
 8007484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	2308      	movs	r3, #8
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	429a      	cmp	r2, r3
 800749c:	d920      	bls.n	80074e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800749e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <pvPortMalloc+0xfc>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	613b      	str	r3, [r7, #16]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074da:	69b8      	ldr	r0, [r7, #24]
 80074dc:	f000 f90a 	bl	80076f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007558 <pvPortMalloc+0x18c>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007558 <pvPortMalloc+0x18c>)
 80074ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007558 <pvPortMalloc+0x18c>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007560 <pvPortMalloc+0x194>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d203      	bcs.n	8007502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074fa:	4b17      	ldr	r3, [pc, #92]	@ (8007558 <pvPortMalloc+0x18c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a18      	ldr	r2, [pc, #96]	@ (8007560 <pvPortMalloc+0x194>)
 8007500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	4b13      	ldr	r3, [pc, #76]	@ (8007554 <pvPortMalloc+0x188>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	431a      	orrs	r2, r3
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007516:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <pvPortMalloc+0x198>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	4a11      	ldr	r2, [pc, #68]	@ (8007564 <pvPortMalloc+0x198>)
 800751e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007520:	f7fe fcea 	bl	8005ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <pvPortMalloc+0x17a>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	60fb      	str	r3, [r7, #12]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <pvPortMalloc+0x176>
	return pvReturn;
 8007546:	69fb      	ldr	r3, [r7, #28]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3728      	adds	r7, #40	@ 0x28
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20004c24 	.word	0x20004c24
 8007554:	20004c38 	.word	0x20004c38
 8007558:	20004c28 	.word	0x20004c28
 800755c:	20004c1c 	.word	0x20004c1c
 8007560:	20004c2c 	.word	0x20004c2c
 8007564:	20004c30 	.word	0x20004c30

08007568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04f      	beq.n	800761a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800757a:	2308      	movs	r3, #8
 800757c:	425b      	negs	r3, r3
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b25      	ldr	r3, [pc, #148]	@ (8007624 <vPortFree+0xbc>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4013      	ands	r3, r2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <vPortFree+0x46>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	60fb      	str	r3, [r7, #12]
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	e7fd      	b.n	80075aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <vPortFree+0x66>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60bb      	str	r3, [r7, #8]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	4b14      	ldr	r3, [pc, #80]	@ (8007624 <vPortFree+0xbc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01e      	beq.n	800761a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d11a      	bne.n	800761a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007624 <vPortFree+0xbc>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075f4:	f7fe fc72 	bl	8005edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <vPortFree+0xc0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4413      	add	r3, r2
 8007602:	4a09      	ldr	r2, [pc, #36]	@ (8007628 <vPortFree+0xc0>)
 8007604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007606:	6938      	ldr	r0, [r7, #16]
 8007608:	f000 f874 	bl	80076f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800760c:	4b07      	ldr	r3, [pc, #28]	@ (800762c <vPortFree+0xc4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a06      	ldr	r2, [pc, #24]	@ (800762c <vPortFree+0xc4>)
 8007614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007616:	f7fe fc6f 	bl	8005ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20004c38 	.word	0x20004c38
 8007628:	20004c28 	.word	0x20004c28
 800762c:	20004c34 	.word	0x20004c34

08007630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800763a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800763c:	4b27      	ldr	r3, [pc, #156]	@ (80076dc <prvHeapInit+0xac>)
 800763e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00c      	beq.n	8007664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3307      	adds	r3, #7
 800764e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	4a1f      	ldr	r2, [pc, #124]	@ (80076dc <prvHeapInit+0xac>)
 8007660:	4413      	add	r3, r2
 8007662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007668:	4a1d      	ldr	r2, [pc, #116]	@ (80076e0 <prvHeapInit+0xb0>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800766e:	4b1c      	ldr	r3, [pc, #112]	@ (80076e0 <prvHeapInit+0xb0>)
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800767c:	2208      	movs	r2, #8
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a15      	ldr	r2, [pc, #84]	@ (80076e4 <prvHeapInit+0xb4>)
 8007690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <prvHeapInit+0xb4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2200      	movs	r2, #0
 8007698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800769a:	4b12      	ldr	r3, [pc, #72]	@ (80076e4 <prvHeapInit+0xb4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	1ad2      	subs	r2, r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076b0:	4b0c      	ldr	r3, [pc, #48]	@ (80076e4 <prvHeapInit+0xb4>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4a0a      	ldr	r2, [pc, #40]	@ (80076e8 <prvHeapInit+0xb8>)
 80076be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a09      	ldr	r2, [pc, #36]	@ (80076ec <prvHeapInit+0xbc>)
 80076c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <prvHeapInit+0xc0>)
 80076ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076ce:	601a      	str	r2, [r3, #0]
}
 80076d0:	bf00      	nop
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	2000101c 	.word	0x2000101c
 80076e0:	20004c1c 	.word	0x20004c1c
 80076e4:	20004c24 	.word	0x20004c24
 80076e8:	20004c2c 	.word	0x20004c2c
 80076ec:	20004c28 	.word	0x20004c28
 80076f0:	20004c38 	.word	0x20004c38

080076f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076fc:	4b28      	ldr	r3, [pc, #160]	@ (80077a0 <prvInsertBlockIntoFreeList+0xac>)
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	e002      	b.n	8007708 <prvInsertBlockIntoFreeList+0x14>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	d8f7      	bhi.n	8007702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d108      	bne.n	8007736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	441a      	add	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d118      	bne.n	800777c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d00d      	beq.n	8007772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	441a      	add	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	e008      	b.n	8007784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007772:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e003      	b.n	8007784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d002      	beq.n	8007792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20004c1c 	.word	0x20004c1c
 80077a4:	20004c24 	.word	0x20004c24

080077a8 <memset>:
 80077a8:	4402      	add	r2, r0
 80077aa:	4603      	mov	r3, r0
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d100      	bne.n	80077b2 <memset+0xa>
 80077b0:	4770      	bx	lr
 80077b2:	f803 1b01 	strb.w	r1, [r3], #1
 80077b6:	e7f9      	b.n	80077ac <memset+0x4>

080077b8 <__libc_init_array>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4d0d      	ldr	r5, [pc, #52]	@ (80077f0 <__libc_init_array+0x38>)
 80077bc:	4c0d      	ldr	r4, [pc, #52]	@ (80077f4 <__libc_init_array+0x3c>)
 80077be:	1b64      	subs	r4, r4, r5
 80077c0:	10a4      	asrs	r4, r4, #2
 80077c2:	2600      	movs	r6, #0
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	d109      	bne.n	80077dc <__libc_init_array+0x24>
 80077c8:	4d0b      	ldr	r5, [pc, #44]	@ (80077f8 <__libc_init_array+0x40>)
 80077ca:	4c0c      	ldr	r4, [pc, #48]	@ (80077fc <__libc_init_array+0x44>)
 80077cc:	f000 f826 	bl	800781c <_init>
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	2600      	movs	r6, #0
 80077d6:	42a6      	cmp	r6, r4
 80077d8:	d105      	bne.n	80077e6 <__libc_init_array+0x2e>
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e0:	4798      	blx	r3
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7ee      	b.n	80077c4 <__libc_init_array+0xc>
 80077e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ea:	4798      	blx	r3
 80077ec:	3601      	adds	r6, #1
 80077ee:	e7f2      	b.n	80077d6 <__libc_init_array+0x1e>
 80077f0:	080078a4 	.word	0x080078a4
 80077f4:	080078a4 	.word	0x080078a4
 80077f8:	080078a4 	.word	0x080078a4
 80077fc:	080078a8 	.word	0x080078a8

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <_init>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr

08007828 <_fini>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr
